var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// node_modules/agora-rtc-sdk-ng/AgoraRTC_N-production.js
var require_AgoraRTC_N_production = __commonJS({
  "node_modules/agora-rtc-sdk-ng/AgoraRTC_N-production.js"(exports, module) {
    !function(e, t) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : (e = "undefined" != typeof globalThis ? globalThis : e || self).AgoraRTC = t();
    }(exports, function() {
      "use strict";
      function e(e2, t2) {
        return t2.forEach(function(t3) {
          t3 && "string" != typeof t3 && !Array.isArray(t3) && Object.keys(t3).forEach(function(i2) {
            if ("default" !== i2 && !(i2 in e2)) {
              var n2 = Object.getOwnPropertyDescriptor(t3, i2);
              Object.defineProperty(e2, i2, n2.get ? n2 : { enumerable: true, get: function() {
                return t3[i2];
              } });
            }
          });
        }), Object.freeze(e2);
      }
      var t = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {};
      function i(e2) {
        return e2 && e2.__esModule && Object.prototype.hasOwnProperty.call(e2, "default") ? e2.default : e2;
      }
      var n = function(e2) {
        try {
          return !!e2();
        } catch (e3) {
          return true;
        }
      }, s = !n(function() {
        var e2 = (function() {
        }).bind();
        return "function" != typeof e2 || e2.hasOwnProperty("prototype");
      }), r = s, o = Function.prototype, a = o.call, c = r && o.bind.bind(a, a), d = r ? c : function(e2) {
        return function() {
          return a.apply(e2, arguments);
        };
      }, l = d({}.isPrototypeOf), u = function(e2) {
        return e2 && e2.Math == Math && e2;
      }, h = u("object" == typeof globalThis && globalThis) || u("object" == typeof window && window) || u("object" == typeof self && self) || u("object" == typeof t && t) || /* @__PURE__ */ function() {
        return this;
      }() || t || Function("return this")(), p = s, _ = Function.prototype, E = _.apply, m = _.call, f = "object" == typeof Reflect && Reflect.apply || (p ? m.bind(E) : function() {
        return m.apply(E, arguments);
      }), T = d, g = T({}.toString), S = T("".slice), R = function(e2) {
        return S(g(e2), 8, -1);
      }, C = R, I = d, v = function(e2) {
        if ("Function" === C(e2))
          return I(e2);
      }, y = "object" == typeof document && document.all, A = { all: y, IS_HTMLDDA: void 0 === y && void 0 !== y }, b = A.all, w = A.IS_HTMLDDA ? function(e2) {
        return "function" == typeof e2 || e2 === b;
      } : function(e2) {
        return "function" == typeof e2;
      }, O = {}, N = !n(function() {
        return 7 != Object.defineProperty({}, 1, { get: function() {
          return 7;
        } })[1];
      }), D = s, P = Function.prototype.call, L = D ? P.bind(P) : function() {
        return P.apply(P, arguments);
      }, k = {}, M = {}.propertyIsEnumerable, U = Object.getOwnPropertyDescriptor, x = U && !M.call({ 1: 2 }, 1);
      k.f = x ? function(e2) {
        var t2 = U(this, e2);
        return !!t2 && t2.enumerable;
      } : M;
      var V, F, B = function(e2, t2) {
        return { enumerable: !(1 & e2), configurable: !(2 & e2), writable: !(4 & e2), value: t2 };
      }, j = n, G = R, W = Object, H = d("".split), K = j(function() {
        return !W("z").propertyIsEnumerable(0);
      }) ? function(e2) {
        return "String" == G(e2) ? H(e2, "") : W(e2);
      } : W, Y = function(e2) {
        return null == e2;
      }, q = Y, J = TypeError, z = function(e2) {
        if (q(e2))
          throw J("Can't call method on " + e2);
        return e2;
      }, X = K, Q = z, Z = function(e2) {
        return X(Q(e2));
      }, $ = w, ee = A.all, te = A.IS_HTMLDDA ? function(e2) {
        return "object" == typeof e2 ? null !== e2 : $(e2) || e2 === ee;
      } : function(e2) {
        return "object" == typeof e2 ? null !== e2 : $(e2);
      }, ie = {}, ne = ie, se = h, re = w, oe = function(e2) {
        return re(e2) ? e2 : void 0;
      }, ae = function(e2, t2) {
        return arguments.length < 2 ? oe(ne[e2]) || oe(se[e2]) : ne[e2] && ne[e2][t2] || se[e2] && se[e2][t2];
      }, ce = "undefined" != typeof navigator && String(navigator.userAgent) || "", de = h, le = ce, ue = de.process, he = de.Deno, pe = ue && ue.versions || he && he.version, _e = pe && pe.v8;
      _e && (F = (V = _e.split("."))[0] > 0 && V[0] < 4 ? 1 : +(V[0] + V[1])), !F && le && (!(V = le.match(/Edge\/(\d+)/)) || V[1] >= 74) && (V = le.match(/Chrome\/(\d+)/)) && (F = +V[1]);
      var Ee = F, me = Ee, fe = n, Te = h.String, ge = !!Object.getOwnPropertySymbols && !fe(function() {
        var e2 = Symbol();
        return !Te(e2) || !(Object(e2) instanceof Symbol) || !Symbol.sham && me && me < 41;
      }), Se = ge && !Symbol.sham && "symbol" == typeof Symbol.iterator, Re = ae, Ce = w, Ie = l, ve = Object, ye = Se ? function(e2) {
        return "symbol" == typeof e2;
      } : function(e2) {
        var t2 = Re("Symbol");
        return Ce(t2) && Ie(t2.prototype, ve(e2));
      }, Ae = String, be = function(e2) {
        try {
          return Ae(e2);
        } catch (e3) {
          return "Object";
        }
      }, we = w, Oe = be, Ne = TypeError, De = function(e2) {
        if (we(e2))
          return e2;
        throw Ne(Oe(e2) + " is not a function");
      }, Pe = De, Le = Y, ke = function(e2, t2) {
        var i2 = e2[t2];
        return Le(i2) ? void 0 : Pe(i2);
      }, Me = L, Ue = w, xe = te, Ve = TypeError, Fe = { exports: {} }, Be = h, je = Object.defineProperty, Ge = function(e2, t2) {
        try {
          je(Be, e2, { value: t2, configurable: true, writable: true });
        } catch (i2) {
          Be[e2] = t2;
        }
        return t2;
      }, We = "__core-js_shared__", He = h[We] || Ge(We, {}), Ke = He;
      (Fe.exports = function(e2, t2) {
        return Ke[e2] || (Ke[e2] = void 0 !== t2 ? t2 : {});
      })("versions", []).push({ version: "3.31.1", mode: "pure", copyright: "Â© 2014-2023 Denis Pushkarev (zloirock.ru)", license: "https://github.com/zloirock/core-js/blob/v3.31.1/LICENSE", source: "https://github.com/zloirock/core-js" });
      var Ye = Fe.exports, qe = z, Je = Object, ze = function(e2) {
        return Je(qe(e2));
      }, Xe = ze, Qe = d({}.hasOwnProperty), Ze = Object.hasOwn || function(e2, t2) {
        return Qe(Xe(e2), t2);
      }, $e = d, et = 0, tt = Math.random(), it = $e(1 .toString), nt = function(e2) {
        return "Symbol(" + (void 0 === e2 ? "" : e2) + ")_" + it(++et + tt, 36);
      }, st = Ye, rt = Ze, ot = nt, at = ge, ct = Se, dt = h.Symbol, lt = st("wks"), ut = ct ? dt.for || dt : dt && dt.withoutSetter || ot, ht = function(e2) {
        return rt(lt, e2) || (lt[e2] = at && rt(dt, e2) ? dt[e2] : ut("Symbol." + e2)), lt[e2];
      }, pt = L, _t = te, Et = ye, mt = ke, ft = function(e2, t2) {
        var i2, n2;
        if ("string" === t2 && Ue(i2 = e2.toString) && !xe(n2 = Me(i2, e2)))
          return n2;
        if (Ue(i2 = e2.valueOf) && !xe(n2 = Me(i2, e2)))
          return n2;
        if ("string" !== t2 && Ue(i2 = e2.toString) && !xe(n2 = Me(i2, e2)))
          return n2;
        throw Ve("Can't convert object to primitive value");
      }, Tt = TypeError, gt = ht("toPrimitive"), St = function(e2, t2) {
        if (!_t(e2) || Et(e2))
          return e2;
        var i2, n2 = mt(e2, gt);
        if (n2) {
          if (void 0 === t2 && (t2 = "default"), i2 = pt(n2, e2, t2), !_t(i2) || Et(i2))
            return i2;
          throw Tt("Can't convert object to primitive value");
        }
        return void 0 === t2 && (t2 = "number"), ft(e2, t2);
      }, Rt = ye, Ct = function(e2) {
        var t2 = St(e2, "string");
        return Rt(t2) ? t2 : t2 + "";
      }, It = te, vt = h.document, yt = It(vt) && It(vt.createElement), At = function(e2) {
        return yt ? vt.createElement(e2) : {};
      }, bt = At, wt = !N && !n(function() {
        return 7 != Object.defineProperty(bt("div"), "a", { get: function() {
          return 7;
        } }).a;
      }), Ot = N, Nt = L, Dt = k, Pt = B, Lt = Z, kt = Ct, Mt = Ze, Ut = wt, xt = Object.getOwnPropertyDescriptor;
      O.f = Ot ? xt : function(e2, t2) {
        if (e2 = Lt(e2), t2 = kt(t2), Ut)
          try {
            return xt(e2, t2);
          } catch (e3) {
          }
        if (Mt(e2, t2))
          return Pt(!Nt(Dt.f, e2, t2), e2[t2]);
      };
      var Vt = n, Ft = w, Bt = /#|\.prototype\./, jt = function(e2, t2) {
        var i2 = Wt[Gt(e2)];
        return i2 == Kt || i2 != Ht && (Ft(t2) ? Vt(t2) : !!t2);
      }, Gt = jt.normalize = function(e2) {
        return String(e2).replace(Bt, ".").toLowerCase();
      }, Wt = jt.data = {}, Ht = jt.NATIVE = "N", Kt = jt.POLYFILL = "P", Yt = jt, qt = De, Jt = s, zt = v(v.bind), Xt = function(e2, t2) {
        return qt(e2), void 0 === t2 ? e2 : Jt ? zt(e2, t2) : function() {
          return e2.apply(t2, arguments);
        };
      }, Qt = {}, Zt = N && n(function() {
        return 42 != Object.defineProperty(function() {
        }, "prototype", { value: 42, writable: false }).prototype;
      }), $t = te, ei = String, ti = TypeError, ii = function(e2) {
        if ($t(e2))
          return e2;
        throw ti(ei(e2) + " is not an object");
      }, ni = N, si = wt, ri = Zt, oi = ii, ai = Ct, ci = TypeError, di = Object.defineProperty, li = Object.getOwnPropertyDescriptor, ui = "enumerable", hi = "configurable", pi = "writable";
      Qt.f = ni ? ri ? function(e2, t2, i2) {
        if (oi(e2), t2 = ai(t2), oi(i2), "function" == typeof e2 && "prototype" === t2 && "value" in i2 && pi in i2 && !i2[pi]) {
          var n2 = li(e2, t2);
          n2 && n2[pi] && (e2[t2] = i2.value, i2 = { configurable: hi in i2 ? i2[hi] : n2[hi], enumerable: ui in i2 ? i2[ui] : n2[ui], writable: false });
        }
        return di(e2, t2, i2);
      } : di : function(e2, t2, i2) {
        if (oi(e2), t2 = ai(t2), oi(i2), si)
          try {
            return di(e2, t2, i2);
          } catch (e3) {
          }
        if ("get" in i2 || "set" in i2)
          throw ci("Accessors not supported");
        return "value" in i2 && (e2[t2] = i2.value), e2;
      };
      var _i = Qt, Ei = B, mi = N ? function(e2, t2, i2) {
        return _i.f(e2, t2, Ei(1, i2));
      } : function(e2, t2, i2) {
        return e2[t2] = i2, e2;
      }, fi = h, Ti = f, gi = v, Si = w, Ri = O.f, Ci = Yt, Ii = ie, vi = Xt, yi = mi, Ai = Ze, bi = function(e2) {
        var t2 = function(i2, n2, s2) {
          if (this instanceof t2) {
            switch (arguments.length) {
              case 0:
                return new e2();
              case 1:
                return new e2(i2);
              case 2:
                return new e2(i2, n2);
            }
            return new e2(i2, n2, s2);
          }
          return Ti(e2, this, arguments);
        };
        return t2.prototype = e2.prototype, t2;
      }, wi = function(e2, t2) {
        var i2, n2, s2, r2, o2, a2, c2, d2, l2, u2 = e2.target, h2 = e2.global, p2 = e2.stat, _2 = e2.proto, E2 = h2 ? fi : p2 ? fi[u2] : (fi[u2] || {}).prototype, m2 = h2 ? Ii : Ii[u2] || yi(Ii, u2, {})[u2], f2 = m2.prototype;
        for (r2 in t2)
          n2 = !(i2 = Ci(h2 ? r2 : u2 + (p2 ? "." : "#") + r2, e2.forced)) && E2 && Ai(E2, r2), a2 = m2[r2], n2 && (c2 = e2.dontCallGetSet ? (l2 = Ri(E2, r2)) && l2.value : E2[r2]), o2 = n2 && c2 ? c2 : t2[r2], n2 && typeof a2 == typeof o2 || (d2 = e2.bind && n2 ? vi(o2, fi) : e2.wrap && n2 ? bi(o2) : _2 && Si(o2) ? gi(o2) : o2, (e2.sham || o2 && o2.sham || a2 && a2.sham) && yi(d2, "sham", true), yi(m2, r2, d2), _2 && (Ai(Ii, s2 = u2 + "Prototype") || yi(Ii, s2, {}), yi(Ii[s2], r2, o2), e2.real && f2 && (i2 || !f2[r2]) && yi(f2, r2, o2)));
      }, Oi = Math.ceil, Ni = Math.floor, Di = Math.trunc || function(e2) {
        var t2 = +e2;
        return (t2 > 0 ? Ni : Oi)(t2);
      }, Pi = function(e2) {
        var t2 = +e2;
        return t2 != t2 || 0 === t2 ? 0 : Di(t2);
      }, Li = Pi, ki = Math.max, Mi = Math.min, Ui = function(e2, t2) {
        var i2 = Li(e2);
        return i2 < 0 ? ki(i2 + t2, 0) : Mi(i2, t2);
      }, xi = Pi, Vi = Math.min, Fi = function(e2) {
        return e2 > 0 ? Vi(xi(e2), 9007199254740991) : 0;
      }, Bi = function(e2) {
        return Fi(e2.length);
      }, ji = Z, Gi = Ui, Wi = Bi, Hi = function(e2) {
        return function(t2, i2, n2) {
          var s2, r2 = ji(t2), o2 = Wi(r2), a2 = Gi(n2, o2);
          if (e2 && i2 != i2) {
            for (; o2 > a2; )
              if ((s2 = r2[a2++]) != s2)
                return true;
          } else
            for (; o2 > a2; a2++)
              if ((e2 || a2 in r2) && r2[a2] === i2)
                return e2 || a2 || 0;
          return !e2 && -1;
        };
      }, Ki = { includes: Hi(true), indexOf: Hi(false) }, Yi = Ki.includes;
      wi({ target: "Array", proto: true, forced: n(function() {
        return !Array(1).includes();
      }) }, { includes: function(e2) {
        return Yi(this, e2, arguments.length > 1 ? arguments[1] : void 0);
      } });
      var qi = ie, Ji = function(e2) {
        return qi[e2 + "Prototype"];
      }, zi = Ji("Array").includes, Xi = te, Qi = R, Zi = ht("match"), $i = function(e2) {
        var t2;
        return Xi(e2) && (void 0 !== (t2 = e2[Zi]) ? !!t2 : "RegExp" == Qi(e2));
      }, en = TypeError, tn = {};
      tn[ht("toStringTag")] = "z";
      var nn = "[object z]" === String(tn), sn = nn, rn = w, on = R, an = ht("toStringTag"), cn = Object, dn = "Arguments" == on(/* @__PURE__ */ function() {
        return arguments;
      }()), ln = sn ? on : function(e2) {
        var t2, i2, n2;
        return void 0 === e2 ? "Undefined" : null === e2 ? "Null" : "string" == typeof (i2 = function(e3, t3) {
          try {
            return e3[t3];
          } catch (e4) {
          }
        }(t2 = cn(e2), an)) ? i2 : dn ? on(t2) : "Object" == (n2 = on(t2)) && rn(t2.callee) ? "Arguments" : n2;
      }, un = ln, hn = String, pn = function(e2) {
        if ("Symbol" === un(e2))
          throw TypeError("Cannot convert a Symbol value to a string");
        return hn(e2);
      }, _n = ht("match"), En = wi, mn = function(e2) {
        if ($i(e2))
          throw en("The method doesn't accept regular expressions");
        return e2;
      }, fn = z, Tn = pn, gn = function(e2) {
        var t2 = /./;
        try {
          "/./"[e2](t2);
        } catch (i2) {
          try {
            return t2[_n] = false, "/./"[e2](t2);
          } catch (e3) {
          }
        }
        return false;
      }, Sn = d("".indexOf);
      En({ target: "String", proto: true, forced: !gn("includes") }, { includes: function(e2) {
        return !!~Sn(Tn(fn(this)), Tn(mn(e2)), arguments.length > 1 ? arguments[1] : void 0);
      } });
      var Rn = Ji("String").includes, Cn = l, In = zi, vn = Rn, yn = Array.prototype, An = String.prototype, bn = i(function(e2) {
        var t2 = e2.includes;
        return e2 === yn || Cn(yn, e2) && t2 === yn.includes ? In : "string" == typeof e2 || e2 === An || Cn(An, e2) && t2 === An.includes ? vn : t2;
      });
      let wn = true, On = true;
      function Nn(e2, t2, i2) {
        const n2 = e2.match(t2);
        return n2 && n2.length >= i2 && parseInt(n2[i2], 10);
      }
      function Dn(e2, t2, i2) {
        if (!e2.RTCPeerConnection)
          return;
        const n2 = e2.RTCPeerConnection.prototype, s2 = n2.addEventListener;
        n2.addEventListener = function(e3, n3) {
          if (e3 !== t2)
            return s2.apply(this, arguments);
          const r3 = (e4) => {
            const t3 = i2(e4);
            t3 && (n3.handleEvent ? n3.handleEvent(t3) : n3(t3));
          };
          return this._eventMap = this._eventMap || {}, this._eventMap[t2] || (this._eventMap[t2] = /* @__PURE__ */ new Map()), this._eventMap[t2].set(n3, r3), s2.apply(this, [e3, r3]);
        };
        const r2 = n2.removeEventListener;
        n2.removeEventListener = function(e3, i3) {
          if (e3 !== t2 || !this._eventMap || !this._eventMap[t2])
            return r2.apply(this, arguments);
          if (!this._eventMap[t2].has(i3))
            return r2.apply(this, arguments);
          const n3 = this._eventMap[t2].get(i3);
          return this._eventMap[t2].delete(i3), 0 === this._eventMap[t2].size && delete this._eventMap[t2], 0 === Object.keys(this._eventMap).length && delete this._eventMap, r2.apply(this, [e3, n3]);
        }, Object.defineProperty(n2, "on" + t2, { get() {
          return this["_on" + t2];
        }, set(e3) {
          this["_on" + t2] && (this.removeEventListener(t2, this["_on" + t2]), delete this["_on" + t2]), e3 && this.addEventListener(t2, this["_on" + t2] = e3);
        }, enumerable: true, configurable: true });
      }
      function Pn(e2) {
        return "boolean" != typeof e2 ? new Error("Argument type: " + typeof e2 + ". Please use a boolean.") : (wn = e2, e2 ? "adapter.js logging disabled" : "adapter.js logging enabled");
      }
      function Ln(e2) {
        return "boolean" != typeof e2 ? new Error("Argument type: " + typeof e2 + ". Please use a boolean.") : (On = !e2, "adapter.js deprecation warnings " + (e2 ? "disabled" : "enabled"));
      }
      function kn() {
        if ("object" == typeof window) {
          if (wn)
            return;
          "undefined" != typeof console && "function" == typeof console.log && console.log.apply(console, arguments);
        }
      }
      function Mn(e2, t2) {
        On && console.warn(e2 + " is deprecated, please use " + t2 + " instead.");
      }
      function Un(e2) {
        return "[object Object]" === Object.prototype.toString.call(e2);
      }
      function xn(e2) {
        return Un(e2) ? Object.keys(e2).reduce(function(t2, i2) {
          const n2 = Un(e2[i2]), s2 = n2 ? xn(e2[i2]) : e2[i2], r2 = n2 && !Object.keys(s2).length;
          return void 0 === s2 || r2 ? t2 : Object.assign(t2, { [i2]: s2 });
        }, {}) : e2;
      }
      function Vn(e2, t2, i2) {
        t2 && !i2.has(t2.id) && (i2.set(t2.id, t2), Object.keys(t2).forEach((n2) => {
          n2.endsWith("Id") ? Vn(e2, e2.get(t2[n2]), i2) : n2.endsWith("Ids") && t2[n2].forEach((t3) => {
            Vn(e2, e2.get(t3), i2);
          });
        }));
      }
      function Fn(e2, t2, i2) {
        const n2 = i2 ? "outbound-rtp" : "inbound-rtp", s2 = /* @__PURE__ */ new Map();
        if (null === t2)
          return s2;
        const r2 = [];
        return e2.forEach((e3) => {
          "track" === e3.type && e3.trackIdentifier === t2.id && r2.push(e3);
        }), r2.forEach((t3) => {
          e2.forEach((i3) => {
            i3.type === n2 && i3.trackId === t3.id && Vn(e2, i3, s2);
          });
        }), s2;
      }
      const Bn = kn;
      function jn(e2, t2) {
        const i2 = e2 && e2.navigator;
        if (!i2.mediaDevices)
          return;
        const n2 = function(e3) {
          if ("object" != typeof e3 || e3.mandatory || e3.optional)
            return e3;
          const t3 = {};
          return Object.keys(e3).forEach((i3) => {
            if ("require" === i3 || "advanced" === i3 || "mediaSource" === i3)
              return;
            const n3 = "object" == typeof e3[i3] ? e3[i3] : { ideal: e3[i3] };
            void 0 !== n3.exact && "number" == typeof n3.exact && (n3.min = n3.max = n3.exact);
            const s3 = function(e4, t4) {
              return e4 ? e4 + t4.charAt(0).toUpperCase() + t4.slice(1) : "deviceId" === t4 ? "sourceId" : t4;
            };
            if (void 0 !== n3.ideal) {
              t3.optional = t3.optional || [];
              let e4 = {};
              "number" == typeof n3.ideal ? (e4[s3("min", i3)] = n3.ideal, t3.optional.push(e4), e4 = {}, e4[s3("max", i3)] = n3.ideal, t3.optional.push(e4)) : (e4[s3("", i3)] = n3.ideal, t3.optional.push(e4));
            }
            void 0 !== n3.exact && "number" != typeof n3.exact ? (t3.mandatory = t3.mandatory || {}, t3.mandatory[s3("", i3)] = n3.exact) : ["min", "max"].forEach((e4) => {
              void 0 !== n3[e4] && (t3.mandatory = t3.mandatory || {}, t3.mandatory[s3(e4, i3)] = n3[e4]);
            });
          }), e3.advanced && (t3.optional = (t3.optional || []).concat(e3.advanced)), t3;
        }, s2 = function(e3, s3) {
          if (t2.version >= 61)
            return s3(e3);
          if ((e3 = JSON.parse(JSON.stringify(e3))) && "object" == typeof e3.audio) {
            const t3 = function(e4, t4, i3) {
              t4 in e4 && !(i3 in e4) && (e4[i3] = e4[t4], delete e4[t4]);
            };
            t3((e3 = JSON.parse(JSON.stringify(e3))).audio, "autoGainControl", "googAutoGainControl"), t3(e3.audio, "noiseSuppression", "googNoiseSuppression"), e3.audio = n2(e3.audio);
          }
          if (e3 && "object" == typeof e3.video) {
            let r3 = e3.video.facingMode;
            r3 = r3 && ("object" == typeof r3 ? r3 : { ideal: r3 });
            const o2 = t2.version < 66;
            if (r3 && ("user" === r3.exact || "environment" === r3.exact || "user" === r3.ideal || "environment" === r3.ideal) && (!i2.mediaDevices.getSupportedConstraints || !i2.mediaDevices.getSupportedConstraints().facingMode || o2)) {
              let t3;
              if (delete e3.video.facingMode, "environment" === r3.exact || "environment" === r3.ideal ? t3 = ["back", "rear"] : "user" !== r3.exact && "user" !== r3.ideal || (t3 = ["front"]), t3)
                return i2.mediaDevices.enumerateDevices().then((i3) => {
                  let o3 = (i3 = i3.filter((e4) => "videoinput" === e4.kind)).find((e4) => t3.some((t4) => e4.label.toLowerCase().includes(t4)));
                  return !o3 && i3.length && t3.includes("back") && (o3 = i3[i3.length - 1]), o3 && (e3.video.deviceId = r3.exact ? { exact: o3.deviceId } : { ideal: o3.deviceId }), e3.video = n2(e3.video), Bn("chrome: " + JSON.stringify(e3)), s3(e3);
                });
            }
            e3.video = n2(e3.video);
          }
          return Bn("chrome: " + JSON.stringify(e3)), s3(e3);
        }, r2 = function(e3) {
          return t2.version >= 64 ? e3 : { name: { PermissionDeniedError: "NotAllowedError", PermissionDismissedError: "NotAllowedError", InvalidStateError: "NotAllowedError", DevicesNotFoundError: "NotFoundError", ConstraintNotSatisfiedError: "OverconstrainedError", TrackStartError: "NotReadableError", MediaDeviceFailedDueToShutdown: "NotAllowedError", MediaDeviceKillSwitchOn: "NotAllowedError", TabCaptureError: "AbortError", ScreenCaptureError: "AbortError", DeviceCaptureError: "AbortError" }[e3.name] || e3.name, message: e3.message, constraint: e3.constraint || e3.constraintName, toString() {
            return this.name + (this.message && ": ") + this.message;
          } };
        };
        if (i2.getUserMedia = (function(e3, t3, n3) {
          s2(e3, (e4) => {
            i2.webkitGetUserMedia(e4, t3, (e5) => {
              n3 && n3(r2(e5));
            });
          });
        }).bind(i2), i2.mediaDevices.getUserMedia) {
          const e3 = i2.mediaDevices.getUserMedia.bind(i2.mediaDevices);
          i2.mediaDevices.getUserMedia = function(t3) {
            return s2(t3, (t4) => e3(t4).then((e4) => {
              if (t4.audio && !e4.getAudioTracks().length || t4.video && !e4.getVideoTracks().length)
                throw e4.getTracks().forEach((e5) => {
                  e5.stop();
                }), new DOMException("", "NotFoundError");
              return e4;
            }, (e4) => Promise.reject(r2(e4))));
          };
        }
      }
      function Gn(e2) {
        e2.MediaStream = e2.MediaStream || e2.webkitMediaStream;
      }
      function Wn(e2) {
        if ("object" == typeof e2 && e2.RTCPeerConnection && !("ontrack" in e2.RTCPeerConnection.prototype)) {
          Object.defineProperty(e2.RTCPeerConnection.prototype, "ontrack", { get() {
            return this._ontrack;
          }, set(e3) {
            this._ontrack && this.removeEventListener("track", this._ontrack), this.addEventListener("track", this._ontrack = e3);
          }, enumerable: true, configurable: true });
          const t2 = e2.RTCPeerConnection.prototype.setRemoteDescription;
          e2.RTCPeerConnection.prototype.setRemoteDescription = function() {
            return this._ontrackpoly || (this._ontrackpoly = (t3) => {
              t3.stream.addEventListener("addtrack", (i2) => {
                let n2;
                n2 = e2.RTCPeerConnection.prototype.getReceivers ? this.getReceivers().find((e3) => e3.track && e3.track.id === i2.track.id) : { track: i2.track };
                const s2 = new Event("track");
                s2.track = i2.track, s2.receiver = n2, s2.transceiver = { receiver: n2 }, s2.streams = [t3.stream], this.dispatchEvent(s2);
              }), t3.stream.getTracks().forEach((i2) => {
                let n2;
                n2 = e2.RTCPeerConnection.prototype.getReceivers ? this.getReceivers().find((e3) => e3.track && e3.track.id === i2.id) : { track: i2 };
                const s2 = new Event("track");
                s2.track = i2, s2.receiver = n2, s2.transceiver = { receiver: n2 }, s2.streams = [t3.stream], this.dispatchEvent(s2);
              });
            }, this.addEventListener("addstream", this._ontrackpoly)), t2.apply(this, arguments);
          };
        } else
          Dn(e2, "track", (e3) => (e3.transceiver || Object.defineProperty(e3, "transceiver", { value: { receiver: e3.receiver } }), e3));
      }
      function Hn(e2) {
        if ("object" == typeof e2 && e2.RTCPeerConnection && !("getSenders" in e2.RTCPeerConnection.prototype) && "createDTMFSender" in e2.RTCPeerConnection.prototype) {
          const t2 = function(e3, t3) {
            return { track: t3, get dtmf() {
              return void 0 === this._dtmf && ("audio" === t3.kind ? this._dtmf = e3.createDTMFSender(t3) : this._dtmf = null), this._dtmf;
            }, _pc: e3 };
          };
          if (!e2.RTCPeerConnection.prototype.getSenders) {
            e2.RTCPeerConnection.prototype.getSenders = function() {
              return this._senders = this._senders || [], this._senders.slice();
            };
            const i3 = e2.RTCPeerConnection.prototype.addTrack;
            e2.RTCPeerConnection.prototype.addTrack = function(e3, n4) {
              let s2 = i3.apply(this, arguments);
              return s2 || (s2 = t2(this, e3), this._senders.push(s2)), s2;
            };
            const n3 = e2.RTCPeerConnection.prototype.removeTrack;
            e2.RTCPeerConnection.prototype.removeTrack = function(e3) {
              n3.apply(this, arguments);
              const t3 = this._senders.indexOf(e3);
              -1 !== t3 && this._senders.splice(t3, 1);
            };
          }
          const i2 = e2.RTCPeerConnection.prototype.addStream;
          e2.RTCPeerConnection.prototype.addStream = function(e3) {
            this._senders = this._senders || [], i2.apply(this, [e3]), e3.getTracks().forEach((e4) => {
              this._senders.push(t2(this, e4));
            });
          };
          const n2 = e2.RTCPeerConnection.prototype.removeStream;
          e2.RTCPeerConnection.prototype.removeStream = function(e3) {
            this._senders = this._senders || [], n2.apply(this, [e3]), e3.getTracks().forEach((e4) => {
              const t3 = this._senders.find((t4) => t4.track === e4);
              t3 && this._senders.splice(this._senders.indexOf(t3), 1);
            });
          };
        } else if ("object" == typeof e2 && e2.RTCPeerConnection && "getSenders" in e2.RTCPeerConnection.prototype && "createDTMFSender" in e2.RTCPeerConnection.prototype && e2.RTCRtpSender && !("dtmf" in e2.RTCRtpSender.prototype)) {
          const t2 = e2.RTCPeerConnection.prototype.getSenders;
          e2.RTCPeerConnection.prototype.getSenders = function() {
            const e3 = t2.apply(this, []);
            return e3.forEach((e4) => e4._pc = this), e3;
          }, Object.defineProperty(e2.RTCRtpSender.prototype, "dtmf", { get() {
            return void 0 === this._dtmf && ("audio" === this.track.kind ? this._dtmf = this._pc.createDTMFSender(this.track) : this._dtmf = null), this._dtmf;
          } });
        }
      }
      function Kn(e2) {
        if (!e2.RTCPeerConnection)
          return;
        const t2 = e2.RTCPeerConnection.prototype.getStats;
        e2.RTCPeerConnection.prototype.getStats = function() {
          const [e3, i2, n2] = arguments;
          if (arguments.length > 0 && "function" == typeof e3)
            return t2.apply(this, arguments);
          if (0 === t2.length && (0 === arguments.length || "function" != typeof e3))
            return t2.apply(this, []);
          const s2 = function(e4) {
            const t3 = {};
            return e4.result().forEach((e5) => {
              const i3 = { id: e5.id, timestamp: e5.timestamp, type: { localcandidate: "local-candidate", remotecandidate: "remote-candidate" }[e5.type] || e5.type };
              e5.names().forEach((t4) => {
                i3[t4] = e5.stat(t4);
              }), t3[i3.id] = i3;
            }), t3;
          }, r2 = function(e4) {
            return new Map(Object.keys(e4).map((t3) => [t3, e4[t3]]));
          };
          if (arguments.length >= 2) {
            const n3 = function(e4) {
              i2(r2(s2(e4)));
            };
            return t2.apply(this, [n3, e3]);
          }
          return new Promise((e4, i3) => {
            t2.apply(this, [function(t3) {
              e4(r2(s2(t3)));
            }, i3]);
          }).then(i2, n2);
        };
      }
      function Yn(e2) {
        if (!("object" == typeof e2 && e2.RTCPeerConnection && e2.RTCRtpSender && e2.RTCRtpReceiver))
          return;
        if (!("getStats" in e2.RTCRtpSender.prototype)) {
          const t3 = e2.RTCPeerConnection.prototype.getSenders;
          t3 && (e2.RTCPeerConnection.prototype.getSenders = function() {
            const e3 = t3.apply(this, []);
            return e3.forEach((e4) => e4._pc = this), e3;
          });
          const i2 = e2.RTCPeerConnection.prototype.addTrack;
          i2 && (e2.RTCPeerConnection.prototype.addTrack = function() {
            const e3 = i2.apply(this, arguments);
            return e3._pc = this, e3;
          }), e2.RTCRtpSender.prototype.getStats = function() {
            const e3 = this;
            return this._pc.getStats().then((t4) => Fn(t4, e3.track, true));
          };
        }
        if (!("getStats" in e2.RTCRtpReceiver.prototype)) {
          const t3 = e2.RTCPeerConnection.prototype.getReceivers;
          t3 && (e2.RTCPeerConnection.prototype.getReceivers = function() {
            const e3 = t3.apply(this, []);
            return e3.forEach((e4) => e4._pc = this), e3;
          }), Dn(e2, "track", (e3) => (e3.receiver._pc = e3.srcElement, e3)), e2.RTCRtpReceiver.prototype.getStats = function() {
            const e3 = this;
            return this._pc.getStats().then((t4) => Fn(t4, e3.track, false));
          };
        }
        if (!("getStats" in e2.RTCRtpSender.prototype) || !("getStats" in e2.RTCRtpReceiver.prototype))
          return;
        const t2 = e2.RTCPeerConnection.prototype.getStats;
        e2.RTCPeerConnection.prototype.getStats = function() {
          if (arguments.length > 0 && arguments[0] instanceof e2.MediaStreamTrack) {
            const e3 = arguments[0];
            let t3, i2, n2;
            return this.getSenders().forEach((i3) => {
              i3.track === e3 && (t3 ? n2 = true : t3 = i3);
            }), this.getReceivers().forEach((t4) => (t4.track === e3 && (i2 ? n2 = true : i2 = t4), t4.track === e3)), n2 || t3 && i2 ? Promise.reject(new DOMException("There are more than one sender or receiver for the track.", "InvalidAccessError")) : t3 ? t3.getStats() : i2 ? i2.getStats() : Promise.reject(new DOMException("There is no sender or receiver for the track.", "InvalidAccessError"));
          }
          return t2.apply(this, arguments);
        };
      }
      function qn(e2) {
        e2.RTCPeerConnection.prototype.getLocalStreams = function() {
          return this._shimmedLocalStreams = this._shimmedLocalStreams || {}, Object.keys(this._shimmedLocalStreams).map((e3) => this._shimmedLocalStreams[e3][0]);
        };
        const t2 = e2.RTCPeerConnection.prototype.addTrack;
        e2.RTCPeerConnection.prototype.addTrack = function(e3, i3) {
          if (!i3)
            return t2.apply(this, arguments);
          this._shimmedLocalStreams = this._shimmedLocalStreams || {};
          const n3 = t2.apply(this, arguments);
          return this._shimmedLocalStreams[i3.id] ? -1 === this._shimmedLocalStreams[i3.id].indexOf(n3) && this._shimmedLocalStreams[i3.id].push(n3) : this._shimmedLocalStreams[i3.id] = [i3, n3], n3;
        };
        const i2 = e2.RTCPeerConnection.prototype.addStream;
        e2.RTCPeerConnection.prototype.addStream = function(e3) {
          this._shimmedLocalStreams = this._shimmedLocalStreams || {}, e3.getTracks().forEach((e4) => {
            if (this.getSenders().find((t4) => t4.track === e4))
              throw new DOMException("Track already exists.", "InvalidAccessError");
          });
          const t3 = this.getSenders();
          i2.apply(this, arguments);
          const n3 = this.getSenders().filter((e4) => -1 === t3.indexOf(e4));
          this._shimmedLocalStreams[e3.id] = [e3].concat(n3);
        };
        const n2 = e2.RTCPeerConnection.prototype.removeStream;
        e2.RTCPeerConnection.prototype.removeStream = function(e3) {
          return this._shimmedLocalStreams = this._shimmedLocalStreams || {}, delete this._shimmedLocalStreams[e3.id], n2.apply(this, arguments);
        };
        const s2 = e2.RTCPeerConnection.prototype.removeTrack;
        e2.RTCPeerConnection.prototype.removeTrack = function(e3) {
          return this._shimmedLocalStreams = this._shimmedLocalStreams || {}, e3 && Object.keys(this._shimmedLocalStreams).forEach((t3) => {
            const i3 = this._shimmedLocalStreams[t3].indexOf(e3);
            -1 !== i3 && this._shimmedLocalStreams[t3].splice(i3, 1), 1 === this._shimmedLocalStreams[t3].length && delete this._shimmedLocalStreams[t3];
          }), s2.apply(this, arguments);
        };
      }
      function Jn(e2, t2) {
        if (!e2.RTCPeerConnection)
          return;
        if (e2.RTCPeerConnection.prototype.addTrack && t2.version >= 65)
          return qn(e2);
        const i2 = e2.RTCPeerConnection.prototype.getLocalStreams;
        e2.RTCPeerConnection.prototype.getLocalStreams = function() {
          const e3 = i2.apply(this);
          return this._reverseStreams = this._reverseStreams || {}, e3.map((e4) => this._reverseStreams[e4.id]);
        };
        const n2 = e2.RTCPeerConnection.prototype.addStream;
        e2.RTCPeerConnection.prototype.addStream = function(t3) {
          if (this._streams = this._streams || {}, this._reverseStreams = this._reverseStreams || {}, t3.getTracks().forEach((e3) => {
            if (this.getSenders().find((t4) => t4.track === e3))
              throw new DOMException("Track already exists.", "InvalidAccessError");
          }), !this._reverseStreams[t3.id]) {
            const i3 = new e2.MediaStream(t3.getTracks());
            this._streams[t3.id] = i3, this._reverseStreams[i3.id] = t3, t3 = i3;
          }
          n2.apply(this, [t3]);
        };
        const s2 = e2.RTCPeerConnection.prototype.removeStream;
        function r2(e3, t3) {
          let i3 = t3.sdp;
          return Object.keys(e3._reverseStreams || []).forEach((t4) => {
            const n3 = e3._reverseStreams[t4], s3 = e3._streams[n3.id];
            i3 = i3.replace(new RegExp(s3.id, "g"), n3.id);
          }), new RTCSessionDescription({ type: t3.type, sdp: i3 });
        }
        e2.RTCPeerConnection.prototype.removeStream = function(e3) {
          this._streams = this._streams || {}, this._reverseStreams = this._reverseStreams || {}, s2.apply(this, [this._streams[e3.id] || e3]), delete this._reverseStreams[this._streams[e3.id] ? this._streams[e3.id].id : e3.id], delete this._streams[e3.id];
        }, e2.RTCPeerConnection.prototype.addTrack = function(t3, i3) {
          if ("closed" === this.signalingState)
            throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.", "InvalidStateError");
          const n3 = [].slice.call(arguments, 1);
          if (1 !== n3.length || !n3[0].getTracks().find((e3) => e3 === t3))
            throw new DOMException("The adapter.js addTrack polyfill only supports a single  stream which is associated with the specified track.", "NotSupportedError");
          if (this.getSenders().find((e3) => e3.track === t3))
            throw new DOMException("Track already exists.", "InvalidAccessError");
          this._streams = this._streams || {}, this._reverseStreams = this._reverseStreams || {};
          const s3 = this._streams[i3.id];
          if (s3)
            s3.addTrack(t3), Promise.resolve().then(() => {
              this.dispatchEvent(new Event("negotiationneeded"));
            });
          else {
            const n4 = new e2.MediaStream([t3]);
            this._streams[i3.id] = n4, this._reverseStreams[n4.id] = i3, this.addStream(n4);
          }
          return this.getSenders().find((e3) => e3.track === t3);
        }, ["createOffer", "createAnswer"].forEach(function(t3) {
          const i3 = e2.RTCPeerConnection.prototype[t3], n3 = { [t3]() {
            const e3 = arguments;
            return arguments.length && "function" == typeof arguments[0] ? i3.apply(this, [(t4) => {
              const i4 = r2(this, t4);
              e3[0].apply(null, [i4]);
            }, (t4) => {
              e3[1] && e3[1].apply(null, t4);
            }, arguments[2]]) : i3.apply(this, arguments).then((e4) => r2(this, e4));
          } };
          e2.RTCPeerConnection.prototype[t3] = n3[t3];
        });
        const o2 = e2.RTCPeerConnection.prototype.setLocalDescription;
        e2.RTCPeerConnection.prototype.setLocalDescription = function() {
          return arguments.length && arguments[0].type ? (arguments[0] = function(e3, t3) {
            let i3 = t3.sdp;
            return Object.keys(e3._reverseStreams || []).forEach((t4) => {
              const n3 = e3._reverseStreams[t4], s3 = e3._streams[n3.id];
              i3 = i3.replace(new RegExp(n3.id, "g"), s3.id);
            }), new RTCSessionDescription({ type: t3.type, sdp: i3 });
          }(this, arguments[0]), o2.apply(this, arguments)) : o2.apply(this, arguments);
        };
        const a2 = Object.getOwnPropertyDescriptor(e2.RTCPeerConnection.prototype, "localDescription");
        Object.defineProperty(e2.RTCPeerConnection.prototype, "localDescription", { get() {
          const e3 = a2.get.apply(this);
          return "" === e3.type ? e3 : r2(this, e3);
        } }), e2.RTCPeerConnection.prototype.removeTrack = function(e3) {
          if ("closed" === this.signalingState)
            throw new DOMException("The RTCPeerConnection's signalingState is 'closed'.", "InvalidStateError");
          if (!e3._pc)
            throw new DOMException("Argument 1 of RTCPeerConnection.removeTrack does not implement interface RTCRtpSender.", "TypeError");
          if (!(e3._pc === this))
            throw new DOMException("Sender was not created by this connection.", "InvalidAccessError");
          let t3;
          this._streams = this._streams || {}, Object.keys(this._streams).forEach((i3) => {
            this._streams[i3].getTracks().find((t4) => e3.track === t4) && (t3 = this._streams[i3]);
          }), t3 && (1 === t3.getTracks().length ? this.removeStream(this._reverseStreams[t3.id]) : t3.removeTrack(e3.track), this.dispatchEvent(new Event("negotiationneeded")));
        };
      }
      function zn(e2, t2) {
        !e2.RTCPeerConnection && e2.webkitRTCPeerConnection && (e2.RTCPeerConnection = e2.webkitRTCPeerConnection), e2.RTCPeerConnection && t2.version < 53 && ["setLocalDescription", "setRemoteDescription", "addIceCandidate"].forEach(function(t3) {
          const i2 = e2.RTCPeerConnection.prototype[t3], n2 = { [t3]() {
            return arguments[0] = new ("addIceCandidate" === t3 ? e2.RTCIceCandidate : e2.RTCSessionDescription)(arguments[0]), i2.apply(this, arguments);
          } };
          e2.RTCPeerConnection.prototype[t3] = n2[t3];
        });
      }
      function Xn(e2, t2) {
        Dn(e2, "negotiationneeded", (e3) => {
          const i2 = e3.target;
          if (!(t2.version < 72 || i2.getConfiguration && "plan-b" === i2.getConfiguration().sdpSemantics) || "stable" === i2.signalingState)
            return e3;
        });
      }
      var Qn = Object.freeze({ __proto__: null, fixNegotiationNeeded: Xn, shimAddTrackRemoveTrack: Jn, shimAddTrackRemoveTrackWithNative: qn, shimGetDisplayMedia: function(e2, t2) {
        e2.navigator.mediaDevices && "getDisplayMedia" in e2.navigator.mediaDevices || e2.navigator.mediaDevices && ("function" == typeof t2 ? e2.navigator.mediaDevices.getDisplayMedia = function(i2) {
          return t2(i2).then((t3) => {
            const n2 = i2.video && i2.video.width, s2 = i2.video && i2.video.height, r2 = i2.video && i2.video.frameRate;
            return i2.video = { mandatory: { chromeMediaSource: "desktop", chromeMediaSourceId: t3, maxFrameRate: r2 || 3 } }, n2 && (i2.video.mandatory.maxWidth = n2), s2 && (i2.video.mandatory.maxHeight = s2), e2.navigator.mediaDevices.getUserMedia(i2);
          });
        } : console.error("shimGetDisplayMedia: getSourceId argument is not a function"));
      }, shimGetSendersWithDtmf: Hn, shimGetStats: Kn, shimGetUserMedia: jn, shimMediaStream: Gn, shimOnTrack: Wn, shimPeerConnection: zn, shimSenderReceiverGetStats: Yn });
      function Zn(e2, t2) {
        const i2 = e2 && e2.navigator, n2 = e2 && e2.MediaStreamTrack;
        if (i2.getUserMedia = function(e3, t3, n3) {
          Mn("navigator.getUserMedia", "navigator.mediaDevices.getUserMedia"), i2.mediaDevices.getUserMedia(e3).then(t3, n3);
        }, !(t2.version > 55 && "autoGainControl" in i2.mediaDevices.getSupportedConstraints())) {
          const e3 = function(e4, t4, i3) {
            t4 in e4 && !(i3 in e4) && (e4[i3] = e4[t4], delete e4[t4]);
          }, t3 = i2.mediaDevices.getUserMedia.bind(i2.mediaDevices);
          if (i2.mediaDevices.getUserMedia = function(i3) {
            return "object" == typeof i3 && "object" == typeof i3.audio && (i3 = JSON.parse(JSON.stringify(i3)), e3(i3.audio, "autoGainControl", "mozAutoGainControl"), e3(i3.audio, "noiseSuppression", "mozNoiseSuppression")), t3(i3);
          }, n2 && n2.prototype.getSettings) {
            const t4 = n2.prototype.getSettings;
            n2.prototype.getSettings = function() {
              const i3 = t4.apply(this, arguments);
              return e3(i3, "mozAutoGainControl", "autoGainControl"), e3(i3, "mozNoiseSuppression", "noiseSuppression"), i3;
            };
          }
          if (n2 && n2.prototype.applyConstraints) {
            const t4 = n2.prototype.applyConstraints;
            n2.prototype.applyConstraints = function(i3) {
              return "audio" === this.kind && "object" == typeof i3 && (i3 = JSON.parse(JSON.stringify(i3)), e3(i3, "autoGainControl", "mozAutoGainControl"), e3(i3, "noiseSuppression", "mozNoiseSuppression")), t4.apply(this, [i3]);
            };
          }
        }
      }
      function $n(e2) {
        "object" == typeof e2 && e2.RTCTrackEvent && "receiver" in e2.RTCTrackEvent.prototype && !("transceiver" in e2.RTCTrackEvent.prototype) && Object.defineProperty(e2.RTCTrackEvent.prototype, "transceiver", { get() {
          return { receiver: this.receiver };
        } });
      }
      function es(e2, t2) {
        if ("object" != typeof e2 || !e2.RTCPeerConnection && !e2.mozRTCPeerConnection)
          return;
        !e2.RTCPeerConnection && e2.mozRTCPeerConnection && (e2.RTCPeerConnection = e2.mozRTCPeerConnection), t2.version < 53 && ["setLocalDescription", "setRemoteDescription", "addIceCandidate"].forEach(function(t3) {
          const i3 = e2.RTCPeerConnection.prototype[t3], n3 = { [t3]() {
            return arguments[0] = new ("addIceCandidate" === t3 ? e2.RTCIceCandidate : e2.RTCSessionDescription)(arguments[0]), i3.apply(this, arguments);
          } };
          e2.RTCPeerConnection.prototype[t3] = n3[t3];
        });
        const i2 = { inboundrtp: "inbound-rtp", outboundrtp: "outbound-rtp", candidatepair: "candidate-pair", localcandidate: "local-candidate", remotecandidate: "remote-candidate" }, n2 = e2.RTCPeerConnection.prototype.getStats;
        e2.RTCPeerConnection.prototype.getStats = function() {
          const [e3, s2, r2] = arguments;
          return n2.apply(this, [e3 || null]).then((e4) => {
            if (t2.version < 53 && !s2)
              try {
                e4.forEach((e5) => {
                  e5.type = i2[e5.type] || e5.type;
                });
              } catch (t3) {
                if ("TypeError" !== t3.name)
                  throw t3;
                e4.forEach((t4, n3) => {
                  e4.set(n3, Object.assign({}, t4, { type: i2[t4.type] || t4.type }));
                });
              }
            return e4;
          }).then(s2, r2);
        };
      }
      function ts(e2) {
        if ("object" != typeof e2 || !e2.RTCPeerConnection || !e2.RTCRtpSender)
          return;
        if (e2.RTCRtpSender && "getStats" in e2.RTCRtpSender.prototype)
          return;
        const t2 = e2.RTCPeerConnection.prototype.getSenders;
        t2 && (e2.RTCPeerConnection.prototype.getSenders = function() {
          const e3 = t2.apply(this, []);
          return e3.forEach((e4) => e4._pc = this), e3;
        });
        const i2 = e2.RTCPeerConnection.prototype.addTrack;
        i2 && (e2.RTCPeerConnection.prototype.addTrack = function() {
          const e3 = i2.apply(this, arguments);
          return e3._pc = this, e3;
        }), e2.RTCRtpSender.prototype.getStats = function() {
          return this.track ? this._pc.getStats(this.track) : Promise.resolve(/* @__PURE__ */ new Map());
        };
      }
      function is(e2) {
        if ("object" != typeof e2 || !e2.RTCPeerConnection || !e2.RTCRtpSender)
          return;
        if (e2.RTCRtpSender && "getStats" in e2.RTCRtpReceiver.prototype)
          return;
        const t2 = e2.RTCPeerConnection.prototype.getReceivers;
        t2 && (e2.RTCPeerConnection.prototype.getReceivers = function() {
          const e3 = t2.apply(this, []);
          return e3.forEach((e4) => e4._pc = this), e3;
        }), Dn(e2, "track", (e3) => (e3.receiver._pc = e3.srcElement, e3)), e2.RTCRtpReceiver.prototype.getStats = function() {
          return this._pc.getStats(this.track);
        };
      }
      function ns(e2) {
        e2.RTCPeerConnection && !("removeStream" in e2.RTCPeerConnection.prototype) && (e2.RTCPeerConnection.prototype.removeStream = function(e3) {
          Mn("removeStream", "removeTrack"), this.getSenders().forEach((t2) => {
            t2.track && e3.getTracks().includes(t2.track) && this.removeTrack(t2);
          });
        });
      }
      function ss(e2) {
        e2.DataChannel && !e2.RTCDataChannel && (e2.RTCDataChannel = e2.DataChannel);
      }
      function rs(e2) {
        if ("object" != typeof e2 || !e2.RTCPeerConnection)
          return;
        const t2 = e2.RTCPeerConnection.prototype.addTransceiver;
        t2 && (e2.RTCPeerConnection.prototype.addTransceiver = function() {
          this.setParametersPromises = [];
          let e3 = arguments[1] && arguments[1].sendEncodings;
          void 0 === e3 && (e3 = []), e3 = [...e3];
          const i2 = e3.length > 0;
          i2 && e3.forEach((e4) => {
            if ("rid" in e4) {
              if (!/^[a-z0-9]{0,16}$/i.test(e4.rid))
                throw new TypeError("Invalid RID value provided.");
            }
            if ("scaleResolutionDownBy" in e4 && !(parseFloat(e4.scaleResolutionDownBy) >= 1))
              throw new RangeError("scale_resolution_down_by must be >= 1.0");
            if ("maxFramerate" in e4 && !(parseFloat(e4.maxFramerate) >= 0))
              throw new RangeError("max_framerate must be >= 0.0");
          });
          const n2 = t2.apply(this, arguments);
          if (i2) {
            const { sender: t3 } = n2, i3 = t3.getParameters();
            (!("encodings" in i3) || 1 === i3.encodings.length && 0 === Object.keys(i3.encodings[0]).length) && (i3.encodings = e3, t3.sendEncodings = e3, this.setParametersPromises.push(t3.setParameters(i3).then(() => {
              delete t3.sendEncodings;
            }).catch(() => {
              delete t3.sendEncodings;
            })));
          }
          return n2;
        });
      }
      function os(e2) {
        if ("object" != typeof e2 || !e2.RTCRtpSender)
          return;
        const t2 = e2.RTCRtpSender.prototype.getParameters;
        t2 && (e2.RTCRtpSender.prototype.getParameters = function() {
          const e3 = t2.apply(this, arguments);
          return "encodings" in e3 || (e3.encodings = [].concat(this.sendEncodings || [{}])), e3;
        });
      }
      function as(e2) {
        if ("object" != typeof e2 || !e2.RTCPeerConnection)
          return;
        const t2 = e2.RTCPeerConnection.prototype.createOffer;
        e2.RTCPeerConnection.prototype.createOffer = function() {
          return this.setParametersPromises && this.setParametersPromises.length ? Promise.all(this.setParametersPromises).then(() => t2.apply(this, arguments)).finally(() => {
            this.setParametersPromises = [];
          }) : t2.apply(this, arguments);
        };
      }
      function cs(e2) {
        if ("object" != typeof e2 || !e2.RTCPeerConnection)
          return;
        const t2 = e2.RTCPeerConnection.prototype.createAnswer;
        e2.RTCPeerConnection.prototype.createAnswer = function() {
          return this.setParametersPromises && this.setParametersPromises.length ? Promise.all(this.setParametersPromises).then(() => t2.apply(this, arguments)).finally(() => {
            this.setParametersPromises = [];
          }) : t2.apply(this, arguments);
        };
      }
      var ds = Object.freeze({ __proto__: null, shimAddTransceiver: rs, shimCreateAnswer: cs, shimCreateOffer: as, shimGetDisplayMedia: function(e2, t2) {
        e2.navigator.mediaDevices && "getDisplayMedia" in e2.navigator.mediaDevices || e2.navigator.mediaDevices && (e2.navigator.mediaDevices.getDisplayMedia = function(i2) {
          if (!i2 || !i2.video) {
            const e3 = new DOMException("getDisplayMedia without video constraints is undefined");
            return e3.name = "NotFoundError", e3.code = 8, Promise.reject(e3);
          }
          return true === i2.video ? i2.video = { mediaSource: t2 } : i2.video.mediaSource = t2, e2.navigator.mediaDevices.getUserMedia(i2);
        });
      }, shimGetParameters: os, shimGetUserMedia: Zn, shimOnTrack: $n, shimPeerConnection: es, shimRTCDataChannel: ss, shimReceiverGetStats: is, shimRemoveStream: ns, shimSenderGetStats: ts });
      function ls(e2) {
        if ("object" == typeof e2 && e2.RTCPeerConnection) {
          if ("getLocalStreams" in e2.RTCPeerConnection.prototype || (e2.RTCPeerConnection.prototype.getLocalStreams = function() {
            return this._localStreams || (this._localStreams = []), this._localStreams;
          }), !("addStream" in e2.RTCPeerConnection.prototype)) {
            const t2 = e2.RTCPeerConnection.prototype.addTrack;
            e2.RTCPeerConnection.prototype.addStream = function(e3) {
              this._localStreams || (this._localStreams = []), this._localStreams.includes(e3) || this._localStreams.push(e3), e3.getAudioTracks().forEach((i2) => t2.call(this, i2, e3)), e3.getVideoTracks().forEach((i2) => t2.call(this, i2, e3));
            }, e2.RTCPeerConnection.prototype.addTrack = function(e3, ...i2) {
              return i2 && i2.forEach((e4) => {
                this._localStreams ? this._localStreams.includes(e4) || this._localStreams.push(e4) : this._localStreams = [e4];
              }), t2.apply(this, arguments);
            };
          }
          "removeStream" in e2.RTCPeerConnection.prototype || (e2.RTCPeerConnection.prototype.removeStream = function(e3) {
            this._localStreams || (this._localStreams = []);
            const t2 = this._localStreams.indexOf(e3);
            if (-1 === t2)
              return;
            this._localStreams.splice(t2, 1);
            const i2 = e3.getTracks();
            this.getSenders().forEach((e4) => {
              i2.includes(e4.track) && this.removeTrack(e4);
            });
          });
        }
      }
      function us(e2) {
        if ("object" == typeof e2 && e2.RTCPeerConnection && ("getRemoteStreams" in e2.RTCPeerConnection.prototype || (e2.RTCPeerConnection.prototype.getRemoteStreams = function() {
          return this._remoteStreams ? this._remoteStreams : [];
        }), !("onaddstream" in e2.RTCPeerConnection.prototype))) {
          Object.defineProperty(e2.RTCPeerConnection.prototype, "onaddstream", { get() {
            return this._onaddstream;
          }, set(e3) {
            this._onaddstream && (this.removeEventListener("addstream", this._onaddstream), this.removeEventListener("track", this._onaddstreampoly)), this.addEventListener("addstream", this._onaddstream = e3), this.addEventListener("track", this._onaddstreampoly = (e4) => {
              e4.streams.forEach((e5) => {
                if (this._remoteStreams || (this._remoteStreams = []), this._remoteStreams.includes(e5))
                  return;
                this._remoteStreams.push(e5);
                const t3 = new Event("addstream");
                t3.stream = e5, this.dispatchEvent(t3);
              });
            });
          } });
          const t2 = e2.RTCPeerConnection.prototype.setRemoteDescription;
          e2.RTCPeerConnection.prototype.setRemoteDescription = function() {
            const e3 = this;
            return this._onaddstreampoly || this.addEventListener("track", this._onaddstreampoly = function(t3) {
              t3.streams.forEach((t4) => {
                if (e3._remoteStreams || (e3._remoteStreams = []), e3._remoteStreams.indexOf(t4) >= 0)
                  return;
                e3._remoteStreams.push(t4);
                const i2 = new Event("addstream");
                i2.stream = t4, e3.dispatchEvent(i2);
              });
            }), t2.apply(e3, arguments);
          };
        }
      }
      function hs(e2) {
        if ("object" != typeof e2 || !e2.RTCPeerConnection)
          return;
        const t2 = e2.RTCPeerConnection.prototype, i2 = t2.createOffer, n2 = t2.createAnswer, s2 = t2.setLocalDescription, r2 = t2.setRemoteDescription, o2 = t2.addIceCandidate;
        t2.createOffer = function(e3, t3) {
          const n3 = arguments.length >= 2 ? arguments[2] : arguments[0], s3 = i2.apply(this, [n3]);
          return t3 ? (s3.then(e3, t3), Promise.resolve()) : s3;
        }, t2.createAnswer = function(e3, t3) {
          const i3 = arguments.length >= 2 ? arguments[2] : arguments[0], s3 = n2.apply(this, [i3]);
          return t3 ? (s3.then(e3, t3), Promise.resolve()) : s3;
        };
        let a2 = function(e3, t3, i3) {
          const n3 = s2.apply(this, [e3]);
          return i3 ? (n3.then(t3, i3), Promise.resolve()) : n3;
        };
        t2.setLocalDescription = a2, a2 = function(e3, t3, i3) {
          const n3 = r2.apply(this, [e3]);
          return i3 ? (n3.then(t3, i3), Promise.resolve()) : n3;
        }, t2.setRemoteDescription = a2, a2 = function(e3, t3, i3) {
          const n3 = o2.apply(this, [e3]);
          return i3 ? (n3.then(t3, i3), Promise.resolve()) : n3;
        }, t2.addIceCandidate = a2;
      }
      function ps(e2) {
        const t2 = e2 && e2.navigator;
        if (t2.mediaDevices && t2.mediaDevices.getUserMedia) {
          const e3 = t2.mediaDevices, i2 = e3.getUserMedia.bind(e3);
          t2.mediaDevices.getUserMedia = (e4) => i2(_s(e4));
        }
        !t2.getUserMedia && t2.mediaDevices && t2.mediaDevices.getUserMedia && (t2.getUserMedia = (function(e3, i2, n2) {
          t2.mediaDevices.getUserMedia(e3).then(i2, n2);
        }).bind(t2));
      }
      function _s(e2) {
        return e2 && void 0 !== e2.video ? Object.assign({}, e2, { video: xn(e2.video) }) : e2;
      }
      function Es(e2) {
        if (!e2.RTCPeerConnection)
          return;
        const t2 = e2.RTCPeerConnection;
        e2.RTCPeerConnection = function(e3, i2) {
          if (e3 && e3.iceServers) {
            const t3 = [];
            for (let i3 = 0; i3 < e3.iceServers.length; i3++) {
              let n2 = e3.iceServers[i3];
              !n2.hasOwnProperty("urls") && n2.hasOwnProperty("url") ? (Mn("RTCIceServer.url", "RTCIceServer.urls"), n2 = JSON.parse(JSON.stringify(n2)), n2.urls = n2.url, delete n2.url, t3.push(n2)) : t3.push(e3.iceServers[i3]);
            }
            e3.iceServers = t3;
          }
          return new t2(e3, i2);
        }, e2.RTCPeerConnection.prototype = t2.prototype, "generateCertificate" in t2 && Object.defineProperty(e2.RTCPeerConnection, "generateCertificate", { get: () => t2.generateCertificate });
      }
      function ms(e2) {
        "object" == typeof e2 && e2.RTCTrackEvent && "receiver" in e2.RTCTrackEvent.prototype && !("transceiver" in e2.RTCTrackEvent.prototype) && Object.defineProperty(e2.RTCTrackEvent.prototype, "transceiver", { get() {
          return { receiver: this.receiver };
        } });
      }
      function fs(e2) {
        const t2 = e2.RTCPeerConnection.prototype.createOffer;
        e2.RTCPeerConnection.prototype.createOffer = function(e3) {
          if (e3) {
            void 0 !== e3.offerToReceiveAudio && (e3.offerToReceiveAudio = !!e3.offerToReceiveAudio);
            const t3 = this.getTransceivers().find((e4) => "audio" === e4.receiver.track.kind);
            false === e3.offerToReceiveAudio && t3 ? "sendrecv" === t3.direction ? t3.setDirection ? t3.setDirection("sendonly") : t3.direction = "sendonly" : "recvonly" === t3.direction && (t3.setDirection ? t3.setDirection("inactive") : t3.direction = "inactive") : true !== e3.offerToReceiveAudio || t3 || this.addTransceiver("audio", { direction: "recvonly" }), void 0 !== e3.offerToReceiveVideo && (e3.offerToReceiveVideo = !!e3.offerToReceiveVideo);
            const i2 = this.getTransceivers().find((e4) => "video" === e4.receiver.track.kind);
            false === e3.offerToReceiveVideo && i2 ? "sendrecv" === i2.direction ? i2.setDirection ? i2.setDirection("sendonly") : i2.direction = "sendonly" : "recvonly" === i2.direction && (i2.setDirection ? i2.setDirection("inactive") : i2.direction = "inactive") : true !== e3.offerToReceiveVideo || i2 || this.addTransceiver("video", { direction: "recvonly" });
          }
          return t2.apply(this, arguments);
        };
      }
      function Ts(e2) {
        "object" != typeof e2 || e2.AudioContext || (e2.AudioContext = e2.webkitAudioContext);
      }
      var gs = Object.freeze({ __proto__: null, shimAudioContext: Ts, shimCallbacksAPI: hs, shimConstraints: _s, shimCreateOfferLegacy: fs, shimGetUserMedia: ps, shimLocalStreamsAPI: ls, shimRTCIceServerUrls: Es, shimRemoteStreamsAPI: us, shimTrackEventTransceiver: ms }), Ss = { exports: {} };
      !function(e2) {
        const t2 = { generateIdentifier: function() {
          return Math.random().toString(36).substring(2, 12);
        } };
        t2.localCName = t2.generateIdentifier(), t2.splitLines = function(e3) {
          return e3.trim().split("\n").map((e4) => e4.trim());
        }, t2.splitSections = function(e3) {
          return e3.split("\nm=").map((e4, t3) => (t3 > 0 ? "m=" + e4 : e4).trim() + "\r\n");
        }, t2.getDescription = function(e3) {
          const i2 = t2.splitSections(e3);
          return i2 && i2[0];
        }, t2.getMediaSections = function(e3) {
          const i2 = t2.splitSections(e3);
          return i2.shift(), i2;
        }, t2.matchPrefix = function(e3, i2) {
          return t2.splitLines(e3).filter((e4) => 0 === e4.indexOf(i2));
        }, t2.parseCandidate = function(e3) {
          let t3;
          t3 = 0 === e3.indexOf("a=candidate:") ? e3.substring(12).split(" ") : e3.substring(10).split(" ");
          const i2 = { foundation: t3[0], component: { 1: "rtp", 2: "rtcp" }[t3[1]] || t3[1], protocol: t3[2].toLowerCase(), priority: parseInt(t3[3], 10), ip: t3[4], address: t3[4], port: parseInt(t3[5], 10), type: t3[7] };
          for (let e4 = 8; e4 < t3.length; e4 += 2)
            switch (t3[e4]) {
              case "raddr":
                i2.relatedAddress = t3[e4 + 1];
                break;
              case "rport":
                i2.relatedPort = parseInt(t3[e4 + 1], 10);
                break;
              case "tcptype":
                i2.tcpType = t3[e4 + 1];
                break;
              case "ufrag":
                i2.ufrag = t3[e4 + 1], i2.usernameFragment = t3[e4 + 1];
                break;
              default:
                void 0 === i2[t3[e4]] && (i2[t3[e4]] = t3[e4 + 1]);
            }
          return i2;
        }, t2.writeCandidate = function(e3) {
          const t3 = [];
          t3.push(e3.foundation);
          const i2 = e3.component;
          "rtp" === i2 ? t3.push(1) : "rtcp" === i2 ? t3.push(2) : t3.push(i2), t3.push(e3.protocol.toUpperCase()), t3.push(e3.priority), t3.push(e3.address || e3.ip), t3.push(e3.port);
          const n2 = e3.type;
          return t3.push("typ"), t3.push(n2), "host" !== n2 && e3.relatedAddress && e3.relatedPort && (t3.push("raddr"), t3.push(e3.relatedAddress), t3.push("rport"), t3.push(e3.relatedPort)), e3.tcpType && "tcp" === e3.protocol.toLowerCase() && (t3.push("tcptype"), t3.push(e3.tcpType)), (e3.usernameFragment || e3.ufrag) && (t3.push("ufrag"), t3.push(e3.usernameFragment || e3.ufrag)), "candidate:" + t3.join(" ");
        }, t2.parseIceOptions = function(e3) {
          return e3.substring(14).split(" ");
        }, t2.parseRtpMap = function(e3) {
          let t3 = e3.substring(9).split(" ");
          const i2 = { payloadType: parseInt(t3.shift(), 10) };
          return t3 = t3[0].split("/"), i2.name = t3[0], i2.clockRate = parseInt(t3[1], 10), i2.channels = 3 === t3.length ? parseInt(t3[2], 10) : 1, i2.numChannels = i2.channels, i2;
        }, t2.writeRtpMap = function(e3) {
          let t3 = e3.payloadType;
          void 0 !== e3.preferredPayloadType && (t3 = e3.preferredPayloadType);
          const i2 = e3.channels || e3.numChannels || 1;
          return "a=rtpmap:" + t3 + " " + e3.name + "/" + e3.clockRate + (1 !== i2 ? "/" + i2 : "") + "\r\n";
        }, t2.parseExtmap = function(e3) {
          const t3 = e3.substring(9).split(" ");
          return { id: parseInt(t3[0], 10), direction: t3[0].indexOf("/") > 0 ? t3[0].split("/")[1] : "sendrecv", uri: t3[1], attributes: t3.slice(2).join(" ") };
        }, t2.writeExtmap = function(e3) {
          return "a=extmap:" + (e3.id || e3.preferredId) + (e3.direction && "sendrecv" !== e3.direction ? "/" + e3.direction : "") + " " + e3.uri + (e3.attributes ? " " + e3.attributes : "") + "\r\n";
        }, t2.parseFmtp = function(e3) {
          const t3 = {};
          let i2;
          const n2 = e3.substring(e3.indexOf(" ") + 1).split(";");
          for (let e4 = 0; e4 < n2.length; e4++)
            i2 = n2[e4].trim().split("="), t3[i2[0].trim()] = i2[1];
          return t3;
        }, t2.writeFmtp = function(e3) {
          let t3 = "", i2 = e3.payloadType;
          if (void 0 !== e3.preferredPayloadType && (i2 = e3.preferredPayloadType), e3.parameters && Object.keys(e3.parameters).length) {
            const n2 = [];
            Object.keys(e3.parameters).forEach((t4) => {
              void 0 !== e3.parameters[t4] ? n2.push(t4 + "=" + e3.parameters[t4]) : n2.push(t4);
            }), t3 += "a=fmtp:" + i2 + " " + n2.join(";") + "\r\n";
          }
          return t3;
        }, t2.parseRtcpFb = function(e3) {
          const t3 = e3.substring(e3.indexOf(" ") + 1).split(" ");
          return { type: t3.shift(), parameter: t3.join(" ") };
        }, t2.writeRtcpFb = function(e3) {
          let t3 = "", i2 = e3.payloadType;
          return void 0 !== e3.preferredPayloadType && (i2 = e3.preferredPayloadType), e3.rtcpFeedback && e3.rtcpFeedback.length && e3.rtcpFeedback.forEach((e4) => {
            t3 += "a=rtcp-fb:" + i2 + " " + e4.type + (e4.parameter && e4.parameter.length ? " " + e4.parameter : "") + "\r\n";
          }), t3;
        }, t2.parseSsrcMedia = function(e3) {
          const t3 = e3.indexOf(" "), i2 = { ssrc: parseInt(e3.substring(7, t3), 10) }, n2 = e3.indexOf(":", t3);
          return n2 > -1 ? (i2.attribute = e3.substring(t3 + 1, n2), i2.value = e3.substring(n2 + 1)) : i2.attribute = e3.substring(t3 + 1), i2;
        }, t2.parseSsrcGroup = function(e3) {
          const t3 = e3.substring(13).split(" ");
          return { semantics: t3.shift(), ssrcs: t3.map((e4) => parseInt(e4, 10)) };
        }, t2.getMid = function(e3) {
          const i2 = t2.matchPrefix(e3, "a=mid:")[0];
          if (i2)
            return i2.substring(6);
        }, t2.parseFingerprint = function(e3) {
          const t3 = e3.substring(14).split(" ");
          return { algorithm: t3[0].toLowerCase(), value: t3[1].toUpperCase() };
        }, t2.getDtlsParameters = function(e3, i2) {
          return { role: "auto", fingerprints: t2.matchPrefix(e3 + i2, "a=fingerprint:").map(t2.parseFingerprint) };
        }, t2.writeDtlsParameters = function(e3, t3) {
          let i2 = "a=setup:" + t3 + "\r\n";
          return e3.fingerprints.forEach((e4) => {
            i2 += "a=fingerprint:" + e4.algorithm + " " + e4.value + "\r\n";
          }), i2;
        }, t2.parseCryptoLine = function(e3) {
          const t3 = e3.substring(9).split(" ");
          return { tag: parseInt(t3[0], 10), cryptoSuite: t3[1], keyParams: t3[2], sessionParams: t3.slice(3) };
        }, t2.writeCryptoLine = function(e3) {
          return "a=crypto:" + e3.tag + " " + e3.cryptoSuite + " " + ("object" == typeof e3.keyParams ? t2.writeCryptoKeyParams(e3.keyParams) : e3.keyParams) + (e3.sessionParams ? " " + e3.sessionParams.join(" ") : "") + "\r\n";
        }, t2.parseCryptoKeyParams = function(e3) {
          if (0 !== e3.indexOf("inline:"))
            return null;
          const t3 = e3.substring(7).split("|");
          return { keyMethod: "inline", keySalt: t3[0], lifeTime: t3[1], mkiValue: t3[2] ? t3[2].split(":")[0] : void 0, mkiLength: t3[2] ? t3[2].split(":")[1] : void 0 };
        }, t2.writeCryptoKeyParams = function(e3) {
          return e3.keyMethod + ":" + e3.keySalt + (e3.lifeTime ? "|" + e3.lifeTime : "") + (e3.mkiValue && e3.mkiLength ? "|" + e3.mkiValue + ":" + e3.mkiLength : "");
        }, t2.getCryptoParameters = function(e3, i2) {
          return t2.matchPrefix(e3 + i2, "a=crypto:").map(t2.parseCryptoLine);
        }, t2.getIceParameters = function(e3, i2) {
          const n2 = t2.matchPrefix(e3 + i2, "a=ice-ufrag:")[0], s2 = t2.matchPrefix(e3 + i2, "a=ice-pwd:")[0];
          return n2 && s2 ? { usernameFragment: n2.substring(12), password: s2.substring(10) } : null;
        }, t2.writeIceParameters = function(e3) {
          let t3 = "a=ice-ufrag:" + e3.usernameFragment + "\r\na=ice-pwd:" + e3.password + "\r\n";
          return e3.iceLite && (t3 += "a=ice-lite\r\n"), t3;
        }, t2.parseRtpParameters = function(e3) {
          const i2 = { codecs: [], headerExtensions: [], fecMechanisms: [], rtcp: [] }, n2 = t2.splitLines(e3)[0].split(" ");
          i2.profile = n2[2];
          for (let s3 = 3; s3 < n2.length; s3++) {
            const r2 = n2[s3], o2 = t2.matchPrefix(e3, "a=rtpmap:" + r2 + " ")[0];
            if (o2) {
              const n3 = t2.parseRtpMap(o2), s4 = t2.matchPrefix(e3, "a=fmtp:" + r2 + " ");
              switch (n3.parameters = s4.length ? t2.parseFmtp(s4[0]) : {}, n3.rtcpFeedback = t2.matchPrefix(e3, "a=rtcp-fb:" + r2 + " ").map(t2.parseRtcpFb), i2.codecs.push(n3), n3.name.toUpperCase()) {
                case "RED":
                case "ULPFEC":
                  i2.fecMechanisms.push(n3.name.toUpperCase());
              }
            }
          }
          t2.matchPrefix(e3, "a=extmap:").forEach((e4) => {
            i2.headerExtensions.push(t2.parseExtmap(e4));
          });
          const s2 = t2.matchPrefix(e3, "a=rtcp-fb:* ").map(t2.parseRtcpFb);
          return i2.codecs.forEach((e4) => {
            s2.forEach((t3) => {
              e4.rtcpFeedback.find((e5) => e5.type === t3.type && e5.parameter === t3.parameter) || e4.rtcpFeedback.push(t3);
            });
          }), i2;
        }, t2.writeRtpDescription = function(e3, i2) {
          let n2 = "";
          n2 += "m=" + e3 + " ", n2 += i2.codecs.length > 0 ? "9" : "0", n2 += " " + (i2.profile || "UDP/TLS/RTP/SAVPF") + " ", n2 += i2.codecs.map((e4) => void 0 !== e4.preferredPayloadType ? e4.preferredPayloadType : e4.payloadType).join(" ") + "\r\n", n2 += "c=IN IP4 0.0.0.0\r\n", n2 += "a=rtcp:9 IN IP4 0.0.0.0\r\n", i2.codecs.forEach((e4) => {
            n2 += t2.writeRtpMap(e4), n2 += t2.writeFmtp(e4), n2 += t2.writeRtcpFb(e4);
          });
          let s2 = 0;
          return i2.codecs.forEach((e4) => {
            e4.maxptime > s2 && (s2 = e4.maxptime);
          }), s2 > 0 && (n2 += "a=maxptime:" + s2 + "\r\n"), i2.headerExtensions && i2.headerExtensions.forEach((e4) => {
            n2 += t2.writeExtmap(e4);
          }), n2;
        }, t2.parseRtpEncodingParameters = function(e3) {
          const i2 = [], n2 = t2.parseRtpParameters(e3), s2 = -1 !== n2.fecMechanisms.indexOf("RED"), r2 = -1 !== n2.fecMechanisms.indexOf("ULPFEC"), o2 = t2.matchPrefix(e3, "a=ssrc:").map((e4) => t2.parseSsrcMedia(e4)).filter((e4) => "cname" === e4.attribute), a2 = o2.length > 0 && o2[0].ssrc;
          let c2;
          const d2 = t2.matchPrefix(e3, "a=ssrc-group:FID").map((e4) => e4.substring(17).split(" ").map((e5) => parseInt(e5, 10)));
          d2.length > 0 && d2[0].length > 1 && d2[0][0] === a2 && (c2 = d2[0][1]), n2.codecs.forEach((e4) => {
            if ("RTX" === e4.name.toUpperCase() && e4.parameters.apt) {
              let t3 = { ssrc: a2, codecPayloadType: parseInt(e4.parameters.apt, 10) };
              a2 && c2 && (t3.rtx = { ssrc: c2 }), i2.push(t3), s2 && (t3 = JSON.parse(JSON.stringify(t3)), t3.fec = { ssrc: a2, mechanism: r2 ? "red+ulpfec" : "red" }, i2.push(t3));
            }
          }), 0 === i2.length && a2 && i2.push({ ssrc: a2 });
          let l2 = t2.matchPrefix(e3, "b=");
          return l2.length && (l2 = 0 === l2[0].indexOf("b=TIAS:") ? parseInt(l2[0].substring(7), 10) : 0 === l2[0].indexOf("b=AS:") ? 1e3 * parseInt(l2[0].substring(5), 10) * 0.95 - 16e3 : void 0, i2.forEach((e4) => {
            e4.maxBitrate = l2;
          })), i2;
        }, t2.parseRtcpParameters = function(e3) {
          const i2 = {}, n2 = t2.matchPrefix(e3, "a=ssrc:").map((e4) => t2.parseSsrcMedia(e4)).filter((e4) => "cname" === e4.attribute)[0];
          n2 && (i2.cname = n2.value, i2.ssrc = n2.ssrc);
          const s2 = t2.matchPrefix(e3, "a=rtcp-rsize");
          i2.reducedSize = s2.length > 0, i2.compound = 0 === s2.length;
          const r2 = t2.matchPrefix(e3, "a=rtcp-mux");
          return i2.mux = r2.length > 0, i2;
        }, t2.writeRtcpParameters = function(e3) {
          let t3 = "";
          return e3.reducedSize && (t3 += "a=rtcp-rsize\r\n"), e3.mux && (t3 += "a=rtcp-mux\r\n"), void 0 !== e3.ssrc && e3.cname && (t3 += "a=ssrc:" + e3.ssrc + " cname:" + e3.cname + "\r\n"), t3;
        }, t2.parseMsid = function(e3) {
          let i2;
          const n2 = t2.matchPrefix(e3, "a=msid:");
          if (1 === n2.length)
            return i2 = n2[0].substring(7).split(" "), { stream: i2[0], track: i2[1] };
          const s2 = t2.matchPrefix(e3, "a=ssrc:").map((e4) => t2.parseSsrcMedia(e4)).filter((e4) => "msid" === e4.attribute);
          return s2.length > 0 ? (i2 = s2[0].value.split(" "), { stream: i2[0], track: i2[1] }) : void 0;
        }, t2.parseSctpDescription = function(e3) {
          const i2 = t2.parseMLine(e3), n2 = t2.matchPrefix(e3, "a=max-message-size:");
          let s2;
          n2.length > 0 && (s2 = parseInt(n2[0].substring(19), 10)), isNaN(s2) && (s2 = 65536);
          const r2 = t2.matchPrefix(e3, "a=sctp-port:");
          if (r2.length > 0)
            return { port: parseInt(r2[0].substring(12), 10), protocol: i2.fmt, maxMessageSize: s2 };
          const o2 = t2.matchPrefix(e3, "a=sctpmap:");
          if (o2.length > 0) {
            const e4 = o2[0].substring(10).split(" ");
            return { port: parseInt(e4[0], 10), protocol: e4[1], maxMessageSize: s2 };
          }
        }, t2.writeSctpDescription = function(e3, t3) {
          let i2 = [];
          return i2 = "DTLS/SCTP" !== e3.protocol ? ["m=" + e3.kind + " 9 " + e3.protocol + " " + t3.protocol + "\r\n", "c=IN IP4 0.0.0.0\r\n", "a=sctp-port:" + t3.port + "\r\n"] : ["m=" + e3.kind + " 9 " + e3.protocol + " " + t3.port + "\r\n", "c=IN IP4 0.0.0.0\r\n", "a=sctpmap:" + t3.port + " " + t3.protocol + " 65535\r\n"], void 0 !== t3.maxMessageSize && i2.push("a=max-message-size:" + t3.maxMessageSize + "\r\n"), i2.join("");
        }, t2.generateSessionId = function() {
          return Math.random().toString().substr(2, 22);
        }, t2.writeSessionBoilerplate = function(e3, i2, n2) {
          let s2;
          const r2 = void 0 !== i2 ? i2 : 2;
          s2 = e3 || t2.generateSessionId();
          return "v=0\r\no=" + (n2 || "thisisadapterortc") + " " + s2 + " " + r2 + " IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\n";
        }, t2.getDirection = function(e3, i2) {
          const n2 = t2.splitLines(e3);
          for (let e4 = 0; e4 < n2.length; e4++)
            switch (n2[e4]) {
              case "a=sendrecv":
              case "a=sendonly":
              case "a=recvonly":
              case "a=inactive":
                return n2[e4].substring(2);
            }
          return i2 ? t2.getDirection(i2) : "sendrecv";
        }, t2.getKind = function(e3) {
          return t2.splitLines(e3)[0].split(" ")[0].substring(2);
        }, t2.isRejected = function(e3) {
          return "0" === e3.split(" ", 2)[1];
        }, t2.parseMLine = function(e3) {
          const i2 = t2.splitLines(e3)[0].substring(2).split(" ");
          return { kind: i2[0], port: parseInt(i2[1], 10), protocol: i2[2], fmt: i2.slice(3).join(" ") };
        }, t2.parseOLine = function(e3) {
          const i2 = t2.matchPrefix(e3, "o=")[0].substring(2).split(" ");
          return { username: i2[0], sessionId: i2[1], sessionVersion: parseInt(i2[2], 10), netType: i2[3], addressType: i2[4], address: i2[5] };
        }, t2.isValidSDP = function(e3) {
          if ("string" != typeof e3 || 0 === e3.length)
            return false;
          const i2 = t2.splitLines(e3);
          for (let e4 = 0; e4 < i2.length; e4++)
            if (i2[e4].length < 2 || "=" !== i2[e4].charAt(1))
              return false;
          return true;
        }, e2.exports = t2;
      }(Ss);
      var Rs = Ss.exports, Cs = i(Rs), Is = e({ __proto__: null, default: Cs }, [Rs]);
      function vs(e2) {
        if (!e2.RTCIceCandidate || e2.RTCIceCandidate && "foundation" in e2.RTCIceCandidate.prototype)
          return;
        const t2 = e2.RTCIceCandidate;
        e2.RTCIceCandidate = function(e3) {
          if ("object" == typeof e3 && e3.candidate && 0 === e3.candidate.indexOf("a=") && ((e3 = JSON.parse(JSON.stringify(e3))).candidate = e3.candidate.substr(2)), e3.candidate && e3.candidate.length) {
            const i2 = new t2(e3), n2 = Cs.parseCandidate(e3.candidate), s2 = Object.assign(i2, n2);
            return s2.toJSON = function() {
              return { candidate: s2.candidate, sdpMid: s2.sdpMid, sdpMLineIndex: s2.sdpMLineIndex, usernameFragment: s2.usernameFragment };
            }, s2;
          }
          return new t2(e3);
        }, e2.RTCIceCandidate.prototype = t2.prototype, Dn(e2, "icecandidate", (t3) => (t3.candidate && Object.defineProperty(t3, "candidate", { value: new e2.RTCIceCandidate(t3.candidate), writable: "false" }), t3));
      }
      function ys(e2) {
        !e2.RTCIceCandidate || e2.RTCIceCandidate && "relayProtocol" in e2.RTCIceCandidate.prototype || Dn(e2, "icecandidate", (e3) => {
          if (e3.candidate) {
            const t2 = Cs.parseCandidate(e3.candidate.candidate);
            "relay" === t2.type && (e3.candidate.relayProtocol = { 0: "tls", 1: "tcp", 2: "udp" }[t2.priority >> 24]);
          }
          return e3;
        });
      }
      function As(e2, t2) {
        if (!e2.RTCPeerConnection)
          return;
        "sctp" in e2.RTCPeerConnection.prototype || Object.defineProperty(e2.RTCPeerConnection.prototype, "sctp", { get() {
          return void 0 === this._sctp ? null : this._sctp;
        } });
        const i2 = function(e3) {
          if (!e3 || !e3.sdp)
            return false;
          const t3 = Cs.splitSections(e3.sdp);
          return t3.shift(), t3.some((e4) => {
            const t4 = Cs.parseMLine(e4);
            return t4 && "application" === t4.kind && -1 !== t4.protocol.indexOf("SCTP");
          });
        }, n2 = function(e3) {
          const t3 = e3.sdp.match(/mozilla...THIS_IS_SDPARTA-(\d+)/);
          if (null === t3 || t3.length < 2)
            return -1;
          const i3 = parseInt(t3[1], 10);
          return i3 != i3 ? -1 : i3;
        }, s2 = function(e3) {
          let i3 = 65536;
          return "firefox" === t2.browser && (i3 = t2.version < 57 ? -1 === e3 ? 16384 : 2147483637 : t2.version < 60 ? 57 === t2.version ? 65535 : 65536 : 2147483637), i3;
        }, r2 = function(e3, i3) {
          let n3 = 65536;
          "firefox" === t2.browser && 57 === t2.version && (n3 = 65535);
          const s3 = Cs.matchPrefix(e3.sdp, "a=max-message-size:");
          return s3.length > 0 ? n3 = parseInt(s3[0].substr(19), 10) : "firefox" === t2.browser && -1 !== i3 && (n3 = 2147483637), n3;
        }, o2 = e2.RTCPeerConnection.prototype.setRemoteDescription;
        e2.RTCPeerConnection.prototype.setRemoteDescription = function() {
          if (this._sctp = null, "chrome" === t2.browser && t2.version >= 76) {
            const { sdpSemantics: e3 } = this.getConfiguration();
            "plan-b" === e3 && Object.defineProperty(this, "sctp", { get() {
              return void 0 === this._sctp ? null : this._sctp;
            }, enumerable: true, configurable: true });
          }
          if (i2(arguments[0])) {
            const e3 = n2(arguments[0]), t3 = s2(e3), i3 = r2(arguments[0], e3);
            let o3;
            o3 = 0 === t3 && 0 === i3 ? Number.POSITIVE_INFINITY : 0 === t3 || 0 === i3 ? Math.max(t3, i3) : Math.min(t3, i3);
            const a2 = {};
            Object.defineProperty(a2, "maxMessageSize", { get: () => o3 }), this._sctp = a2;
          }
          return o2.apply(this, arguments);
        };
      }
      function bs(e2) {
        if (!e2.RTCPeerConnection || !("createDataChannel" in e2.RTCPeerConnection.prototype))
          return;
        function t2(e3, t3) {
          const i3 = e3.send;
          e3.send = function() {
            const n2 = arguments[0], s2 = n2.length || n2.size || n2.byteLength;
            if ("open" === e3.readyState && t3.sctp && s2 > t3.sctp.maxMessageSize)
              throw new TypeError("Message too large (can send a maximum of " + t3.sctp.maxMessageSize + " bytes)");
            return i3.apply(e3, arguments);
          };
        }
        const i2 = e2.RTCPeerConnection.prototype.createDataChannel;
        e2.RTCPeerConnection.prototype.createDataChannel = function() {
          const e3 = i2.apply(this, arguments);
          return t2(e3, this), e3;
        }, Dn(e2, "datachannel", (e3) => (t2(e3.channel, e3.target), e3));
      }
      function ws(e2) {
        if (!e2.RTCPeerConnection || "connectionState" in e2.RTCPeerConnection.prototype)
          return;
        const t2 = e2.RTCPeerConnection.prototype;
        Object.defineProperty(t2, "connectionState", { get() {
          return { completed: "connected", checking: "connecting" }[this.iceConnectionState] || this.iceConnectionState;
        }, enumerable: true, configurable: true }), Object.defineProperty(t2, "onconnectionstatechange", { get() {
          return this._onconnectionstatechange || null;
        }, set(e3) {
          this._onconnectionstatechange && (this.removeEventListener("connectionstatechange", this._onconnectionstatechange), delete this._onconnectionstatechange), e3 && this.addEventListener("connectionstatechange", this._onconnectionstatechange = e3);
        }, enumerable: true, configurable: true }), ["setLocalDescription", "setRemoteDescription"].forEach((e3) => {
          const i2 = t2[e3];
          t2[e3] = function() {
            return this._connectionstatechangepoly || (this._connectionstatechangepoly = (e4) => {
              const t3 = e4.target;
              if (t3._lastConnectionState !== t3.connectionState) {
                t3._lastConnectionState = t3.connectionState;
                const i3 = new Event("connectionstatechange", e4);
                t3.dispatchEvent(i3);
              }
              return e4;
            }, this.addEventListener("iceconnectionstatechange", this._connectionstatechangepoly)), i2.apply(this, arguments);
          };
        });
      }
      function Os(e2, t2) {
        if (!e2.RTCPeerConnection)
          return;
        if ("chrome" === t2.browser && t2.version >= 71)
          return;
        if ("safari" === t2.browser && t2.version >= 605)
          return;
        const i2 = e2.RTCPeerConnection.prototype.setRemoteDescription;
        e2.RTCPeerConnection.prototype.setRemoteDescription = function(t3) {
          if (t3 && t3.sdp && -1 !== t3.sdp.indexOf("\na=extmap-allow-mixed")) {
            const i3 = t3.sdp.split("\n").filter((e3) => "a=extmap-allow-mixed" !== e3.trim()).join("\n");
            e2.RTCSessionDescription && t3 instanceof e2.RTCSessionDescription ? arguments[0] = new e2.RTCSessionDescription({ type: t3.type, sdp: i3 }) : t3.sdp = i3;
          }
          return i2.apply(this, arguments);
        };
      }
      function Ns(e2, t2) {
        if (!e2.RTCPeerConnection || !e2.RTCPeerConnection.prototype)
          return;
        const i2 = e2.RTCPeerConnection.prototype.addIceCandidate;
        i2 && 0 !== i2.length && (e2.RTCPeerConnection.prototype.addIceCandidate = function() {
          return arguments[0] ? ("chrome" === t2.browser && t2.version < 78 || "firefox" === t2.browser && t2.version < 68 || "safari" === t2.browser) && arguments[0] && "" === arguments[0].candidate ? Promise.resolve() : i2.apply(this, arguments) : (arguments[1] && arguments[1].apply(null), Promise.resolve());
        });
      }
      function Ds(e2, t2) {
        if (!e2.RTCPeerConnection || !e2.RTCPeerConnection.prototype)
          return;
        const i2 = e2.RTCPeerConnection.prototype.setLocalDescription;
        i2 && 0 !== i2.length && (e2.RTCPeerConnection.prototype.setLocalDescription = function() {
          let e3 = arguments[0] || {};
          if ("object" != typeof e3 || e3.type && e3.sdp)
            return i2.apply(this, arguments);
          if (e3 = { type: e3.type, sdp: e3.sdp }, !e3.type)
            switch (this.signalingState) {
              case "stable":
              case "have-local-offer":
              case "have-remote-pranswer":
                e3.type = "offer";
                break;
              default:
                e3.type = "answer";
            }
          if (e3.sdp || "offer" !== e3.type && "answer" !== e3.type)
            return i2.apply(this, [e3]);
          return ("offer" === e3.type ? this.createOffer : this.createAnswer).apply(this).then((e4) => i2.apply(this, [e4]));
        });
      }
      var Ps = Object.freeze({ __proto__: null, removeExtmapAllowMixed: Os, shimAddIceCandidateNullOrEmpty: Ns, shimConnectionState: ws, shimMaxMessageSize: As, shimParameterlessSetLocalDescription: Ds, shimRTCIceCandidate: vs, shimRTCIceCandidateRelayProtocol: ys, shimSendThrowTypeError: bs });
      !function({ window: e2 } = {}, t2 = { shimChrome: true, shimFirefox: true, shimSafari: true }) {
        const i2 = kn, n2 = function(e3) {
          const t3 = { browser: null, version: null };
          if (void 0 === e3 || !e3.navigator)
            return t3.browser = "Not a browser.", t3;
          const { navigator: i3 } = e3;
          if (i3.mozGetUserMedia)
            t3.browser = "firefox", t3.version = Nn(i3.userAgent, /Firefox\/(\d+)\./, 1);
          else if (i3.webkitGetUserMedia || false === e3.isSecureContext && e3.webkitRTCPeerConnection)
            t3.browser = "chrome", t3.version = Nn(i3.userAgent, /Chrom(e|ium)\/(\d+)\./, 2);
          else {
            if (!e3.RTCPeerConnection || !i3.userAgent.match(/AppleWebKit\/(\d+)\./))
              return t3.browser = "Not a supported browser.", t3;
            t3.browser = "safari", t3.version = Nn(i3.userAgent, /AppleWebKit\/(\d+)\./, 1), t3.supportsUnifiedPlan = e3.RTCRtpTransceiver && "currentDirection" in e3.RTCRtpTransceiver.prototype;
          }
          return t3;
        }(e2), s2 = { browserDetails: n2, commonShim: Ps, extractVersion: Nn, disableLog: Pn, disableWarnings: Ln, sdp: Is };
        switch (n2.browser) {
          case "chrome":
            if (!Qn || !zn || !t2.shimChrome)
              return i2("Chrome shim is not included in this adapter release."), s2;
            if (null === n2.version)
              return i2("Chrome shim can not determine version, not shimming."), s2;
            i2("adapter.js shimming chrome."), s2.browserShim = Qn, Ns(e2, n2), Ds(e2), jn(e2, n2), Gn(e2), zn(e2, n2), Wn(e2), Jn(e2, n2), Hn(e2), Kn(e2), Yn(e2), Xn(e2, n2), vs(e2), ys(e2), ws(e2), As(e2, n2), bs(e2), Os(e2, n2);
            break;
          case "firefox":
            if (!ds || !es || !t2.shimFirefox)
              return i2("Firefox shim is not included in this adapter release."), s2;
            i2("adapter.js shimming firefox."), s2.browserShim = ds, Ns(e2, n2), Ds(e2), Zn(e2, n2), es(e2, n2), $n(e2), ns(e2), ts(e2), is(e2), ss(e2), rs(e2), os(e2), as(e2), cs(e2), vs(e2), ws(e2), As(e2, n2), bs(e2);
            break;
          case "safari":
            if (!gs || !t2.shimSafari)
              return i2("Safari shim is not included in this adapter release."), s2;
            i2("adapter.js shimming safari."), s2.browserShim = gs, Ns(e2, n2), Ds(e2), Es(e2), fs(e2), hs(e2), ls(e2), us(e2), ms(e2), ps(e2), Ts(e2), vs(e2), ys(e2), As(e2, n2), bs(e2), Os(e2, n2);
            break;
          default:
            i2("Unsupported browser!");
        }
      }({ window: "undefined" == typeof window ? void 0 : window });
      var Ls = { exports: {} }, ks = wi, Ms = N, Us = Qt.f;
      ks({ target: "Object", stat: true, forced: Object.defineProperty !== Us, sham: !Ms }, { defineProperty: Us });
      var xs = ie.Object, Vs = Ls.exports = function(e2, t2, i2) {
        return xs.defineProperty(e2, t2, i2);
      };
      xs.defineProperty.sham && (Vs.sham = true);
      var Fs = i(Ls.exports), Bs = R, js = Array.isArray || function(e2) {
        return "Array" == Bs(e2);
      }, Gs = TypeError, Ws = Ct, Hs = Qt, Ks = B, Ys = function(e2, t2, i2) {
        var n2 = Ws(t2);
        n2 in e2 ? Hs.f(e2, n2, Ks(0, i2)) : e2[n2] = i2;
      }, qs = w, Js = He, zs = d(Function.toString);
      qs(Js.inspectSource) || (Js.inspectSource = function(e2) {
        return zs(e2);
      });
      var Xs = Js.inspectSource, Qs = d, Zs = n, $s = w, er = ln, tr = Xs, ir = function() {
      }, nr = [], sr = ae("Reflect", "construct"), rr = /^\s*(?:class|function)\b/, or = Qs(rr.exec), ar = !rr.exec(ir), cr = function(e2) {
        if (!$s(e2))
          return false;
        try {
          return sr(ir, nr, e2), true;
        } catch (e3) {
          return false;
        }
      }, dr = function(e2) {
        if (!$s(e2))
          return false;
        switch (er(e2)) {
          case "AsyncFunction":
          case "GeneratorFunction":
          case "AsyncGeneratorFunction":
            return false;
        }
        try {
          return ar || !!or(rr, tr(e2));
        } catch (e3) {
          return true;
        }
      };
      dr.sham = true;
      var lr = !sr || Zs(function() {
        var e2;
        return cr(cr.call) || !cr(Object) || !cr(function() {
          e2 = true;
        }) || e2;
      }) ? dr : cr, ur = js, hr = lr, pr = te, _r = ht("species"), Er = Array, mr = function(e2) {
        var t2;
        return ur(e2) && (t2 = e2.constructor, (hr(t2) && (t2 === Er || ur(t2.prototype)) || pr(t2) && null === (t2 = t2[_r])) && (t2 = void 0)), void 0 === t2 ? Er : t2;
      }, fr = function(e2, t2) {
        return new (mr(e2))(0 === t2 ? 0 : t2);
      }, Tr = n, gr = Ee, Sr = ht("species"), Rr = wi, Cr = n, Ir = js, vr = te, yr = ze, Ar = Bi, br = function(e2) {
        if (e2 > 9007199254740991)
          throw Gs("Maximum allowed index exceeded");
        return e2;
      }, wr = Ys, Or = fr, Nr = function(e2) {
        return gr >= 51 || !Tr(function() {
          var t2 = [];
          return (t2.constructor = {})[Sr] = function() {
            return { foo: 1 };
          }, 1 !== t2[e2](Boolean).foo;
        });
      }, Dr = Ee, Pr = ht("isConcatSpreadable"), Lr = Dr >= 51 || !Cr(function() {
        var e2 = [];
        return e2[Pr] = false, e2.concat()[0] !== e2;
      }), kr = function(e2) {
        if (!vr(e2))
          return false;
        var t2 = e2[Pr];
        return void 0 !== t2 ? !!t2 : Ir(e2);
      };
      Rr({ target: "Array", proto: true, arity: 1, forced: !Lr || !Nr("concat") }, { concat: function(e2) {
        var t2, i2, n2, s2, r2, o2 = yr(this), a2 = Or(o2, 0), c2 = 0;
        for (t2 = -1, n2 = arguments.length; t2 < n2; t2++)
          if (kr(r2 = -1 === t2 ? o2 : arguments[t2]))
            for (s2 = Ar(r2), br(c2 + s2), i2 = 0; i2 < s2; i2++, c2++)
              i2 in r2 && wr(a2, c2, r2[i2]);
          else
            br(c2 + 1), wr(a2, c2++, r2);
        return a2.length = c2, a2;
      } });
      var Mr = {}, Ur = {}, xr = Ze, Vr = Z, Fr = Ki.indexOf, Br = Ur, jr = d([].push), Gr = function(e2, t2) {
        var i2, n2 = Vr(e2), s2 = 0, r2 = [];
        for (i2 in n2)
          !xr(Br, i2) && xr(n2, i2) && jr(r2, i2);
        for (; t2.length > s2; )
          xr(n2, i2 = t2[s2++]) && (~Fr(r2, i2) || jr(r2, i2));
        return r2;
      }, Wr = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"], Hr = Gr, Kr = Wr, Yr = Object.keys || function(e2) {
        return Hr(e2, Kr);
      }, qr = N, Jr = Zt, zr = Qt, Xr = ii, Qr = Z, Zr = Yr;
      Mr.f = qr && !Jr ? Object.defineProperties : function(e2, t2) {
        Xr(e2);
        for (var i2, n2 = Qr(t2), s2 = Zr(t2), r2 = s2.length, o2 = 0; r2 > o2; )
          zr.f(e2, i2 = s2[o2++], n2[i2]);
        return e2;
      };
      var $r, eo = ae("document", "documentElement"), to = nt, io = Ye("keys"), no = function(e2) {
        return io[e2] || (io[e2] = to(e2));
      }, so = ii, ro = Mr, oo = Wr, ao = Ur, co = eo, lo = At, uo = "prototype", ho = "script", po = no("IE_PROTO"), _o = function() {
      }, Eo = function(e2) {
        return "<" + ho + ">" + e2 + "</" + ho + ">";
      }, mo = function(e2) {
        e2.write(Eo("")), e2.close();
        var t2 = e2.parentWindow.Object;
        return e2 = null, t2;
      }, fo = function() {
        try {
          $r = new ActiveXObject("htmlfile");
        } catch (e3) {
        }
        var e2, t2, i2;
        fo = "undefined" != typeof document ? document.domain && $r ? mo($r) : (t2 = lo("iframe"), i2 = "java" + ho + ":", t2.style.display = "none", co.appendChild(t2), t2.src = String(i2), (e2 = t2.contentWindow.document).open(), e2.write(Eo("document.F=Object")), e2.close(), e2.F) : mo($r);
        for (var n2 = oo.length; n2--; )
          delete fo[uo][oo[n2]];
        return fo();
      };
      ao[po] = true;
      var To = Object.create || function(e2, t2) {
        var i2;
        return null !== e2 ? (_o[uo] = so(e2), i2 = new _o(), _o[uo] = null, i2[po] = e2) : i2 = fo(), void 0 === t2 ? i2 : ro.f(i2, t2);
      }, go = {}, So = Gr, Ro = Wr.concat("length", "prototype");
      go.f = Object.getOwnPropertyNames || function(e2) {
        return So(e2, Ro);
      };
      var Co = {}, Io = Ui, vo = Bi, yo = Ys, Ao = Array, bo = Math.max, wo = function(e2, t2, i2) {
        for (var n2 = vo(e2), s2 = Io(t2, n2), r2 = Io(void 0 === i2 ? n2 : i2, n2), o2 = Ao(bo(r2 - s2, 0)), a2 = 0; s2 < r2; s2++, a2++)
          yo(o2, a2, e2[s2]);
        return o2.length = a2, o2;
      }, Oo = R, No = Z, Do = go.f, Po = wo, Lo = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
      Co.f = function(e2) {
        return Lo && "Window" == Oo(e2) ? function(e3) {
          try {
            return Do(e3);
          } catch (e4) {
            return Po(Lo);
          }
        }(e2) : Do(No(e2));
      };
      var ko = {};
      ko.f = Object.getOwnPropertySymbols;
      var Mo = mi, Uo = function(e2, t2, i2, n2) {
        return n2 && n2.enumerable ? e2[t2] = i2 : Mo(e2, t2, i2), e2;
      }, xo = Qt, Vo = function(e2, t2, i2) {
        return xo.f(e2, t2, i2);
      }, Fo = {}, Bo = ht;
      Fo.f = Bo;
      var jo, Go, Wo, Ho = ie, Ko = Ze, Yo = Fo, qo = Qt.f, Jo = function(e2) {
        var t2 = Ho.Symbol || (Ho.Symbol = {});
        Ko(t2, e2) || qo(t2, e2, { value: Yo.f(e2) });
      }, zo = L, Xo = ae, Qo = ht, Zo = Uo, $o = function() {
        var e2 = Xo("Symbol"), t2 = e2 && e2.prototype, i2 = t2 && t2.valueOf, n2 = Qo("toPrimitive");
        t2 && !t2[n2] && Zo(t2, n2, function(e3) {
          return zo(i2, this);
        }, { arity: 1 });
      }, ea = ln, ta = nn ? {}.toString : function() {
        return "[object " + ea(this) + "]";
      }, ia = nn, na = Qt.f, sa = mi, ra = Ze, oa = ta, aa = ht("toStringTag"), ca = function(e2, t2, i2, n2) {
        if (e2) {
          var s2 = i2 ? e2 : e2.prototype;
          ra(s2, aa) || na(s2, aa, { configurable: true, value: t2 }), n2 && !ia && sa(s2, "toString", oa);
        }
      }, da = w, la = h.WeakMap, ua = da(la) && /native code/.test(String(la)), ha = h, pa = te, _a = mi, Ea = Ze, ma = He, fa = no, Ta = Ur, ga = "Object already initialized", Sa = ha.TypeError, Ra = ha.WeakMap;
      if (ua || ma.state) {
        var Ca = ma.state || (ma.state = new Ra());
        Ca.get = Ca.get, Ca.has = Ca.has, Ca.set = Ca.set, jo = function(e2, t2) {
          if (Ca.has(e2))
            throw Sa(ga);
          return t2.facade = e2, Ca.set(e2, t2), t2;
        }, Go = function(e2) {
          return Ca.get(e2) || {};
        }, Wo = function(e2) {
          return Ca.has(e2);
        };
      } else {
        var Ia = fa("state");
        Ta[Ia] = true, jo = function(e2, t2) {
          if (Ea(e2, Ia))
            throw Sa(ga);
          return t2.facade = e2, _a(e2, Ia, t2), t2;
        }, Go = function(e2) {
          return Ea(e2, Ia) ? e2[Ia] : {};
        }, Wo = function(e2) {
          return Ea(e2, Ia);
        };
      }
      var va = { set: jo, get: Go, has: Wo, enforce: function(e2) {
        return Wo(e2) ? Go(e2) : jo(e2, {});
      }, getterFor: function(e2) {
        return function(t2) {
          var i2;
          if (!pa(t2) || (i2 = Go(t2)).type !== e2)
            throw Sa("Incompatible receiver, " + e2 + " required");
          return i2;
        };
      } }, ya = Xt, Aa = K, ba = ze, wa = Bi, Oa = fr, Na = d([].push), Da = function(e2) {
        var t2 = 1 == e2, i2 = 2 == e2, n2 = 3 == e2, s2 = 4 == e2, r2 = 6 == e2, o2 = 7 == e2, a2 = 5 == e2 || r2;
        return function(c2, d2, l2, u2) {
          for (var h2, p2, _2 = ba(c2), E2 = Aa(_2), m2 = ya(d2, l2), f2 = wa(E2), T2 = 0, g2 = u2 || Oa, S2 = t2 ? g2(c2, f2) : i2 || o2 ? g2(c2, 0) : void 0; f2 > T2; T2++)
            if ((a2 || T2 in E2) && (p2 = m2(h2 = E2[T2], T2, _2), e2))
              if (t2)
                S2[T2] = p2;
              else if (p2)
                switch (e2) {
                  case 3:
                    return true;
                  case 5:
                    return h2;
                  case 6:
                    return T2;
                  case 2:
                    Na(S2, h2);
                }
              else
                switch (e2) {
                  case 4:
                    return false;
                  case 7:
                    Na(S2, h2);
                }
          return r2 ? -1 : n2 || s2 ? s2 : S2;
        };
      }, Pa = { forEach: Da(0), map: Da(1), filter: Da(2), some: Da(3), every: Da(4), find: Da(5), findIndex: Da(6), filterReject: Da(7) }, La = wi, ka = h, Ma = L, Ua = d, xa = N, Va = ge, Fa = n, Ba = Ze, ja = l, Ga = ii, Wa = Z, Ha = Ct, Ka = pn, Ya = B, qa = To, Ja = Yr, za = go, Xa = Co, Qa = ko, Za = O, $a = Qt, ec = Mr, tc = k, ic = Uo, nc = Vo, sc = Ye, rc = Ur, oc = nt, ac = ht, cc = Fo, dc = Jo, lc = $o, uc = ca, hc = va, pc = Pa.forEach, _c = no("hidden"), Ec = "Symbol", mc = "prototype", fc = hc.set, Tc = hc.getterFor(Ec), gc = Object[mc], Sc = ka.Symbol, Rc = Sc && Sc[mc], Cc = ka.TypeError, Ic = ka.QObject, vc = Za.f, yc = $a.f, Ac = Xa.f, bc = tc.f, wc = Ua([].push), Oc = sc("symbols"), Nc = sc("op-symbols"), Dc = sc("wks"), Pc = !Ic || !Ic[mc] || !Ic[mc].findChild, Lc = xa && Fa(function() {
        return 7 != qa(yc({}, "a", { get: function() {
          return yc(this, "a", { value: 7 }).a;
        } })).a;
      }) ? function(e2, t2, i2) {
        var n2 = vc(gc, t2);
        n2 && delete gc[t2], yc(e2, t2, i2), n2 && e2 !== gc && yc(gc, t2, n2);
      } : yc, kc = function(e2, t2) {
        var i2 = Oc[e2] = qa(Rc);
        return fc(i2, { type: Ec, tag: e2, description: t2 }), xa || (i2.description = t2), i2;
      }, Mc = function(e2, t2, i2) {
        e2 === gc && Mc(Nc, t2, i2), Ga(e2);
        var n2 = Ha(t2);
        return Ga(i2), Ba(Oc, n2) ? (i2.enumerable ? (Ba(e2, _c) && e2[_c][n2] && (e2[_c][n2] = false), i2 = qa(i2, { enumerable: Ya(0, false) })) : (Ba(e2, _c) || yc(e2, _c, Ya(1, {})), e2[_c][n2] = true), Lc(e2, n2, i2)) : yc(e2, n2, i2);
      }, Uc = function(e2, t2) {
        Ga(e2);
        var i2 = Wa(t2), n2 = Ja(i2).concat(Bc(i2));
        return pc(n2, function(t3) {
          xa && !Ma(xc, i2, t3) || Mc(e2, t3, i2[t3]);
        }), e2;
      }, xc = function(e2) {
        var t2 = Ha(e2), i2 = Ma(bc, this, t2);
        return !(this === gc && Ba(Oc, t2) && !Ba(Nc, t2)) && (!(i2 || !Ba(this, t2) || !Ba(Oc, t2) || Ba(this, _c) && this[_c][t2]) || i2);
      }, Vc = function(e2, t2) {
        var i2 = Wa(e2), n2 = Ha(t2);
        if (i2 !== gc || !Ba(Oc, n2) || Ba(Nc, n2)) {
          var s2 = vc(i2, n2);
          return !s2 || !Ba(Oc, n2) || Ba(i2, _c) && i2[_c][n2] || (s2.enumerable = true), s2;
        }
      }, Fc = function(e2) {
        var t2 = Ac(Wa(e2)), i2 = [];
        return pc(t2, function(e3) {
          Ba(Oc, e3) || Ba(rc, e3) || wc(i2, e3);
        }), i2;
      }, Bc = function(e2) {
        var t2 = e2 === gc, i2 = Ac(t2 ? Nc : Wa(e2)), n2 = [];
        return pc(i2, function(e3) {
          !Ba(Oc, e3) || t2 && !Ba(gc, e3) || wc(n2, Oc[e3]);
        }), n2;
      };
      Va || (Sc = function() {
        if (ja(Rc, this))
          throw Cc("Symbol is not a constructor");
        var e2 = arguments.length && void 0 !== arguments[0] ? Ka(arguments[0]) : void 0, t2 = oc(e2), i2 = function(e3) {
          this === gc && Ma(i2, Nc, e3), Ba(this, _c) && Ba(this[_c], t2) && (this[_c][t2] = false), Lc(this, t2, Ya(1, e3));
        };
        return xa && Pc && Lc(gc, t2, { configurable: true, set: i2 }), kc(t2, e2);
      }, ic(Rc = Sc[mc], "toString", function() {
        return Tc(this).tag;
      }), ic(Sc, "withoutSetter", function(e2) {
        return kc(oc(e2), e2);
      }), tc.f = xc, $a.f = Mc, ec.f = Uc, Za.f = Vc, za.f = Xa.f = Fc, Qa.f = Bc, cc.f = function(e2) {
        return kc(ac(e2), e2);
      }, xa && nc(Rc, "description", { configurable: true, get: function() {
        return Tc(this).description;
      } })), La({ global: true, constructor: true, wrap: true, forced: !Va, sham: !Va }, { Symbol: Sc }), pc(Ja(Dc), function(e2) {
        dc(e2);
      }), La({ target: Ec, stat: true, forced: !Va }, { useSetter: function() {
        Pc = true;
      }, useSimple: function() {
        Pc = false;
      } }), La({ target: "Object", stat: true, forced: !Va, sham: !xa }, { create: function(e2, t2) {
        return void 0 === t2 ? qa(e2) : Uc(qa(e2), t2);
      }, defineProperty: Mc, defineProperties: Uc, getOwnPropertyDescriptor: Vc }), La({ target: "Object", stat: true, forced: !Va }, { getOwnPropertyNames: Fc }), lc(), uc(Sc, Ec), rc[_c] = true;
      var jc = ge && !!Symbol.for && !!Symbol.keyFor, Gc = wi, Wc = ae, Hc = Ze, Kc = pn, Yc = Ye, qc = jc, Jc = Yc("string-to-symbol-registry"), zc = Yc("symbol-to-string-registry");
      Gc({ target: "Symbol", stat: true, forced: !qc }, { for: function(e2) {
        var t2 = Kc(e2);
        if (Hc(Jc, t2))
          return Jc[t2];
        var i2 = Wc("Symbol")(t2);
        return Jc[t2] = i2, zc[i2] = t2, i2;
      } });
      var Xc = wi, Qc = Ze, Zc = ye, $c = be, ed = jc, td = Ye("symbol-to-string-registry");
      Xc({ target: "Symbol", stat: true, forced: !ed }, { keyFor: function(e2) {
        if (!Zc(e2))
          throw TypeError($c(e2) + " is not a symbol");
        if (Qc(td, e2))
          return td[e2];
      } });
      var id = d([].slice), nd = js, sd = w, rd = R, od = pn, ad = d([].push), cd = wi, dd = ae, ld = f, ud = L, hd = d, pd = n, _d = w, Ed = ye, md = id, fd = function(e2) {
        if (sd(e2))
          return e2;
        if (nd(e2)) {
          for (var t2 = e2.length, i2 = [], n2 = 0; n2 < t2; n2++) {
            var s2 = e2[n2];
            "string" == typeof s2 ? ad(i2, s2) : "number" != typeof s2 && "Number" != rd(s2) && "String" != rd(s2) || ad(i2, od(s2));
          }
          var r2 = i2.length, o2 = true;
          return function(e3, t3) {
            if (o2)
              return o2 = false, t3;
            if (nd(this))
              return t3;
            for (var n3 = 0; n3 < r2; n3++)
              if (i2[n3] === e3)
                return t3;
          };
        }
      }, Td = ge, gd = String, Sd = dd("JSON", "stringify"), Rd = hd(/./.exec), Cd = hd("".charAt), Id = hd("".charCodeAt), vd = hd("".replace), yd = hd(1 .toString), Ad = /[\uD800-\uDFFF]/g, bd = /^[\uD800-\uDBFF]$/, wd = /^[\uDC00-\uDFFF]$/, Od = !Td || pd(function() {
        var e2 = dd("Symbol")();
        return "[null]" != Sd([e2]) || "{}" != Sd({ a: e2 }) || "{}" != Sd(Object(e2));
      }), Nd = pd(function() {
        return '"\\udf06\\ud834"' !== Sd("\uDF06\uD834") || '"\\udead"' !== Sd("\uDEAD");
      }), Dd = function(e2, t2) {
        var i2 = md(arguments), n2 = fd(t2);
        if (_d(n2) || void 0 !== e2 && !Ed(e2))
          return i2[1] = function(e3, t3) {
            if (_d(n2) && (t3 = ud(n2, this, gd(e3), t3)), !Ed(t3))
              return t3;
          }, ld(Sd, null, i2);
      }, Pd = function(e2, t2, i2) {
        var n2 = Cd(i2, t2 - 1), s2 = Cd(i2, t2 + 1);
        return Rd(bd, e2) && !Rd(wd, s2) || Rd(wd, e2) && !Rd(bd, n2) ? "\\u" + yd(Id(e2, 0), 16) : e2;
      };
      Sd && cd({ target: "JSON", stat: true, arity: 3, forced: Od || Nd }, { stringify: function(e2, t2, i2) {
        var n2 = md(arguments), s2 = ld(Od ? Dd : Sd, null, n2);
        return Nd && "string" == typeof s2 ? vd(s2, Ad, Pd) : s2;
      } });
      var Ld = ko, kd = ze;
      wi({ target: "Object", stat: true, forced: !ge || n(function() {
        Ld.f(1);
      }) }, { getOwnPropertySymbols: function(e2) {
        var t2 = Ld.f;
        return t2 ? t2(kd(e2)) : [];
      } }), Jo("asyncIterator"), Jo("hasInstance"), Jo("isConcatSpreadable"), Jo("iterator"), Jo("match"), Jo("matchAll"), Jo("replace"), Jo("search"), Jo("species"), Jo("split");
      var Md = $o;
      Jo("toPrimitive"), Md();
      var Ud = ae, xd = ca;
      Jo("toStringTag"), xd(Ud("Symbol"), "Symbol"), Jo("unscopables"), ca(h.JSON, "JSON", true);
      var Vd, Fd, Bd, jd = ie.Symbol, Gd = {}, Wd = N, Hd = Ze, Kd = Function.prototype, Yd = Wd && Object.getOwnPropertyDescriptor, qd = Hd(Kd, "name"), Jd = { EXISTS: qd, PROPER: qd && "something" === (function() {
      }).name, CONFIGURABLE: qd && (!Wd || Wd && Yd(Kd, "name").configurable) }, zd = !n(function() {
        function e2() {
        }
        return e2.prototype.constructor = null, Object.getPrototypeOf(new e2()) !== e2.prototype;
      }), Xd = Ze, Qd = w, Zd = ze, $d = zd, el = no("IE_PROTO"), tl = Object, il = tl.prototype, nl = $d ? tl.getPrototypeOf : function(e2) {
        var t2 = Zd(e2);
        if (Xd(t2, el))
          return t2[el];
        var i2 = t2.constructor;
        return Qd(i2) && t2 instanceof i2 ? i2.prototype : t2 instanceof tl ? il : null;
      }, sl = n, rl = w, ol = te, al = To, cl = nl, dl = Uo, ll = ht("iterator"), ul = false;
      [].keys && ("next" in (Bd = [].keys()) ? (Fd = cl(cl(Bd))) !== Object.prototype && (Vd = Fd) : ul = true);
      var hl = !ol(Vd) || sl(function() {
        var e2 = {};
        return Vd[ll].call(e2) !== e2;
      });
      rl((Vd = hl ? {} : al(Vd))[ll]) || dl(Vd, ll, function() {
        return this;
      });
      var pl = { IteratorPrototype: Vd, BUGGY_SAFARI_ITERATORS: ul }, _l = pl.IteratorPrototype, El = To, ml = B, fl = ca, Tl = Gd, gl = function() {
        return this;
      }, Sl = d, Rl = De, Cl = w, Il = String, vl = TypeError, yl = function(e2, t2, i2) {
        try {
          return Sl(Rl(Object.getOwnPropertyDescriptor(e2, t2)[i2]));
        } catch (e3) {
        }
      }, Al = ii, bl = function(e2) {
        if ("object" == typeof e2 || Cl(e2))
          return e2;
        throw vl("Can't set " + Il(e2) + " as a prototype");
      }, wl = Object.setPrototypeOf || ("__proto__" in {} ? function() {
        var e2, t2 = false, i2 = {};
        try {
          (e2 = yl(Object.prototype, "__proto__", "set"))(i2, []), t2 = i2 instanceof Array;
        } catch (e3) {
        }
        return function(i3, n2) {
          return Al(i3), bl(n2), t2 ? e2(i3, n2) : i3.__proto__ = n2, i3;
        };
      }() : void 0), Ol = wi, Nl = L, Dl = Jd, Pl = function(e2, t2, i2, n2) {
        var s2 = t2 + " Iterator";
        return e2.prototype = El(_l, { next: ml(+!n2, i2) }), fl(e2, s2, false, true), Tl[s2] = gl, e2;
      }, Ll = nl, kl = ca, Ml = Uo, Ul = Gd, xl = pl, Vl = Dl.PROPER, Fl = xl.BUGGY_SAFARI_ITERATORS, Bl = ht("iterator"), jl = "keys", Gl = "values", Wl = "entries", Hl = function() {
        return this;
      }, Kl = function(e2, t2, i2, n2, s2, r2, o2) {
        Pl(i2, t2, n2);
        var a2, c2, d2, l2 = function(e3) {
          if (e3 === s2 && E2)
            return E2;
          if (!Fl && e3 in p2)
            return p2[e3];
          switch (e3) {
            case jl:
            case Gl:
            case Wl:
              return function() {
                return new i2(this, e3);
              };
          }
          return function() {
            return new i2(this);
          };
        }, u2 = t2 + " Iterator", h2 = false, p2 = e2.prototype, _2 = p2[Bl] || p2["@@iterator"] || s2 && p2[s2], E2 = !Fl && _2 || l2(s2), m2 = "Array" == t2 && p2.entries || _2;
        if (m2 && (a2 = Ll(m2.call(new e2()))) !== Object.prototype && a2.next && (kl(a2, u2, true, true), Ul[u2] = Hl), Vl && s2 == Gl && _2 && _2.name !== Gl && (h2 = true, E2 = function() {
          return Nl(_2, this);
        }), s2)
          if (c2 = { values: l2(Gl), keys: r2 ? E2 : l2(jl), entries: l2(Wl) }, o2)
            for (d2 in c2)
              (Fl || h2 || !(d2 in p2)) && Ml(p2, d2, c2[d2]);
          else
            Ol({ target: t2, proto: true, forced: Fl || h2 }, c2);
        return o2 && p2[Bl] !== E2 && Ml(p2, Bl, E2, { name: s2 }), Ul[t2] = E2, c2;
      }, Yl = function(e2, t2) {
        return { value: e2, done: t2 };
      }, ql = Z, Jl = Gd, zl = va;
      Qt.f;
      var Xl = Kl, Ql = Yl, Zl = "Array Iterator", $l = zl.set, eu = zl.getterFor(Zl);
      Xl(Array, "Array", function(e2, t2) {
        $l(this, { type: Zl, target: ql(e2), index: 0, kind: t2 });
      }, function() {
        var e2 = eu(this), t2 = e2.target, i2 = e2.kind, n2 = e2.index++;
        return !t2 || n2 >= t2.length ? (e2.target = void 0, Ql(void 0, true)) : Ql("keys" == i2 ? n2 : "values" == i2 ? t2[n2] : [n2, t2[n2]], false);
      }, "values"), Jl.Arguments = Jl.Array;
      var tu = { CSSRuleList: 0, CSSStyleDeclaration: 0, CSSValueList: 0, ClientRectList: 0, DOMRectList: 0, DOMStringList: 0, DOMTokenList: 1, DataTransferItemList: 0, FileList: 0, HTMLAllCollection: 0, HTMLCollection: 0, HTMLFormElement: 0, HTMLSelectElement: 0, MediaList: 0, MimeTypeArray: 0, NamedNodeMap: 0, NodeList: 1, PaintRequestList: 0, Plugin: 0, PluginArray: 0, SVGLengthList: 0, SVGNumberList: 0, SVGPathSegList: 0, SVGPointList: 0, SVGStringList: 0, SVGTransformList: 0, SourceBufferList: 0, StyleSheetList: 0, TextTrackCueList: 0, TextTrackList: 0, TouchList: 0 }, iu = h, nu = ln, su = mi, ru = Gd, ou = ht("toStringTag");
      for (var au in tu) {
        var cu = iu[au], du = cu && cu.prototype;
        du && nu(du) !== ou && su(du, ou, au), ru[au] = ru.Array;
      }
      var lu = jd, uu = ht, hu = Qt.f, pu = uu("metadata"), _u = Function.prototype;
      void 0 === _u[pu] && hu(_u, pu, { value: null }), Jo("dispose"), Jo("metadata");
      var Eu = lu;
      Jo("asyncDispose");
      var mu = d, fu = ae("Symbol"), Tu = fu.keyFor, gu = mu(fu.prototype.valueOf), Su = fu.isRegisteredSymbol || function(e2) {
        try {
          return void 0 !== Tu(gu(e2));
        } catch (e3) {
          return false;
        }
      };
      wi({ target: "Symbol", stat: true }, { isRegisteredSymbol: Su });
      for (var Ru = Ye, Cu = ae, Iu = d, vu = ye, yu = ht, Au = Cu("Symbol"), bu = Au.isWellKnownSymbol, wu = Cu("Object", "getOwnPropertyNames"), Ou = Iu(Au.prototype.valueOf), Nu = Ru("wks"), Du = 0, Pu = wu(Au), Lu = Pu.length; Du < Lu; Du++)
        try {
          var ku = Pu[Du];
          vu(Au[ku]) && yu(ku);
        } catch (e2) {
        }
      var Mu = function(e2) {
        if (bu && bu(e2))
          return true;
        try {
          for (var t2 = Ou(e2), i2 = 0, n2 = wu(Nu), s2 = n2.length; i2 < s2; i2++)
            if (Nu[n2[i2]] == t2)
              return true;
        } catch (e3) {
        }
        return false;
      };
      wi({ target: "Symbol", stat: true, forced: true }, { isWellKnownSymbol: Mu }), Jo("matcher"), Jo("observable"), wi({ target: "Symbol", stat: true, name: "isRegisteredSymbol" }, { isRegistered: Su }), wi({ target: "Symbol", stat: true, name: "isWellKnownSymbol", forced: true }, { isWellKnown: Mu }), Jo("metadataKey"), Jo("patternMatch"), Jo("replaceAll");
      var Uu = i(Eu), xu = d, Vu = Pi, Fu = pn, Bu = z, ju = xu("".charAt), Gu = xu("".charCodeAt), Wu = xu("".slice), Hu = function(e2) {
        return function(t2, i2) {
          var n2, s2, r2 = Fu(Bu(t2)), o2 = Vu(i2), a2 = r2.length;
          return o2 < 0 || o2 >= a2 ? e2 ? "" : void 0 : (n2 = Gu(r2, o2)) < 55296 || n2 > 56319 || o2 + 1 === a2 || (s2 = Gu(r2, o2 + 1)) < 56320 || s2 > 57343 ? e2 ? ju(r2, o2) : n2 : e2 ? Wu(r2, o2, o2 + 2) : s2 - 56320 + (n2 - 55296 << 10) + 65536;
        };
      }, Ku = { codeAt: Hu(false), charAt: Hu(true) }.charAt, Yu = pn, qu = va, Ju = Kl, zu = Yl, Xu = "String Iterator", Qu = qu.set, Zu = qu.getterFor(Xu);
      Ju(String, "String", function(e2) {
        Qu(this, { type: Xu, string: Yu(e2), index: 0 });
      }, function() {
        var e2, t2 = Zu(this), i2 = t2.string, n2 = t2.index;
        return n2 >= i2.length ? zu(void 0, true) : (e2 = Ku(i2, n2), t2.index += e2.length, zu(e2, false));
      });
      var $u = i(Fo.f("iterator"));
      function eh(e2) {
        return eh = "function" == typeof Uu && "symbol" == typeof $u ? function(e3) {
          return typeof e3;
        } : function(e3) {
          return e3 && "function" == typeof Uu && e3.constructor === Uu && e3 !== Uu.prototype ? "symbol" : typeof e3;
        }, eh(e2);
      }
      var th = i(Fo.f("toPrimitive"));
      function ih(e2) {
        var t2 = function(e3, t3) {
          if ("object" !== eh(e3) || null === e3)
            return e3;
          var i2 = e3[th];
          if (void 0 !== i2) {
            var n2 = i2.call(e3, t3 || "default");
            if ("object" !== eh(n2))
              return n2;
            throw new TypeError("@@toPrimitive must return a primitive value.");
          }
          return ("string" === t3 ? String : Number)(e3);
        }(e2, "string");
        return "symbol" === eh(t2) ? t2 : String(t2);
      }
      function nh(e2, t2, i2) {
        return (t2 = ih(t2)) in e2 ? Fs(e2, t2, { value: i2, enumerable: true, configurable: true, writable: true }) : e2[t2] = i2, e2;
      }
      var sh = Ji("Array").keys, rh = ln, oh = Ze, ah = l, ch = sh, dh = Array.prototype, lh = { DOMTokenList: true, NodeList: true }, uh = i(function(e2) {
        var t2 = e2.keys;
        return e2 === dh || ah(dh, e2) && t2 === dh.keys || oh(lh, rh(e2)) ? ch : t2;
      }), hh = be, ph = TypeError, _h = wo, Eh = Math.floor, mh = function(e2, t2) {
        var i2 = e2.length, n2 = Eh(i2 / 2);
        return i2 < 8 ? fh(e2, t2) : Th(e2, mh(_h(e2, 0, n2), t2), mh(_h(e2, n2), t2), t2);
      }, fh = function(e2, t2) {
        for (var i2, n2, s2 = e2.length, r2 = 1; r2 < s2; ) {
          for (n2 = r2, i2 = e2[r2]; n2 && t2(e2[n2 - 1], i2) > 0; )
            e2[n2] = e2[--n2];
          n2 !== r2++ && (e2[n2] = i2);
        }
        return e2;
      }, Th = function(e2, t2, i2, n2) {
        for (var s2 = t2.length, r2 = i2.length, o2 = 0, a2 = 0; o2 < s2 || a2 < r2; )
          e2[o2 + a2] = o2 < s2 && a2 < r2 ? n2(t2[o2], i2[a2]) <= 0 ? t2[o2++] : i2[a2++] : o2 < s2 ? t2[o2++] : i2[a2++];
        return e2;
      }, gh = mh, Sh = n, Rh = function(e2, t2) {
        var i2 = [][e2];
        return !!i2 && Sh(function() {
          i2.call(null, t2 || function() {
            return 1;
          }, 1);
        });
      }, Ch = ce.match(/firefox\/(\d+)/i), Ih = !!Ch && +Ch[1], vh = /MSIE|Trident/.test(ce), yh = ce.match(/AppleWebKit\/(\d+)\./), Ah = !!yh && +yh[1], bh = wi, wh = d, Oh = De, Nh = ze, Dh = Bi, Ph = function(e2, t2) {
        if (!delete e2[t2])
          throw ph("Cannot delete property " + hh(t2) + " of " + hh(e2));
      }, Lh = pn, kh = n, Mh = gh, Uh = Rh, xh = Ih, Vh = vh, Fh = Ee, Bh = Ah, jh = [], Gh = wh(jh.sort), Wh = wh(jh.push), Hh = kh(function() {
        jh.sort(void 0);
      }), Kh = kh(function() {
        jh.sort(null);
      }), Yh = Uh("sort"), qh = !kh(function() {
        if (Fh)
          return Fh < 70;
        if (!(xh && xh > 3)) {
          if (Vh)
            return true;
          if (Bh)
            return Bh < 603;
          var e2, t2, i2, n2, s2 = "";
          for (e2 = 65; e2 < 76; e2++) {
            switch (t2 = String.fromCharCode(e2), e2) {
              case 66:
              case 69:
              case 70:
              case 72:
                i2 = 3;
                break;
              case 68:
              case 71:
                i2 = 4;
                break;
              default:
                i2 = 2;
            }
            for (n2 = 0; n2 < 47; n2++)
              jh.push({ k: t2 + n2, v: i2 });
          }
          for (jh.sort(function(e3, t3) {
            return t3.v - e3.v;
          }), n2 = 0; n2 < jh.length; n2++)
            t2 = jh[n2].k.charAt(0), s2.charAt(s2.length - 1) !== t2 && (s2 += t2);
          return "DGBEFHACIJK" !== s2;
        }
      });
      bh({ target: "Array", proto: true, forced: Hh || !Kh || !Yh || !qh }, { sort: function(e2) {
        void 0 !== e2 && Oh(e2);
        var t2 = Nh(this);
        if (qh)
          return void 0 === e2 ? Gh(t2) : Gh(t2, e2);
        var i2, n2, s2 = [], r2 = Dh(t2);
        for (n2 = 0; n2 < r2; n2++)
          n2 in t2 && Wh(s2, t2[n2]);
        for (Mh(s2, /* @__PURE__ */ function(e3) {
          return function(t3, i3) {
            return void 0 === i3 ? -1 : void 0 === t3 ? 1 : void 0 !== e3 ? +e3(t3, i3) || 0 : Lh(t3) > Lh(i3) ? 1 : -1;
          };
        }(e2)), i2 = Dh(s2), n2 = 0; n2 < i2; )
          t2[n2] = s2[n2++];
        for (; n2 < r2; )
          Ph(t2, n2++);
        return t2;
      } });
      var Jh = Ji("Array").sort, zh = l, Xh = Jh, Qh = Array.prototype, Zh = i(function(e2) {
        var t2 = e2.sort;
        return e2 === Qh || zh(Qh, e2) && t2 === Qh.sort ? Xh : t2;
      }), $h = ae, ep = go, tp = ko, ip = ii, np = d([].concat), sp = $h("Reflect", "ownKeys") || function(e2) {
        var t2 = ep.f(ip(e2)), i2 = tp.f;
        return i2 ? np(t2, i2(e2)) : t2;
      }, rp = Ze, op = sp, ap = O, cp = Qt, dp = te, lp = mi, up = Error, hp = d("".replace), pp = String(up("zxcasd").stack), _p = /\n\s*at [^:]*:[^\n]*/, Ep = _p.test(pp), mp = B, fp = !n(function() {
        var e2 = Error("a");
        return !("stack" in e2) || (Object.defineProperty(e2, "stack", mp(1, 7)), 7 !== e2.stack);
      }), Tp = mi, gp = function(e2, t2) {
        if (Ep && "string" == typeof e2 && !up.prepareStackTrace)
          for (; t2--; )
            e2 = hp(e2, _p, "");
        return e2;
      }, Sp = fp, Rp = Error.captureStackTrace, Cp = Gd, Ip = ht("iterator"), vp = Array.prototype, yp = ln, Ap = ke, bp = Y, wp = Gd, Op = ht("iterator"), Np = function(e2) {
        if (!bp(e2))
          return Ap(e2, Op) || Ap(e2, "@@iterator") || wp[yp(e2)];
      }, Dp = L, Pp = De, Lp = ii, kp = be, Mp = Np, Up = TypeError, xp = L, Vp = ii, Fp = ke, Bp = Xt, jp = L, Gp = ii, Wp = be, Hp = function(e2) {
        return void 0 !== e2 && (Cp.Array === e2 || vp[Ip] === e2);
      }, Kp = Bi, Yp = l, qp = function(e2, t2) {
        var i2 = arguments.length < 2 ? Mp(e2) : t2;
        if (Pp(i2))
          return Lp(Dp(i2, e2));
        throw Up(kp(e2) + " is not iterable");
      }, Jp = Np, zp = function(e2, t2, i2) {
        var n2, s2;
        Vp(e2);
        try {
          if (!(n2 = Fp(e2, "return"))) {
            if ("throw" === t2)
              throw i2;
            return i2;
          }
          n2 = xp(n2, e2);
        } catch (e3) {
          s2 = true, n2 = e3;
        }
        if ("throw" === t2)
          throw i2;
        if (s2)
          throw n2;
        return Vp(n2), i2;
      }, Xp = TypeError, Qp = function(e2, t2) {
        this.stopped = e2, this.result = t2;
      }, Zp = Qp.prototype, $p = function(e2, t2, i2) {
        var n2, s2, r2, o2, a2, c2, d2, l2 = i2 && i2.that, u2 = !(!i2 || !i2.AS_ENTRIES), h2 = !(!i2 || !i2.IS_RECORD), p2 = !(!i2 || !i2.IS_ITERATOR), _2 = !(!i2 || !i2.INTERRUPTED), E2 = Bp(t2, l2), m2 = function(e3) {
          return n2 && zp(n2, "normal", e3), new Qp(true, e3);
        }, f2 = function(e3) {
          return u2 ? (Gp(e3), _2 ? E2(e3[0], e3[1], m2) : E2(e3[0], e3[1])) : _2 ? E2(e3, m2) : E2(e3);
        };
        if (h2)
          n2 = e2.iterator;
        else if (p2)
          n2 = e2;
        else {
          if (!(s2 = Jp(e2)))
            throw Xp(Wp(e2) + " is not iterable");
          if (Hp(s2)) {
            for (r2 = 0, o2 = Kp(e2); o2 > r2; r2++)
              if ((a2 = f2(e2[r2])) && Yp(Zp, a2))
                return a2;
            return new Qp(false);
          }
          n2 = qp(e2, s2);
        }
        for (c2 = h2 ? e2.next : n2.next; !(d2 = jp(c2, n2)).done; ) {
          try {
            a2 = f2(d2.value);
          } catch (e3) {
            zp(n2, "throw", e3);
          }
          if ("object" == typeof a2 && a2 && Yp(Zp, a2))
            return a2;
        }
        return new Qp(false);
      }, e_ = pn, t_ = wi, i_ = l, n_ = nl, s_ = wl, r_ = function(e2, t2, i2) {
        for (var n2 = op(t2), s2 = cp.f, r2 = ap.f, o2 = 0; o2 < n2.length; o2++) {
          var a2 = n2[o2];
          rp(e2, a2) || i2 && rp(i2, a2) || s2(e2, a2, r2(t2, a2));
        }
      }, o_ = To, a_ = mi, c_ = B, d_ = function(e2, t2) {
        dp(t2) && "cause" in t2 && lp(e2, "cause", t2.cause);
      }, l_ = function(e2, t2, i2, n2) {
        Sp && (Rp ? Rp(e2, t2) : Tp(e2, "stack", gp(i2, n2)));
      }, u_ = $p, h_ = function(e2, t2) {
        return void 0 === e2 ? arguments.length < 2 ? "" : t2 : e_(e2);
      }, p_ = ht("toStringTag"), __ = Error, E_ = [].push, m_ = function(e2, t2) {
        var i2, n2 = i_(f_, this);
        s_ ? i2 = s_(__(), n2 ? n_(this) : f_) : (i2 = n2 ? this : o_(f_), a_(i2, p_, "Error")), void 0 !== t2 && a_(i2, "message", h_(t2)), l_(i2, m_, i2.stack, 1), arguments.length > 2 && d_(i2, arguments[2]);
        var s2 = [];
        return u_(e2, E_, { that: s2 }), a_(i2, "errors", s2), i2;
      };
      s_ ? s_(m_, __) : r_(m_, __, { name: true });
      var f_ = m_.prototype = o_(__.prototype, { constructor: c_(1, m_), message: c_(1, ""), name: c_(1, "AggregateError") });
      t_({ global: true, constructor: true, arity: 2 }, { AggregateError: m_ });
      var T_, g_, S_, R_, C_ = "undefined" != typeof process && "process" == R(process), I_ = ae, v_ = Vo, y_ = N, A_ = ht("species"), b_ = l, w_ = TypeError, O_ = lr, N_ = be, D_ = TypeError, P_ = ii, L_ = function(e2) {
        if (O_(e2))
          return e2;
        throw D_(N_(e2) + " is not a constructor");
      }, k_ = Y, M_ = ht("species"), U_ = function(e2, t2) {
        var i2, n2 = P_(e2).constructor;
        return void 0 === n2 || k_(i2 = P_(n2)[M_]) ? t2 : L_(i2);
      }, x_ = TypeError, V_ = /(?:ipad|iphone|ipod).*applewebkit/i.test(ce), F_ = h, B_ = f, j_ = Xt, G_ = w, W_ = Ze, H_ = n, K_ = eo, Y_ = id, q_ = At, J_ = function(e2, t2) {
        if (e2 < t2)
          throw x_("Not enough arguments");
        return e2;
      }, z_ = V_, X_ = C_, Q_ = F_.setImmediate, Z_ = F_.clearImmediate, $_ = F_.process, eE = F_.Dispatch, tE = F_.Function, iE = F_.MessageChannel, nE = F_.String, sE = 0, rE = {}, oE = "onreadystatechange";
      H_(function() {
        T_ = F_.location;
      });
      var aE = function(e2) {
        if (W_(rE, e2)) {
          var t2 = rE[e2];
          delete rE[e2], t2();
        }
      }, cE = function(e2) {
        return function() {
          aE(e2);
        };
      }, dE = function(e2) {
        aE(e2.data);
      }, lE = function(e2) {
        F_.postMessage(nE(e2), T_.protocol + "//" + T_.host);
      };
      Q_ && Z_ || (Q_ = function(e2) {
        J_(arguments.length, 1);
        var t2 = G_(e2) ? e2 : tE(e2), i2 = Y_(arguments, 1);
        return rE[++sE] = function() {
          B_(t2, void 0, i2);
        }, g_(sE), sE;
      }, Z_ = function(e2) {
        delete rE[e2];
      }, X_ ? g_ = function(e2) {
        $_.nextTick(cE(e2));
      } : eE && eE.now ? g_ = function(e2) {
        eE.now(cE(e2));
      } : iE && !z_ ? (R_ = (S_ = new iE()).port2, S_.port1.onmessage = dE, g_ = j_(R_.postMessage, R_)) : F_.addEventListener && G_(F_.postMessage) && !F_.importScripts && T_ && "file:" !== T_.protocol && !H_(lE) ? (g_ = lE, F_.addEventListener("message", dE, false)) : g_ = oE in q_("script") ? function(e2) {
        K_.appendChild(q_("script"))[oE] = function() {
          K_.removeChild(this), aE(e2);
        };
      } : function(e2) {
        setTimeout(cE(e2), 0);
      });
      var uE = { set: Q_, clear: Z_ }, hE = function() {
        this.head = null, this.tail = null;
      };
      hE.prototype = { add: function(e2) {
        var t2 = { item: e2, next: null }, i2 = this.tail;
        i2 ? i2.next = t2 : this.head = t2, this.tail = t2;
      }, get: function() {
        var e2 = this.head;
        if (e2)
          return null === (this.head = e2.next) && (this.tail = null), e2.item;
      } };
      var pE, _E, EE, mE, fE, TE = hE, gE = /ipad|iphone|ipod/i.test(ce) && "undefined" != typeof Pebble, SE = /web0s(?!.*chrome)/i.test(ce), RE = h, CE = Xt, IE = O.f, vE = uE.set, yE = TE, AE = V_, bE = gE, wE = SE, OE = C_, NE = RE.MutationObserver || RE.WebKitMutationObserver, DE = RE.document, PE = RE.process, LE = RE.Promise, kE = IE(RE, "queueMicrotask"), ME = kE && kE.value;
      if (!ME) {
        var UE = new yE(), xE = function() {
          var e2, t2;
          for (OE && (e2 = PE.domain) && e2.exit(); t2 = UE.get(); )
            try {
              t2();
            } catch (e3) {
              throw UE.head && pE(), e3;
            }
          e2 && e2.enter();
        };
        AE || OE || wE || !NE || !DE ? !bE && LE && LE.resolve ? ((mE = LE.resolve(void 0)).constructor = LE, fE = CE(mE.then, mE), pE = function() {
          fE(xE);
        }) : OE ? pE = function() {
          PE.nextTick(xE);
        } : (vE = CE(vE, RE), pE = function() {
          vE(xE);
        }) : (_E = true, EE = DE.createTextNode(""), new NE(xE).observe(EE, { characterData: true }), pE = function() {
          EE.data = _E = !_E;
        }), ME = function(e2) {
          UE.head || pE(), UE.add(e2);
        };
      }
      var VE = ME, FE = function(e2) {
        try {
          return { error: false, value: e2() };
        } catch (e3) {
          return { error: true, value: e3 };
        }
      }, BE = h.Promise, jE = "object" == typeof Deno && Deno && "object" == typeof Deno.version, GE = !jE && !C_ && "object" == typeof window && "object" == typeof document, WE = h, HE = BE, KE = w, YE = Yt, qE = Xs, JE = ht, zE = GE, XE = jE, QE = Ee, ZE = HE && HE.prototype, $E = JE("species"), em = false, tm = KE(WE.PromiseRejectionEvent), im = YE("Promise", function() {
        var e2 = qE(HE), t2 = e2 !== String(HE);
        if (!t2 && 66 === QE)
          return true;
        if (!ZE.catch || !ZE.finally)
          return true;
        if (!QE || QE < 51 || !/native code/.test(e2)) {
          var i2 = new HE(function(e3) {
            e3(1);
          }), n2 = function(e3) {
            e3(function() {
            }, function() {
            });
          };
          if ((i2.constructor = {})[$E] = n2, !(em = i2.then(function() {
          }) instanceof n2))
            return true;
        }
        return !t2 && (zE || XE) && !tm;
      }), nm = { CONSTRUCTOR: im, REJECTION_EVENT: tm, SUBCLASSING: em }, sm = {}, rm = De, om = TypeError, am = function(e2) {
        var t2, i2;
        this.promise = new e2(function(e3, n2) {
          if (void 0 !== t2 || void 0 !== i2)
            throw om("Bad Promise constructor");
          t2 = e3, i2 = n2;
        }), this.resolve = rm(t2), this.reject = rm(i2);
      };
      sm.f = function(e2) {
        return new am(e2);
      };
      var cm, dm, lm = wi, um = C_, hm = h, pm = L, _m = Uo, Em = ca, mm = function(e2) {
        var t2 = I_(e2);
        y_ && t2 && !t2[A_] && v_(t2, A_, { configurable: true, get: function() {
          return this;
        } });
      }, fm = De, Tm = w, gm = te, Sm = function(e2, t2) {
        if (b_(t2, e2))
          return e2;
        throw w_("Incorrect invocation");
      }, Rm = U_, Cm = uE.set, Im = VE, vm = function(e2, t2) {
        try {
          1 == arguments.length ? console.error(e2) : console.error(e2, t2);
        } catch (e3) {
        }
      }, ym = FE, Am = TE, bm = va, wm = BE, Om = nm, Nm = sm, Dm = "Promise", Pm = Om.CONSTRUCTOR, Lm = Om.REJECTION_EVENT, km = bm.getterFor(Dm), Mm = bm.set, Um = wm && wm.prototype, xm = wm, Vm = Um, Fm = hm.TypeError, Bm = hm.document, jm = hm.process, Gm = Nm.f, Wm = Gm, Hm = !!(Bm && Bm.createEvent && hm.dispatchEvent), Km = "unhandledrejection", Ym = function(e2) {
        var t2;
        return !(!gm(e2) || !Tm(t2 = e2.then)) && t2;
      }, qm = function(e2, t2) {
        var i2, n2, s2, r2 = t2.value, o2 = 1 == t2.state, a2 = o2 ? e2.ok : e2.fail, c2 = e2.resolve, d2 = e2.reject, l2 = e2.domain;
        try {
          a2 ? (o2 || (2 === t2.rejection && Zm(t2), t2.rejection = 1), true === a2 ? i2 = r2 : (l2 && l2.enter(), i2 = a2(r2), l2 && (l2.exit(), s2 = true)), i2 === e2.promise ? d2(Fm("Promise-chain cycle")) : (n2 = Ym(i2)) ? pm(n2, i2, c2, d2) : c2(i2)) : d2(r2);
        } catch (e3) {
          l2 && !s2 && l2.exit(), d2(e3);
        }
      }, Jm = function(e2, t2) {
        e2.notified || (e2.notified = true, Im(function() {
          for (var i2, n2 = e2.reactions; i2 = n2.get(); )
            qm(i2, e2);
          e2.notified = false, t2 && !e2.rejection && Xm(e2);
        }));
      }, zm = function(e2, t2, i2) {
        var n2, s2;
        Hm ? ((n2 = Bm.createEvent("Event")).promise = t2, n2.reason = i2, n2.initEvent(e2, false, true), hm.dispatchEvent(n2)) : n2 = { promise: t2, reason: i2 }, !Lm && (s2 = hm["on" + e2]) ? s2(n2) : e2 === Km && vm("Unhandled promise rejection", i2);
      }, Xm = function(e2) {
        pm(Cm, hm, function() {
          var t2, i2 = e2.facade, n2 = e2.value;
          if (Qm(e2) && (t2 = ym(function() {
            um ? jm.emit("unhandledRejection", n2, i2) : zm(Km, i2, n2);
          }), e2.rejection = um || Qm(e2) ? 2 : 1, t2.error))
            throw t2.value;
        });
      }, Qm = function(e2) {
        return 1 !== e2.rejection && !e2.parent;
      }, Zm = function(e2) {
        pm(Cm, hm, function() {
          var t2 = e2.facade;
          um ? jm.emit("rejectionHandled", t2) : zm("rejectionhandled", t2, e2.value);
        });
      }, $m = function(e2, t2, i2) {
        return function(n2) {
          e2(t2, n2, i2);
        };
      }, ef = function(e2, t2, i2) {
        e2.done || (e2.done = true, i2 && (e2 = i2), e2.value = t2, e2.state = 2, Jm(e2, true));
      }, tf = function(e2, t2, i2) {
        if (!e2.done) {
          e2.done = true, i2 && (e2 = i2);
          try {
            if (e2.facade === t2)
              throw Fm("Promise can't be resolved itself");
            var n2 = Ym(t2);
            n2 ? Im(function() {
              var i3 = { done: false };
              try {
                pm(n2, t2, $m(tf, i3, e2), $m(ef, i3, e2));
              } catch (t3) {
                ef(i3, t3, e2);
              }
            }) : (e2.value = t2, e2.state = 1, Jm(e2, false));
          } catch (t3) {
            ef({ done: false }, t3, e2);
          }
        }
      };
      Pm && (Vm = (xm = function(e2) {
        Sm(this, Vm), fm(e2), pm(cm, this);
        var t2 = km(this);
        try {
          e2($m(tf, t2), $m(ef, t2));
        } catch (e3) {
          ef(t2, e3);
        }
      }).prototype, (cm = function(e2) {
        Mm(this, { type: Dm, done: false, notified: false, parent: false, reactions: new Am(), rejection: false, state: 0, value: void 0 });
      }).prototype = _m(Vm, "then", function(e2, t2) {
        var i2 = km(this), n2 = Gm(Rm(this, xm));
        return i2.parent = true, n2.ok = !Tm(e2) || e2, n2.fail = Tm(t2) && t2, n2.domain = um ? jm.domain : void 0, 0 == i2.state ? i2.reactions.add(n2) : Im(function() {
          qm(n2, i2);
        }), n2.promise;
      }), dm = function() {
        var e2 = new cm(), t2 = km(e2);
        this.promise = e2, this.resolve = $m(tf, t2), this.reject = $m(ef, t2);
      }, Nm.f = Gm = function(e2) {
        return e2 === xm || void 0 === e2 ? new dm(e2) : Wm(e2);
      }), lm({ global: true, constructor: true, wrap: true, forced: Pm }, { Promise: xm }), Em(xm, Dm, false, true), mm(Dm);
      var nf = ht("iterator"), sf = false;
      try {
        var rf = 0, of = { next: function() {
          return { done: !!rf++ };
        }, return: function() {
          sf = true;
        } };
        of[nf] = function() {
          return this;
        }, Array.from(of, function() {
          throw 2;
        });
      } catch (e2) {
      }
      var af = BE, cf = function(e2, t2) {
        if (!t2 && !sf)
          return false;
        var i2 = false;
        try {
          var n2 = {};
          n2[nf] = function() {
            return { next: function() {
              return { done: i2 = true };
            } };
          }, e2(n2);
        } catch (e3) {
        }
        return i2;
      }, df = nm.CONSTRUCTOR || !cf(function(e2) {
        af.all(e2).then(void 0, function() {
        });
      }), lf = L, uf = De, hf = sm, pf = FE, _f = $p;
      wi({ target: "Promise", stat: true, forced: df }, { all: function(e2) {
        var t2 = this, i2 = hf.f(t2), n2 = i2.resolve, s2 = i2.reject, r2 = pf(function() {
          var i3 = uf(t2.resolve), r3 = [], o2 = 0, a2 = 1;
          _f(e2, function(e3) {
            var c2 = o2++, d2 = false;
            a2++, lf(i3, t2, e3).then(function(e4) {
              d2 || (d2 = true, r3[c2] = e4, --a2 || n2(r3));
            }, s2);
          }), --a2 || n2(r3);
        });
        return r2.error && s2(r2.value), i2.promise;
      } });
      var Ef = wi, mf = nm.CONSTRUCTOR;
      BE && BE.prototype, Ef({ target: "Promise", proto: true, forced: mf, real: true }, { catch: function(e2) {
        return this.then(void 0, e2);
      } });
      var ff = L, Tf = De, gf = sm, Sf = FE, Rf = $p;
      wi({ target: "Promise", stat: true, forced: df }, { race: function(e2) {
        var t2 = this, i2 = gf.f(t2), n2 = i2.reject, s2 = Sf(function() {
          var s3 = Tf(t2.resolve);
          Rf(e2, function(e3) {
            ff(s3, t2, e3).then(i2.resolve, n2);
          });
        });
        return s2.error && n2(s2.value), i2.promise;
      } });
      var Cf = L, If = sm;
      wi({ target: "Promise", stat: true, forced: nm.CONSTRUCTOR }, { reject: function(e2) {
        var t2 = If.f(this);
        return Cf(t2.reject, void 0, e2), t2.promise;
      } });
      var vf = ii, yf = te, Af = sm, bf = function(e2, t2) {
        if (vf(e2), yf(t2) && t2.constructor === e2)
          return t2;
        var i2 = Af.f(e2);
        return (0, i2.resolve)(t2), i2.promise;
      }, wf = wi, Of = BE, Nf = nm.CONSTRUCTOR, Df = bf, Pf = ae("Promise"), Lf = !Nf;
      wf({ target: "Promise", stat: true, forced: true }, { resolve: function(e2) {
        return Df(Lf && this === Pf ? Of : this, e2);
      } });
      var kf = L, Mf = De, Uf = sm, xf = FE, Vf = $p;
      wi({ target: "Promise", stat: true, forced: df }, { allSettled: function(e2) {
        var t2 = this, i2 = Uf.f(t2), n2 = i2.resolve, s2 = i2.reject, r2 = xf(function() {
          var i3 = Mf(t2.resolve), s3 = [], r3 = 0, o2 = 1;
          Vf(e2, function(e3) {
            var a2 = r3++, c2 = false;
            o2++, kf(i3, t2, e3).then(function(e4) {
              c2 || (c2 = true, s3[a2] = { status: "fulfilled", value: e4 }, --o2 || n2(s3));
            }, function(e4) {
              c2 || (c2 = true, s3[a2] = { status: "rejected", reason: e4 }, --o2 || n2(s3));
            });
          }), --o2 || n2(s3);
        });
        return r2.error && s2(r2.value), i2.promise;
      } });
      var Ff = L, Bf = De, jf = ae, Gf = sm, Wf = FE, Hf = $p, Kf = "No one promise resolved";
      wi({ target: "Promise", stat: true, forced: df }, { any: function(e2) {
        var t2 = this, i2 = jf("AggregateError"), n2 = Gf.f(t2), s2 = n2.resolve, r2 = n2.reject, o2 = Wf(function() {
          var n3 = Bf(t2.resolve), o3 = [], a2 = 0, c2 = 1, d2 = false;
          Hf(e2, function(e3) {
            var l2 = a2++, u2 = false;
            c2++, Ff(n3, t2, e3).then(function(e4) {
              u2 || d2 || (d2 = true, s2(e4));
            }, function(e4) {
              u2 || d2 || (u2 = true, o3[l2] = e4, --c2 || r2(new i2(o3, Kf)));
            });
          }), --c2 || r2(new i2(o3, Kf));
        });
        return o2.error && r2(o2.value), n2.promise;
      } });
      var Yf = wi, qf = BE, Jf = n, zf = ae, Xf = w, Qf = U_, Zf = bf, $f = qf && qf.prototype;
      Yf({ target: "Promise", proto: true, real: true, forced: !!qf && Jf(function() {
        $f.finally.call({ then: function() {
        } }, function() {
        });
      }) }, { finally: function(e2) {
        var t2 = Qf(this, zf("Promise")), i2 = Xf(e2);
        return this.then(i2 ? function(i3) {
          return Zf(t2, e2()).then(function() {
            return i3;
          });
        } : e2, i2 ? function(i3) {
          return Zf(t2, e2()).then(function() {
            throw i3;
          });
        } : e2);
      } });
      var eT = ie.Promise, tT = i(eT);
      const iT = () => {
      };
      function nT() {
        const e2 = { promise: void 0, isResolved: false, isRejected: false, isFinished: false, resolve: void 0, reject: void 0, cancel: iT };
        return e2.promise = new tT((t2, i2) => {
          e2.resolve = (i3) => {
            e2.isFinished || (e2.isResolved = true, e2.isFinished = true, t2(i3), e2.value = i3);
          }, e2.reject = (t3) => {
            e2.isFinished || (e2.isRejected = true, e2.isFinished = true, i2(t3));
          };
        }), e2;
      }
      const sT = /* @__PURE__ */ new Map(), rT = /* @__PURE__ */ new Map(), oT = /* @__PURE__ */ new Map();
      var aT, cT;
      !function(e2) {
        e2.WIN_10 = "Windows 10", e2.WIN_81 = "Windows 8.1", e2.WIN_8 = "Windows 8", e2.WIN_7 = "Windows 7", e2.WIN_VISTA = "Windows Vista", e2.WIN_SERVER_2003 = "Windows Server 2003", e2.WIN_XP = "Windows XP", e2.WIN_2000 = "Windows 2000", e2.ANDROID = "Android", e2.HARMONY_OS = "HarmonyOS", e2.OPEN_BSD = "Open BSD", e2.SUN_OS = "Sun OS", e2.LINUX = "Linux", e2.IOS = "iOS", e2.MAC_OS = "Mac OS", e2.CHROMIUM_OS = "Chromium OS", e2.QNX = "QNX", e2.UNIX = "UNIX", e2.BEOS = "BeOS", e2.OS_2 = "OS/2", e2.SEARCH_BOT = "Search Bot";
      }(aT || (aT = {})), function(e2) {
        e2.CHROME = "Chrome", e2.SAFARI = "Safari", e2.EDGE = "Edge", e2.FIREFOX = "Firefox", e2.OPERA = "OPR", e2.QQ = "QQBrowser", e2.WECHAT = "MicroMessenger";
      }(cT || (cT = {}));
      var dT = { exports: {} };
      !function(e2, i2) {
        !function(t2, n2) {
          var s2 = "function", r2 = "undefined", o2 = "object", a2 = "string", c2 = "major", d2 = "model", l2 = "name", u2 = "type", h2 = "vendor", p2 = "version", _2 = "architecture", E2 = "console", m2 = "mobile", f2 = "tablet", T2 = "smarttv", g2 = "wearable", S2 = "embedded", R2 = "Amazon", C2 = "Apple", I2 = "ASUS", v2 = "BlackBerry", y2 = "Browser", A2 = "Chrome", b2 = "Firefox", w2 = "Google", O2 = "Huawei", N2 = "LG", D2 = "Microsoft", P2 = "Motorola", L2 = "Opera", k2 = "Samsung", M2 = "Sharp", U2 = "Sony", x2 = "Xiaomi", V2 = "Zebra", F2 = "Facebook", B2 = "Chromium OS", j2 = "Mac OS", G2 = function(e3) {
            for (var t3 = {}, i3 = 0; i3 < e3.length; i3++)
              t3[e3[i3].toUpperCase()] = e3[i3];
            return t3;
          }, W2 = function(e3, t3) {
            return typeof e3 === a2 && -1 !== H2(t3).indexOf(H2(e3));
          }, H2 = function(e3) {
            return e3.toLowerCase();
          }, K2 = function(e3, t3) {
            if (typeof e3 === a2)
              return e3 = e3.replace(/^\s\s*/, ""), typeof t3 === r2 ? e3 : e3.substring(0, 350);
          }, Y2 = function(e3, t3) {
            for (var i3, r3, a3, c3, d3, l3, u3 = 0; u3 < t3.length && !d3; ) {
              var h3 = t3[u3], p3 = t3[u3 + 1];
              for (i3 = r3 = 0; i3 < h3.length && !d3 && h3[i3]; )
                if (d3 = h3[i3++].exec(e3))
                  for (a3 = 0; a3 < p3.length; a3++)
                    l3 = d3[++r3], typeof (c3 = p3[a3]) === o2 && c3.length > 0 ? 2 === c3.length ? typeof c3[1] == s2 ? this[c3[0]] = c3[1].call(this, l3) : this[c3[0]] = c3[1] : 3 === c3.length ? typeof c3[1] !== s2 || c3[1].exec && c3[1].test ? this[c3[0]] = l3 ? l3.replace(c3[1], c3[2]) : n2 : this[c3[0]] = l3 ? c3[1].call(this, l3, c3[2]) : n2 : 4 === c3.length && (this[c3[0]] = l3 ? c3[3].call(this, l3.replace(c3[1], c3[2])) : n2) : this[c3] = l3 || n2;
              u3 += 2;
            }
          }, q2 = function(e3, t3) {
            for (var i3 in t3)
              if (typeof t3[i3] === o2 && t3[i3].length > 0) {
                for (var s3 = 0; s3 < t3[i3].length; s3++)
                  if (W2(t3[i3][s3], e3))
                    return "?" === i3 ? n2 : i3;
              } else if (W2(t3[i3], e3))
                return "?" === i3 ? n2 : i3;
            return e3;
          }, J2 = { ME: "4.90", "NT 3.11": "NT3.51", "NT 4.0": "NT4.0", 2e3: "NT 5.0", XP: ["NT 5.1", "NT 5.2"], Vista: "NT 6.0", 7: "NT 6.1", 8: "NT 6.2", 8.1: "NT 6.3", 10: ["NT 6.4", "NT 10.0"], RT: "ARM" }, z2 = { browser: [[/\b(?:crmo|crios)\/([\w\.]+)/i], [p2, [l2, "Chrome"]], [/edg(?:e|ios|a)?\/([\w\.]+)/i], [p2, [l2, "Edge"]], [/(opera mini)\/([-\w\.]+)/i, /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i, /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i], [l2, p2], [/opios[\/ ]+([\w\.]+)/i], [p2, [l2, L2 + " Mini"]], [/\bopr\/([\w\.]+)/i], [p2, [l2, L2]], [/(kindle)\/([\w\.]+)/i, /(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i, /(avant |iemobile|slim)(?:browser)?[\/ ]?([\w\.]*)/i, /(ba?idubrowser)[\/ ]?([\w\.]+)/i, /(?:ms|\()(ie) ([\w\.]+)/i, /(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i, /(weibo)__([\d\.]+)/i], [l2, p2], [/(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i], [p2, [l2, "UC" + y2]], [/microm.+\bqbcore\/([\w\.]+)/i, /\bqbcore\/([\w\.]+).+microm/i], [p2, [l2, "WeChat(Win) Desktop"]], [/micromessenger\/([\w\.]+)/i], [p2, [l2, "WeChat"]], [/konqueror\/([\w\.]+)/i], [p2, [l2, "Konqueror"]], [/trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i], [p2, [l2, "IE"]], [/yabrowser\/([\w\.]+)/i], [p2, [l2, "Yandex"]], [/(avast|avg)\/([\w\.]+)/i], [[l2, /(.+)/, "$1 Secure " + y2], p2], [/\bfocus\/([\w\.]+)/i], [p2, [l2, b2 + " Focus"]], [/\bopt\/([\w\.]+)/i], [p2, [l2, L2 + " Touch"]], [/coc_coc\w+\/([\w\.]+)/i], [p2, [l2, "Coc Coc"]], [/dolfin\/([\w\.]+)/i], [p2, [l2, "Dolphin"]], [/coast\/([\w\.]+)/i], [p2, [l2, L2 + " Coast"]], [/miuibrowser\/([\w\.]+)/i], [p2, [l2, "MIUI " + y2]], [/fxios\/([-\w\.]+)/i], [p2, [l2, b2]], [/\bqihu|(qi?ho?o?|360)browser/i], [[l2, "360 " + y2]], [/(oculus|samsung|sailfish|huawei)browser\/([\w\.]+)/i], [[l2, /(.+)/, "$1 " + y2], p2], [/(comodo_dragon)\/([\w\.]+)/i], [[l2, /_/g, " "], p2], [/(electron)\/([\w\.]+) safari/i, /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i, /m?(qqbrowser|baiduboxapp|2345Explorer)[\/ ]?([\w\.]+)/i], [l2, p2], [/(metasr)[\/ ]?([\w\.]+)/i, /(lbbrowser)/i, /\[(linkedin)app\]/i], [l2], [/((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i], [[l2, F2], p2], [/(kakao(?:talk|story))[\/ ]([\w\.]+)/i, /(naver)\(.*?(\d+\.[\w\.]+).*\)/i, /safari (line)\/([\w\.]+)/i, /\b(line)\/([\w\.]+)\/iab/i, /(chromium|instagram)[\/ ]([-\w\.]+)/i], [l2, p2], [/\bgsa\/([\w\.]+) .*safari\//i], [p2, [l2, "GSA"]], [/headlesschrome(?:\/([\w\.]+)| )/i], [p2, [l2, A2 + " Headless"]], [/ wv\).+(chrome)\/([\w\.]+)/i], [[l2, A2 + " WebView"], p2], [/droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i], [p2, [l2, "Android " + y2]], [/(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i], [l2, p2], [/version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i], [p2, [l2, "Mobile Safari"]], [/version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i], [p2, l2], [/webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i], [l2, [p2, q2, { "1.0": "/8", 1.2: "/1", 1.3: "/3", "2.0": "/412", "2.0.2": "/416", "2.0.3": "/417", "2.0.4": "/419", "?": "/" }]], [/(webkit|khtml)\/([\w\.]+)/i], [l2, p2], [/(navigator|netscape\d?)\/([-\w\.]+)/i], [[l2, "Netscape"], p2], [/mobile vr; rv:([\w\.]+)\).+firefox/i], [p2, [l2, b2 + " Reality"]], [/ekiohf.+(flow)\/([\w\.]+)/i, /(swiftfox)/i, /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i, /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i, /(firefox)\/([\w\.]+)/i, /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i, /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i, /(links) \(([\w\.]+)/i, /panasonic;(viera)/i], [l2, p2], [/(cobalt)\/([\w\.]+)/i], [l2, [p2, /master.|lts./, ""]]], cpu: [[/(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i], [[_2, "amd64"]], [/(ia32(?=;))/i], [[_2, H2]], [/((?:i[346]|x)86)[;\)]/i], [[_2, "ia32"]], [/\b(aarch64|arm(v?8e?l?|_?64))\b/i], [[_2, "arm64"]], [/\b(arm(?:v[67])?ht?n?[fl]p?)\b/i], [[_2, "armhf"]], [/windows (ce|mobile); ppc;/i], [[_2, "arm"]], [/((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i], [[_2, /ower/, "", H2]], [/(sun4\w)[;\)]/i], [[_2, "sparc"]], [/((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i], [[_2, H2]]], device: [[/\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i], [d2, [h2, k2], [u2, f2]], [/\b((?:s[cgp]h|gt|sm)-\w+|sc[g-]?[\d]+a?|galaxy nexus)/i, /samsung[- ]([-\w]+)/i, /sec-(sgh\w+)/i], [d2, [h2, k2], [u2, m2]], [/\((ip(?:hone|od)[\w ]*);/i], [d2, [h2, C2], [u2, m2]], [/\((ipad);[-\w\),; ]+apple/i, /applecoremedia\/[\w\.]+ \((ipad)/i, /\b(ipad)\d\d?,\d\d?[;\]].+ios/i], [d2, [h2, C2], [u2, f2]], [/(macintosh);/i], [d2, [h2, C2]], [/\b(sh-?[altvz]?\d\d[a-ekm]?)/i], [d2, [h2, M2], [u2, m2]], [/\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i], [d2, [h2, O2], [u2, f2]], [/(?:huawei|honor)([-\w ]+)[;\)]/i, /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i], [d2, [h2, O2], [u2, m2]], [/\b(poco[\w ]+)(?: bui|\))/i, /\b; (\w+) build\/hm\1/i, /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i, /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i, /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i], [[d2, /_/g, " "], [h2, x2], [u2, m2]], [/\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i], [[d2, /_/g, " "], [h2, x2], [u2, f2]], [/; (\w+) bui.+ oppo/i, /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i], [d2, [h2, "OPPO"], [u2, m2]], [/vivo (\w+)(?: bui|\))/i, /\b(v[12]\d{3}\w?[at])(?: bui|;)/i], [d2, [h2, "Vivo"], [u2, m2]], [/\b(rmx[12]\d{3})(?: bui|;|\))/i], [d2, [h2, "Realme"], [u2, m2]], [/\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i, /\bmot(?:orola)?[- ](\w*)/i, /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i], [d2, [h2, P2], [u2, m2]], [/\b(mz60\d|xoom[2 ]{0,2}) build\//i], [d2, [h2, P2], [u2, f2]], [/((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i], [d2, [h2, N2], [u2, f2]], [/(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i, /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i, /\blg-?([\d\w]+) bui/i], [d2, [h2, N2], [u2, m2]], [/(ideatab[-\w ]+)/i, /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i], [d2, [h2, "Lenovo"], [u2, f2]], [/(?:maemo|nokia).*(n900|lumia \d+)/i, /nokia[-_ ]?([-\w\.]*)/i], [[d2, /_/g, " "], [h2, "Nokia"], [u2, m2]], [/(pixel c)\b/i], [d2, [h2, w2], [u2, f2]], [/droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i], [d2, [h2, w2], [u2, m2]], [/droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i], [d2, [h2, U2], [u2, m2]], [/sony tablet [ps]/i, /\b(?:sony)?sgp\w+(?: bui|\))/i], [[d2, "Xperia Tablet"], [h2, U2], [u2, f2]], [/ (kb2005|in20[12]5|be20[12][59])\b/i, /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i], [d2, [h2, "OnePlus"], [u2, m2]], [/(alexa)webm/i, /(kf[a-z]{2}wi)( bui|\))/i, /(kf[a-z]+)( bui|\)).+silk\//i], [d2, [h2, R2], [u2, f2]], [/((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i], [[d2, /(.+)/g, "Fire Phone $1"], [h2, R2], [u2, m2]], [/(playbook);[-\w\),; ]+(rim)/i], [d2, h2, [u2, f2]], [/\b((?:bb[a-f]|st[hv])100-\d)/i, /\(bb10; (\w+)/i], [d2, [h2, v2], [u2, m2]], [/(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i], [d2, [h2, I2], [u2, f2]], [/ (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i], [d2, [h2, I2], [u2, m2]], [/(nexus 9)/i], [d2, [h2, "HTC"], [u2, f2]], [/(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i, /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i, /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i], [h2, [d2, /_/g, " "], [u2, m2]], [/droid.+; ([ab][1-7]-?[0178a]\d\d?)/i], [d2, [h2, "Acer"], [u2, f2]], [/droid.+; (m[1-5] note) bui/i, /\bmz-([-\w]{2,})/i], [d2, [h2, "Meizu"], [u2, m2]], [/(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\w]*)/i, /(hp) ([\w ]+\w)/i, /(asus)-?(\w+)/i, /(microsoft); (lumia[\w ]+)/i, /(lenovo)[-_ ]?([-\w]+)/i, /(jolla)/i, /(oppo) ?([\w ]+) bui/i], [h2, d2, [u2, m2]], [/(kobo)\s(ereader|touch)/i, /(archos) (gamepad2?)/i, /(hp).+(touchpad(?!.+tablet)|tablet)/i, /(kindle)\/([\w\.]+)/i, /(nook)[\w ]+build\/(\w+)/i, /(dell) (strea[kpr\d ]*[\dko])/i, /(le[- ]+pan)[- ]+(\w{1,9}) bui/i, /(trinity)[- ]*(t\d{3}) bui/i, /(gigaset)[- ]+(q\w{1,9}) bui/i, /(vodafone) ([\w ]+)(?:\)| bui)/i], [h2, d2, [u2, f2]], [/(surface duo)/i], [d2, [h2, D2], [u2, f2]], [/droid [\d\.]+; (fp\du?)(?: b|\))/i], [d2, [h2, "Fairphone"], [u2, m2]], [/(u304aa)/i], [d2, [h2, "AT&T"], [u2, m2]], [/\bsie-(\w*)/i], [d2, [h2, "Siemens"], [u2, m2]], [/\b(rct\w+) b/i], [d2, [h2, "RCA"], [u2, f2]], [/\b(venue[\d ]{2,7}) b/i], [d2, [h2, "Dell"], [u2, f2]], [/\b(q(?:mv|ta)\w+) b/i], [d2, [h2, "Verizon"], [u2, f2]], [/\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i], [d2, [h2, "Barnes & Noble"], [u2, f2]], [/\b(tm\d{3}\w+) b/i], [d2, [h2, "NuVision"], [u2, f2]], [/\b(k88) b/i], [d2, [h2, "ZTE"], [u2, f2]], [/\b(nx\d{3}j) b/i], [d2, [h2, "ZTE"], [u2, m2]], [/\b(gen\d{3}) b.+49h/i], [d2, [h2, "Swiss"], [u2, m2]], [/\b(zur\d{3}) b/i], [d2, [h2, "Swiss"], [u2, f2]], [/\b((zeki)?tb.*\b) b/i], [d2, [h2, "Zeki"], [u2, f2]], [/\b([yr]\d{2}) b/i, /\b(dragon[- ]+touch |dt)(\w{5}) b/i], [[h2, "Dragon Touch"], d2, [u2, f2]], [/\b(ns-?\w{0,9}) b/i], [d2, [h2, "Insignia"], [u2, f2]], [/\b((nxa|next)-?\w{0,9}) b/i], [d2, [h2, "NextBook"], [u2, f2]], [/\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i], [[h2, "Voice"], d2, [u2, m2]], [/\b(lvtel\-)?(v1[12]) b/i], [[h2, "LvTel"], d2, [u2, m2]], [/\b(ph-1) /i], [d2, [h2, "Essential"], [u2, m2]], [/\b(v(100md|700na|7011|917g).*\b) b/i], [d2, [h2, "Envizen"], [u2, f2]], [/\b(trio[-\w\. ]+) b/i], [d2, [h2, "MachSpeed"], [u2, f2]], [/\btu_(1491) b/i], [d2, [h2, "Rotor"], [u2, f2]], [/(shield[\w ]+) b/i], [d2, [h2, "Nvidia"], [u2, f2]], [/(sprint) (\w+)/i], [h2, d2, [u2, m2]], [/(kin\.[onetw]{3})/i], [[d2, /\./g, " "], [h2, D2], [u2, m2]], [/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i], [d2, [h2, V2], [u2, f2]], [/droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i], [d2, [h2, V2], [u2, m2]], [/smart-tv.+(samsung)/i], [h2, [u2, T2]], [/hbbtv.+maple;(\d+)/i], [[d2, /^/, "SmartTV"], [h2, k2], [u2, T2]], [/(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i], [[h2, N2], [u2, T2]], [/(apple) ?tv/i], [h2, [d2, C2 + " TV"], [u2, T2]], [/crkey/i], [[d2, A2 + "cast"], [h2, w2], [u2, T2]], [/droid.+aft(\w)( bui|\))/i], [d2, [h2, R2], [u2, T2]], [/\(dtv[\);].+(aquos)/i, /(aquos-tv[\w ]+)\)/i], [d2, [h2, M2], [u2, T2]], [/(bravia[\w ]+)( bui|\))/i], [d2, [h2, U2], [u2, T2]], [/(mitv-\w{5}) bui/i], [d2, [h2, x2], [u2, T2]], [/Hbbtv.*(technisat) (.*);/i], [h2, d2, [u2, T2]], [/\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i, /hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i], [[h2, K2], [d2, K2], [u2, T2]], [/\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i], [[u2, T2]], [/(ouya)/i, /(nintendo) ([wids3utch]+)/i], [h2, d2, [u2, E2]], [/droid.+; (shield) bui/i], [d2, [h2, "Nvidia"], [u2, E2]], [/(playstation [345portablevi]+)/i], [d2, [h2, U2], [u2, E2]], [/\b(xbox(?: one)?(?!; xbox))[\); ]/i], [d2, [h2, D2], [u2, E2]], [/((pebble))app/i], [h2, d2, [u2, g2]], [/(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i], [d2, [h2, C2], [u2, g2]], [/droid.+; (glass) \d/i], [d2, [h2, w2], [u2, g2]], [/droid.+; (wt63?0{2,3})\)/i], [d2, [h2, V2], [u2, g2]], [/(quest( 2| pro)?)/i], [d2, [h2, F2], [u2, g2]], [/(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i], [h2, [u2, S2]], [/droid .+?; ([^;]+?)(?: bui|\) applew).+? mobile safari/i], [d2, [u2, m2]], [/droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i], [d2, [u2, f2]], [/\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i], [[u2, f2]], [/(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i], [[u2, m2]], [/(android[-\w\. ]{0,9});.+buil/i], [d2, [h2, "Generic"]]], engine: [[/windows.+ edge\/([\w\.]+)/i], [p2, [l2, "EdgeHTML"]], [/webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i], [p2, [l2, "Blink"]], [/(presto)\/([\w\.]+)/i, /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i, /ekioh(flow)\/([\w\.]+)/i, /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i, /(icab)[\/ ]([23]\.[\d\.]+)/i], [l2, p2], [/rv\:([\w\.]{1,9})\b.+(gecko)/i], [p2, l2]], os: [[/microsoft (windows) (vista|xp)/i], [l2, p2], [/(windows) nt 6\.2; (arm)/i, /(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i, /(windows)[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i], [l2, [p2, q2, J2]], [/(win(?=3|9|n)|win 9x )([nt\d\.]+)/i], [[l2, "Windows"], [p2, q2, J2]], [/ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i, /cfnetwork\/.+darwin/i], [[p2, /_/g, "."], [l2, "iOS"]], [/(mac os x) ?([\w\. ]*)/i, /(macintosh|mac_powerpc\b)(?!.+haiku)/i], [[l2, j2], [p2, /_/g, "."]], [/droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i], [p2, l2], [/(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i, /(blackberry)\w*\/([\w\.]*)/i, /(tizen|kaios)[\/ ]([\w\.]+)/i, /\((series40);/i], [l2, p2], [/\(bb(10);/i], [p2, [l2, v2]], [/(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i], [p2, [l2, "Symbian"]], [/mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i], [p2, [l2, b2 + " OS"]], [/web0s;.+rt(tv)/i, /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i], [p2, [l2, "webOS"]], [/watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i], [p2, [l2, "watchOS"]], [/crkey\/([\d\.]+)/i], [p2, [l2, A2 + "cast"]], [/(cros) [\w]+(?:\)| ([\w\.]+)\b)/i], [[l2, B2], p2], [/panasonic;(viera)/i, /(netrange)mmh/i, /(nettv)\/(\d+\.[\w\.]+)/i, /(nintendo|playstation) ([wids345portablevuch]+)/i, /(xbox); +xbox ([^\);]+)/i, /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i, /(mint)[\/\(\) ]?(\w*)/i, /(mageia|vectorlinux)[; ]/i, /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i, /(hurd|linux) ?([\w\.]*)/i, /(gnu) ?([\w\.]*)/i, /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i, /(haiku) (\w+)/i], [l2, p2], [/(sunos) ?([\w\.\d]*)/i], [[l2, "Solaris"], p2], [/((?:open)?solaris)[-\/ ]?([\w\.]*)/i, /(aix) ((\d)(?=\.|\)| )[\w\.])*/i, /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux)/i, /(unix) ?([\w\.]*)/i], [l2, p2]] }, X2 = function(e3, i3) {
            if (typeof e3 === o2 && (i3 = e3, e3 = n2), !(this instanceof X2))
              return new X2(e3, i3).getResult();
            var E3 = typeof t2 !== r2 && t2.navigator ? t2.navigator : n2, T3 = e3 || (E3 && E3.userAgent ? E3.userAgent : ""), g3 = E3 && E3.userAgentData ? E3.userAgentData : n2, S3 = i3 ? function(e4, t3) {
              var i4 = {};
              for (var n3 in e4)
                t3[n3] && t3[n3].length % 2 == 0 ? i4[n3] = t3[n3].concat(e4[n3]) : i4[n3] = e4[n3];
              return i4;
            }(z2, i3) : z2;
            return this.getBrowser = function() {
              var e4 = {};
              return e4[l2] = n2, e4[p2] = n2, Y2.call(e4, T3, S3.browser), e4[c2] = function(e5) {
                return typeof e5 === a2 ? e5.replace(/[^\d\.]/g, "").split(".")[0] : n2;
              }(e4[p2]), E3 && E3.brave && typeof E3.brave.isBrave == s2 && (e4[l2] = "Brave"), e4;
            }, this.getCPU = function() {
              var e4 = {};
              return e4[_2] = n2, Y2.call(e4, T3, S3.cpu), e4;
            }, this.getDevice = function() {
              var e4 = {};
              return e4[h2] = n2, e4[d2] = n2, e4[u2] = n2, Y2.call(e4, T3, S3.device), !e4[u2] && g3 && g3.mobile && (e4[u2] = m2), "Macintosh" == e4[d2] && E3 && typeof E3.standalone !== r2 && E3.maxTouchPoints && E3.maxTouchPoints > 2 && (e4[d2] = "iPad", e4[u2] = f2), e4;
            }, this.getEngine = function() {
              var e4 = {};
              return e4[l2] = n2, e4[p2] = n2, Y2.call(e4, T3, S3.engine), e4;
            }, this.getOS = function() {
              var e4 = {};
              return e4[l2] = n2, e4[p2] = n2, Y2.call(e4, T3, S3.os), !e4[l2] && g3 && "Unknown" != g3.platform && (e4[l2] = g3.platform.replace(/chrome os/i, B2).replace(/macos/i, j2)), e4;
            }, this.getResult = function() {
              return { ua: this.getUA(), browser: this.getBrowser(), engine: this.getEngine(), os: this.getOS(), device: this.getDevice(), cpu: this.getCPU() };
            }, this.getUA = function() {
              return T3;
            }, this.setUA = function(e4) {
              return T3 = typeof e4 === a2 && e4.length > 350 ? K2(e4, 350) : e4, this;
            }, this.setUA(T3), this;
          };
          X2.VERSION = "0.7.34", X2.BROWSER = G2([l2, p2, c2]), X2.CPU = G2([_2]), X2.DEVICE = G2([d2, h2, u2, E2, m2, T2, f2, g2, S2]), X2.ENGINE = X2.OS = G2([l2, p2]), e2.exports && (i2 = e2.exports = X2), i2.UAParser = X2;
          var Q2 = typeof t2 !== r2 && (t2.jQuery || t2.Zepto);
          if (Q2 && !Q2.ua) {
            var Z2 = new X2();
            Q2.ua = Z2.getResult(), Q2.ua.get = function() {
              return Z2.getUA();
            }, Q2.ua.set = function(e3) {
              Z2.setUA(e3);
              var t3 = Z2.getResult();
              for (var i3 in t3)
                Q2.ua[i3] = t3[i3];
            };
          }
        }("object" == typeof window ? window : t);
      }(dT, dT.exports);
      const lT = new (i(dT.exports))();
      let uT = lT.getResult(), hT = null;
      function pT(e2) {
        if (!hT) {
          e2 && lT.setUA(e2), uT = lT.getResult();
          const t2 = function(e3) {
            if ("Blink" === e3.engine.name && "WeChat" !== e3.browser.name)
              return cT.CHROME;
            switch (e3.browser.name) {
              case "Chrome Headless":
              case "Chrome":
              case "Chromium":
                return cT.CHROME;
              case "Safari":
              case "Mobile Safari":
                return cT.SAFARI;
              case "Edge":
                return cT.EDGE;
              case "Firefox":
                return cT.FIREFOX;
              case "QQBrowser":
                return cT.QQ;
              case "Opera":
                return cT.OPERA;
              case "WeChat":
                return cT.WECHAT;
              default:
                return e3.browser.name || "";
            }
          }(uT), i2 = function(e3) {
            let t3;
            t3 = "Blink" === e3.engine.name ? e3.engine.version || "" : e3.browser.version || "";
            return t3.split(".")[0];
          }(uT), n2 = function(e3) {
            if ("Windows" === e3.os.name)
              return e3.os.version ? e3.os.name + " " + e3.os.version : e3.os.name;
            return e3.os.name || "";
          }(uT), s2 = uT.os.version;
          if (!(t2 && i2 && n2 && s2))
            return { name: t2, version: i2, os: n2, osVersion: s2 };
          hT = { name: t2, version: i2, os: n2, osVersion: s2 };
        }
        return hT;
      }
      function _T() {
        return pT().os;
      }
      function ET() {
        const e2 = pT();
        return "".concat(e2.os, " ").concat(e2.osVersion);
      }
      function mT() {
        const e2 = pT();
        return !!("WebKit" === uT.engine.name && e2.os === aT.MAC_OS && navigator.maxTouchPoints && navigator.maxTouchPoints > 0 && e2.name !== cT.SAFARI || CT() && e2.name !== cT.SAFARI);
      }
      function fT() {
        const e2 = pT();
        if (mT()) {
          if (e2.os === aT.MAC_OS)
            return true;
          if (e2.os === aT.IOS) {
            const e3 = uT.os.version && uT.os.version.split(".");
            if (e3 && 14 === Number(e3[0]) && e3[1] && Number(e3[1]) >= 3)
              return true;
            if (e3 && Number(e3[0]) > 14)
              return true;
          }
        }
        return false;
      }
      function TT() {
        return "WebKit" === uT.engine.name;
      }
      function gT() {
        return pT().name === cT.CHROME;
      }
      function ST() {
        return pT().name === cT.SAFARI;
      }
      function RT() {
        return pT().name === cT.FIREFOX;
      }
      function CT() {
        return pT().os === aT.IOS;
      }
      function IT(e2) {
        const t2 = pT();
        return !(t2.name !== cT.CHROME || !t2.osVersion) && Number(t2.version) >= e2;
      }
      function vT(e2) {
        const t2 = pT();
        return !(t2.name !== cT.EDGE || !t2.osVersion) && Number(t2.version) >= e2;
      }
      function yT(e2) {
        const t2 = pT();
        return !(t2.name !== cT.OPERA || !t2.osVersion) && Number(t2.version) >= e2;
      }
      function AT() {
        const e2 = pT();
        return !(e2.name !== cT.CHROME || !e2.osVersion) && Number(e2.version) <= 90;
      }
      function bT() {
        const e2 = pT();
        if (e2.os !== aT.IOS || !e2.osVersion)
          return false;
        const t2 = e2.osVersion.split(".");
        return Number(t2[0]) < 14 || 14 === Number(t2[0]) && Number(t2[1]) <= 6;
      }
      function wT() {
        const e2 = pT();
        if (e2.os !== aT.IOS || !e2.osVersion)
          return false;
        const t2 = e2.osVersion.split(".");
        return 15 === Number(t2[0]);
      }
      function OT() {
        const e2 = pT();
        if (e2.os !== aT.IOS || !e2.osVersion)
          return false;
        const t2 = e2.osVersion.split(".");
        return 16 === Number(t2[0]);
      }
      function NT() {
        const e2 = pT();
        if (e2.os !== aT.IOS || !e2.osVersion)
          return false;
        const t2 = e2.osVersion.split(".");
        return 15 === Number(t2[0]) && Number(t2[1]) >= 1;
      }
      function DT() {
        return ST() && navigator.maxTouchPoints > 0;
      }
      function PT() {
        return pT().name === cT.WECHAT;
      }
      function LT() {
        return window.navigator.appVersion && null !== window.navigator.appVersion.match(/Chrome\/([\w\W]*?)\./) && window.navigator.appVersion.match(/Chrome\/([\w\W]*?)\./)[1] <= 35;
      }
      function kT() {
        const e2 = pT();
        if (e2.name === cT.EDGE || e2.name === cT.SAFARI)
          return false;
        return !!navigator.userAgent.toLocaleLowerCase().match(/chrome\/[\d]./i);
      }
      function MT() {
        return _T() === aT.ANDROID;
      }
      function UT() {
        const e2 = pT();
        return MT() && (e2.name === cT.CHROME || e2.name === cT.WECHAT || /chrome|chromium/i.test(navigator.userAgent));
      }
      var xT;
      !function(e2) {
        e2.UNEXPECTED_ERROR = "UNEXPECTED_ERROR", e2.UNEXPECTED_RESPONSE = "UNEXPECTED_RESPONSE", e2.TIMEOUT = "TIMEOUT", e2.INVALID_PARAMS = "INVALID_PARAMS", e2.NOT_READABLE = "NOT_READABLE", e2.NOT_SUPPORTED = "NOT_SUPPORTED", e2.INVALID_OPERATION = "INVALID_OPERATION", e2.OPERATION_ABORTED = "OPERATION_ABORTED", e2.WEB_SECURITY_RESTRICT = "WEB_SECURITY_RESTRICT", e2.EXCHANGE_SDP_FAILED = "EXCHANGE_SDP_FAILED", e2.ADD_CANDIDATE_FAILED = "ADD_CANDIDATE_FAILED", e2.DATACHANNEL_FAILED = "DATACHANNEL_FAILED", e2.NETWORK_ERROR = "NETWORK_ERROR", e2.NETWORK_TIMEOUT = "NETWORK_TIMEOUT", e2.NETWORK_RESPONSE_ERROR = "NETWORK_RESPONSE_ERROR", e2.API_INVOKE_TIMEOUT = "API_INVOKE_TIMEOUT", e2.ENUMERATE_DEVICES_FAILED = "ENUMERATE_DEVICES_FAILED", e2.DEVICE_NOT_FOUND = "DEVICE_NOT_FOUND", e2.ELECTRON_IS_NULL = "ELECTRON_IS_NULL", e2.ELECTRON_DESKTOP_CAPTURER_GET_SOURCES_ERROR = "ELECTRON_DESKTOP_CAPTURER_GET_SOURCES_ERROR", e2.CHROME_PLUGIN_NO_RESPONSE = "CHROME_PLUGIN_NO_RESPONSE", e2.CHROME_PLUGIN_NOT_INSTALL = "CHROME_PLUGIN_NOT_INSTALL", e2.MEDIA_OPTION_INVALID = "MEDIA_OPTION_INVALID", e2.PERMISSION_DENIED = "PERMISSION_DENIED", e2.CONSTRAINT_NOT_SATISFIED = "CONSTRAINT_NOT_SATISFIED", e2.TRACK_IS_DISABLED = "TRACK_IS_DISABLED", e2.GET_VIDEO_ELEMENT_VISIBLE_ERROR = "GET_VIDEO_ELEMENT_VISIBLE_ERROR", e2.SHARE_AUDIO_NOT_ALLOWED = "SHARE_AUDIO_NOT_ALLOWED", e2.LOW_STREAM_ENCODING_ERROR = "LOW_STREAM_ENCODING_ERROR", e2.SET_ENCODING_PARAMETER_ERROR = "SET_ENCODING_PARAMETER_ERROR", e2.TRACK_STATE_UNREACHABLE = "TRACK_STATE_UNREACHABLE", e2.INVALID_UINT_UID_FROM_STRING_UID = "INVALID_UINT_UID_FROM_STRING_UID", e2.CAN_NOT_GET_PROXY_SERVER = "CAN_NOT_GET_PROXY_SERVER", e2.CAN_NOT_GET_GATEWAY_SERVER = "CAN_NOT_GET_GATEWAY_SERVER", e2.VOID_GATEWAY_ADDRESS = "VOID_GATEWAY_ADDRESS", e2.UID_CONFLICT = "UID_CONFLICT", e2.MULTI_UNILBS_RESPONSE_ERROR = "MULTI_UNILBS_RESPONSE_ERROR", e2.UPDATE_TICKET_FAILED = "UPDATE_TICKET_FAILED", e2.INVALID_LOCAL_TRACK = "INVALID_LOCAL_TRACK", e2.INVALID_TRACK = "INVALID_TRACK", e2.SENDER_NOT_FOUND = "SENDER_NOT_FOUND", e2.CREATE_OFFER_FAILED = "CREATE_OFFER_FAILED", e2.SET_ANSWER_FAILED = "SET_ANSWER_FAILED", e2.ICE_FAILED = "ICE_FAILED", e2.PC_CLOSED = "PC_CLOSED", e2.SENDER_REPLACE_FAILED = "SENDER_REPLACE_FAILED", e2.GET_LOCAL_CAPABILITIES_FAILED = "GET_LOCAL_CAPABILITIES_FAILED", e2.GET_LOCAL_CONNECTION_PARAMS_FAILED = "GET_LOCAL_CONNECTION_PARAMS_FAILED", e2.SUBSCRIBE_FAILED = "SUBSCRIBE_FAILED", e2.UNSUBSCRIBE_FAILED = "UNSUBSCRIBE_FAILED", e2.GATEWAY_P2P_LOST = "GATEWAY_P2P_LOST", e2.NO_ICE_CANDIDATE = "NO_ICE_CANDIDATE", e2.CAN_NOT_PUBLISH_MULTIPLE_VIDEO_TRACKS = "CAN_NOT_PUBLISH_MULTIPLE_VIDEO_TRACKS", e2.EXIST_DISABLED_VIDEO_TRACK = "EXIST_DISABLED_VIDEO_TRACK", e2.INVALID_REMOTE_USER = "INVALID_REMOTE_USER", e2.REMOTE_USER_IS_NOT_PUBLISHED = "REMOTE_USER_IS_NOT_PUBLISHED", e2.CUSTOM_REPORT_SEND_FAILED = "CUSTOM_REPORT_SEND_FAILED", e2.CUSTOM_REPORT_FREQUENCY_TOO_HIGH = "CUSTOM_REPORT_FREQUENCY_TOO_HIGH", e2.FETCH_AUDIO_FILE_FAILED = "FETCH_AUDIO_FILE_FAILED", e2.READ_LOCAL_AUDIO_FILE_ERROR = "READ_LOCAL_AUDIO_FILE_ERROR", e2.DECODE_AUDIO_FILE_FAILED = "DECODE_AUDIO_FILE_FAILED", e2.WS_ABORT = "WS_ABORT", e2.WS_DISCONNECT = "WS_DISCONNECT", e2.WS_ERR = "WS_ERR", e2.EXTERNAL_SIGNAL_ABORT = "EXTERNAL_SIGNAL_ABORT", e2.LIVE_STREAMING_TASK_CONFLICT = "LIVE_STREAMING_TASK_CONFLICT", e2.LIVE_STREAMING_INVALID_ARGUMENT = "LIVE_STREAMING_INVALID_ARGUMENT", e2.LIVE_STREAMING_INTERNAL_SERVER_ERROR = "LIVE_STREAMING_INTERNAL_SERVER_ERROR", e2.LIVE_STREAMING_PUBLISH_STREAM_NOT_AUTHORIZED = "LIVE_STREAMING_PUBLISH_STREAM_NOT_AUTHORIZED", e2.LIVE_STREAMING_TRANSCODING_NOT_SUPPORTED = "LIVE_STREAMING_TRANSCODING_NOT_SUPPORTED", e2.LIVE_STREAMING_CDN_ERROR = "LIVE_STREAMING_CDN_ERROR", e2.LIVE_STREAMING_INVALID_RAW_STREAM = "LIVE_STREAMING_INVALID_RAW_STREAM", e2.LIVE_STREAMING_WARN_STREAM_NUM_REACH_LIMIT = "LIVE_STREAMING_WARN_STREAM_NUM_REACH_LIMIT", e2.LIVE_STREAMING_WARN_FAILED_LOAD_IMAGE = "LIVE_STREAMING_WARN_FAILED_LOAD_IMAGE", e2.LIVE_STREAMING_WARN_FREQUENT_REQUEST = "LIVE_STREAMING_WARN_FREQUENT_REQUEST", e2.WEBGL_INTERNAL_ERROR = "WEBGL_INTERNAL_ERROR", e2.BEAUTY_PROCESSOR_INTERNAL_ERROR = "BEAUTY_PROCESSOR_INTERNAL_ERROR", e2.CROSS_CHANNEL_WAIT_STATUS_ERROR = "CROSS_CHANNEL_WAIT_STATUS_ERROR", e2.CROSS_CHANNEL_FAILED_JOIN_SRC = "CROSS_CHANNEL_FAILED_JOIN_SEC", e2.CROSS_CHANNEL_FAILED_JOIN_DEST = "CROSS_CHANNEL_FAILED_JOIN_DEST", e2.CROSS_CHANNEL_FAILED_PACKET_SENT_TO_DEST = "CROSS_CHANNEL_FAILED_PACKET_SENT_TO_DEST", e2.CROSS_CHANNEL_SERVER_ERROR_RESPONSE = "CROSS_CHANNEL_SERVER_ERROR_RESPONSE", e2.METADATA_OUT_OF_RANGE = "METADATA_OUT_OF_RANGE", e2.LOCAL_AEC_ERROR = "LOCAL_AEC_ERROR", e2.INVALID_PLUGIN = "INVALID_PLUGIN", e2.DISCONNECT_P2P = "DISCONNECT_P2P", e2.INIT_WEBSOCKET_TIMEOUT = "INIT_WEBSOCKET_TIMEOUT", e2.CONVERTING_IMAGEDATA_TO_BLOB_FAILED = "CONVERTING_IMAGEDATA_TO_BLOB_FAILED", e2.CONVERTING_VIDEO_FRAME_TO_BLOB_FAILED = "CONVERTING_VIDEO_FRAME_TO_BLOB_FAILED", e2.INIT_DATACHANNEL_TIMEOUT = "INIT_DATACHANNEL_TIMEOUT", e2.DATACHANNEL_CONNECTION_TIMEOUT = "DATACHANNEL_CONNECTION_TIMEOUT", e2.PROHIBITED_OPERATION = "PROHIBITED_OPERATION", e2.IMAGE_MODERATION_UPLOAD_FAILED = "IMAGE_MODERATION_UPLOAD_FAILED", e2.P2P_MESSAGE_FAILED = "P2P_MESSAGE_FAILED";
      }(xT || (xT = {}));
      let VT = class extends Error {
        constructor(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "", i2 = arguments.length > 2 ? arguments[2] : void 0;
          super(t2), nh(this, "code", void 0), nh(this, "message", void 0), nh(this, "data", void 0), nh(this, "name", "AgoraRTCException"), this.code = e2, this.message = "AgoraRTCError ".concat(this.code, ": ").concat(t2), this.data = i2;
        }
        toString() {
          return this.data ? "data: ".concat(JSON.stringify(this.data), "\n").concat(this.stack) : "".concat(this.stack);
        }
        print() {
          let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "error", t2 = arguments.length > 1 ? arguments[1] : void 0;
          return "error" === e2 && (t2 || console).error(this.toString()), "warning" === e2 && (t2 || console).warn(this.toString()), this;
        }
        throw(e2) {
          throw this.print("error", e2), this;
        }
      };
      function FT(e2, t2) {
        if ("boolean" != typeof e2)
          throw new VT(xT.INVALID_PARAMS, "Invalid ".concat(t2, ": The value is of the boolean type."));
      }
      function BT(e2, t2, i2) {
        if (bn(i2).call(i2, e2))
          return;
        throw new VT(xT.INVALID_PARAMS, "".concat(t2, " can only be set as ").concat(JSON.stringify(i2)));
      }
      function jT(e2, t2) {
        let i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1, n2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1e4;
        if (e2 < i2 || e2 > n2 || (!(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4]) && !function(e3) {
          return "number" == typeof e3 && e3 % 1 == 0;
        }(e2)) {
          throw new VT(xT.INVALID_PARAMS, "invalid ".concat(t2, ": the value range is [").concat(i2, ", ").concat(n2, "]. integer only"));
        }
      }
      function GT(e2, t2) {
        if ("number" != typeof e2) {
          if (!(e2.min || e2.max || e2.ideal || e2.exact)) {
            throw new VT(xT.INVALID_PARAMS, "".concat(t2, " is not a valid ConstrainLong"));
          }
          void 0 !== e2.min && jT(e2.min, "".concat(t2, ".min"), 0, 1 / 0), void 0 !== e2.max && jT(e2.max, "".concat(t2, ".max"), 1, 1 / 0), void 0 !== e2.exact && jT(e2.exact, "".concat(t2, ".exact"), 1, 1 / 0), void 0 !== e2.ideal && jT(e2.ideal, "".concat(t2, ".ideal"), 1, 1 / 0);
        } else
          jT(e2, t2, 1, 1 / 0);
      }
      function WT(e2, t2) {
        let i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1, n2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 255, s2 = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4];
        if (null == e2)
          throw new VT(xT.INVALID_PARAMS, "".concat(t2 || "param", " cannot be empty"));
        if (!YT(e2, i2, n2, s2))
          throw new VT(xT.INVALID_PARAMS, "Invalid ".concat(t2 || "string param", ": Length of the string: [").concat(i2, ",").concat(n2, "].").concat(s2 ? " ASCII characters only." : ""));
      }
      function HT(e2, t2) {
        if (!Array.isArray(e2))
          throw new VT(xT.INVALID_PARAMS, "".concat(t2, " should be an array"));
      }
      function KT(e2) {
        return null == e2;
      }
      function YT(e2) {
        let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1, i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 255, n2 = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3];
        return "string" == typeof e2 && e2.length <= i2 && e2.length >= t2 && (!n2 || function(e3) {
          if ("string" != typeof e3)
            return false;
          for (let t3 = 0; t3 < e3.length; t3 += 1) {
            const i3 = e3.charCodeAt(t3);
            if (i3 < 0 || i3 > 255)
              return false;
          }
          return true;
        }(e2));
      }
      function qT(e2, t2, i2) {
        if ("getBigUint64" in DataView.prototype)
          return e2.getBigUint64(t2, i2);
        const n2 = e2.getUint32(t2, i2), s2 = e2.getUint32(t2 + 4, i2), r2 = Number(!!i2), o2 = Number(!i2);
        return BigInt(n2 * o2 + s2 * r2) << BigInt(32) | BigInt(n2 * r2 + s2 * o2);
      }
      function JT(e2, t2, i2, n2) {
        if ("setBigUint64" in DataView.prototype)
          return e2.setBigUint64(t2, i2, n2);
        const s2 = Number(i2 >> BigInt(32)), r2 = Number(i2 & BigInt(4294967295));
        n2 ? (e2.setUint32(t2 + 4, s2, n2), e2.setUint32(t2, r2, n2)) : (e2.setUint32(t2, s2, n2), e2.setUint32(t2 + 4, r2, n2));
      }
      var zT, XT;
      !function(e2) {
        e2.COVERED = "COVERED", e2.POSITION = "POSITION", e2.SIZE = "SIZE", e2.STYLE = "STYLE";
      }(zT || (zT = {})), function(e2) {
        e2.UNMOUNTED = "UNMOUNTED", e2.INVALID_HTML_ELEMENT = "INVALID_HTML_ELEMENT";
      }(XT || (XT = {}));
      const QT = new class {
        constructor() {
          nh(this, "_clientSize", null), nh(this, "getClientWidth", () => document.documentElement ? document.documentElement.clientWidth : document.body.clientWidth), nh(this, "getClientHeight", () => document.documentElement ? document.documentElement.clientHeight : document.body.clientHeight), nh(this, "getStyle", (e2) => window.getComputedStyle(e2, null)), nh(this, "checkCssVisibleProperty", (e2) => {
            var t2;
            let i2 = true;
            const n2 = this.getStyle(e2), { display: s2, visibility: r2, opacity: o2, filter: a2 } = n2;
            if (("none" === s2 || bn(t2 = ["hidden", "collapse"]).call(t2, r2) || Number(o2) < 0.1) && (i2 = false), !i2)
              return false;
            if (a2) {
              a2.split(" ").filter((e3) => {
                var t3;
                const i3 = e3.split("(")[0];
                return bn(t3 = ["brightness", "blur", "opacity"]).call(t3, i3);
              }).map((e3) => {
                const [t3, i3] = e3.split(/\(|\)/);
                return [t3, Number(i3.match(/^[0-9\.]+/))];
              }).forEach((e3) => {
                const [t3, n3] = e3;
                switch (t3) {
                  case "brightness":
                    (n3 < 0.1 || n3 > 3) && (i2 = false);
                    break;
                  case "blur":
                    n3 > 3 && (i2 = false);
                    break;
                  case "opacity":
                    n3 < 0.1 && (i2 = false);
                }
              });
            }
            return i2;
          }), nh(this, "checkPropertyUpToAllParentNodes", (e2, t2) => {
            let i2 = true, n2 = true;
            const s2 = (e3) => t2(e3);
            let r2 = e2;
            for (; r2 && n2; ) {
              s2(r2) || (i2 = false, n2 = false), r2 = r2.parentElement, r2 || (n2 = false);
            }
            return i2;
          }), nh(this, "checkActualCssVisibleIncludeInherit", (e2) => this.checkPropertyUpToAllParentNodes(e2, this.checkCssVisibleProperty)), nh(this, "getSizeAboutClient", (e2) => {
            const { width: t2, height: i2, left: n2, right: s2, top: r2, bottom: o2 } = e2.getBoundingClientRect(), a2 = this.getClientWidth(), c2 = this.getClientHeight();
            return { width: t2, height: i2, left: n2, right: s2, top: r2, bottom: o2, clientWidth: a2, clientHeight: c2, clientMin: Math.min(a2, c2) };
          }), nh(this, "checkActualSize", () => {
            const { width: e2, height: t2, clientMin: i2 } = this._clientSize;
            return this.checkSizeIsVisible(e2, t2, i2);
          }), nh(this, "elementFromPoint", (e2, t2) => document.elementFromPoint ? document.elementFromPoint(e2, t2) : null), nh(this, "checkCoverForAPoint", (e2, t2, i2) => {
            const n2 = this.elementFromPoint(e2, t2);
            return null !== n2 && n2 !== i2;
          }), nh(this, "getPointPositionList", () => {
            const { width: e2, height: t2, left: i2, top: n2 } = this._clientSize, s2 = e2 / 6, r2 = t2 / 6, o2 = [], a2 = 10 ** 6;
            for (let e3 = 0; e3 < 5; e3++)
              for (let t3 = 0; t3 < 5; t3++) {
                const c2 = (i2 * a2 + (0 === e3 ? 0.1 : 4 === e3 ? (s2 * e3 * a2 - 1e5) / a2 : s2 * e3) * a2) / a2, d2 = (n2 * a2 + (0 === t3 ? 0.1 : 4 === t3 ? (r2 * t3 * a2 - 1e5) / a2 : r2 * t3) * a2) / a2;
                o2.push({ x: c2, y: d2 });
              }
            return [...o2];
          }), nh(this, "checkElementCover", (e2) => this.getPointPositionList().map((t2) => this.checkCoverForAPoint(t2.x, t2.y, e2)).filter((e3) => !!e3).length > 6), nh(this, "checkSizeIsVisible", (e2, t2, i2) => (e2 > 50 || i2 / e2 <= 10) && (t2 > 50 || i2 / t2 <= 10)), nh(this, "checkSizeOfPartInClient", () => {
            const { left: e2, right: t2, top: i2, bottom: n2, clientHeight: s2, clientWidth: r2, clientMin: o2 } = this._clientSize;
            let a2, c2, d2, l2;
            if (e2 < 0)
              a2 = 0;
            else {
              if (!(e2 < r2))
                return false;
              a2 = e2;
            }
            if (t2 < 0)
              return false;
            if (c2 = t2 < r2 ? t2 : r2, i2 < 0)
              d2 = 0;
            else {
              if (!(i2 < s2))
                return false;
              d2 = i2;
            }
            if (n2 < 0)
              return false;
            l2 = n2 < s2 ? n2 : s2;
            const u2 = c2 - a2, h2 = l2 - d2;
            return this.checkSizeIsVisible(u2, h2, o2);
          }), nh(this, "returnHiddenResult", (e2) => (this._clientSize = null, { visible: false, reason: e2 })), nh(this, "checkOneElementVisible", (e2) => {
            if (e2 instanceof HTMLElement) {
              if (this.checkElementIsMountedOnDom(e2)) {
                if (this.checkActualCssVisibleIncludeInherit(e2)) {
                  if (this._clientSize = this.getSizeAboutClient(e2), this.checkElementCover(e2))
                    return this.returnHiddenResult(zT.COVERED);
                  {
                    const e3 = this.checkActualSize(), t2 = this.checkSizeOfPartInClient();
                    return e3 && !t2 ? this.returnHiddenResult(zT.POSITION) : e3 ? (this._clientSize = null, { visible: true }) : this.returnHiddenResult(zT.SIZE);
                  }
                }
                return this.returnHiddenResult(zT.STYLE);
              }
              return this.returnHiddenResult(XT.UNMOUNTED);
            }
            return this.returnHiddenResult(XT.INVALID_HTML_ELEMENT);
          }), nh(this, "checkElementIsMountedOnDom", (e2) => this.checkPropertyUpToAllParentNodes(e2, (e3) => "HTML" !== e3.nodeName.toUpperCase() ? null !== e3.parentElement : !!document.documentElement));
        }
      }();
      function ZT(e2) {
        return new TextEncoder().encode(e2);
      }
      const $T = function(e2, t2) {
        const i2 = new Uint8Array(e2.byteLength + t2.byteLength);
        return i2.set(new Uint8Array(e2), 0), i2.set(new Uint8Array(t2), e2.byteLength), i2;
      };
      const eg = async (e2) => {
        const t2 = function(e3) {
          const t3 = window.atob(e3), i3 = new Uint8Array(new ArrayBuffer(t3.length));
          for (let e4 = 0; e4 < t3.length; e4 += 1)
            i3[e4] = t3.charCodeAt(e4);
          return i3;
        }("MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDCMnXAHkKIGAM+x4N22gCI+Wyu\nSTM9ztkT3uYslTT2PuKmZfPzhH6kVdO7PTjGCOZnAsyb3oTtWat0KcxQ4jxvqQV+\nHvYl3iI1Yd4vl2c3qRMJPLtRDfNxa2Mcxgq7e9aEUibzdd0st+OJAy3tOj/Y0aVy\nxQiYDz3vqa6bP29adwIDAQAB"), i2 = await window.crypto.subtle.importKey("spki", t2, { name: "RSA-OAEP", hash: "SHA-256" }, true, ["encrypt"]), n2 = ZT(e2), s2 = await window.crypto.subtle.encrypt({ name: "RSA-OAEP" }, i2, n2);
        return function(e3) {
          let t3 = "";
          for (let i3 = 0; i3 < e3.length; i3 += 1)
            t3 += String.fromCharCode(e3[i3]);
          return window.btoa(t3);
        }(new Uint8Array(s2));
      }, tg = async (e2) => function(e3, t2) {
        let i2 = "";
        return new Uint8Array(e3).forEach((e4) => {
          i2 += e4.toString(t2).padStart(2, "0");
        }), i2;
      }(await crypto.subtle.digest("SHA-256", ZT(e2)), 16);
      class ig {
        constructor() {
          nh(this, "_events", {}), nh(this, "addListener", this.on);
        }
        getListeners(e2) {
          return this._events[e2] ? this._events[e2].map((e3) => e3.listener) : [];
        }
        on(e2, t2) {
          this._events[e2] || (this._events[e2] = []);
          const i2 = this._events[e2];
          -1 === this._indexOfListener(i2, t2) && i2.push({ listener: t2, once: false });
        }
        once(e2, t2) {
          this._events[e2] || (this._events[e2] = []);
          const i2 = this._events[e2];
          -1 === this._indexOfListener(i2, t2) && i2.push({ listener: t2, once: true });
        }
        off(e2, t2) {
          if (!this._events[e2])
            return;
          const i2 = this._events[e2], n2 = this._indexOfListener(i2, t2);
          -1 !== n2 && i2.splice(n2, 1), 0 === this._events[e2].length && delete this._events[e2];
        }
        removeAllListeners(e2) {
          e2 ? delete this._events[e2] : this._events = {};
        }
        emit(e2) {
          this._events[e2] || (this._events[e2] = []);
          const t2 = this._events[e2].map((e3) => e3);
          for (var i2 = arguments.length, n2 = new Array(i2 > 1 ? i2 - 1 : 0), s2 = 1; s2 < i2; s2++)
            n2[s2 - 1] = arguments[s2];
          for (let i3 = 0; i3 < t2.length; i3 += 1) {
            const s3 = t2[i3];
            s3.once && this.off(e2, s3.listener), s3.listener.apply(this, n2 || []);
          }
        }
        safeEmit(e2) {
          for (var t2 = arguments.length, i2 = new Array(t2 > 1 ? t2 - 1 : 0), n2 = 1; n2 < t2; n2++)
            i2[n2 - 1] = arguments[n2];
          [...this._events[e2] || []].forEach((t3) => {
            t3.once && this.off(e2, t3.listener);
            try {
              t3.listener.apply(this, i2);
            } catch (t4) {
              console.error("safeEmit event:".concat(e2, " error ").concat(null == t4 ? void 0 : t4.toString()));
            }
          });
        }
        _indexOfListener(e2, t2) {
          let i2 = e2.length;
          for (; i2--; )
            if (e2[i2].listener === t2)
              return i2;
          return -1;
        }
      }
      let ng = null;
      function sg() {
        if (ng)
          return ng;
        if (window.electron)
          return ng = window.electron;
        if (!window.require)
          return null;
        try {
          return ng = window.require("electron"), ng;
        } catch (e2) {
          return null;
        }
      }
      var rg, og, ag, cg, dg, lg, ug, hg;
      function pg(e2) {
        return jT(e2.timeout, "config.timeout", 0, 1e5), jT(e2.timeoutFactor, "config.timeoutFactor", 0, 100, false), jT(e2.maxRetryCount, "config.maxRetryConfig", 0, 1 / 0), jT(e2.maxRetryTimeout, "config.maxRetryTimeout", 0, 1 / 0), true;
      }
      function _g(e2) {
        if (!Array.isArray(e2) || e2.length < 1)
          return false;
        try {
          e2.forEach((e3) => {
            if (!e3.urls)
              throw Error();
          });
        } catch (e3) {
          return false;
        }
        return true;
      }
      function Eg(e2) {
        return WT(e2.turnServerURL, "turnServerURL"), WT(e2.username, "username"), WT(e2.password, "password"), e2.udpport && jT(e2.udpport, "udpport", 1, 99999, true), e2.forceturn && FT(e2.forceturn, "forceturn"), e2.security && FT(e2.security, "security"), e2.tcpport && jT(e2.tcpport, "tcpport", 1, 99999, true), true;
      }
      function mg(e2) {
        return void 0 !== e2.level && BT(e2.level, "level", [1, 2, 3]), void 0 !== e2.delay && jT(e2.delay, "delay", 0, 3e3, true), true;
      }
      function fg(e2, t2) {
        for (var i2 = arguments.length, n2 = new Array(i2 > 2 ? i2 - 2 : 0), s2 = 2; s2 < i2; s2++)
          n2[s2 - 2] = arguments[s2];
        return 0 === e2.getListeners(t2).length ? tT.reject(new VT(xT.UNEXPECTED_ERROR, "can not emit promise")) : new tT((i3, s3) => {
          e2.emit(t2, ...n2, i3, s3);
        });
      }
      function Tg(e2, t2) {
        if (0 === e2.getListeners(t2).length)
          return tT.resolve();
        for (var i2 = arguments.length, n2 = new Array(i2 > 2 ? i2 - 2 : 0), s2 = 2; s2 < i2; s2++)
          n2[s2 - 2] = arguments[s2];
        return fg(e2, t2, ...n2);
      }
      function gg(e2, t2) {
        if (0 === e2.getListeners(t2).length)
          return null;
        for (var i2 = arguments.length, n2 = new Array(i2 > 2 ? i2 - 2 : 0), s2 = 2; s2 < i2; s2++)
          n2[s2 - 2] = arguments[s2];
        return Sg(e2, t2, ...n2);
      }
      function Sg(e2, t2) {
        let i2 = null, n2 = null;
        for (var s2 = arguments.length, r2 = new Array(s2 > 2 ? s2 - 2 : 0), o2 = 2; o2 < s2; o2++)
          r2[o2 - 2] = arguments[o2];
        if (e2.emit(t2, ...r2, (e3) => {
          i2 = e3;
        }, (e3) => {
          n2 = e3;
        }), null !== n2)
          throw n2;
        if (null === i2)
          throw new VT(xT.UNEXPECTED_ERROR, "handler is not sync");
        return i2;
      }
      !function(e2) {
        e2.CREATE_CLIENT = "createClient", e2.CHECK_SYSTEM_REQUIREMENTS = "checkSystemRequirements", e2.SET_AREA = "setArea", e2.CHECK_VIDEO_TRACK_IS_ACTIVE = "checkVideoTrackIsActive", e2.CHECK_AUDIO_TRACK_IS_ACTIVE = "checkAudioTrackIsActive", e2.CREATE_MIC_AUDIO_TRACK = "createMicrophoneAudioTrack", e2.CREATE_CUSTOM_AUDIO_TRACK = "createCustomAudioTrack", e2.CREATE_BUFFER_AUDIO_TRACK = "createBufferSourceAudioTrack", e2.CREATE_CAM_VIDEO_TRACK = "createCameraVideoTrack", e2.CREATE_CUSTOM_VIDEO_TRACK = "createCustomVideoTrack", e2.CREATE_MIC_AND_CAM_TRACKS = "createMicrophoneAndCameraTracks", e2.CREATE_SCREEN_VIDEO_TRACK = "createScreenVideoTrack", e2.SET_ENCRYPTION_CONFIG = "Client.setEncryptionConfig", e2.START_PROXY_SERVER = "Client.startProxyServer", e2.STOP_PROXY_SERVER = "Client.stopProxyServer", e2.SET_PROXY_SERVER = "Client.setProxyServer", e2.SET_TURN_SERVER = "Client.setTurnServer", e2.SET_CLIENT_ROLE = "Client.setClientRole", e2.SET_LOW_STREAM_PARAMETER = "Client.setLowStreamParameter", e2.ENABLE_DUAL_STREAM = "Client.enableDualStream", e2.DISABLE_DUAL_STREAM = "Client.disableDualStream", e2.JOIN = "Client.join", e2.LEAVE = "Client.leave", e2.PUBLISH = "Client.publish", e2.UNPUBLISH = "Client.unpublish", e2.SUBSCRIBE = "Client.subscribe", e2.MASS_SUBSCRIBE = "Client.massSubscribe", e2.MASS_UNSUBSCRIBE = "Client.massUnsubscribe", e2.UNSUBSCRIBE = "Client.unsubscribe", e2.RENEW_TOKEN = "Client.renewToken", e2.SET_REMOTE_VIDEO_STREAM_TYPE = "Client.setRemoteVideoStreamType", e2.SET_STREAM_FALLBACK_OPTION = "Client.setStreamFallbackOption", e2.ENABLE_AUDIO_VOLUME_INDICATOR = "Client.enableAudioVolumeIndicator", e2.SEND_CUSTOM_REPORT_MESSAGE = "Client.sendCustomReportMessage", e2.INSPECT_VIDEO_CONTENT = "Client.inspectVideoContent", e2.STOP_INSPECT_VIDEO_CONTENT = "Client.stopInspectVideoContent", e2.JOIN_FALLBACK_TO_PROXY = "Client._joinFallbackToProxy", e2.DATACHANNEL_FAILBACK = "Client._datachannelFailback", e2.ON_LIVE_STREAM_WARNING = "Client.onLiveStreamWarning", e2.ON_LIVE_STREAM_ERROR = "Client.onLiveStreamingError", e2.START_LIVE_STREAMING = "Client.startLiveStreaming", e2.SET_LIVE_TRANSCODING = "Client.setLiveTranscoding", e2.STOP_LIVE_STREAMING = "Client.stopLiveStreaming", e2.ADD_INJECT_STREAM_URL = "Client.addInjectStreamUrl", e2.REMOVE_INJECT_STREAM_URL = "Client.removeInjectStreamUrl", e2.START_CHANNEL_MEDIA_RELAY = "Client.startChannelMediaRelay", e2.UPDATE_CHANNEL_MEDIA_RELAY = "Client.updateChannelMediaRelay", e2.STOP_CHANNEL_MEDIA_RELAY = "Client.stopChannelMediaRelay", e2.REQUEST_CONFIG_DISTRIBUTE = "_config-distribute-request", e2.SET_CONFIG_DISTRIBUTE = "_configDistribute", e2.LOCAL_TRACK_SET_MUTED = "LocalTrack.setMute", e2.LOCAL_AUDIO_TRACK_PLAY = "LocalAudioTrack.play", e2.LOCAL_AUDIO_TRACK_PLAY_IN_ELEMENT = "LocalAudioTrack.playInElement", e2.LOCAL_AUDIO_TRACK_STOP = "LocalAudioTrack.stop", e2.LOCAL_AUDIO_TRACK_SET_VOLUME = "LocalAudioTrack.setVolume", e2.MIC_AUDIO_TRACK_SET_DEVICE = "MicrophoneAudioTrack.setDevice", e2.BUFFER_AUDIO_TRACK_START = "BufferSourceAudioTrack.startProcessAudioBuffer", e2.BUFFER_AUDIO_TRACK_STOP = "BufferSourceAudioTrack.stopProcessAudioBuffer", e2.BUFFER_AUDIO_TRACK_PAUSE = "BufferSourceAudioTrack.pauseProcessAudioBuffer", e2.BUFFER_AUDIO_TRACK_RESUME = "BufferSourceAudioTrack.resumeProcessAudioBuffer", e2.BUFFER_AUDIO_TRACK_SEEK = "BufferSourceAudioTrack.seekAudioBuffer", e2.LOCAL_VIDEO_TRACK_PLAY = "LocalVideoTrack.play", e2.LOCAL_VIDEO_TRACK_STOP = "LocalVideoTrack.stop", e2.LOCAL_VIDEO_TRACK_GET_VIDEO_VISIBLE = "LocalVideoTrack.getVideoElementVisibleStatus", e2.LOCAL_VIDEO_TRACK_BEAUTY = "LocalVideoTrack.setBeautyEffect", e2.CAM_VIDEO_TRACK_SET_DEVICE = "CameraVideoTrack.setDevice", e2.CAM_VIDEO_TRACK_SET_ENCODER_CONFIG = "CameraVideoTrack.setEncoderConfiguration", e2.REMOTE_VIDEO_TRACK_PLAY = "RemoteVideoTrack.play", e2.REMOTE_VIDEO_TRACK_STOP = "RemoteVideoTrack.stop", e2.REMOTE_VIDEO_TRACK_GET_VIDEO_VISIBLE = "RemoteVideoTrack.getVideoElementVisibleStatus", e2.REMOTE_AUDIO_TRACK_PLAY = "RemoteAudioTrack.play", e2.REMOTE_AUDIO_TRACK_STOP = "RemoteAudioTrack.stop", e2.REMOTE_AUDIO_SET_VOLUME = "RemoteAudioTrack.setVolume", e2.REMOTE_AUDIO_SET_OUTPUT_DEVICE = "RemoteAudioTrack.setOutputDevice", e2.GET_MEDIA_STREAM_TRACK = "Track.getMediaStreamTrack", e2.STREAM_TYPE_CHANGE = "streamTypeChange", e2.CONNECTION_STATE_CHANGE = "connectionStateChange", e2.LOAD_CONFIG_FROM_LOCALSTORAGE = "loadConfigFromLocalStorage", e2.IMAGE_MODERATION_UPLOAD = "imageModerationUpload";
      }(rg || (rg = {})), function(e2) {
        e2.TRACER = "tracer";
      }(og || (og = {})), function(e2) {
        e2[e2.AUDIENCE_LEVEL_LOW_LATENCY = 1] = "AUDIENCE_LEVEL_LOW_LATENCY", e2[e2.AUDIENCE_LEVEL_ULTRA_LOW_LATENCY = 2] = "AUDIENCE_LEVEL_ULTRA_LOW_LATENCY", e2[e2.AUDIENCE_LEVEL_SYNC_LATENCY = 3] = "AUDIENCE_LEVEL_SYNC_LATENCY";
      }(ag || (ag = {})), function(e2) {
        e2.LEAVE = "LEAVE", e2.NETWORK_ERROR = "NETWORK_ERROR", e2.SERVER_ERROR = "SERVER_ERROR", e2.UID_BANNED = "UID_BANNED", e2.IP_BANNED = "IP_BANNED", e2.CHANNEL_BANNED = "CHANNEL_BANNED", e2.FALLBACK = "FALLBACK", e2.LICENSE_MISSING = "LICENSE_MISSING", e2.LICENSE_EXPIRED = "LICENSE_EXPIRED", e2.LICENSE_MINUTES_EXCEEDED = "LICENSE_MINUTES_EXCEEDED", e2.LICENSE_PERIOD_INVALID = "LICENSE_PERIOD_INVALID", e2.LICENSE_MULTIPLE_SDK_SERVICE = "LICENSE_MULTIPLE_SDK_SERVICE", e2.LICENSE_ILLEGAL = "LICENSE_ILLEGAL", e2.TOKEN_EXPIRE = "TOKEN_EXPIRE";
      }(cg || (cg = {})), function(e2) {
        e2.CONNECTION_STATE_CHANGE = "connection-state-change", e2.MEDIA_RECONNECT_START = "media-reconnect-start", e2.MEDIA_RECONNECT_END = "media-reconnect-end", e2.IS_USING_CLOUD_PROXY = "is-using-cloud-proxy", e2.USER_JOINED = "user-joined", e2.USER_LEAVED = "user-left", e2.USER_PUBLISHED = "user-published", e2.USER_UNPUBLISHED = "user-unpublished", e2.USER_INFO_UPDATED = "user-info-updated", e2.CLIENT_BANNED = "client-banned", e2.CHANNEL_MEDIA_RELAY_STATE = "channel-media-relay-state", e2.CHANNEL_MEDIA_RELAY_EVENT = "channel-media-relay-event", e2.VOLUME_INDICATOR = "volume-indicator", e2.CRYPT_ERROR = "crypt-error", e2.ON_TOKEN_PRIVILEGE_WILL_EXPIRE = "token-privilege-will-expire", e2.ON_TOKEN_PRIVILEGE_DID_EXPIRE = "token-privilege-did-expire", e2.NETWORK_QUALITY = "network-quality", e2.STREAM_TYPE_CHANGED = "stream-type-changed", e2.STREAM_FALLBACK = "stream-fallback", e2.RECEIVE_METADATA = "receive-metadata", e2.STREAM_MESSAGE = "stream-message", e2.LIVE_STREAMING_ERROR = "live-streaming-error", e2.LIVE_STREAMING_WARNING = "live-streaming-warning", e2.INJECT_STREAM_STATUS = "stream-inject-status", e2.EXCEPTION = "exception", e2.ERROR = "error", e2.P2P_LOST = "p2p_lost", e2.JOIN_FALLBACK_TO_PROXY = "join-fallback-to-proxy", e2.CHANNEL_FALLBACK_TO_WEBSOCKET = "channel-fallback-to-websocket", e2.MEDIA_CONNECTION_TYPE_CHANGE = "media-connection-type-change", e2.PUBLISHED_USER_LIST = "published-user-list", e2.CONTENT_INSPECT_CONNECTION_STATE_CHANGE = "content-inspect-connection-state-change", e2.CONTENT_INSPECT_ERROR = "content-inspect-error", e2.CONTENT_INSPECT_RESULT = "content-inspect-result", e2.IMAGE_MODERATION_CONNECTION_STATE_CHANGE = "image-moderation-connection-state-change";
      }(dg || (dg = {})), function(e2) {
        e2.NETWORK_ERROR = "NETWORK_ERROR", e2.SERVER_ERROR = "SERVER_ERROR", e2.MULTI_IP = "MULTI_IP", e2.TIMEOUT = "TIMEOUT", e2.OFFLINE = "OFFLINE", e2.LEAVE = "LEAVE", e2.P2P_FAILED = "P2P_FAILED", e2.FALLBACK = "FALLBACK";
      }(lg || (lg = {})), function(e2) {
        e2.ONLINE = "ONLINE", e2.OFFLINE = "OFFLINE";
      }(ug || (ug = {})), function(e2) {
        e2.NETWORK_STATE_CHANGE = "NETWORK_STATE_CHANGE", e2.ONLINE = "ONLINE", e2.OFFLINE = "OFFLINE";
      }(hg || (hg = {}));
      const Rg = new class extends ig {
        set networkState(e2) {
          this.emit(hg.NETWORK_STATE_CHANGE, e2, this._networkState), e2 === ug.ONLINE ? this.emit(hg.ONLINE) : e2 === ug.OFFLINE && (this.onlineWaiter = new tT((e3) => {
            this.once(hg.ONLINE, () => {
              this.onlineWaiter = void 0, e3(ug.ONLINE);
            });
          }), this.emit(hg.OFFLINE)), this._networkState = e2;
        }
        get networkState() {
          return this._networkState;
        }
        get isOnline() {
          return this._networkState === ug.ONLINE;
        }
        constructor() {
          super(), nh(this, "_moduleName", "network-indicator"), nh(this, "_networkState", ug.ONLINE), nh(this, "onlineWaiter", void 0), window.addEventListener("online", () => {
            this.networkState = ug.ONLINE;
          }), window.addEventListener("offline", () => {
            this.networkState = ug.OFFLINE;
          });
        }
      }();
      function Cg(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function Ig(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? Cg(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : Cg(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      function vg(e2, t2) {
        const i2 = e2.indexOf(t2);
        -1 !== i2 && e2.splice(i2, 1);
      }
      function yg(e2) {
        const t2 = [];
        return e2.forEach((e3) => {
          -1 === t2.indexOf(e3) && t2.push(e3);
        }), t2;
      }
      function Ag(e2) {
        void 0 !== tT ? tT.resolve().then(e2) : setTimeout(e2, 0);
      }
      function bg(e2) {
        return JSON.parse(JSON.stringify(e2));
      }
      function wg(e2) {
        try {
          return bg(e2);
        } catch (t2) {
          return e2;
        }
      }
      const Og = {};
      function Ng(e2, t2) {
        Og[t2] || (Og[t2] = true, e2());
      }
      function Dg(e2) {
        const t2 = window.atob(e2), i2 = new Uint8Array(new ArrayBuffer(t2.length));
        for (let e3 = 0; e3 < t2.length; e3 += 1)
          i2[e3] = t2.charCodeAt(e3);
        return i2;
      }
      function Pg(e2) {
        let t2 = "";
        for (let i2 = 0; i2 < e2.length; i2 += 1)
          t2 += String.fromCharCode(e2[i2]);
        return window.btoa(t2);
      }
      function Lg(e2) {
        return window.TextEncoder ? new TextEncoder().encode(e2).length : e2.length;
      }
      function kg(e2) {
        let t2 = 0;
        return /DingTalk/i.test(navigator.userAgent) && e2.realFormData && (e2 = e2.realFormData), e2.forEach((e3) => {
          t2 += "string" == typeof e3 ? Lg(e3) : e3.size;
        }), t2 + 138;
      }
      function Mg(e2) {
        const t2 = new VT(xT.TIMEOUT, "timeout");
        return new tT((i2, n2) => {
          window.setTimeout(() => n2(t2), e2);
        });
      }
      function Ug(e2) {
        return new tT((t2) => {
          window.setTimeout(t2, e2);
        });
      }
      function xg() {
        let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 7, t2 = arguments.length > 1 ? arguments[1] : void 0;
        const i2 = Math.random().toString(16).substr(2, e2).toLowerCase();
        return i2.length === e2 ? "".concat(t2).concat(i2) : "".concat(t2).concat(i2) + xg(e2 - i2.length, "");
      }
      function Vg() {
        return xg(32, "").toUpperCase();
      }
      const Fg = () => {
      };
      const Bg = new class {
        constructor() {
          nh(this, "fnMap", /* @__PURE__ */ new Map());
        }
        throttleByKey(e2, t2, i2, n2) {
          for (var s2 = arguments.length, r2 = new Array(s2 > 4 ? s2 - 4 : 0), o2 = 4; o2 < s2; o2++)
            r2[o2 - 4] = arguments[o2];
          if (this.fnMap.has(t2)) {
            const s3 = this.fnMap.get(t2);
            if (s3.threshold !== i2) {
              s3.fn(...s3.args), clearTimeout(s3.timer);
              const o3 = window.setTimeout(() => {
                const e3 = this.fnMap.get(t2);
                e3 && e3.fn(...e3.args), this.fnMap.delete(t2);
              }, i2);
              this.fnMap.set(t2, { fn: e2, threshold: i2, timer: o3, args: r2, skipFn: n2 });
            } else
              s3.skipFn && s3.skipFn(...s3.args), this.fnMap.set(t2, Ig(Ig({}, s3), {}, { fn: e2, args: r2, skipFn: n2 }));
          } else {
            const s3 = window.setTimeout(() => {
              const e3 = this.fnMap.get(t2);
              e3 && e3.fn(...e3.args), this.fnMap.delete(t2);
            }, i2);
            this.fnMap.set(t2, { fn: e2, threshold: i2, timer: s3, args: r2, skipFn: n2 });
          }
        }
      }(), jg = Bg.throttleByKey.bind(Bg);
      function Gg(e2) {
        return "object" == typeof e2 && null !== e2 && !(e2 instanceof RegExp);
      }
      function Wg(e2, t2) {
        if (!Gg(e2) || !Gg(t2))
          return t2;
        if (Array.isArray(e2) && !Array.isArray(t2) || !Array.isArray(e2) && Array.isArray(t2))
          return t2;
        if (Array.isArray(t2) && Array.isArray(e2)) {
          const i2 = [...e2];
          for (let n2 = 0; n2 < t2.length; n2++)
            i2[n2] = Wg(e2[n2], t2[n2]);
          return i2;
        }
        {
          const i2 = Ig({}, e2);
          for (const n2 in t2)
            Object.prototype.hasOwnProperty.call(t2, n2) && (Object.prototype.hasOwnProperty.call(e2, n2) ? i2[n2] = Wg(e2[n2], t2[n2]) : i2[n2] = t2[n2]);
          return i2;
        }
      }
      let Hg = 1, Kg = console;
      class Yg {
        static setLogger(e2) {
          Kg = e2;
        }
        constructor(e2) {
          nh(this, "lockingPromise", tT.resolve()), nh(this, "locks", 0), nh(this, "name", ""), nh(this, "lockId", void 0), this.lockId = Hg++, e2 && (this.name = e2), Kg.debug("[lock-".concat(this.name, "-").concat(this.lockId, "] is created."));
        }
        get isLocked() {
          return this.locks > 0;
        }
        lock(e2) {
          let t2;
          this.locks += 1, Kg.debug("[lock-".concat(this.name, "-").concat(this.lockId, "] is locked, current queue ").concat(this.locks, ". ").concat("string" == typeof e2 ? e2 : ""));
          const i2 = new tT((i3) => {
            t2 = () => {
              this.locks -= 1, Kg.debug("[lock-".concat(this.name, "-").concat(this.lockId, "] is not locked, current queue ").concat(this.locks, ". ").concat("string" == typeof e2 ? e2 : "")), i3();
            };
          }), n2 = this.lockingPromise.then(() => t2);
          return this.lockingPromise = this.lockingPromise.then(() => i2), n2;
        }
      }
      function qg(e2, t2) {
        return function(i2, n2, s2) {
          const r2 = s2.value;
          if ("function" != typeof r2)
            throw new Error("Cannot use mutex on object property.");
          return s2.value = async function() {
            const i3 = this[t2];
            if (!i3)
              throw new Error("mutex property key ".concat(t2, " doesn't exist on ").concat(e2));
            const s3 = await i3.lock("From ".concat(e2, ".").concat(n2));
            try {
              for (var o2 = arguments.length, a2 = new Array(o2), c2 = 0; c2 < o2; c2++)
                a2[c2] = arguments[c2];
              return await r2.apply(this, a2);
            } finally {
              s3();
            }
          }, s2;
        };
      }
      const Jg = { timeout: 500, timeoutFactor: 1.5, maxRetryCount: 1 / 0, maxRetryTimeout: 1e4 };
      function zg(e2, t2) {
        const i2 = Math.floor(t2.timeout * Math.pow(t2.timeoutFactor, e2));
        return Math.min(t2.maxRetryTimeout, i2);
      }
      function Xg(e2, t2, i2, n2) {
        const s2 = Object.assign({}, Jg, n2);
        let r2 = s2.timeout;
        const o2 = async () => {
          await function(e3) {
            return new tT((t3) => {
              window.setTimeout(t3, e3);
            });
          }(r2), r2 *= s2.timeoutFactor, r2 = Math.min(s2.maxRetryTimeout, r2);
        };
        let a2 = false;
        const c2 = new tT(async (n3, r3) => {
          t2 = t2 || (() => false), i2 = i2 || (() => true);
          for (let c3 = 0; c3 < s2.maxRetryCount; c3 += 1) {
            if (a2)
              return r3(new VT(xT.OPERATION_ABORTED));
            try {
              const i3 = await e2();
              if (!t2(i3, c3))
                return n3(i3);
              if (c3 + 1 === s2.maxRetryCount)
                return n3(i3);
              await o2();
            } catch (e3) {
              if (!i2(e3, c3))
                return r3(e3);
              if (c3 + 1 === s2.maxRetryCount)
                return r3(e3);
              await o2();
            }
          }
        });
        return c2.cancel = () => a2 = true, c2;
      }
      var Qg = De, Zg = ze, $g = K, eS = Bi, tS = TypeError, iS = function(e2) {
        return function(t2, i2, n2, s2) {
          Qg(i2);
          var r2 = Zg(t2), o2 = $g(r2), a2 = eS(r2), c2 = e2 ? a2 - 1 : 0, d2 = e2 ? -1 : 1;
          if (n2 < 2)
            for (; ; ) {
              if (c2 in o2) {
                s2 = o2[c2], c2 += d2;
                break;
              }
              if (c2 += d2, e2 ? c2 < 0 : a2 <= c2)
                throw tS("Reduce of empty array with no initial value");
            }
          for (; e2 ? c2 >= 0 : a2 > c2; c2 += d2)
            c2 in o2 && (s2 = i2(s2, o2[c2], c2, r2));
          return s2;
        };
      }, nS = { left: iS(false), right: iS(true) }.left;
      wi({ target: "Array", proto: true, forced: !C_ && Ee > 79 && Ee < 83 || !Rh("reduce") }, { reduce: function(e2) {
        var t2 = arguments.length;
        return nS(this, e2, t2, t2 > 1 ? arguments[1] : void 0);
      } });
      var sS = Ji("Array").reduce, rS = l, oS = sS, aS = Array.prototype, cS = i(function(e2) {
        var t2 = e2.reduce;
        return e2 === aS || rS(aS, e2) && t2 === aS.reduce ? oS : t2;
      });
      let dS = class {
        constructor(e2) {
          nh(this, "input", []), nh(this, "size", void 0), this.size = e2;
        }
        add(e2) {
          this.input.push(e2), this.input.length > this.size && this.input.splice(0, 1);
        }
        mean() {
          var e2;
          return 0 === this.input.length ? 0 : cS(e2 = this.input).call(e2, (e3, t2) => e3 + t2) / this.input.length;
        }
      };
      var lS, uS = { exports: {} }, hS = function(e2, t2) {
        return function() {
          for (var i2 = new Array(arguments.length), n2 = 0; n2 < i2.length; n2++)
            i2[n2] = arguments[n2];
          return e2.apply(t2, i2);
        };
      }, pS = hS, _S = Object.prototype.toString, ES = (lS = /* @__PURE__ */ Object.create(null), function(e2) {
        var t2 = _S.call(e2);
        return lS[t2] || (lS[t2] = t2.slice(8, -1).toLowerCase());
      });
      function mS(e2) {
        return e2 = e2.toLowerCase(), function(t2) {
          return ES(t2) === e2;
        };
      }
      function fS(e2) {
        return Array.isArray(e2);
      }
      function TS(e2) {
        return void 0 === e2;
      }
      var gS = mS("ArrayBuffer");
      function SS(e2) {
        return null !== e2 && "object" == typeof e2;
      }
      function RS(e2) {
        if ("object" !== ES(e2))
          return false;
        var t2 = Object.getPrototypeOf(e2);
        return null === t2 || t2 === Object.prototype;
      }
      var CS = mS("Date"), IS = mS("File"), vS = mS("Blob"), yS = mS("FileList");
      function AS(e2) {
        return "[object Function]" === _S.call(e2);
      }
      var bS = mS("URLSearchParams");
      function wS(e2, t2) {
        if (null != e2)
          if ("object" != typeof e2 && (e2 = [e2]), fS(e2))
            for (var i2 = 0, n2 = e2.length; i2 < n2; i2++)
              t2.call(null, e2[i2], i2, e2);
          else
            for (var s2 in e2)
              Object.prototype.hasOwnProperty.call(e2, s2) && t2.call(null, e2[s2], s2, e2);
      }
      var OS, NS = (OS = "undefined" != typeof Uint8Array && Object.getPrototypeOf(Uint8Array), function(e2) {
        return OS && e2 instanceof OS;
      }), DS = { isArray: fS, isArrayBuffer: gS, isBuffer: function(e2) {
        return null !== e2 && !TS(e2) && null !== e2.constructor && !TS(e2.constructor) && "function" == typeof e2.constructor.isBuffer && e2.constructor.isBuffer(e2);
      }, isFormData: function(e2) {
        var t2 = "[object FormData]";
        return e2 && ("function" == typeof FormData && e2 instanceof FormData || _S.call(e2) === t2 || AS(e2.toString) && e2.toString() === t2);
      }, isArrayBufferView: function(e2) {
        return "undefined" != typeof ArrayBuffer && ArrayBuffer.isView ? ArrayBuffer.isView(e2) : e2 && e2.buffer && gS(e2.buffer);
      }, isString: function(e2) {
        return "string" == typeof e2;
      }, isNumber: function(e2) {
        return "number" == typeof e2;
      }, isObject: SS, isPlainObject: RS, isUndefined: TS, isDate: CS, isFile: IS, isBlob: vS, isFunction: AS, isStream: function(e2) {
        return SS(e2) && AS(e2.pipe);
      }, isURLSearchParams: bS, isStandardBrowserEnv: function() {
        return ("undefined" == typeof navigator || "ReactNative" !== navigator.product && "NativeScript" !== navigator.product && "NS" !== navigator.product) && ("undefined" != typeof window && "undefined" != typeof document);
      }, forEach: wS, merge: function e2() {
        var t2 = {};
        function i2(i3, n3) {
          RS(t2[n3]) && RS(i3) ? t2[n3] = e2(t2[n3], i3) : RS(i3) ? t2[n3] = e2({}, i3) : fS(i3) ? t2[n3] = i3.slice() : t2[n3] = i3;
        }
        for (var n2 = 0, s2 = arguments.length; n2 < s2; n2++)
          wS(arguments[n2], i2);
        return t2;
      }, extend: function(e2, t2, i2) {
        return wS(t2, function(t3, n2) {
          e2[n2] = i2 && "function" == typeof t3 ? pS(t3, i2) : t3;
        }), e2;
      }, trim: function(e2) {
        return e2.trim ? e2.trim() : e2.replace(/^\s+|\s+$/g, "");
      }, stripBOM: function(e2) {
        return 65279 === e2.charCodeAt(0) && (e2 = e2.slice(1)), e2;
      }, inherits: function(e2, t2, i2, n2) {
        e2.prototype = Object.create(t2.prototype, n2), e2.prototype.constructor = e2, i2 && Object.assign(e2.prototype, i2);
      }, toFlatObject: function(e2, t2, i2) {
        var n2, s2, r2, o2 = {};
        t2 = t2 || {};
        do {
          for (s2 = (n2 = Object.getOwnPropertyNames(e2)).length; s2-- > 0; )
            o2[r2 = n2[s2]] || (t2[r2] = e2[r2], o2[r2] = true);
          e2 = Object.getPrototypeOf(e2);
        } while (e2 && (!i2 || i2(e2, t2)) && e2 !== Object.prototype);
        return t2;
      }, kindOf: ES, kindOfTest: mS, endsWith: function(e2, t2, i2) {
        e2 = String(e2), (void 0 === i2 || i2 > e2.length) && (i2 = e2.length), i2 -= t2.length;
        var n2 = e2.indexOf(t2, i2);
        return -1 !== n2 && n2 === i2;
      }, toArray: function(e2) {
        if (!e2)
          return null;
        var t2 = e2.length;
        if (TS(t2))
          return null;
        for (var i2 = new Array(t2); t2-- > 0; )
          i2[t2] = e2[t2];
        return i2;
      }, isTypedArray: NS, isFileList: yS }, PS = DS;
      function LS(e2) {
        return encodeURIComponent(e2).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
      }
      var kS = function(e2, t2, i2) {
        if (!t2)
          return e2;
        var n2;
        if (i2)
          n2 = i2(t2);
        else if (PS.isURLSearchParams(t2))
          n2 = t2.toString();
        else {
          var s2 = [];
          PS.forEach(t2, function(e3, t3) {
            null != e3 && (PS.isArray(e3) ? t3 += "[]" : e3 = [e3], PS.forEach(e3, function(e4) {
              PS.isDate(e4) ? e4 = e4.toISOString() : PS.isObject(e4) && (e4 = JSON.stringify(e4)), s2.push(LS(t3) + "=" + LS(e4));
            }));
          }), n2 = s2.join("&");
        }
        if (n2) {
          var r2 = e2.indexOf("#");
          -1 !== r2 && (e2 = e2.slice(0, r2)), e2 += (-1 === e2.indexOf("?") ? "?" : "&") + n2;
        }
        return e2;
      }, MS = DS;
      function US() {
        this.handlers = [];
      }
      US.prototype.use = function(e2, t2, i2) {
        return this.handlers.push({ fulfilled: e2, rejected: t2, synchronous: !!i2 && i2.synchronous, runWhen: i2 ? i2.runWhen : null }), this.handlers.length - 1;
      }, US.prototype.eject = function(e2) {
        this.handlers[e2] && (this.handlers[e2] = null);
      }, US.prototype.forEach = function(e2) {
        MS.forEach(this.handlers, function(t2) {
          null !== t2 && e2(t2);
        });
      };
      var xS, VS, FS = US, BS = DS;
      function jS() {
        if (VS)
          return xS;
        VS = 1;
        var e2 = DS;
        function t2(e3, t3, i3, n3, s2) {
          Error.call(this), this.message = e3, this.name = "AxiosError", t3 && (this.code = t3), i3 && (this.config = i3), n3 && (this.request = n3), s2 && (this.response = s2);
        }
        e2.inherits(t2, Error, { toJSON: function() {
          return { message: this.message, name: this.name, description: this.description, number: this.number, fileName: this.fileName, lineNumber: this.lineNumber, columnNumber: this.columnNumber, stack: this.stack, config: this.config, code: this.code, status: this.response && this.response.status ? this.response.status : null };
        } });
        var i2 = t2.prototype, n2 = {};
        return ["ERR_BAD_OPTION_VALUE", "ERR_BAD_OPTION", "ECONNABORTED", "ETIMEDOUT", "ERR_NETWORK", "ERR_FR_TOO_MANY_REDIRECTS", "ERR_DEPRECATED", "ERR_BAD_RESPONSE", "ERR_BAD_REQUEST", "ERR_CANCELED"].forEach(function(e3) {
          n2[e3] = { value: e3 };
        }), Object.defineProperties(t2, n2), Object.defineProperty(i2, "isAxiosError", { value: true }), t2.from = function(n3, s2, r2, o2, a2, c2) {
          var d2 = Object.create(i2);
          return e2.toFlatObject(n3, d2, function(e3) {
            return e3 !== Error.prototype;
          }), t2.call(d2, n3.message, s2, r2, o2, a2), d2.name = n3.name, c2 && Object.assign(d2, c2), d2;
        }, xS = t2;
      }
      var GS, WS, HS, KS, YS, qS, JS = { silentJSONParsing: true, forcedJSONParsing: true, clarifyTimeoutError: false };
      function zS() {
        if (WS)
          return GS;
        WS = 1;
        var e2 = DS;
        return GS = function(t2, i2) {
          i2 = i2 || new FormData();
          var n2 = [];
          function s2(t3) {
            return null === t3 ? "" : e2.isDate(t3) ? t3.toISOString() : e2.isArrayBuffer(t3) || e2.isTypedArray(t3) ? "function" == typeof Blob ? new Blob([t3]) : Buffer.from(t3) : t3;
          }
          return function t3(r2, o2) {
            if (e2.isPlainObject(r2) || e2.isArray(r2)) {
              if (-1 !== n2.indexOf(r2))
                throw Error("Circular reference detected in " + o2);
              n2.push(r2), e2.forEach(r2, function(n3, r3) {
                if (!e2.isUndefined(n3)) {
                  var a2, c2 = o2 ? o2 + "." + r3 : r3;
                  if (n3 && !o2 && "object" == typeof n3) {
                    if (e2.endsWith(r3, "{}"))
                      n3 = JSON.stringify(n3);
                    else if (e2.endsWith(r3, "[]") && (a2 = e2.toArray(n3)))
                      return void a2.forEach(function(t4) {
                        !e2.isUndefined(t4) && i2.append(c2, s2(t4));
                      });
                  }
                  t3(n3, c2);
                }
              }), n2.pop();
            } else
              i2.append(o2, s2(r2));
          }(t2), i2;
        }, GS;
      }
      function XS() {
        if (KS)
          return HS;
        KS = 1;
        var e2 = jS();
        return HS = function(t2, i2, n2) {
          var s2 = n2.config.validateStatus;
          n2.status && s2 && !s2(n2.status) ? i2(new e2("Request failed with status code " + n2.status, [e2.ERR_BAD_REQUEST, e2.ERR_BAD_RESPONSE][Math.floor(n2.status / 100) - 4], n2.config, n2.request, n2)) : t2(n2);
        };
      }
      function QS() {
        if (qS)
          return YS;
        qS = 1;
        var e2 = DS;
        return YS = e2.isStandardBrowserEnv() ? { write: function(t2, i2, n2, s2, r2, o2) {
          var a2 = [];
          a2.push(t2 + "=" + encodeURIComponent(i2)), e2.isNumber(n2) && a2.push("expires=" + new Date(n2).toGMTString()), e2.isString(s2) && a2.push("path=" + s2), e2.isString(r2) && a2.push("domain=" + r2), true === o2 && a2.push("secure"), document.cookie = a2.join("; ");
        }, read: function(e3) {
          var t2 = document.cookie.match(new RegExp("(^|;\\s*)(" + e3 + ")=([^;]*)"));
          return t2 ? decodeURIComponent(t2[3]) : null;
        }, remove: function(e3) {
          this.write(e3, "", Date.now() - 864e5);
        } } : { write: function() {
        }, read: function() {
          return null;
        }, remove: function() {
        } }, YS;
      }
      var ZS, $S, eR, tR, iR, nR, sR, rR, oR, aR, cR, dR, lR = function(e2) {
        return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(e2);
      }, uR = function(e2, t2) {
        return t2 ? e2.replace(/\/+$/, "") + "/" + t2.replace(/^\/+/, "") : e2;
      }, hR = function(e2, t2) {
        return e2 && !lR(t2) ? uR(e2, t2) : t2;
      };
      function pR() {
        if ($S)
          return ZS;
        $S = 1;
        var e2 = DS, t2 = ["age", "authorization", "content-length", "content-type", "etag", "expires", "from", "host", "if-modified-since", "if-unmodified-since", "last-modified", "location", "max-forwards", "proxy-authorization", "referer", "retry-after", "user-agent"];
        return ZS = function(i2) {
          var n2, s2, r2, o2 = {};
          return i2 ? (e2.forEach(i2.split("\n"), function(i3) {
            if (r2 = i3.indexOf(":"), n2 = e2.trim(i3.substr(0, r2)).toLowerCase(), s2 = e2.trim(i3.substr(r2 + 1)), n2) {
              if (o2[n2] && t2.indexOf(n2) >= 0)
                return;
              o2[n2] = "set-cookie" === n2 ? (o2[n2] ? o2[n2] : []).concat([s2]) : o2[n2] ? o2[n2] + ", " + s2 : s2;
            }
          }), o2) : o2;
        }, ZS;
      }
      function _R() {
        if (tR)
          return eR;
        tR = 1;
        var e2 = DS;
        return eR = e2.isStandardBrowserEnv() ? function() {
          var t2, i2 = /(msie|trident)/i.test(navigator.userAgent), n2 = document.createElement("a");
          function s2(e3) {
            var t3 = e3;
            return i2 && (n2.setAttribute("href", t3), t3 = n2.href), n2.setAttribute("href", t3), { href: n2.href, protocol: n2.protocol ? n2.protocol.replace(/:$/, "") : "", host: n2.host, search: n2.search ? n2.search.replace(/^\?/, "") : "", hash: n2.hash ? n2.hash.replace(/^#/, "") : "", hostname: n2.hostname, port: n2.port, pathname: "/" === n2.pathname.charAt(0) ? n2.pathname : "/" + n2.pathname };
          }
          return t2 = s2(window.location.href), function(i3) {
            var n3 = e2.isString(i3) ? s2(i3) : i3;
            return n3.protocol === t2.protocol && n3.host === t2.host;
          };
        }() : function() {
          return true;
        };
      }
      function ER() {
        if (nR)
          return iR;
        nR = 1;
        var e2 = jS();
        function t2(t3) {
          e2.call(this, null == t3 ? "canceled" : t3, e2.ERR_CANCELED), this.name = "CanceledError";
        }
        return DS.inherits(t2, e2, { __CANCEL__: true }), iR = t2;
      }
      function mR() {
        return rR || (rR = 1, sR = function(e2) {
          var t2 = /^([-+\w]{1,25})(:?\/\/|:)/.exec(e2);
          return t2 && t2[1] || "";
        }), sR;
      }
      function fR() {
        if (aR)
          return oR;
        aR = 1;
        var e2 = DS, t2 = XS(), i2 = QS(), n2 = kS, s2 = hR, r2 = pR(), o2 = _R(), a2 = JS, c2 = jS(), d2 = ER(), l2 = mR();
        return oR = function(u2) {
          return new Promise(function(h2, p2) {
            var _2, E2 = u2.data, m2 = u2.headers, f2 = u2.responseType;
            function T2() {
              u2.cancelToken && u2.cancelToken.unsubscribe(_2), u2.signal && u2.signal.removeEventListener("abort", _2);
            }
            e2.isFormData(E2) && e2.isStandardBrowserEnv() && delete m2["Content-Type"];
            var g2 = new XMLHttpRequest();
            if (u2.auth) {
              var S2 = u2.auth.username || "", R2 = u2.auth.password ? unescape(encodeURIComponent(u2.auth.password)) : "";
              m2.Authorization = "Basic " + btoa(S2 + ":" + R2);
            }
            var C2 = s2(u2.baseURL, u2.url);
            function I2() {
              if (g2) {
                var e3 = "getAllResponseHeaders" in g2 ? r2(g2.getAllResponseHeaders()) : null, i3 = { data: f2 && "text" !== f2 && "json" !== f2 ? g2.response : g2.responseText, status: g2.status, statusText: g2.statusText, headers: e3, config: u2, request: g2 };
                t2(function(e4) {
                  h2(e4), T2();
                }, function(e4) {
                  p2(e4), T2();
                }, i3), g2 = null;
              }
            }
            if (g2.open(u2.method.toUpperCase(), n2(C2, u2.params, u2.paramsSerializer), true), g2.timeout = u2.timeout, "onloadend" in g2 ? g2.onloadend = I2 : g2.onreadystatechange = function() {
              g2 && 4 === g2.readyState && (0 !== g2.status || g2.responseURL && 0 === g2.responseURL.indexOf("file:")) && setTimeout(I2);
            }, g2.onabort = function() {
              g2 && (p2(new c2("Request aborted", c2.ECONNABORTED, u2, g2)), g2 = null);
            }, g2.onerror = function() {
              p2(new c2("Network Error", c2.ERR_NETWORK, u2, g2, g2)), g2 = null;
            }, g2.ontimeout = function() {
              var e3 = u2.timeout ? "timeout of " + u2.timeout + "ms exceeded" : "timeout exceeded", t3 = u2.transitional || a2;
              u2.timeoutErrorMessage && (e3 = u2.timeoutErrorMessage), p2(new c2(e3, t3.clarifyTimeoutError ? c2.ETIMEDOUT : c2.ECONNABORTED, u2, g2)), g2 = null;
            }, e2.isStandardBrowserEnv()) {
              var v2 = (u2.withCredentials || o2(C2)) && u2.xsrfCookieName ? i2.read(u2.xsrfCookieName) : void 0;
              v2 && (m2[u2.xsrfHeaderName] = v2);
            }
            "setRequestHeader" in g2 && e2.forEach(m2, function(e3, t3) {
              void 0 === E2 && "content-type" === t3.toLowerCase() ? delete m2[t3] : g2.setRequestHeader(t3, e3);
            }), e2.isUndefined(u2.withCredentials) || (g2.withCredentials = !!u2.withCredentials), f2 && "json" !== f2 && (g2.responseType = u2.responseType), "function" == typeof u2.onDownloadProgress && g2.addEventListener("progress", u2.onDownloadProgress), "function" == typeof u2.onUploadProgress && g2.upload && g2.upload.addEventListener("progress", u2.onUploadProgress), (u2.cancelToken || u2.signal) && (_2 = function(e3) {
              g2 && (p2(!e3 || e3 && e3.type ? new d2() : e3), g2.abort(), g2 = null);
            }, u2.cancelToken && u2.cancelToken.subscribe(_2), u2.signal && (u2.signal.aborted ? _2() : u2.signal.addEventListener("abort", _2))), E2 || (E2 = null);
            var y2 = l2(C2);
            y2 && -1 === ["http", "https", "file"].indexOf(y2) ? p2(new c2("Unsupported protocol " + y2 + ":", c2.ERR_BAD_REQUEST, u2)) : g2.send(E2);
          });
        }, oR;
      }
      var TR = DS, gR = function(e2, t2) {
        BS.forEach(e2, function(i2, n2) {
          n2 !== t2 && n2.toUpperCase() === t2.toUpperCase() && (e2[t2] = i2, delete e2[n2]);
        });
      }, SR = jS(), RR = JS, CR = zS(), IR = { "Content-Type": "application/x-www-form-urlencoded" };
      function vR(e2, t2) {
        !TR.isUndefined(e2) && TR.isUndefined(e2["Content-Type"]) && (e2["Content-Type"] = t2);
      }
      var yR, AR = { transitional: RR, adapter: (("undefined" != typeof XMLHttpRequest || "undefined" != typeof process && "[object process]" === Object.prototype.toString.call(process)) && (yR = fR()), yR), transformRequest: [function(e2, t2) {
        if (gR(t2, "Accept"), gR(t2, "Content-Type"), TR.isFormData(e2) || TR.isArrayBuffer(e2) || TR.isBuffer(e2) || TR.isStream(e2) || TR.isFile(e2) || TR.isBlob(e2))
          return e2;
        if (TR.isArrayBufferView(e2))
          return e2.buffer;
        if (TR.isURLSearchParams(e2))
          return vR(t2, "application/x-www-form-urlencoded;charset=utf-8"), e2.toString();
        var i2, n2 = TR.isObject(e2), s2 = t2 && t2["Content-Type"];
        if ((i2 = TR.isFileList(e2)) || n2 && "multipart/form-data" === s2) {
          var r2 = this.env && this.env.FormData;
          return CR(i2 ? { "files[]": e2 } : e2, r2 && new r2());
        }
        return n2 || "application/json" === s2 ? (vR(t2, "application/json"), function(e3, t3, i3) {
          if (TR.isString(e3))
            try {
              return (t3 || JSON.parse)(e3), TR.trim(e3);
            } catch (e4) {
              if ("SyntaxError" !== e4.name)
                throw e4;
            }
          return (i3 || JSON.stringify)(e3);
        }(e2)) : e2;
      }], transformResponse: [function(e2) {
        var t2 = this.transitional || AR.transitional, i2 = t2 && t2.silentJSONParsing, n2 = t2 && t2.forcedJSONParsing, s2 = !i2 && "json" === this.responseType;
        if (s2 || n2 && TR.isString(e2) && e2.length)
          try {
            return JSON.parse(e2);
          } catch (e3) {
            if (s2) {
              if ("SyntaxError" === e3.name)
                throw SR.from(e3, SR.ERR_BAD_RESPONSE, this, null, this.response);
              throw e3;
            }
          }
        return e2;
      }], timeout: 0, xsrfCookieName: "XSRF-TOKEN", xsrfHeaderName: "X-XSRF-TOKEN", maxContentLength: -1, maxBodyLength: -1, env: { FormData: dR ? cR : (dR = 1, cR = null) }, validateStatus: function(e2) {
        return e2 >= 200 && e2 < 300;
      }, headers: { common: { Accept: "application/json, text/plain, */*" } } };
      TR.forEach(["delete", "get", "head"], function(e2) {
        AR.headers[e2] = {};
      }), TR.forEach(["post", "put", "patch"], function(e2) {
        AR.headers[e2] = TR.merge(IR);
      });
      var bR, wR, OR = AR, NR = DS, DR = OR;
      function PR() {
        return wR ? bR : (wR = 1, bR = function(e2) {
          return !(!e2 || !e2.__CANCEL__);
        });
      }
      var LR = DS, kR = function(e2, t2, i2) {
        var n2 = this || DR;
        return NR.forEach(i2, function(i3) {
          e2 = i3.call(n2, e2, t2);
        }), e2;
      }, MR = PR(), UR = OR, xR = ER();
      function VR(e2) {
        if (e2.cancelToken && e2.cancelToken.throwIfRequested(), e2.signal && e2.signal.aborted)
          throw new xR();
      }
      var FR, BR, jR = DS, GR = function(e2, t2) {
        t2 = t2 || {};
        var i2 = {};
        function n2(e3, t3) {
          return jR.isPlainObject(e3) && jR.isPlainObject(t3) ? jR.merge(e3, t3) : jR.isPlainObject(t3) ? jR.merge({}, t3) : jR.isArray(t3) ? t3.slice() : t3;
        }
        function s2(i3) {
          return jR.isUndefined(t2[i3]) ? jR.isUndefined(e2[i3]) ? void 0 : n2(void 0, e2[i3]) : n2(e2[i3], t2[i3]);
        }
        function r2(e3) {
          if (!jR.isUndefined(t2[e3]))
            return n2(void 0, t2[e3]);
        }
        function o2(i3) {
          return jR.isUndefined(t2[i3]) ? jR.isUndefined(e2[i3]) ? void 0 : n2(void 0, e2[i3]) : n2(void 0, t2[i3]);
        }
        function a2(i3) {
          return i3 in t2 ? n2(e2[i3], t2[i3]) : i3 in e2 ? n2(void 0, e2[i3]) : void 0;
        }
        var c2 = { url: r2, method: r2, data: r2, baseURL: o2, transformRequest: o2, transformResponse: o2, paramsSerializer: o2, timeout: o2, timeoutMessage: o2, withCredentials: o2, adapter: o2, responseType: o2, xsrfCookieName: o2, xsrfHeaderName: o2, onUploadProgress: o2, onDownloadProgress: o2, decompress: o2, maxContentLength: o2, maxBodyLength: o2, beforeRedirect: o2, transport: o2, httpAgent: o2, httpsAgent: o2, cancelToken: o2, socketPath: o2, responseEncoding: o2, validateStatus: a2 };
        return jR.forEach(Object.keys(e2).concat(Object.keys(t2)), function(e3) {
          var t3 = c2[e3] || s2, n3 = t3(e3);
          jR.isUndefined(n3) && t3 !== a2 || (i2[e3] = n3);
        }), i2;
      };
      function WR() {
        return BR ? FR : (BR = 1, FR = { version: "0.27.2" });
      }
      var HR = WR().version, KR = jS(), YR = {};
      ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(e2, t2) {
        YR[e2] = function(i2) {
          return typeof i2 === e2 || "a" + (t2 < 1 ? "n " : " ") + e2;
        };
      });
      var qR = {};
      YR.transitional = function(e2, t2, i2) {
        function n2(e3, t3) {
          return "[Axios v" + HR + "] Transitional option '" + e3 + "'" + t3 + (i2 ? ". " + i2 : "");
        }
        return function(i3, s2, r2) {
          if (false === e2)
            throw new KR(n2(s2, " has been removed" + (t2 ? " in " + t2 : "")), KR.ERR_DEPRECATED);
          return t2 && !qR[s2] && (qR[s2] = true, console.warn(n2(s2, " has been deprecated since v" + t2 + " and will be removed in the near future"))), !e2 || e2(i3, s2, r2);
        };
      };
      var JR, zR, XR, QR, ZR, $R, eC = { assertOptions: function(e2, t2, i2) {
        if ("object" != typeof e2)
          throw new KR("options must be an object", KR.ERR_BAD_OPTION_VALUE);
        for (var n2 = Object.keys(e2), s2 = n2.length; s2-- > 0; ) {
          var r2 = n2[s2], o2 = t2[r2];
          if (o2) {
            var a2 = e2[r2], c2 = void 0 === a2 || o2(a2, r2, e2);
            if (true !== c2)
              throw new KR("option " + r2 + " must be " + c2, KR.ERR_BAD_OPTION_VALUE);
          } else if (true !== i2)
            throw new KR("Unknown option " + r2, KR.ERR_BAD_OPTION);
        }
      }, validators: YR }, tC = DS, iC = kS, nC = FS, sC = function(e2) {
        return VR(e2), e2.headers = e2.headers || {}, e2.data = kR.call(e2, e2.data, e2.headers, e2.transformRequest), e2.headers = LR.merge(e2.headers.common || {}, e2.headers[e2.method] || {}, e2.headers), LR.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function(t2) {
          delete e2.headers[t2];
        }), (e2.adapter || UR.adapter)(e2).then(function(t2) {
          return VR(e2), t2.data = kR.call(e2, t2.data, t2.headers, e2.transformResponse), t2;
        }, function(t2) {
          return MR(t2) || (VR(e2), t2 && t2.response && (t2.response.data = kR.call(e2, t2.response.data, t2.response.headers, e2.transformResponse))), Promise.reject(t2);
        });
      }, rC = GR, oC = hR, aC = eC, cC = aC.validators;
      function dC(e2) {
        this.defaults = e2, this.interceptors = { request: new nC(), response: new nC() };
      }
      dC.prototype.request = function(e2, t2) {
        "string" == typeof e2 ? (t2 = t2 || {}).url = e2 : t2 = e2 || {}, (t2 = rC(this.defaults, t2)).method ? t2.method = t2.method.toLowerCase() : this.defaults.method ? t2.method = this.defaults.method.toLowerCase() : t2.method = "get";
        var i2 = t2.transitional;
        void 0 !== i2 && aC.assertOptions(i2, { silentJSONParsing: cC.transitional(cC.boolean), forcedJSONParsing: cC.transitional(cC.boolean), clarifyTimeoutError: cC.transitional(cC.boolean) }, false);
        var n2 = [], s2 = true;
        this.interceptors.request.forEach(function(e3) {
          "function" == typeof e3.runWhen && false === e3.runWhen(t2) || (s2 = s2 && e3.synchronous, n2.unshift(e3.fulfilled, e3.rejected));
        });
        var r2, o2 = [];
        if (this.interceptors.response.forEach(function(e3) {
          o2.push(e3.fulfilled, e3.rejected);
        }), !s2) {
          var a2 = [sC, void 0];
          for (Array.prototype.unshift.apply(a2, n2), a2 = a2.concat(o2), r2 = Promise.resolve(t2); a2.length; )
            r2 = r2.then(a2.shift(), a2.shift());
          return r2;
        }
        for (var c2 = t2; n2.length; ) {
          var d2 = n2.shift(), l2 = n2.shift();
          try {
            c2 = d2(c2);
          } catch (e3) {
            l2(e3);
            break;
          }
        }
        try {
          r2 = sC(c2);
        } catch (e3) {
          return Promise.reject(e3);
        }
        for (; o2.length; )
          r2 = r2.then(o2.shift(), o2.shift());
        return r2;
      }, dC.prototype.getUri = function(e2) {
        e2 = rC(this.defaults, e2);
        var t2 = oC(e2.baseURL, e2.url);
        return iC(t2, e2.params, e2.paramsSerializer);
      }, tC.forEach(["delete", "get", "head", "options"], function(e2) {
        dC.prototype[e2] = function(t2, i2) {
          return this.request(rC(i2 || {}, { method: e2, url: t2, data: (i2 || {}).data }));
        };
      }), tC.forEach(["post", "put", "patch"], function(e2) {
        function t2(t3) {
          return function(i2, n2, s2) {
            return this.request(rC(s2 || {}, { method: e2, headers: t3 ? { "Content-Type": "multipart/form-data" } : {}, url: i2, data: n2 }));
          };
        }
        dC.prototype[e2] = t2(), dC.prototype[e2 + "Form"] = t2(true);
      });
      var lC = DS, uC = hS, hC = dC, pC = GR;
      var _C = function e2(t2) {
        var i2 = new hC(t2), n2 = uC(hC.prototype.request, i2);
        return lC.extend(n2, hC.prototype, i2), lC.extend(n2, i2), n2.create = function(i3) {
          return e2(pC(t2, i3));
        }, n2;
      }(OR);
      _C.Axios = hC, _C.CanceledError = ER(), _C.CancelToken = function() {
        if (zR)
          return JR;
        zR = 1;
        var e2 = ER();
        function t2(t3) {
          if ("function" != typeof t3)
            throw new TypeError("executor must be a function.");
          var i2;
          this.promise = new Promise(function(e3) {
            i2 = e3;
          });
          var n2 = this;
          this.promise.then(function(e3) {
            if (n2._listeners) {
              var t4, i3 = n2._listeners.length;
              for (t4 = 0; t4 < i3; t4++)
                n2._listeners[t4](e3);
              n2._listeners = null;
            }
          }), this.promise.then = function(e3) {
            var t4, i3 = new Promise(function(e4) {
              n2.subscribe(e4), t4 = e4;
            }).then(e3);
            return i3.cancel = function() {
              n2.unsubscribe(t4);
            }, i3;
          }, t3(function(t4) {
            n2.reason || (n2.reason = new e2(t4), i2(n2.reason));
          });
        }
        return t2.prototype.throwIfRequested = function() {
          if (this.reason)
            throw this.reason;
        }, t2.prototype.subscribe = function(e3) {
          this.reason ? e3(this.reason) : this._listeners ? this._listeners.push(e3) : this._listeners = [e3];
        }, t2.prototype.unsubscribe = function(e3) {
          if (this._listeners) {
            var t3 = this._listeners.indexOf(e3);
            -1 !== t3 && this._listeners.splice(t3, 1);
          }
        }, t2.source = function() {
          var e3;
          return { token: new t2(function(t3) {
            e3 = t3;
          }), cancel: e3 };
        }, JR = t2;
      }(), _C.isCancel = PR(), _C.VERSION = WR().version, _C.toFormData = zS(), _C.AxiosError = jS(), _C.Cancel = _C.CanceledError, _C.all = function(e2) {
        return Promise.all(e2);
      }, _C.spread = QR ? XR : (QR = 1, XR = function(e2) {
        return function(t2) {
          return e2.apply(null, t2);
        };
      }), _C.isAxiosError = function() {
        if ($R)
          return ZR;
        $R = 1;
        var e2 = DS;
        return ZR = function(t2) {
          return e2.isObject(t2) && true === t2.isAxiosError;
        };
      }(), uS.exports = _C, uS.exports.default = _C;
      var EC = i(uS.exports);
      function mC(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function fC(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? mC(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : mC(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      let TC, gC = 0, SC = 0;
      function RC(e2, t2, i2, n2) {
        return new tT((s2, r2) => {
          t2.responseType = t2.responseType || "json", t2.data && !i2 ? (t2.data = JSON.stringify(t2.data), gC += Lg(t2.data)) : i2 && (t2.data.size ? gC += t2.data.size : t2.data instanceof FormData ? gC += kg(t2.data) : gC += Lg(JSON.stringify(t2.data))), t2.headers = t2.headers || {}, t2.headers["Content-Type"] = t2.headers["Content-Type"] || "application/json", t2.method = "POST", t2.url = e2, EC.request(t2).then((e3) => {
            "string" == typeof e3.data ? SC += Lg(e3.data) : e3.data instanceof ArrayBuffer || e3.data instanceof Uint8Array ? SC += e3.data.byteLength : SC += Lg(JSON.stringify(e3.data)), n2 && s2({ data: e3.data, headers: e3.headers }), s2(e3.data);
          }).catch((e3) => {
            EC.isCancel(e3) ? r2(new VT(xT.OPERATION_ABORTED, "cancel token canceled")) : "ECONNABORTED" === e3.code ? r2(new VT(xT.NETWORK_TIMEOUT, e3.message)) : e3.response ? r2(new VT(xT.NETWORK_RESPONSE_ERROR, e3.response.status)) : r2(new VT(xT.NETWORK_ERROR, e3.message));
          });
        });
      }
      async function CC(e2, t2) {
        const i2 = new Blob([t2.data], { type: "buffer" });
        return await RC(e2, fC(fC({}, t2), {}, { data: i2, headers: { "Content-Type": "application/octet-stream" } }), true);
      }
      const IC = () => "HTTPS" === (TC || TC || (TC = (window.location.protocol.split(":")[0] || "").toUpperCase(), TC)), vC = () => void 0 !== window.isSecureContext;
      const yC = function(e2) {
        if (e2.match(/[0-9]+\.[0-9]+\.[0-9]+$/))
          return e2;
        const t2 = e2.match(/([0-9]+\.[0-9]+\.[0-9]+)\-alpha\.([0-9]+)/);
        if (t2 && t2[1] && t2[2]) {
          const e3 = t2[1], i3 = t2[2];
          return "".concat(e3, ".").concat(i3);
        }
        const i2 = e2.match(/([0-9]+\.[0-9]+\.[0-9]+)\-special\.([0-9]+)/);
        if (i2 && i2[1] && i2[2]) {
          const e3 = i2[1], t3 = i2[2];
          return "".concat(e3, ".").concat(100 * (Number(t3) + 1));
        }
        return "4.0.0.999";
      }("4.20.0"), AC = function() {
        try {
          return true === JSON.parse("true");
        } catch (e2) {
          return true;
        }
      }();
      var bC;
      !function(e2) {
        e2.Default = "default", e2.Auto = "auto", e2.Relay = "relay", e2.SdRtn = "sd-rtn";
      }(bC || (bC = {}));
      const wC = "v4.20.0-0-g334e514b-dirty(12/8/2023, 3:48:29 PM)", OC = { PROCESS_ID: "", ENCRYPT_AES: true, AREAS: ["CHINA", "GLOBAL"], WEBCS_DOMAIN: ["webrtc2-ap-web-1.agora.io", "webrtc2-2.ap.sd-rtn.com"], WEBCS_DOMAIN_BACKUP_LIST: ["webrtc2-ap-web-3.agora.io", "webrtc2-4.ap.sd-rtn.com"], PROXY_CS: ["ap-proxy-1.agora.io", "ap-proxy-2.agora.io"], CDS_AP: ["cds-ap-web-1.agora.io", "cds-web-2.ap.sd-rtn.com", "cds-ap-web-3.agora.io", "cds-web-4.ap.sd-rtn.com"], ACCOUNT_REGISTER: ["sua-ap-web-1.agora.io", "sua-web-2.ap.sd-rtn.com", "sua-ap-web-3.agora.io", "sua-web-4.ap.sd-rtn.com"], UAP_AP: ["uap-ap-web-1.agora.io", "uap-web-2.ap.sd-rtn.com", "uap-ap-web-3.agora.io", "uap-web-4.ap.sd-rtn.com"], LOG_UPLOAD_SERVER: "logservice.agora.io", EVENT_REPORT_DOMAIN: "statscollector-1.agora.io", EVENT_REPORT_BACKUP_DOMAIN: "web-2.statscollector.sd-rtn.com", ENABLE_EVENT_REPORT: true, GATEWAY_ADDRESS: [], GATEWAY_WSS_ADDRESS: "", LIVE_STREAMING_ADDRESS: "", HTTP_CONNECT_TIMEOUT: 5e3, SIGNAL_REQUEST_TIMEOUT: 1e4, REPORT_STATS: true, UPLOAD_LOG: false, NOT_REPORT_EVENT: [], SUBSCRIBE_TWCC: false, PUBLISH_TWCC: false, PING_PONG_TIME_OUT: 10, WEBSOCKET_TIMEOUT_MIN: 1e4, EVENT_REPORT_SEND_INTERVAL: 3e3, CONFIG_DISTRIBUTE_INTERVAL: 3e5, ENABLE_CONFIG_DISTRIBUTE: true, CANDIDATE_TIMEOUT: 5e3, SHOW_REPORT_INVOKER_LOG: false, JOIN_EXTEND: "", PUB_EXTEND: "", SUB_EXTEND: "", FORCE_TURN: false, TURN_ENABLE_TCP: true, TURN_ENABLE_UDP: true, MAX_UPLOAD_CACHE: 50, UPLOAD_CACHE_INTERVAL: 2e3, AJAX_REQUEST_CONCURRENT: 3, REPORT_APP_SCENARIO: void 0, GATEWAY_DOMAINS: ["edge.agora.io", "edge.sd-rtn.com"], CONNECT_GATEWAY_WITHOUT_DOMAIN: false, WORKER_DOMAIN: "edge.agora.io", TURN_DOMAIN: "edge.agora.io", EVENT_REPORT_RETRY: true, CHROME_FORCE_PLAN_B: false, AUDIO_SOURCE_VOLUME_UPDATE_INTERVAL: 400, AUDIO_SOURCE_AVG_VOLUME_DURATION: 3e3, AUDIO_VOLUME_INDICATION_INTERVAL: 2e3, VOLUME_VOICE_WEIGHT: 10, GET_VOLUME_OF_MUTED_AUDIO_TRACK: false, STATS_UPDATE_INTERVAL: 250, NORMAL_EVENT_QUEUE_CAPACITY: 100, CUSTOM_REPORT: true, CUSTOM_REPORT_LIMIT: 20, PROXY_SERVER_TYPE2: "webnginx-proxy.agora.io", PROXY_SERVER_TYPE3: ["webrtc-cloud-proxy.sd-rtn.com", "webrtc-cloud-proxy.agora.io"], CUSTOM_PUB_ANSWER_MODIFIER: null, CUSTOM_SUB_ANSWER_MODIFIER: null, CUSTOM_PUB_OFFER_MODIFIER: null, CUSTOM_SUB_OFFER_MODIFIER: null, DSCP_TYPE: "high", REMOVE_NEW_CODECS: true, FRAGEMENT_LENGTH: 3, WEBSOCKET_COMPRESS: false, SIMULCAST: false, PRELOAD_MEDIA_COUNT: 0, USE_PUB_RTX: false, USE_SUB_RTX: false, CHECK_VIDEO_VISIBLE_INTERVAL: 3e4, CHECK_LOCAL_STATS_INTERVAL: 100, PROFILE_SWITCH_INTERVAL: 2e3, UNSUPPORTED_VIDEO_CODEC: [], ENUMERATE_DEVICES_INTERVAL: false, ENUMERATE_DEVICES_INTERVAL_TIME: 1e4, USE_NEW_TOKEN: false, CLOSE_AFB_FOR_LOCAL_AP: true, JOIN_MAX_CONCURRENCY: 6, JOIN_WITH_FALLBACK_SIGNAL_PROXY: true, JOIN_WITH_FALLBACK_MEDIA_PROXY: true, JOIN_WITH_FALLBACK_MEDIA_PROXY_FORCE: false, JOIN_GATEWAY_TRY_443PORT_DURATION: 2e3, JOIN_GATEWAY_USE_443PORT_ONLY: false, JOIN_GATEWAY_USE_DUAL_DOMAIN: true, JOIN_GATEWAY_FALLBACK_PORT: 443, USE_TURN_SERVER_OF_GATEWAY: false, H264_PROFILE_LEVEL_ID: "", USE_NEW_LOG: false, LOG_VERSION: 3, MEDIA_DEVICE_CONSTRAINTS: null, ENCRYPT_PROXY_USERNAME_AND_PSW: true, SDP_LOGGING: false, CSP_DETECTED_HOSTNAME_LIST: ["agora.io", "sd-rtn.com"], REMOTE_AUDIO_TRACK_USES_WEB_AUDIO: false, LOCAL_AUDIO_TRACK_USES_WEB_AUDIO: true, BITRATE_ADAPTER_TYPE: "STANDARD_BITRATE", AI_DENOISER_PARAMETERS: {}, ADJUST_3A_FROM_PLUGINS: true, RAISE_H264_BASELINE_PRIORITY: true, FILTER_SEND_H264_BASELINE: false, ENABLE_PUBLISHED_USER_LIST: true, MAX_SUBSCRIPTION: 50, X_GOOGLE_START_BITRATE: void 0, NEW_REPORT_SERVER: false, NEW_REPORT_SERVER_DOMAINS: ["data-reporting.agora.io", "data-reporting.agora.io"], VIDEO_INSPECT_WORKER_MESSAGE_LENGTH_LIMIT: 3e5, VIDEO_INSPECT_INTERVAL_MINIMUM: 1e3, VIDEO_INSPECT_QUALITY_RATIO: 0.9, VIDEO_INSPECT_WORKER_MANAGER_HOST: "edge.agora.io", VIDEO_INSPECT_WORKER_MANAGER_PORT: "", VIDEO_INSPECT_WORKER_PORT: "", SHOW_VIDEO_INSPECT_WORKER_MESSAGE: false, STATS_COLLECTOR_PORT: 443, FORCE_TURN_TCP: false, SUBSCRIBE_AUDIO_FILTER_TOPN: void 0, ENABLE_PUBLISH_AUDIO_FILTER: void 0, DISABLE_FEC: void 0, WEBAUDIO_INIT_OPTIONS: void 0, FILTER_VIDEO_FEC: true, FILTER_AUDIO_FEC: false, CHROME_DUAL_STREAM_USE_ENCODING: true, DISABLE_DUAL_STREAM_USE_ENCODING: false, EXTENSION_USAGE_UPLOAD_INTERVAL: 1e4, ICE_RESTART: true, ICE_RESTART_INTERVAL: 1e4, NEW_ICE_RESTART: false, ENABLE_USER_LICENSE_CHECK: true, SIGNAL_CHANNEL: 0, TRANSMITTER_INITIAL_RTT: 30, TRANSMITTER_INITIAL_RTO: 30, TRANSMITTER_MAX_BATCH_ACK_COUNT: 2, TRANSMITTER_MAX_RTO: 500, DATACHANNEL_COMPRESS: false, FINGERPRINT: null, DC_JOIN_WITH_FAILBACK: 5e3, ENABLE_VIDEO_FRAME_CALLBACK: true, VIDEO_FREEZE_DURATION: 500, SPATIALIZER_PARAMETERS: {}, UPLOAD_LOG_INTERVAL: 3e3, UPLOAD_LOG_REQUEST_RETRY_INTERVAL: 2e3, UPLOAD_LOG_REQUEST_MAX_RETRY_INTERVAL: 2e4, UPLOAD_LOG_TRY_INTERVAL_WHILE_OFF: 5e3, UPLOAD_LOG_RETRY_INTERVAL_V1: 1e4, UPLOAD_LOG_TWICE_RETRY_INTERVAL_V1: 200, UPLOAD_LOG_LENGTH_EACH_TIME: 10, APP_TYPE: 0, DISABLE_WEBAUDIO: false, CHANNEL_MEDIA_RELAY_SERVERS: void 0, KEEP_LAST_FRAME: true, FORWARD_P2P_CREATION: true, SYNC_GROUP: true, BLOCK_LOCAL_CLIENT: false, AP_AREA: true, SVC: [], ENABLE_ENCODED_TRANSFORM: false, IMAGE_MODERATION_WORKER_HOST: "edge.agora.io", IMAGE_MODERATION_WORKER_MESSAGE_LENGTH_LIMIT: 3e5, IMAGE_MODERATION_INTERVAL_MINIMUM: 1e3, SHOW_IMAGE_MODERATION_WORKER_MESSAGE: false, IMAGE_MODERATION_QUALITY_RATIO: 0.9, IMAGE_MODERATION_UPLOAD_REPORT_INTERVAL: 5e3, SHOW_GLOBAL_CLIENT_LIST: false, ENABLE_DATASTREAM_2: false, DATASTREAM_MAX_RETRANSMITS: 10, ENABLE_USER_AUTO_REBALANCE_CHECK: true, ENABLE_INSTANT_VIDEO: false, ENABLE_NTP_REPORT: false, USE_XR: false, TCP_CANDIDATE_ONLY: false, EXTERNAL_SIGNAL_REQUEST_TIMEOUT: 3e3, SHOW_P2P_LOG: false, MAX_P2P_TIMEOUT: 3e4, P2P_TOKEN_INTERVAL: 1e3, SHOW_DATASTREAM2_LOG: false, RESTRICTION_SET_PLAYBACK_DEVICE: true, ACCOUNT_REGISTER_RETRY_TIMEOUT: 1, ACCOUNT_REGISTER_RETRY_RATIO: 2, ACCOUNT_REGISTER_RETRY_TIMEOUT_MAX: 6e4, ACCOUNT_REGISTER_RETRY_COUNT_MAX: 1e5, AUDIO_CONTEXT: null, WEBCS_BACKUP_CONNECT_TIMEOUT: 6e3, PLAYER_STATE_DEFER: 2e3, SIGNAL_REQUEST_WATCH_INTERVAL: 1e3, FILEPATH_LENMAX: 255, DUALSTREAM_OPERATION_CHECK: true, MEDIA_ELEMENT_EXISTS_DEPTH: 3, SHIM_CANDIDATE: false, LEAVE_MSG_TIMEOUT: 2e3, STATS_FILTER: { transportId: true, googTrackId: true }, FILTER_VIDEO_CODEC: [], PLUGIN_INFO: [] };
      function NC(e2, t2, i2) {
        var n2, s2;
        bn(n2 = Object.keys(OC)).call(n2, e2) && (!i2 && bn(s2 = Object.keys(PC)).call(s2, e2) || (OC[e2] = t2));
      }
      function DC(e2) {
        return OC[e2];
      }
      const PC = {};
      function LC(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function kC(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? LC(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : LC(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      var MC;
      !function(e2) {
        e2.SET_SESSION_ID = "SET_SESSION_ID", e2.SET_P2P_ID = "SET_P2P_id", e2.SET_DC_ID = "SET_DC_id", e2.SET_UID = "SET_UID", e2.SET_INT_UID = "SET_INT_UID", e2.SET_PUB_ID = "SET_PUB_ID", e2.SET_CLOUD_PROXY_SERVER_MODE = "SET_CLOUD_PROXY_SERVER_MODE", e2.KEY_METRIC_CLIENT_CREATED = "KEY_METRIC_CLIENT_CREATED", e2.KEY_METRIC_JOIN_START = "KEY_METRIC_JOIN_START", e2.AVOID_JOIN_START = "AVOID_JOIN_START", e2.KEY_METRIC_JOIN_END = "KEY_METRIC_JOIN_END", e2.KEY_METRIC_REQUEST_AP_START = "KEY_METRIC_REQUEST_AP_START", e2.KEY_METRIC_REQUEST_AP_END = "KEY_METRIC_REQUEST_AP_END", e2.KEY_METRIC_JOIN_GATEWAY_START = "KEY_METRIC_JOIN_GATEWAY_START", e2.KEY_METRIC_JOIN_GATEWAY_END = "KEY_METRIC_JOIN_GATEWAY_END", e2.KEY_METRIC_PEER_CONNECTION_START = "KEY_METRIC_PEER_CONNECTION_START", e2.KEY_METRIC_PEER_CONNECTION_END = "KEY_METRIC_PEER_CONNECTION_END", e2.KEY_METRIC_DESCRIPTION_START = "KEY_METRIC_DESCRIPTION_START", e2.KEY_METRIC_ICE_CONNECTION_END = "KEY_METRIC_ICE_CONNECTION_END", e2.KEY_METRIC_SIGNAL_CHANNEL_OPEN = "KEY_METRIC_SIGNAL_CHANNEL_OPEN", e2.KEY_METRIC_PUBLISH = "KEY_METRIC_PUBLISH", e2.KEY_METRIC_SUBSCRIBE = "KEY_METRIC_SUBSCRIBE", e2.RECORD_JOIN_CHANNEL_SERVICE = "RECORD_JOIN_CHANNEL_SERVICE", e2.RESET_JOIN_CHANNEL_SERVICE_RECORDS = "RESET_JOIN_CHANNEL_SERVICE_RECORDS", e2.RESET_KEY_METRICS = "RESET_KEY_METRICS", e2.SET_USE_DATACHANNEL = "SET_USE_DATACHANNEL", e2.SET_USE_P2P = "SET_USE_P2P", e2.SET_TRANSPORT_TYPE = "SET_TRANSPORT_TYPE";
      }(MC || (MC = {}));
      class UC {
        constructor(e2, t2, i2, n2) {
          nh(this, "state", void 0), this.state = { codec: e2, audioCodec: t2, mode: i2, clientId: n2, sessionId: null, p2pId: 0, dcId: 0, pubId: 0, subId: 0, avoidJoinStart: 0, keyMetrics: { publish: [], subscribe: [] }, joinChannelServiceRecords: [], cloudProxyServerMode: "disabled", useDataChannel: false, useP2P: false, p2pTransport: bC.Default };
        }
        dispatch(e2) {
          this.state = function(e3, t2) {
            switch (t2.type) {
              case MC.SET_SESSION_ID:
                return kC(kC({}, e3), {}, { sessionId: t2.sessionId });
              case MC.SET_P2P_ID:
                return kC(kC({}, e3), {}, { p2pId: t2.p2pId });
              case MC.SET_UID:
                return kC(kC({}, e3), {}, { uid: t2.uid });
              case MC.SET_INT_UID:
                return kC(kC({}, e3), {}, { intUid: t2.intUid });
              case MC.SET_PUB_ID:
                return kC(kC({}, e3), {}, { pubId: t2.pubId });
              case MC.KEY_METRIC_CLIENT_CREATED:
                return kC(kC({}, e3), {}, { keyMetrics: kC(kC({}, e3.keyMetrics), {}, { clientCreated: t2.metric }) });
              case MC.KEY_METRIC_JOIN_START:
                return kC(kC({}, e3), {}, { keyMetrics: kC(kC({}, e3.keyMetrics), {}, { joinStart: t2.metric }) });
              case MC.AVOID_JOIN_START:
                return kC(kC({}, e3), {}, { avoidJoinStart: t2.avoidJoinStart });
              case MC.KEY_METRIC_JOIN_END:
                return kC(kC({}, e3), {}, { keyMetrics: kC(kC({}, e3.keyMetrics), {}, { joinEnd: t2.metric }) });
              case MC.KEY_METRIC_REQUEST_AP_START:
                return kC(kC({}, e3), {}, { keyMetrics: kC(kC({}, e3.keyMetrics), {}, { requestAPStart: t2.metric }) });
              case MC.KEY_METRIC_REQUEST_AP_END:
                return kC(kC({}, e3), {}, { keyMetrics: kC(kC({}, e3.keyMetrics), {}, { requestAPEnd: t2.metric }) });
              case MC.KEY_METRIC_JOIN_GATEWAY_START:
                return kC(kC({}, e3), {}, { keyMetrics: kC(kC({}, e3.keyMetrics), {}, { joinGatewayStart: t2.metric }) });
              case MC.KEY_METRIC_JOIN_GATEWAY_END:
                return kC(kC({}, e3), {}, { keyMetrics: kC(kC({}, e3.keyMetrics), {}, { joinGatewayEnd: t2.metric }) });
              case MC.KEY_METRIC_PEER_CONNECTION_START:
                return kC(kC({}, e3), {}, { keyMetrics: kC(kC({}, e3.keyMetrics), {}, { peerConnectionStart: t2.metric }) });
              case MC.KEY_METRIC_PEER_CONNECTION_END:
                return kC(kC({}, e3), {}, { keyMetrics: kC(kC({}, e3.keyMetrics), {}, { peerConnectionEnd: t2.metric }) });
              case MC.KEY_METRIC_DESCRIPTION_START:
                return kC(kC({}, e3), {}, { keyMetrics: kC(kC({}, e3.keyMetrics), {}, { descriptionStart: t2.metric }) });
              case MC.KEY_METRIC_SIGNAL_CHANNEL_OPEN:
                return kC(kC({}, e3), {}, { keyMetrics: kC(kC({}, e3.keyMetrics), {}, { signalChannelOpen: t2.metric }) });
              case MC.KEY_METRIC_ICE_CONNECTION_END:
                return kC(kC({}, e3), {}, { keyMetrics: kC(kC({}, e3.keyMetrics), {}, { iceConnectionEnd: t2.metric }) });
              case MC.KEY_METRIC_PUBLISH: {
                const i2 = e3.keyMetrics.publish, n2 = i2.findIndex((e4) => e4.trackId === t2.metric.trackId);
                return -1 !== n2 ? (i2[n2] = kC(kC({}, i2[n2]), t2.metric), kC(kC({}, e3), {}, { keyMetrics: kC(kC({}, e3.keyMetrics), {}, { publish: [...i2] }) })) : kC(kC({}, e3), {}, { keyMetrics: kC(kC({}, e3.keyMetrics), {}, { publish: [...e3.keyMetrics.publish, t2.metric] }) });
              }
              case MC.KEY_METRIC_SUBSCRIBE: {
                const i2 = e3.keyMetrics.subscribe, n2 = i2.findIndex((e4) => e4.userId === t2.metric.userId && e4.type === t2.metric.type);
                return -1 !== n2 ? (i2[n2] = kC(kC({}, i2[n2]), t2.metric), kC(kC({}, e3), {}, { keyMetrics: kC(kC({}, e3.keyMetrics), {}, { subscribe: [...i2] }) })) : kC(kC({}, e3), {}, { keyMetrics: kC(kC({}, e3.keyMetrics), {}, { subscribe: [...e3.keyMetrics.subscribe, t2.metric] }) });
              }
              case MC.SET_CLOUD_PROXY_SERVER_MODE:
                return e3.cloudProxyServerMode = t2.mode, e3;
              case MC.RECORD_JOIN_CHANNEL_SERVICE:
                return "number" != typeof t2.index ? e3.joinChannelServiceRecords = [...e3.joinChannelServiceRecords, t2.record] : (e3.joinChannelServiceRecords[t2.index] = kC(kC({}, e3.joinChannelServiceRecords[t2.index]), t2.record), e3.joinChannelServiceRecords = [...e3.joinChannelServiceRecords]), e3;
              case MC.RESET_JOIN_CHANNEL_SERVICE_RECORDS:
                return e3.joinChannelServiceRecords = [], e3;
              case MC.RESET_KEY_METRICS:
                return e3.keyMetrics = { publish: [], subscribe: [] }, e3;
              case MC.SET_USE_DATACHANNEL:
                return kC(kC({}, e3), {}, { useDataChannel: t2.val });
              case MC.SET_USE_P2P:
                return kC(kC({}, e3), {}, { useP2P: t2.val });
              case MC.SET_TRANSPORT_TYPE:
                return kC(kC({}, e3), {}, { p2pTransport: t2.val });
              default:
                return e3;
            }
          }(this.state, e2);
        }
        set sessionId(e2) {
          this.dispatch({ type: MC.SET_SESSION_ID, sessionId: e2 });
        }
        get sessionId() {
          return this.state.sessionId;
        }
        set codec(e2) {
          this.state.codec = e2;
        }
        get codec() {
          return this.state.codec;
        }
        get mode() {
          return this.state.mode;
        }
        get audioCodec() {
          return this.state.audioCodec;
        }
        get clientId() {
          return this.state.clientId;
        }
        set p2pId(e2) {
          this.dispatch({ type: MC.SET_P2P_ID, p2pId: e2 });
        }
        get p2pId() {
          return this.state.p2pId;
        }
        set dcId(e2) {
          this.dispatch({ type: MC.SET_DC_ID, dcId: e2 });
        }
        get dcId() {
          return this.state.dcId;
        }
        set uid(e2) {
          this.dispatch({ type: MC.SET_UID, uid: e2 });
        }
        get uid() {
          return this.state.uid;
        }
        set intUid(e2) {
          this.dispatch({ type: MC.SET_INT_UID, intUid: e2 });
        }
        get intUid() {
          return this.state.intUid;
        }
        set pubId(e2) {
          this.dispatch({ type: MC.SET_PUB_ID, pubId: e2 });
        }
        get pubId() {
          return this.state.pubId;
        }
        set cloudProxyServerMode(e2) {
          this.dispatch({ type: MC.SET_CLOUD_PROXY_SERVER_MODE, mode: e2 });
        }
        get cloudProxyServerMode() {
          return this.state.cloudProxyServerMode;
        }
        set useDataChannel(e2) {
          this.dispatch({ type: MC.SET_USE_DATACHANNEL, val: e2 });
        }
        get useDataChannel() {
          return this.state.useDataChannel;
        }
        set useP2P(e2) {
          this.dispatch({ type: MC.SET_USE_P2P, val: e2 });
        }
        get useP2P() {
          return this.state.useP2P;
        }
        set p2pTransport(e2) {
          this.dispatch({ type: MC.SET_TRANSPORT_TYPE, val: e2 });
        }
        get p2pTransport() {
          return this.state.p2pTransport;
        }
        clientCreated() {
          this.dispatch({ type: MC.KEY_METRIC_CLIENT_CREATED, metric: Date.now() });
        }
        joinStart() {
          this.dispatch({ type: MC.KEY_METRIC_JOIN_START, metric: Date.now() });
        }
        joinEnd() {
          this.dispatch({ type: MC.KEY_METRIC_JOIN_END, metric: Date.now() });
        }
        requestAPStart() {
          this.dispatch({ type: MC.KEY_METRIC_REQUEST_AP_START, metric: Date.now() });
        }
        requestAPEnd() {
          this.dispatch({ type: MC.KEY_METRIC_REQUEST_AP_END, metric: Date.now() });
        }
        joinGatewayStart() {
          this.dispatch({ type: MC.KEY_METRIC_JOIN_GATEWAY_START, metric: Date.now() });
        }
        joinGatewayEnd() {
          this.dispatch({ type: MC.KEY_METRIC_JOIN_GATEWAY_END, metric: Date.now() });
        }
        peerConnectionStart() {
          this.dispatch({ type: MC.KEY_METRIC_PEER_CONNECTION_START, metric: Date.now() });
        }
        peerConnectionEnd() {
          this.dispatch({ type: MC.KEY_METRIC_PEER_CONNECTION_END, metric: Date.now() });
        }
        descriptionStart() {
          this.dispatch({ type: MC.KEY_METRIC_DESCRIPTION_START, metric: Date.now() });
        }
        signalChannelOpen() {
          this.dispatch({ type: MC.KEY_METRIC_SIGNAL_CHANNEL_OPEN, metric: Date.now() });
        }
        iceConnectionEnd() {
          this.dispatch({ type: MC.KEY_METRIC_ICE_CONNECTION_END, metric: Date.now() });
        }
        publish(e2, t2, i2, n2) {
          this.dispatch({ type: MC.KEY_METRIC_PUBLISH, metric: kC(kC({ trackId: e2, type: t2 }, i2 && { publishStart: i2 }), n2 && { publishEnd: n2 }) });
        }
        subscribe(e2, t2, i2, n2, s2, r2, o2) {
          this.dispatch({ type: MC.KEY_METRIC_SUBSCRIBE, metric: kC(kC(kC(kC(kC({ userId: e2, type: t2 }, i2 && { subscribeStart: i2 }), n2 && { subscribeEnd: n2 }), s2 && { firstFrame: s2 }), r2 && { streamAdded: r2 }), o2 && { firstDecoded: o2 }) });
        }
        massSubscribe(e2, t2, i2, n2) {
          e2.forEach((e3) => {
            this.dispatch({ type: MC.KEY_METRIC_SUBSCRIBE, metric: kC(kC(kC({ userId: e3.userId, type: e3.type }, t2 && { subscribeStart: t2 }), i2 && { subscribeEnd: i2 }), n2 && { firstFrame: n2 }) });
          });
        }
        get keyMetrics() {
          return this.state.keyMetrics;
        }
        recordJoinChannelService(e2, t2) {
          "gateway" === e2.service && Array.isArray(e2.urls) && (e2.urls = e2.urls.map((e3) => e3.replace(/(\d+)-\d+-\d+-(\d+)/, "$1-*-*-$2")));
          try {
            return "number" != typeof t2 ? (this.dispatch({ type: MC.RECORD_JOIN_CHANNEL_SERVICE, record: kC(kC({}, e2), {}, { sessionId: this.sessionId, cloudProxyMode: this.cloudProxyServerMode, uid: this.uid }) }), this.state.joinChannelServiceRecords.length - 1) : (t2 < 0 || t2 >= this.state.joinChannelServiceRecords.length || this.dispatch({ type: MC.RECORD_JOIN_CHANNEL_SERVICE, record: e2, index: t2 }), t2);
          } catch (e3) {
            return 0;
          }
        }
        resetJoinChannelServiceRecords() {
          this.dispatch({ type: MC.RESET_JOIN_CHANNEL_SERVICE_RECORDS });
        }
        resetKeyMetrics() {
          this.dispatch({ type: MC.RESET_KEY_METRICS });
        }
        get joinChannelServiceRecords() {
          try {
            return this.state.joinChannelServiceRecords;
          } catch (e2) {
            return [];
          }
        }
        get avoidJoinStart() {
          return this.state.avoidJoinStart;
        }
        set avoidJoinStart(e2) {
          this.dispatch({ type: MC.AVOID_JOIN_START, avoidJoinStart: e2 });
        }
      }
      var xC, VC;
      !function(e2) {
        e2.h264 = "h264", e2.h265 = "h265", e2.vp8 = "vp8", e2.vp9 = "vp9", e2.av1 = "av1";
      }(xC || (xC = {})), function(e2) {
        e2.opus = "opus", e2.pcma = "pcma", e2.pcmu = "pcmu", e2.g722 = "g722";
      }(VC || (VC = {}));
      const FC = new class extends ig {
        reportLogUploadError(e2) {
          this.emit("REPORT_LOG_UPLOAD", e2);
        }
      }();
      class BC {
        constructor(e2) {
          nh(this, "logger", void 0), nh(this, "prefixLists", []), this.logger = e2;
        }
        debug() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++)
            t2[i2] = arguments[i2];
          this.logger.debug(...this.prefixLists, ...t2);
        }
        info() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++)
            t2[i2] = arguments[i2];
          this.logger.info(...this.prefixLists, ...t2);
        }
        warning() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++)
            t2[i2] = arguments[i2];
          this.logger.warning(...this.prefixLists, ...t2);
        }
        error() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++)
            t2[i2] = arguments[i2];
          this.logger.error(...this.prefixLists, ...t2);
        }
        prefix(e2) {
          return this.prefixLists.push(e2), this;
        }
        popPrefix() {
          return this.prefixLists.pop(), this;
        }
      }
      function jC() {
        const e2 = /* @__PURE__ */ new Date();
        return e2.toTimeString().split(" ")[0] + ":" + e2.getMilliseconds();
      }
      function GC() {
        const e2 = /* @__PURE__ */ new Date(), t2 = /((\d+:){2}\d+)/.exec((/* @__PURE__ */ new Date()).toUTCString());
        return t2 ? (null == t2 ? void 0 : t2[0]) + ":" + e2.getUTCMilliseconds() : e2.toTimeString().split(" ")[0] + ":" + e2.getMilliseconds();
      }
      const WC = { DEBUG: 0, INFO: 1, WARNING: 2, ERROR: 3, NONE: 4 }, HC = Date.now(), KC = (e2) => {
        for (const t2 in WC)
          if (Object.prototype.hasOwnProperty.call(WC, t2) && WC[t2] === e2)
            return t2;
        return "DEFAULT";
      };
      const YC = new class {
        constructor() {
          nh(this, "proxyServerURL", void 0), nh(this, "logLevel", WC.DEBUG), nh(this, "uploadState", "collecting"), nh(this, "uploadLogWaitingList", []), nh(this, "uploadLogUploadingList", []), nh(this, "uploadErrorCount", 0), nh(this, "currentLogID", 0), nh(this, "url", void 0), nh(this, "extLog", (e2, t2) => {
            this.appendLogToWaitingList(e2, ...t2);
          });
        }
        debug() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++)
            t2[i2] = arguments[i2];
          const n2 = [WC.DEBUG].concat(t2);
          this.log.apply(this, n2);
        }
        info() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++)
            t2[i2] = arguments[i2];
          const n2 = [WC.INFO].concat(t2);
          this.log.apply(this, n2);
        }
        warning() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++)
            t2[i2] = arguments[i2];
          const n2 = [WC.WARNING].concat(t2);
          this.log.apply(this, n2);
        }
        warn() {
          this.warning(...arguments);
        }
        error() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++)
            t2[i2] = arguments[i2];
          const n2 = [WC.ERROR].concat(t2);
          this.log.apply(this, n2);
        }
        upload() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++)
            t2[i2] = arguments[i2];
          const n2 = [WC.DEBUG].concat(t2);
          this.uploadLog.apply(this, n2);
        }
        setLogLevel(e2) {
          e2 = Math.min(Math.max(0, e2), 4), this.logLevel = e2;
        }
        enableLogUpload() {
          NC("UPLOAD_LOG", true);
        }
        disableLogUpload() {
          NC("UPLOAD_LOG", false), this.uploadLogUploadingList = [], this.uploadLogWaitingList = [];
        }
        setProxyServer(e2) {
          this.proxyServerURL = e2;
        }
        prefix(e2) {
          return new BC(this).prefix(e2);
        }
        log() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++)
            t2[i2] = arguments[i2];
          if (Date.now() - HC < 100)
            return void setTimeout(() => {
              this.log(...t2);
            }, Date.now() - HC);
          const n2 = Math.max(0, Math.min(4, t2[0]));
          if (t2[0] = jC() + " Agora-SDK [".concat(KC(n2), "]:"), this.appendLogToWaitingList(n2, ...t2), n2 < this.logLevel)
            return;
          const s2 = jC() + " %cAgora-SDK [".concat(KC(n2), "]:");
          let r2 = [];
          if (!DC("USE_NEW_LOG"))
            switch (n2) {
              case WC.DEBUG:
                r2 = [s2, "color: #64B5F6;"].concat(t2.slice(1)), console.log.apply(console, r2);
                break;
              case WC.INFO:
                r2 = [s2, "color: #1E88E5; font-weight: bold;"].concat(t2.slice(1)), console.log.apply(console, r2);
                break;
              case WC.WARNING:
                r2 = [s2, "color: #FB8C00; font-weight: bold;"].concat(t2.slice(1)), console.warn.apply(console, r2);
                break;
              case WC.ERROR:
                r2 = [s2, "color: #B00020; font-weight: bold;"].concat(t2.slice(1)), console.error.apply(console, r2);
            }
        }
        uploadLog() {
          for (var e2 = arguments.length, t2 = new Array(e2), i2 = 0; i2 < e2; i2++)
            t2[i2] = arguments[i2];
          if (Date.now() - HC < 100)
            return void setTimeout(() => {
              this.uploadLog(...t2);
            }, Date.now() - HC);
          const n2 = Math.max(0, Math.min(4, t2[0]));
          t2[0] = jC() + " Agora-SDK [".concat(KC(n2), "]:"), this.appendLogToWaitingList(n2, ...t2);
        }
        appendLogToWaitingList(e2) {
          if (!DC("UPLOAD_LOG"))
            return;
          for (var t2 = arguments.length, i2 = new Array(t2 > 1 ? t2 - 1 : 0), n2 = 1; n2 < t2; n2++)
            i2[n2 - 1] = arguments[n2];
          Array.isArray(i2[0]) ? i2[0][0] = GC() + " Agora-SDK [".concat(KC(e2), "]:") : i2[0] = GC() + " Agora-SDK [".concat(KC(e2), "]:");
          let s2 = "";
          i2.forEach((e3) => {
            "object" == typeof e3 && (e3 = JSON.stringify(e3)), s2 += "".concat(e3, " ");
          }), this.uploadLogWaitingList.push({ payload_str: s2, log_level: e2, log_item_id: this.currentLogID++ }), "uploading" === this.uploadState && 0 === this.uploadLogUploadingList.length && this.uploadLogInterval();
        }
        startUpload() {
          this.uploadState = "uploading", 0 === this.uploadLogUploadingList.length && this.uploadLogInterval();
        }
        async uploadLogs() {
          const e2 = this.uploadLogUploadingList, t2 = { sdk_version: yC, process_id: DC("PROCESS_ID"), payload: JSON.stringify(e2) };
          return Xg(async () => {
            const e3 = await EC.post(this.url || (this.proxyServerURL ? "https://".concat(this.proxyServerURL, "/ls/?h=").concat(DC("LOG_UPLOAD_SERVER"), "&p=443&d=upload/v1") : "https://".concat(DC("LOG_UPLOAD_SERVER"), "/upload/v1")), t2, { responseType: "text" });
            if ("OK" !== e3.data) {
              const t3 = new Error("unexpected upload log response");
              throw t3.response = e3, t3;
            }
          }, () => (this.uploadLogUploadingList = [], false), (e3) => (e3.response ? FC.reportLogUploadError({ status: e3.response.status, data: e3.response.data, headers: e3.response.headers, message: e3.message }) : e3.request ? FC.reportLogUploadError({ status: e3.request.status, message: e3.message }) : FC.reportLogUploadError({ status: -1, message: e3.message }), true), { timeout: DC("UPLOAD_LOG_REQUEST_RETRY_INTERVAL"), maxRetryTimeout: DC("UPLOAD_LOG_REQUEST_MAX_RETRY_INTERVAL") });
        }
        uploadLogInterval() {
          0 === this.uploadLogUploadingList.length && 0 === this.uploadLogWaitingList.length || (0 === this.uploadLogUploadingList.length && (this.uploadLogUploadingList = this.uploadLogWaitingList.splice(0, DC("UPLOAD_LOG_LENGTH_EACH_TIME"))), this.uploadLogs().then(() => {
            this.uploadErrorCount = 0, this.uploadLogWaitingList.length > 0 && window.setTimeout(() => this.uploadLogInterval(), DC("UPLOAD_LOG_INTERVAL"));
          }).catch((e2) => {
            this.uploadErrorCount += 1, this.uploadErrorCount < 2 ? window.setTimeout(() => this.uploadLogInterval(), DC("UPLOAD_LOG_TWICE_RETRY_INTERVAL_V1")) : window.setTimeout(() => this.uploadLogInterval(), DC("UPLOAD_LOG_RETRY_INTERVAL_V1"));
          }));
        }
      }();
      var qC, JC;
      function zC(e2) {
        return WT(e2.reportId, "params.reportId", 0, 100, false), WT(e2.category, "params.category", 0, 100, false), WT(e2.event, "params.event", 0, 100, false), WT(e2.label, "params.label", 0, 100, false), jT(e2.value, "params.value", Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, false), true;
      }
      !function(e2) {
        e2.FREE = "free", e2.UPLOADING = "uploading";
      }(qC || (qC = {})), function(e2) {
        e2[e2.MISC = 0] = "MISC", e2[e2.INTERNAL_EVENT = 1] = "INTERNAL_EVENT", e2[e2.PUBLIC_EVENT = 2] = "PUBLIC_EVENT", e2[e2.WEB_EVENT = 3] = "WEB_EVENT", e2[e2.INTERNAL_API = 4] = "INTERNAL_API", e2[e2.WEB_API = 5] = "WEB_API", e2[e2.PUBLIC_API = 6] = "PUBLIC_API";
      }(JC || (JC = {}));
      const XC = { sid: "", lts: 0, success: null, cname: null, uid: null, peer: null, cid: null, elapse: null, extend: null, vid: 0 };
      var QC, ZC, $C, eI;
      function tI(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function iI(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? tI(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : tI(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      !function(e2) {
        e2.PUBLISH = "publish", e2.SUBSCRIBE = "subscribe", e2.WS_COMPRESSOR_INIT = "ws_compressor_init", e2.SESSION_INIT = "session_init", e2.JOIN_CHOOSE_SERVER = "join_choose_server", e2.REQ_USER_ACCOUNT = "req_user_account", e2.JOIN_GATEWAY = "join_gateway", e2.REJOIN_GATEWAY = "rejoin_gateway", e2.STREAM_SWITCH = "stream_switch", e2.REQUEST_PROXY_WORKER_MANAGER = "request_proxy_worker_manager", e2.REQUEST_PROXY_APPCENTER = "request_proxy_appcenter", e2.FIRST_VIDEO_RECEIVED = "first_video_received", e2.FIRST_AUDIO_RECEIVED = "first_audio_received", e2.FIRST_VIDEO_DECODE = "first_video_decode", e2.FIRST_AUDIO_DECODE = "first_audio_decode", e2.ON_ADD_AUDIO_STREAM = "on_add_audio_stream", e2.ON_ADD_VIDEO_STREAM = "on_add_video_stream", e2.ON_UPDATE_STREAM = "on_update_stream", e2.ON_REMOVE_STREAM = "on_remove_stream", e2.USER_ANALYTICS = "req_user_analytics", e2.PC_STATS = "pc_stats", e2.UPDATE_REMOTE_RTPCAPABILITIES = "update_remote_rtpCapabilities";
      }(QC || (QC = {})), function(e2) {
        e2.SESSION = "io.agora.pb.Wrtc.Session", e2.JOIN_CHOOSE_SERVER = "io.agora.pb.Wrtc.JoinChooseServer", e2.REQ_USER_ACCOUNT = "io.agora.pb.Wrtc.ReqUserAccount", e2.JOIN_GATEWAY = "io.agora.pb.Wrtc.JoinGateway", e2.RE_JOIN_GATEWAY = "io.agora.pb.Wrtc.ReJoinGateway", e2.PUBLISH = "io.agora.pb.Wrtc.Publish", e2.SUBSCRIBE = "io.agora.pb.Wrtc.Subscribe", e2.WS_COMPRESSOR_INIT = "io.agora.pb.Wrtc.WsCompressorInit", e2.STREAM_SWITCH = "io.agora.pb.Wrtc.StreamSwitch", e2.AUDIO_SENDING_STOPPED = "io.agora.pb.Wrtc.AudioSendingStopped", e2.VIDEO_SENDING_STOPPED = "io.agora.pb.Wrtc.VideoSendingStopped", e2.REQUEST_PROXY_APPCENTER = "io.agora.pb.Wrtc.RequestProxyAppCenter", e2.REQUEST_PROXY_WORKER_MANAGER = "io.agora.pb.Wrtc.RequestProxyWorkerManager", e2.API_INVOKE = "io.agora.pb.Wrtc.ApiInvoke", e2.FIRST_VIDEO_RECEIVED = "io.agora.pb.Wrtc.FirstVideoReceived", e2.FIRST_AUDIO_RECEIVED = "io.agora.pb.Wrtc.FirstAudioReceived", e2.FIRST_VIDEO_DECODE = "io.agora.pb.Wrtc.FirstVideoDecode", e2.FIRST_AUDIO_DECODE = "io.agora.pb.Wrtc.FirstAudioDecode", e2.ON_ADD_AUDIO_STREAM = "io.agora.pb.Wrtc.OnAddAudioStream", e2.ON_ADD_VIDEO_STREAM = "io.agora.pb.Wrtc.OnAddVideoStream", e2.ON_UPDATE_STREAM = "io.agora.pb.Wrtc.OnUpdateStream", e2.ON_REMOVE_STREAM = "io.agora.pb.Wrtc.OnRemoveStream", e2.JOIN_CHANNEL_TIMEOUT = "io.agora.pb.Wrtc.JoinChannelTimeout", e2.PEER_PUBLISH_STATUS = "io.agora.pb.Wrtc.PeerPublishStatus", e2.WORKER_EVENT = "io.agora.pb.Wrtc.WorkerEvent", e2.AP_WORKER_EVENT = "io.agora.pb.Wrtc.APWorkerEvent", e2.JOIN_WEB_PROXY_AP = "io.agora.pb.Wrtc.JoinWebProxyAP", e2.WEBSOCKET_QUIT = "io.agora.pb.Wrtc.WebSocketQuit", e2.USER_ANALYTICS = "io.agora.pb.Wrtc.UserAnalytics", e2.AUTOPLAY_FAILED = "io.agora.pb.Wrtc.AutoplayFailed", e2.PC_STATS = "io.agora.pb.Wrtc.PCStats", e2.UPDATE_REMOTE_RTPCAPABILITIES = "io.agora.pb.Wrtc.UpdateRemoteRTPCapabilities";
      }(ZC || (ZC = {})), function(e2) {
        e2[e2.WORKER_EVENT = 156] = "WORKER_EVENT", e2[e2.AP_WORKER_EVENT = 160] = "AP_WORKER_EVENT";
      }($C || ($C = {})), function(e2) {
        e2[e2.SESSION = 26] = "SESSION", e2[e2.JOIN_CHOOSE_SERVER = 27] = "JOIN_CHOOSE_SERVER", e2[e2.REQ_USER_ACCOUNT = 196] = "REQ_USER_ACCOUNT", e2[e2.JOIN_GATEWAY = 28] = "JOIN_GATEWAY", e2[e2.PUBLISH = 30] = "PUBLISH", e2[e2.SUBSCRIBE = 29] = "SUBSCRIBE", e2[e2.WS_COMPRESSOR_INIT = 9430] = "WS_COMPRESSOR_INIT", e2[e2.STREAM_SWITCH = 32] = "STREAM_SWITCH", e2[e2.AUDIO_SENDING_STOPPED = 33] = "AUDIO_SENDING_STOPPED", e2[e2.VIDEO_SENDING_STOPPED = 34] = "VIDEO_SENDING_STOPPED", e2[e2.REQUEST_PROXY_APPCENTER = 35] = "REQUEST_PROXY_APPCENTER", e2[e2.REQUEST_PROXY_WORKER_MANAGER = 36] = "REQUEST_PROXY_WORKER_MANAGER", e2[e2.API_INVOKE = 41] = "API_INVOKE", e2[e2.FIRST_VIDEO_RECEIVED = 348] = "FIRST_VIDEO_RECEIVED", e2[e2.FIRST_AUDIO_RECEIVED = 349] = "FIRST_AUDIO_RECEIVED", e2[e2.FIRST_VIDEO_DECODE = 350] = "FIRST_VIDEO_DECODE", e2[e2.FIRST_AUDIO_DECODE = 351] = "FIRST_AUDIO_DECODE", e2[e2.ON_ADD_AUDIO_STREAM = 352] = "ON_ADD_AUDIO_STREAM", e2[e2.ON_ADD_VIDEO_STREAM = 353] = "ON_ADD_VIDEO_STREAM", e2[e2.ON_UPDATE_STREAM = 356] = "ON_UPDATE_STREAM", e2[e2.ON_REMOVE_STREAM = 355] = "ON_REMOVE_STREAM", e2[e2.JOIN_CHANNEL_TIMEOUT = 407] = "JOIN_CHANNEL_TIMEOUT", e2[e2.PEER_PUBLISH_STATUS = 408] = "PEER_PUBLISH_STATUS", e2[e2.WORKER_EVENT = 156] = "WORKER_EVENT", e2[e2.AP_WORKER_EVENT = 160] = "AP_WORKER_EVENT", e2[e2.JOIN_WEB_PROXY_AP = 700] = "JOIN_WEB_PROXY_AP", e2[e2.WEBSOCKET_QUIT = 671] = "WEBSOCKET_QUIT", e2[e2.USER_ANALYTICS = 1e4] = "USER_ANALYTICS", e2[e2.AUTOPLAY_FAILED = 9178] = "AUTOPLAY_FAILED";
      }(eI || (eI = {}));
      class nI {
        constructor() {
          nh(this, "baseInfoMap", /* @__PURE__ */ new Map()), nh(this, "proxyServer", void 0), nh(this, "eventUploadTimer", void 0), nh(this, "setSessionIdTimer", void 0), nh(this, "url", void 0), nh(this, "backupUrl", void 0), nh(this, "_appId", void 0), nh(this, "keyEventUploadPendingItems", []), nh(this, "normalEventUploadPendingItems", []), nh(this, "apiInvokeUploadPendingItems", []), nh(this, "apiInvokeCount", 0), nh(this, "ltsList", []), nh(this, "lastSendNormalEventTime", Date.now()), nh(this, "customReportCounterTimer", void 0), nh(this, "customReportCount", 0), nh(this, "extApiInvoke", async (e2) => {
            for (const t2 of e2) {
              const e3 = iI(iI({}, t2), {}, { sid: null, invokeId: ++this.apiInvokeCount, tag: og.TRACER });
              this.sendApiInvoke(e3);
            }
          }), this.eventUploadTimer = window.setInterval(this.doSend.bind(this), DC("EVENT_REPORT_SEND_INTERVAL")), this.setSessionIdTimer = window.setInterval(this.appendSessionId.bind(this), DC("EVENT_REPORT_SEND_INTERVAL"));
        }
        getBaseInfoBySessionId(e2) {
          return this.baseInfoMap.get(e2);
        }
        adjustSessionStartTime(e2) {
          if (!this.baseInfoMap.has(e2) && !this.baseInfoMap.get(e2))
            return void YC.error("adjust session ".concat(e2, " start time, sid is not exist or info is undefined"));
          const t2 = this.baseInfoMap.get(e2), i2 = Date.now(), n2 = t2.startTime;
          t2.startTime = i2, YC.debug("rewrite session ".concat(e2, " startTime: ").concat(i2, " , ").concat(i2 - n2, "ms")), this.baseInfoMap.set(e2, t2);
        }
        setAppId(e2) {
          this._appId = e2;
        }
        reportApiInvoke(e2, t2, i2) {
          t2.timeout = t2.timeout || 6e4, t2.reportResult = void 0 === t2.reportResult || t2.reportResult;
          const n2 = Date.now();
          this.apiInvokeCount += 1;
          const s2 = this.apiInvokeCount, r2 = () => ({ tag: t2.tag, invokeId: s2, sid: e2, name: t2.name, apiInvokeTime: n2, options: t2.options, states: t2.states || null }), o2 = !!DC("SHOW_REPORT_INVOKER_LOG");
          o2 && YC.info("".concat(t2.name, " start"), t2.options);
          let a2 = false;
          Ug(t2.timeout).then(() => {
            a2 || (this.sendApiInvoke(iI(iI({}, r2()), {}, { error: xT.API_INVOKE_TIMEOUT, success: false })), YC.debug("".concat(t2.name, " timeout")));
          });
          const c2 = new VT(xT.UNEXPECTED_ERROR, "".concat(t2.name, ": this api invoke is end"));
          return { onSuccess: (e3) => {
            const n3 = () => {
              if (a2)
                throw c2;
              return a2 = true, this.sendApiInvoke(iI(iI({}, r2()), {}, { success: true }, t2.reportResult && { result: e3 })), o2 && YC.info("".concat(t2.name, " onSuccess")), e3;
            };
            return i2 ? jg(n3, t2.name + "Success", i2, () => a2 = true) : n3();
          }, onError: (e3) => {
            const n3 = () => {
              if (a2)
                throw e3;
              a2 = true, this.sendApiInvoke(iI(iI({}, r2()), {}, { success: false, error: e3 })), o2 && YC.info("".concat(t2.name, " onFailure"), e3.toString());
            };
            return i2 ? jg(n3, t2.name + "Error", i2, () => a2 = true) : n3();
          } };
        }
        sessionInit(e2, t2) {
          if (this.baseInfoMap.has(e2))
            return;
          const i2 = Date.now(), n2 = this.createBaseInfo(e2, i2);
          n2.cname = t2.cname;
          const s2 = Object.assign({}, { willUploadConsoleLog: DC("UPLOAD_LOG"), maxTouchPoints: navigator.maxTouchPoints, areaVersion: AC ? "global" : "oversea", areas: DC("AREAS") && DC("AREAS").join(",") }, t2.extend), { stringUid: r2, channelProfile: o2, channelMode: a2, isABTestSuccess: c2, lsid: d2, clientRole: l2 } = t2, u2 = Date.now(), h2 = iI(iI({}, n2), {}, { eventType: QC.SESSION_INIT, appid: t2.appid, browser: navigator.userAgent, build: wC, lts: u2, elapse: u2 - i2, extend: JSON.stringify(s2), mode: t2.mode, process: DC("PROCESS_ID"), appType: DC("APP_TYPE"), success: true, version: yC, stringUid: r2, channelProfile: o2, channelMode: a2, isABTestSuccess: c2, lsid: d2, clientType: 20, clientRole: l2, serviceId: DC("PROCESS_ID"), extensionID: DC("PLUGIN_INFO").join(",") || "" });
          this.send({ type: ZC.SESSION, data: h2 }, true);
        }
        joinChooseServer(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2)
            return;
          const n2 = i2.info, s2 = Date.now(), r2 = iI(iI({}, n2), {}, { eventType: QC.JOIN_CHOOSE_SERVER, lts: s2, eventElapse: s2 - t2.lts, chooseServerAddr: t2.csAddr, errorCode: t2.ec, elapse: s2 - i2.startTime, success: t2.succ, chooseServerAddrList: JSON.stringify(t2.serverList), uid: t2.uid ? parseInt(t2.uid) : null, cid: t2.cid ? parseInt(t2.cid) : null, chooseServerIp: t2.csIp || "", opid: t2.opid, unilbsServerIds: t2.unilbsServerIds, extend: t2.extend || void 0, isHttp3: t2.isHttp3 });
          this.send({ type: ZC.JOIN_CHOOSE_SERVER, data: r2 }, true);
        }
        reqUserAccount(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2)
            return;
          const n2 = i2.info, s2 = Date.now(), r2 = iI(iI({}, n2), {}, { eventType: QC.REQ_USER_ACCOUNT, lts: s2, success: t2.success, serverAddress: t2.serverAddr, stringUid: t2.stringUid, uid: t2.uid, errorCode: t2.errorCode, elapse: s2 - i2.startTime, eventElapse: s2 - t2.lts, extend: JSON.stringify(t2.extend) });
          this.send({ type: ZC.REQ_USER_ACCOUNT, data: r2 }, true);
        }
        joinGateway(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2)
            return;
          const n2 = i2.info;
          t2.vid && (n2.vid = t2.vid), n2.uid = t2.uid, n2.cid = t2.cid;
          const s2 = Date.now(), { firstSuccess: r2, avoidJoinStartTime: o2, isProxy: a2, addr: c2 } = t2, d2 = s2 - (r2 && o2 ? o2 : i2.startTime), l2 = iI(iI({}, n2), {}, { eventType: QC.JOIN_GATEWAY, lts: s2, gatewayAddr: t2.addr, success: t2.succ, errorCode: t2.ec, elapse: d2, eventElapse: s2 - t2.lts, firstSuccess: r2, signalChannel: t2.signalChannel }), u2 = l2.success ? 1 : 0;
          if (t2.succ && (i2.lastJoinSuccessTime = s2), r2)
            this.send({ type: ZC.JOIN_GATEWAY, data: l2 }, true);
          else {
            let e3;
            if (c2)
              if (a2) {
                const t4 = c2.match(/h=(\d{1,3}-){3}\d{1,3}/g), i3 = c2.match(/p=[0-9]{1,6}/g);
                e3 = { isSuccess: u2, gatewayIp: t4 && t4.length ? t4[0].split("=")[1].replace(/-/g, ".") : "", port: i3 && i3.length ? i3[0].split("=")[1] : "", isProxy: a2 ? 1 : 0 };
              } else {
                const t4 = c2.match(/wss:\/\/(\d{1,3}-){3}\d{1,3}/g), i3 = c2.match(/(:|p=)[0-9]{1,6}/g);
                e3 = { isSuccess: u2, gatewayIp: t4 && t4.length ? t4[0].split("//")[1].replace(/-/g, ".") : "", port: i3 && i3.length ? i3[0].split(/:|p=/g)[1] : "", isProxy: a2 ? 1 : 0 };
              }
            else
              e3 = { isSuccess: u2, gatewayIp: "", port: "", isProxy: a2 ? 1 : 0 };
            delete l2.success, delete l2.eventType, delete l2.firstSuccess, l2.vid = Number(l2.vid);
            const t3 = Object.assign({}, l2, e3, { eventType: QC.REJOIN_GATEWAY });
            this.send({ type: ZC.RE_JOIN_GATEWAY, data: t3 }, true);
          }
        }
        joinChannelTimeout(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2)
            return;
          const n2 = Date.now(), s2 = iI(iI({}, i2.info), {}, { lts: n2, timeout: t2, elapse: n2 - i2.startTime });
          this.send({ type: ZC.JOIN_CHANNEL_TIMEOUT, data: s2 }, true);
        }
        publish(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2)
            return;
          const n2 = i2.info, s2 = Date.now(), r2 = iI(iI({}, n2), {}, { eventType: QC.PUBLISH, lts: s2, eventElapse: t2.eventElapse, elapse: s2 - i2.startTime, success: t2.succ, errorCode: t2.ec, videoName: t2.videoName, audioName: t2.audioName, screenName: t2.screenName, screenshare: t2.screenshare, audio: t2.audio, video: t2.video, p2pid: t2.p2pid, publishRequestid: t2.publishRequestid });
          this.send({ type: ZC.PUBLISH, data: r2 }, true);
        }
        subscribe(e2, t2, i2) {
          const n2 = this.baseInfoMap.get(e2);
          if (!n2)
            return;
          const s2 = n2.info, r2 = Date.now(), o2 = iI(iI({}, s2), {}, { eventType: QC.SUBSCRIBE, lts: r2, eventElapse: t2.eventElapse, elapse: r2 - n2.startTime, success: t2.succ, errorCode: t2.ec, video: t2.video, audio: t2.audio, subscribeRequestid: t2.subscribeRequestid, p2pid: t2.p2pid }, i2 && { extend: JSON.stringify({ isMassSubscribe: true }) });
          "string" == typeof t2.peerid ? o2.peerSuid = t2.peerid : o2.peer = t2.peerid, this.send({ type: ZC.SUBSCRIBE, data: o2 }, true);
        }
        wsCompressorInit(e2) {
          var t2;
          const i2 = [...uh(t2 = this.baseInfoMap).call(t2)], n2 = i2.length ? i2[0] : "UnableToGetSid", s2 = this.baseInfoMap.get(n2);
          if (!s2)
            return;
          const r2 = s2.info, o2 = Date.now(), a2 = iI(iI({}, r2), {}, { eventType: QC.WS_COMPRESSOR_INIT, lts: o2, eventElapse: e2.eventElapse, elapse: o2 - s2.startTime, status: e2.status ? 1 : 2 });
          this.send({ type: ZC.WS_COMPRESSOR_INIT, data: a2 }, true);
        }
        firstRemoteVideoDecode(e2, t2, i2, n2) {
          const s2 = this.baseInfoMap.get(e2);
          if (!s2)
            return;
          const r2 = s2.info, o2 = Date.now(), a2 = iI(iI(iI({}, r2), n2), {}, { elapse: o2 - s2.startTime, eventType: t2, lts: o2, firstDecodeFrame: Math.max(o2 - s2.startTime, 0), apEnd: Math.max(n2.apEnd - s2.startTime, 0), apStart: Math.max(n2.apStart - s2.startTime, 0), joinGwEnd: Math.max(n2.joinGwEnd - s2.startTime, 0), joinGwStart: Math.max(n2.joinGwStart - s2.startTime, 0), pcEnd: Math.max(n2.pcEnd - s2.startTime, 0), pcStart: Math.max(n2.pcStart - s2.startTime, 0), subscriberEnd: Math.max(n2.subscriberEnd - s2.startTime, 0), subscriberStart: Math.max(n2.subscriberStart - s2.startTime, 0), videoAddNotify: Math.max(n2.videoAddNotify - s2.startTime, 0) });
          this.send({ type: i2, data: a2 }, true);
        }
        firstRemoteFrame(e2, t2, i2, n2) {
          const s2 = this.baseInfoMap.get(e2);
          if (!s2)
            return;
          const r2 = s2.info, o2 = Date.now(), a2 = iI(iI(iI({}, r2), n2), {}, { elapse: o2 - s2.startTime, eventType: t2, lts: o2 });
          this.send({ type: i2, data: a2 }, true);
        }
        pcStats(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2)
            return;
          const n2 = i2.info, s2 = Date.now(), r2 = iI(iI(iI({}, n2), t2), {}, { vid: void 0 === n2.vid ? 0 : Number(n2.vid), elapse: s2 - i2.startTime, eventType: QC.PC_STATS, lts: s2 });
          this.send({ type: ZC.PC_STATS, data: r2 }, true);
        }
        updateRemoteRTPCapabilities(e2, t2) {
          if (e2) {
            const i2 = this.baseInfoMap.get(e2);
            if (!i2)
              return;
            const n2 = i2.info, s2 = Date.now(), r2 = iI(iI(iI({}, n2), t2), {}, { vid: void 0 === n2.vid ? 0 : Number(n2.vid), eventType: QC.UPDATE_REMOTE_RTPCAPABILITIES, lts: s2 });
            this.send({ type: ZC.UPDATE_REMOTE_RTPCAPABILITIES, data: r2 }, true);
          }
        }
        onGatewayStream(e2, t2, i2, n2) {
          const s2 = this.baseInfoMap.get(e2);
          if (!s2)
            return;
          const r2 = s2.info, o2 = Date.now(), a2 = iI(iI(iI({}, r2), n2), {}, { eventType: t2, lts: o2 });
          this.send({ type: i2, data: a2 }, true);
        }
        streamSwitch(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2)
            return;
          const n2 = i2.info, s2 = Date.now(), r2 = iI(iI({}, n2), {}, { eventType: QC.STREAM_SWITCH, lts: s2, isDual: t2.isdual, elapse: s2 - i2.startTime, success: t2.succ });
          this.send({ type: ZC.STREAM_SWITCH, data: r2 }, true);
        }
        requestProxyAppCenter(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2)
            return;
          const n2 = i2.info, s2 = Date.now(), r2 = iI(iI({}, n2), {}, { eventType: QC.REQUEST_PROXY_APPCENTER, lts: s2, eventElapse: s2 - t2.lts, elapse: s2 - i2.startTime, APAddr: t2.APAddr, workerManagerList: t2.workerManagerList, response: t2.response, errorCode: t2.ec, success: t2.succ });
          this.send({ type: ZC.REQUEST_PROXY_APPCENTER, data: r2 }, true);
        }
        requestProxyWorkerManager(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2)
            return;
          const n2 = i2.info, s2 = Date.now(), r2 = iI(iI({}, n2), {}, { eventType: QC.REQUEST_PROXY_WORKER_MANAGER, lts: s2, eventElapse: s2 - t2.lts, elapse: s2 - i2.startTime, workerManagerAddr: t2.workerManagerAddr, response: t2.response, errorCode: t2.ec, success: t2.succ });
          this.send({ type: ZC.REQUEST_PROXY_WORKER_MANAGER, data: r2 }, true);
        }
        setProxyServer(e2) {
          this.proxyServer = e2, e2 ? YC.debug("reportProxyServerurl: ".concat(e2)) : YC.debug("disable reportProxyServerurl: ".concat(e2));
        }
        peerPublishStatus(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2)
            return;
          const n2 = i2.info, s2 = Date.now(), r2 = iI(iI({}, n2), {}, { subscribeElapse: t2.subscribeElapse, peer: t2.peer, peerPublishDuration: Math.max(t2.audioPublishDuration, t2.videoPublishDuration), audiotag: t2.audioPublishDuration > 0 ? 1 : -1, videotag: t2.videoPublishDuration > 0 ? 1 : -1, lts: s2, elapse: s2 - i2.startTime, joinChannelSuccessElapse: s2 - (i2.lastJoinSuccessTime || s2), peerPublishDurationVideo: t2.videoPublishDuration, peerPublishDurationAudio: t2.audioPublishDuration });
          this.send({ type: ZC.PEER_PUBLISH_STATUS, data: r2 }, true);
        }
        workerEvent(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2)
            return;
          const n2 = i2.info, s2 = Date.now(), r2 = function(e3, t3, i3) {
            const n3 = e3[t3];
            if (!n3 || "string" != typeof n3)
              return [e3];
            e3[t3] = "";
            const s3 = Lg(JSON.stringify(e3));
            let r3 = 0;
            const o2 = [];
            let a2 = 0;
            for (let c2 = 0; c2 < n3.length; c2++)
              a2 += n3.charCodeAt(c2) <= 127 ? 1 : 3, a2 <= i3 - s3 || (o2[o2.length] = Ig(Ig({}, e3), {}, { [t3]: n3.substring(r3, c2) }), r3 = c2, a2 = n3.charCodeAt(c2) <= 127 ? 1 : 3);
            return r3 !== n3.length - 1 && (o2[o2.length] = Ig(Ig({}, e3), {}, { [t3]: n3.substring(r3) })), o2;
          }(iI(iI(iI({}, n2), t2), {}, { elapse: s2 - i2.startTime, lts: s2, productType: "WebRTC" }), "payload", 1300);
          r2.forEach((e3) => this.send({ type: ZC.WORKER_EVENT, data: e3 }, true));
        }
        apworkerEvent(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2)
            return;
          const n2 = i2.info, s2 = Date.now(), r2 = iI(iI(iI({}, n2), t2), {}, { elapse: s2 - i2.startTime, lts: s2 });
          this.send({ type: ZC.AP_WORKER_EVENT, data: r2 }, true);
        }
        joinWebProxyAP(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2)
            return;
          const n2 = i2.info, s2 = Date.now(), r2 = iI(iI(iI({}, n2), t2), {}, { elapse: s2 - i2.startTime, lts: s2, extend: t2.extend || void 0 });
          this.send({ type: ZC.JOIN_WEB_PROXY_AP, data: r2 }, true);
        }
        WebSocketQuit(e2, t2) {
          const i2 = this.baseInfoMap.get(e2);
          if (!i2)
            return;
          const n2 = i2.info, s2 = Date.now(), r2 = iI(iI(iI({}, n2), t2), {}, { elapse: s2 - i2.startTime, lts: s2 });
          this.send({ type: ZC.WEBSOCKET_QUIT, data: r2 }, true);
        }
        async sendCustomReportMessage(e2, t2) {
          if (this.customReportCount += t2.length, this.customReportCount > DC("CUSTOM_REPORT_LIMIT"))
            throw new VT(xT.CUSTOM_REPORT_FREQUENCY_TOO_HIGH);
          this.customReportCounterTimer || (this.customReportCounterTimer = window.setInterval(() => {
            this.customReportCount = 0;
          }, 5e3));
          const i2 = Date.now(), n2 = t2.map((t3) => ({ type: ZC.USER_ANALYTICS, data: iI(iI({ sid: e2 }, t3), {}, { lts: i2 }) }));
          try {
            DC("NEW_REPORT_SERVER") ? await this.postDataToStatsCollector2(n2) : await this.postDataToStatsCollector(n2);
          } catch (e3) {
            throw YC.error("send custom report message failed", e3.toString()), new VT(xT.CUSTOM_REPORT_SEND_FAILED, e3.message);
          }
        }
        sendApiInvoke(e2) {
          const t2 = DC("NOT_REPORT_EVENT");
          if (e2.tag && bn(t2) && bn(t2).call(t2, e2.tag))
            return false;
          if (null === e2.sid)
            return this.apiInvokeUploadPendingItems.push(e2), false;
          const i2 = this.baseInfoMap.get(e2.sid);
          if (!i2)
            return this.apiInvokeUploadPendingItems.push(e2), false;
          const { cname: n2, uid: s2, cid: r2 } = i2.info;
          let o2;
          if (e2.lts = e2.lts || Date.now(), e2.error)
            if (e2.error instanceof VT) {
              const { code: t3, message: i3 } = e2.error;
              o2 = t3 || (i3 || e2.error.toString());
            } else
              o2 = e2.error.toString();
          const a2 = { invokeId: e2.invokeId, sid: e2.sid, cname: n2, cid: r2, uid: s2, lts: e2.lts, success: e2.success, elapse: e2.lts - i2.startTime, execElapse: e2.lts - e2.apiInvokeTime, apiName: e2.name, options: e2.options ? JSON.stringify(e2.options) : void 0, execStates: e2.states ? JSON.stringify(e2.states) : void 0, execResult: e2.result ? JSON.stringify(e2.result) : void 0, errorCode: e2.error ? o2 : void 0, errorMsg: e2.error ? JSON.stringify(e2.error) : void 0 };
          return this.send({ type: ZC.API_INVOKE, data: a2 }, false), true;
        }
        appendSessionId() {
          nI.__CLIENT_LIST__.forEach((e2) => {
            if (e2._sessionId) {
              const t2 = this.apiInvokeUploadPendingItems.length;
              for (let i2 = 0; i2 < t2; i2++) {
                const t3 = this.apiInvokeUploadPendingItems.shift();
                t3 && (t3.sid = e2._sessionId, this.sendApiInvoke(Object.assign({}, t3)));
              }
            }
          });
        }
        send(e2, t2) {
          if (t2)
            return this.keyEventUploadPendingItems.push(e2), void this.sendItems(this.keyEventUploadPendingItems, true);
          this.normalEventUploadPendingItems.push(e2), this.normalEventUploadPendingItems.length > DC("NORMAL_EVENT_QUEUE_CAPACITY") && this.normalEventUploadPendingItems.splice(0, 1), this.normalEventUploadPendingItems.length >= 10 && this.sendItems(this.normalEventUploadPendingItems, false);
        }
        doSend() {
          this.keyEventUploadPendingItems.length > 0 && this.sendItems(this.keyEventUploadPendingItems, true), this.normalEventUploadPendingItems.length > 0 && Date.now() - this.lastSendNormalEventTime >= 5e3 && this.sendItems(this.normalEventUploadPendingItems, false);
        }
        sendItems(e2, t2) {
          const i2 = [], n2 = [];
          for (; e2.length; ) {
            const t3 = e2.shift();
            i2.length < 20 ? i2.push(t3) : n2.push(t3);
          }
          e2.push(...n2);
          for (const e3 of [...i2]) {
            var s2;
            if (-1 !== this.ltsList.indexOf(e3.data.lts))
              e3.data.lts = this.ltsList[this.ltsList.length - 1] + 1, this.ltsList.push(e3.data.lts);
            else
              this.ltsList.push(e3.data.lts), Zh(s2 = this.ltsList).call(s2, (e4, t3) => e4 - t3);
          }
          t2 || (this.lastSendNormalEventTime = Date.now());
          return DC("ENABLE_EVENT_REPORT") ? (i2.length && (DC("NEW_REPORT_SERVER") ? this.postDataToStatsCollector2(i2) : this.postDataToStatsCollector(i2)).catch(/* @__PURE__ */ ((e3) => (i3) => {
            DC("EVENT_REPORT_RETRY") && (t2 ? this.keyEventUploadPendingItems = this.keyEventUploadPendingItems.concat(e3) : (this.normalEventUploadPendingItems = this.normalEventUploadPendingItems.concat(e3), this.normalEventUploadPendingItems.length > DC("NORMAL_EVENT_QUEUE_CAPACITY") && (this.normalEventUploadPendingItems.splice(0, this.normalEventUploadPendingItems.length - DC("NORMAL_EVENT_QUEUE_CAPACITY")), YC.warning("report: drop normal events"))));
          })(i2)), e2) : e2;
        }
        async postDataToStatsCollector2(e2) {
          Rg.networkState === ug.OFFLINE && await tT.race([Rg.onlineWaiter, Ug(2 * Jg.maxRetryTimeout)]);
          const t2 = (e3) => {
            let t3 = new Uint8Array();
            return e3.forEach((e4) => {
              const i3 = ZT(JSON.stringify(e4.data)), n3 = new ArrayBuffer(5), s2 = ((e5) => {
                let t4 = 0;
                return Object.entries(ZC).forEach((i4) => {
                  let [n4, s3] = i4;
                  s3 === e5.type && (t4 = EventNameToID[n4]);
                }), t4;
              })(e4), r2 = new DataView(n3);
              r2.setUint16(0, i3.byteLength, true), r2.setUint8(2, 255 & s2), r2.setUint8(3, s2 >>> 8 & 255), r2.setUint8(4, s2 >>> 16 & 255), t3 = $T(t3, new Uint8Array(n3)), t3 = $T(t3, i3);
            }), t3;
          }, i2 = "event";
          let n2 = this.proxyServer ? "https://".concat(this.proxyServer, "/rs/?h=").concat(DC("NEW_REPORT_SERVER_DOMAINS")[0], "&p=443&d=").concat(i2) : "https://".concat(DC("NEW_REPORT_SERVER_DOMAINS")[0], "/").concat(i2);
          for (let s2 = 0; s2 < 2; s2 += 1) {
            1 === s2 && (n2 = this.proxyServer ? "https://".concat(this.proxyServer, "/rs/?h=").concat(DC("NEW_REPORT_SERVER_DOMAINS")[1], "&p=443&d=").concat(i2) : "https://".concat(DC("NEW_REPORT_SERVER_DOMAINS")[1], "/").concat(i2));
            try {
              await RC(n2, { timeout: 1e4, data: t2(e2), headers: iI(iI({ biz: "webrtc", sendts: Math.round(Date.now() / 1e3), debug: "false" }, this._appId && { appid: this._appId }), {}, { "Content-Type": "application/octet-stream" }) }, true);
            } catch (e3) {
              if (1 === s2)
                throw e3;
              continue;
            }
            return;
          }
        }
        async postDataToStatsCollector(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          const i2 = { msgType: "EventMessages", sentTs: Math.round(Date.now() / 1e3), payloads: e2.map((e3) => JSON.stringify(e3)), vid: ((e3) => {
            const t3 = e3 && e3.data.sid && this.baseInfoMap.get(e3.data.sid);
            return t3 && t3.info.vid && +t3.info.vid || 0;
          })(e2[0]) };
          Rg.networkState === ug.OFFLINE && await tT.race([Rg.onlineWaiter, Ug(2 * Jg.maxRetryTimeout)]);
          const n2 = t2 ? "/events/proto-raws" : "/events/messages";
          let s2 = this.url || (this.proxyServer ? "https://".concat(this.proxyServer, "/rs/?h=").concat(DC("EVENT_REPORT_DOMAIN"), "&p=").concat(DC("STATS_COLLECTOR_PORT"), "&d=").concat(n2) : "https://".concat(DC("EVENT_REPORT_DOMAIN"), ":").concat(DC("STATS_COLLECTOR_PORT")).concat(n2));
          for (let e3 = 0; e3 < 2; e3 += 1) {
            1 === e3 && (s2 = this.backupUrl || (this.proxyServer ? "https://".concat(this.proxyServer, "/rs/?h=").concat(DC("EVENT_REPORT_BACKUP_DOMAIN"), "&p=").concat(DC("STATS_COLLECTOR_PORT"), "&d=").concat(n2) : "https://".concat(DC("EVENT_REPORT_BACKUP_DOMAIN"), ":").concat(DC("STATS_COLLECTOR_PORT")).concat(n2)));
            try {
              t2 ? await CC(s2, { timeout: 1e4, data: i2 }) : await RC(s2, { timeout: 1e4, data: i2 });
            } catch (t3) {
              if (1 === e3)
                throw t3;
              continue;
            }
            return;
          }
        }
        createBaseInfo(e2, t2) {
          const i2 = Object.assign({}, XC);
          return i2.sid = e2, this.baseInfoMap.set(e2, { info: i2, startTime: t2 }), i2;
        }
        reportResourceTiming(e2, t2) {
          const i2 = performance.getEntriesByName(e2), n2 = i2[i2.length - 1];
          n2 && this.reportApiInvoke(t2, { name: "Client.resourceTiming", options: n2, tag: og.TRACER }).onSuccess();
        }
      }
      function sI() {
        let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        return function(t2, i2, n2) {
          const s2 = n2.value;
          if ("function" == typeof s2) {
            const r2 = e2.className || t2.__className__ || ("AgoraRTCClient" === t2.constructor.name ? "Client" : t2.constructor.name);
            n2.value = function() {
              for (var t3 = arguments.length, n3 = new Array(t3), o2 = 0; o2 < t3; o2++)
                n3[o2] = arguments[o2];
              let a2 = n3;
              if (e2.argsMap)
                try {
                  a2 = e2.argsMap(this, ...n3);
                } catch (e3) {
                  YC.warning(e3), a2 = [];
                }
              try {
                JSON.stringify(a2);
              } catch (e3) {
                YC.warning("arguments for method ".concat(r2, ".").concat(String(i2), " not serializable for apiInvoke.")), a2 = [];
              }
              const c2 = (e2.report || rI).reportApiInvoke(this._sessionId || null, { name: "".concat(r2, ".").concat(String(i2)), options: a2, tag: og.TRACER, reportResult: e2.reportResult }, e2.throttleTime);
              try {
                const t4 = s2.apply(this, n3);
                return t4 instanceof tT ? t4.then((t5) => (c2.onSuccess(e2.reportResult && t5), t5)).catch((e3) => {
                  throw c2.onError(e3), e3;
                }) : (c2.onSuccess(e2.reportResult && t4), t4);
              } catch (e3) {
                throw c2.onError(e3), e3;
              }
            };
          }
          return n2;
        };
      }
      nh(nI, "__CLIENT_LIST__", []);
      const rI = new nI();
      FC.on("REPORT_LOG_UPLOAD", (e2) => {
        e2.networkState = Rg.networkState, rI.reportApiInvoke(null, { name: "logUploadError", options: e2, tag: og.TRACER });
      });
      const oI = ["CHINA", "GLOBAL"], aI = function() {
        const e2 = "us".concat("erna", "me"), t2 = "pa".concat("sswo", "rd"), i2 = ["t", "s", "t"];
        i2.splice(1, 0, "e");
        const n2 = i2.join(""), s2 = [];
        for (let e3 = 0; e3 < 6; e3++)
          s2.push("1");
        const r2 = s2.join(""), o2 = {};
        return o2[e2] = n2, o2[t2] = r2, Object.assign(o2, { turnServerURL: "", tcpport: 3433, udpport: 3478, forceturn: false });
      }();
      window.DEFAULT_TURN_CONFIG = aI, AC || (OC.WEBCS_DOMAIN = ["ap-web-1-oversea.agora.io", "ap-web-1-north-america.agora.io"], OC.WEBCS_DOMAIN_BACKUP_LIST = ["ap-web-2-oversea.agora.io", "ap-web-2-north-america.agora.io"], OC.PROXY_CS = ["proxy-ap-web-oversea.agora.io", "proxy-ap-web-america.agora.io"], OC.CDS_AP = ["cds-ap-web-oversea.agora.io", "cds-ap-web-america.agora.io", "cds-ap-web-america2.agora.io"], OC.ACCOUNT_REGISTER = ["sua-ap-web-oversea.agora.io", "sua-ap-web-america.agora.io", "sua-ap-web-america2.agora.io"], OC.UAP_AP = ["uap-ap-web-oversea.agora.io", "uap-ap-web-america.agora.io", "uap-ap-web-america2.agora.io"], OC.LOG_UPLOAD_SERVER = "logservice-oversea.agora.io", OC.EVENT_REPORT_DOMAIN = "statscollector-1-oversea.agora.io", OC.EVENT_REPORT_BACKUP_DOMAIN = "statscollector-2-oversea.agora.io", OC.PROXY_SERVER_TYPE3 = "webrtc-cloud-proxy.agora.io", OC.AREAS = ["NORTH_AMERICA", "OVERSEA"]);
      const cI = [[0, 1, 2, 3, 4, 5, 5], [0, 2, 2, 3, 4, 5, 5], [0, 3, 3, 3, 4, 5, 5], [0, 4, 4, 4, 4, 5, 5], [0, 5, 5, 5, 5, 5, 5]], dI = [];
      function lI(e2, t2) {
        return !!t2 && dI.some((i2) => i2.uid === e2 && i2.channelName === t2);
      }
      nI.__CLIENT_LIST__ = dI;
      var uI, hI, pI, _I, EI, mI, fI, TI, gI, SI, RI, CI, II, vI, yI, AI, bI, wI = Ji("Array").values, OI = ln, NI = Ze, DI = l, PI = wI, LI = Array.prototype, kI = { DOMTokenList: true, NodeList: true }, MI = i(function(e2) {
        var t2 = e2.values;
        return e2 === LI || DI(LI, e2) && t2 === LI.values || NI(kI, OI(e2)) ? PI : t2;
      });
      function UI(e2, t2, i2, n2) {
        var s2, r2 = arguments.length, o2 = r2 < 3 ? t2 : null === n2 ? n2 = Object.getOwnPropertyDescriptor(t2, i2) : n2;
        if ("object" == typeof Reflect && "function" == typeof Reflect.decorate)
          o2 = Reflect.decorate(e2, t2, i2, n2);
        else
          for (var a2 = e2.length - 1; a2 >= 0; a2--)
            (s2 = e2[a2]) && (o2 = (r2 < 3 ? s2(o2) : r2 > 3 ? s2(t2, i2, o2) : s2(t2, i2)) || o2);
        return r2 > 3 && o2 && Object.defineProperty(t2, i2, o2), o2;
      }
      function xI(e2, t2) {
        if ("object" == typeof Reflect && "function" == typeof Reflect.metadata)
          return Reflect.metadata(e2, t2);
      }
      !function(e2) {
        e2.L1T1 = "L1T1", e2.L1T2 = "L1T2", e2.L1T3 = "L1T3", e2.L2T1_KEY = "L2T1_KEY", e2.L2T2_KEY = "L2T2_KEY", e2.L2T3_KEY = "L2T3_KEY", e2.L3T1_KEY = "L3T1_KEY", e2.L3T2_KEY = "L3T2_KEY", e2.L3T3_KEY = "L3T3_KEY";
      }(uI || (uI = {})), function(e2) {
        e2.CERTIFICATE = "certificate", e2.CODEC = "codec", e2.CANDIDATE_PAIR = "candidate-pair", e2.LOCAL_CANDIDATE = "local-candidate", e2.REMOTE_CANDIDATE = "remote-candidate", e2.INBOUND = "inbound-rtp", e2.TRACK = "track", e2.OUTBOUND = "outbound-rtp", e2.PC = "peer-connection", e2.REMOTE_INBOUND = "remote-inbound-rtp", e2.REMOTE_OUTBOUND = "remote-outbound-rtp", e2.TRANSPORT = "transport", e2.CSRC = "csrc", e2.DATA_CHANNEL = "data-channel", e2.STREAM = "stream", e2.SENDER = "sender", e2.RECEIVER = "receiver";
      }(hI || (hI = {})), function(e2) {
        e2[e2.ACCESS_POINT = 101] = "ACCESS_POINT", e2[e2.UNILBS = 201] = "UNILBS", e2[e2.STRING_UID_ALLOCATOR = 901] = "STRING_UID_ALLOCATOR";
      }(pI || (pI = {})), function(e2) {
        e2[e2.IIIEGAL_APPID = 1] = "IIIEGAL_APPID", e2[e2.IIIEGAL_UID = 2] = "IIIEGAL_UID", e2[e2.INTERNAL_ERROR = 3] = "INTERNAL_ERROR";
      }(_I || (_I = {})), function(e2) {
        e2[e2.INVALID_VENDOR_KEY = 5] = "INVALID_VENDOR_KEY", e2[e2.INVALID_CHANNEL_NAME = 7] = "INVALID_CHANNEL_NAME", e2[e2.INTERNAL_ERROR = 8] = "INTERNAL_ERROR", e2[e2.NO_AUTHORIZED = 9] = "NO_AUTHORIZED", e2[e2.DYNAMIC_KEY_TIMEOUT = 10] = "DYNAMIC_KEY_TIMEOUT", e2[e2.NO_ACTIVE_STATUS = 11] = "NO_ACTIVE_STATUS", e2[e2.DYNAMIC_KEY_EXPIRED = 13] = "DYNAMIC_KEY_EXPIRED", e2[e2.STATIC_USE_DYNAMIC_KEY = 14] = "STATIC_USE_DYNAMIC_KEY", e2[e2.DYNAMIC_USE_STATIC_KEY = 15] = "DYNAMIC_USE_STATIC_KEY", e2[e2.USER_OVERLOAD = 16] = "USER_OVERLOAD", e2[e2.FORBIDDEN_REGION = 18] = "FORBIDDEN_REGION", e2[e2.CANNOT_MEET_AREA_DEMAND = 19] = "CANNOT_MEET_AREA_DEMAND";
      }(EI || (EI = {})), function(e2) {
        e2[e2.NO_FLAG_SET = 100] = "NO_FLAG_SET", e2[e2.FLAG_SET_BUT_EMPTY = 101] = "FLAG_SET_BUT_EMPTY", e2[e2.INVALID_FALG_SET = 102] = "INVALID_FALG_SET", e2[e2.FLAG_SET_BUT_NO_RE = 103] = "FLAG_SET_BUT_NO_RE", e2[e2.INVALID_SERVICE_ID = 104] = "INVALID_SERVICE_ID", e2[e2.NO_SERVICE_AVAILABLE = 200] = "NO_SERVICE_AVAILABLE", e2[e2.NO_SERVICE_AVAILABLE_P2P = 201] = "NO_SERVICE_AVAILABLE_P2P", e2[e2.NO_SERVICE_AVAILABLE_VOICE = 202] = "NO_SERVICE_AVAILABLE_VOICE", e2[e2.NO_SERVICE_AVAILABLE_WEBRTC = 203] = "NO_SERVICE_AVAILABLE_WEBRTC", e2[e2.NO_SERVICE_AVAILABLE_CDS = 204] = "NO_SERVICE_AVAILABLE_CDS", e2[e2.NO_SERVICE_AVAILABLE_CDN = 205] = "NO_SERVICE_AVAILABLE_CDN", e2[e2.NO_SERVICE_AVAILABLE_TDS = 206] = "NO_SERVICE_AVAILABLE_TDS", e2[e2.NO_SERVICE_AVAILABLE_REPORT = 207] = "NO_SERVICE_AVAILABLE_REPORT", e2[e2.NO_SERVICE_AVAILABLE_APP_CENTER = 208] = "NO_SERVICE_AVAILABLE_APP_CENTER", e2[e2.NO_SERVICE_AVAILABLE_ENV0 = 209] = "NO_SERVICE_AVAILABLE_ENV0", e2[e2.NO_SERVICE_AVAILABLE_VOET = 210] = "NO_SERVICE_AVAILABLE_VOET", e2[e2.NO_SERVICE_AVAILABLE_STRING_UID = 211] = "NO_SERVICE_AVAILABLE_STRING_UID", e2[e2.NO_SERVICE_AVAILABLE_WEBRTC_UNILBS = 212] = "NO_SERVICE_AVAILABLE_WEBRTC_UNILBS", e2[e2.NO_SERVICE_AVAILABLE_UNILBS_FLV = 213] = "NO_SERVICE_AVAILABLE_UNILBS_FLV";
      }(mI || (mI = {})), function(e2) {
        e2[e2.K_TIMESTAMP_EXPIRED = 2] = "K_TIMESTAMP_EXPIRED", e2[e2.K_CHANNEL_PERMISSION_INVALID = 3] = "K_CHANNEL_PERMISSION_INVALID", e2[e2.K_CERTIFICATE_INVALID = 4] = "K_CERTIFICATE_INVALID", e2[e2.K_CHANNEL_NAME_EMPTY = 5] = "K_CHANNEL_NAME_EMPTY", e2[e2.K_CHANNEL_NOT_FOUND = 6] = "K_CHANNEL_NOT_FOUND", e2[e2.K_TICKET_INVALID = 7] = "K_TICKET_INVALID", e2[e2.K_CHANNEL_CONFLICTED = 8] = "K_CHANNEL_CONFLICTED", e2[e2.K_SERVICE_NOT_READY = 9] = "K_SERVICE_NOT_READY", e2[e2.K_SERVICE_TOO_HEAVY = 10] = "K_SERVICE_TOO_HEAVY", e2[e2.K_UID_BANNED = 14] = "K_UID_BANNED", e2[e2.K_IP_BANNED = 15] = "K_IP_BANNED", e2[e2.K_CHANNEL_BANNED = 16] = "K_CHANNEL_BANNED", e2[e2.K_AUTO_REBALANCE = 28] = "K_AUTO_REBALANCE", e2[e2.WARN_NO_AVAILABLE_CHANNEL = 103] = "WARN_NO_AVAILABLE_CHANNEL", e2[e2.WARN_LOOKUP_CHANNEL_TIMEOUT = 104] = "WARN_LOOKUP_CHANNEL_TIMEOUT", e2[e2.WARN_LOOKUP_CHANNEL_REJECTED = 105] = "WARN_LOOKUP_CHANNEL_REJECTED", e2[e2.WARN_OPEN_CHANNEL_TIMEOUT = 106] = "WARN_OPEN_CHANNEL_TIMEOUT", e2[e2.WARN_OPEN_CHANNEL_REJECTED = 107] = "WARN_OPEN_CHANNEL_REJECTED", e2[e2.WARN_REQUEST_DEFERRED = 108] = "WARN_REQUEST_DEFERRED", e2[e2.ERR_DYNAMIC_KEY_TIMEOUT = 109] = "ERR_DYNAMIC_KEY_TIMEOUT", e2[e2.ERR_NO_AUTHORIZED = 110] = "ERR_NO_AUTHORIZED", e2[e2.ERR_VOM_SERVICE_UNAVAILABLE = 111] = "ERR_VOM_SERVICE_UNAVAILABLE", e2[e2.ERR_NO_CHANNEL_AVAILABLE_CODE = 112] = "ERR_NO_CHANNEL_AVAILABLE_CODE", e2[e2.ERR_MASTER_VOCS_UNAVAILABLE = 114] = "ERR_MASTER_VOCS_UNAVAILABLE", e2[e2.ERR_INTERNAL_ERROR = 115] = "ERR_INTERNAL_ERROR", e2[e2.ERR_NO_ACTIVE_STATUS = 116] = "ERR_NO_ACTIVE_STATUS", e2[e2.ERR_INVALID_UID = 117] = "ERR_INVALID_UID", e2[e2.ERR_DYNAMIC_KEY_EXPIRED = 118] = "ERR_DYNAMIC_KEY_EXPIRED", e2[e2.ERR_STATIC_USE_DYANMIC_KE = 119] = "ERR_STATIC_USE_DYANMIC_KE", e2[e2.ERR_DYNAMIC_USE_STATIC_KE = 120] = "ERR_DYNAMIC_USE_STATIC_KE", e2[e2.ERR_NO_VOCS_AVAILABLE = 2e3] = "ERR_NO_VOCS_AVAILABLE", e2[e2.ERR_NO_VOS_AVAILABLE = 2001] = "ERR_NO_VOS_AVAILABLE", e2[e2.ERR_JOIN_CHANNEL_TIMEOUT = 2002] = "ERR_JOIN_CHANNEL_TIMEOUT", e2[e2.ERR_REPEAT_JOIN_CHANNEL = 2003] = "ERR_REPEAT_JOIN_CHANNEL", e2[e2.ERR_JOIN_BY_MULTI_IP = 2004] = "ERR_JOIN_BY_MULTI_IP", e2[e2.ERR_NOT_JOINED = 2011] = "ERR_NOT_JOINED", e2[e2.ERR_REPEAT_JOIN_REQUEST = 2012] = "ERR_REPEAT_JOIN_REQUEST", e2[e2.ERR_INVALID_VENDOR_KEY = 2013] = "ERR_INVALID_VENDOR_KEY", e2[e2.ERR_INVALID_CHANNEL_NAME = 2014] = "ERR_INVALID_CHANNEL_NAME", e2[e2.ERR_INVALID_STRINGUID = 2015] = "ERR_INVALID_STRINGUID", e2[e2.ERR_TOO_MANY_USERS = 2016] = "ERR_TOO_MANY_USERS", e2[e2.ERR_SET_CLIENT_ROLE_TIMEOUT = 2017] = "ERR_SET_CLIENT_ROLE_TIMEOUT", e2[e2.ERR_SET_CLIENT_ROLE_NO_PERMISSION = 2018] = "ERR_SET_CLIENT_ROLE_NO_PERMISSION", e2[e2.ERR_SET_CLIENT_ROLE_ALREADY_IN_USE = 2019] = "ERR_SET_CLIENT_ROLE_ALREADY_IN_USE", e2[e2.ERR_PUBLISH_REQUEST_INVALID = 2020] = "ERR_PUBLISH_REQUEST_INVALID", e2[e2.ERR_SUBSCRIBE_REQUEST_INVALID = 2021] = "ERR_SUBSCRIBE_REQUEST_INVALID", e2[e2.ERR_NOT_SUPPORTED_MESSAGE = 2022] = "ERR_NOT_SUPPORTED_MESSAGE", e2[e2.ERR_ILLEAGAL_PLUGIN = 2023] = "ERR_ILLEAGAL_PLUGIN", e2[e2.ERR_REJOIN_TOKEN_INVALID = 2024] = "ERR_REJOIN_TOKEN_INVALID", e2[e2.ERR_REJOIN_USER_NOT_JOINED = 2025] = "ERR_REJOIN_USER_NOT_JOINED", e2[e2.ERR_INVALID_OPTIONAL_INFO = 2027] = "ERR_INVALID_OPTIONAL_INFO", e2[e2.ILLEGAL_AES_PASSWORD = 2028] = "ILLEGAL_AES_PASSWORD", e2[e2.ILLEGAL_CLIENT_ROLE_LEVEL = 2029] = "ILLEGAL_CLIENT_ROLE_LEVEL", e2[e2.ERR_TOO_MANY_BROADCASTERS = 2031] = "ERR_TOO_MANY_BROADCASTERS", e2[e2.ERR_TOO_MANY_SUBSCRIBERS = 2032] = "ERR_TOO_MANY_SUBSCRIBERS", e2[e2.ERR_LICENSE_MISSING = 32769] = "ERR_LICENSE_MISSING", e2[e2.ERR_LICENSE_EXPIRED = 32771] = "ERR_LICENSE_EXPIRED", e2[e2.ERR_LICENSE_MINUTES_EXCEEDED = 32773] = "ERR_LICENSE_MINUTES_EXCEEDED", e2[e2.ERR_LICENSE_PERIOD_INVALID = 32774] = "ERR_LICENSE_PERIOD_INVALID", e2[e2.ERR_LICENSE_MULTIPLE_SDK_SERVICE = 32778] = "ERR_LICENSE_MULTIPLE_SDK_SERVICE", e2[e2.ERR_LICENSE_ILLEGAL = 32783] = "ERR_LICENSE_ILLEGAL", e2[e2.ERR_TEST_RECOVER = 9e3] = "ERR_TEST_RECOVER", e2[e2.ERR_TEST_TRYNEXT = 9001] = "ERR_TEST_TRYNEXT", e2[e2.ERR_TEST_RETRY = 9002] = "ERR_TEST_RETRY";
      }(fI || (fI = {})), function(e2) {
        e2.CONNECTING = "connecting", e2.CONNECTED = "connected", e2.RECONNECTING = "reconnecting", e2.CLOSED = "closed";
      }(TI || (TI = {})), function(e2) {
        e2.WS_CONNECTED = "ws_connected", e2.WS_RECONNECTING = "ws_reconnecting", e2.WS_CLOSED = "ws_closed", e2.WS_RECONNECT_WAITTING_FINISH = "ws_reconnect_waitting_finish", e2.WS_RECONNECT_CREATE_CONNECTION = "ws_reconnect_create_connection", e2.ON_BINARY_DATA = "on_binary_data", e2.REQUEST_RECOVER = "request_recover", e2.REQUEST_JOIN_INFO = "request_join_info", e2.REQUEST_REJOIN_INFO = "req_rejoin_info", e2.IS_P2P_DISCONNECTED = "is_p2p_dis", e2.DISCONNECT_P2P = "dis_p2p", e2.ABORT_P2P_EXECUTION = "abort_p2p_execution", e2.NEED_RENEW_SESSION = "need-sid", e2.REPORT_JOIN_GATEWAY = "report_join_gateway", e2.REQUEST_TIMEOUT = "request_timeout", e2.REQUEST_SUCCESS = "request_success", e2.JOIN_RESPONSE = "join_response", e2.DATACHANNEL_PRECONNECT = "datachannel_preconnect", e2.DATACHANNEL_CONNECTING = "datachannel_connecting", e2.DATACHANNEL_FAILBACK = "datachannel_failback", e2.P2P_CONNECTION = "p2p_connection", e2.P2P_REMOTE_CANDIDATE_UPDATE = "p2p_remote_candidate_update", e2.P2P_SUBSCRIBE = "p2p_subscribe", e2.P2P_UNSUBSCRIBE = "p2p_unsubscribe", e2.P2P_EXCHANGE_SDP = "p2p_exchange_sdp", e2.P2P_ON_ADD_VIDEO_STREAM = "p2p_on_add_video_stream", e2.P2P_ON_ADD_AUDIO_STREAM = "p2p_on_add_audio_stream";
      }(gI || (gI = {})), function(e2) {
        e2.PING = "ping", e2.PING_BACK = "ping_back", e2.JOIN = "join_v3", e2.REJOIN = "rejoin_v3", e2.LEAVE = "leave", e2.SET_CLIENT_ROLE = "set_client_role", e2.PUBLISH = "publish", e2.PUBLISH_DATASTREAM = "publish_datastream", e2.UNPUBLISH = "unpublish", e2.UNPUBLISH_DATASTREAM = "unpublish_datastream", e2.SUBSCRIBE = "subscribe", e2.PRE_SUBSCRIBE = "pre_subscribe", e2.SUBSCRIBE_DATASTREAM = "subscribe_datastream", e2.SUBSCRIBE_STREAMS = "subscribe_streams", e2.UNSUBSCRIBE = "unsubscribe", e2.UNSUBSCRIBE_DATASTREAM = "unsubscribe_datastream", e2.UNSUBSCRIBE_STREAMS = "unsubscribe_streams", e2.SUBSCRIBE_CHANGE = "subscribe_change", e2.TRAFFIC_STATS = "traffic_stats", e2.RENEW_TOKEN = "renew_token", e2.SWITCH_VIDEO_STREAM = "switch_video_stream", e2.DEFAULT_VIDEO_STREAM = "default_video_stream", e2.SET_FALLBACK_OPTION = "set_fallback_option", e2.GATEWAY_INFO = "gateway_info", e2.CONTROL = "control", e2.SEND_METADATA = "send_metadata", e2.DATA_STREAM = "data_stream", e2.PICK_SVC_LAYER = "pick_svc_layer", e2.RESTART_ICE = "restart_ice", e2.CONNECT_PC = "connect_pc", e2.SET_VIDEO_PROFILE = "set_video_profile", e2.SET_PARAMETER = "set_parameter", e2.SET_RTM2_FLAG = "set_rtm2_flag";
      }(SI || (SI = {})), function(e2) {
        e2.WRTC_STATS = "wrtc_stats", e2.WS_INFLATE_DATA_LENGTH = "ws_inflate_data_length", e2.DENOISER_STATS = "denoiser_stats", e2.EXTENSION_USAGE_STATS = "extension_usage_stats";
      }(RI || (RI = {})), function(e2) {
        e2.ON_USER_ONLINE = "on_user_online", e2.ON_USER_OFFLINE = "on_user_offline", e2.ON_STREAM_FALLBACK_UPDATE = "on_stream_fallback_update", e2.ON_PUBLISH_STREAM = "on_publish_stream", e2.ON_UPLINK_STATS = "on_uplink_stats", e2.ON_P2P_LOST = "on_p2p_lost", e2.ON_REMOVE_STREAM = "on_remove_stream", e2.ON_ADD_AUDIO_STREAM = "on_add_audio_stream", e2.ON_ADD_VIDEO_STREAM = "on_add_video_stream", e2.ON_TOKEN_PRIVILEGE_WILL_EXPIRE = "on_token_privilege_will_expire", e2.ON_TOKEN_PRIVILEGE_DID_EXPIRE = "on_token_privilege_did_expire", e2.ON_USER_BANNED = "on_user_banned", e2.ON_USER_LICENSE_BANNED = "on_user_license_banned", e2.ON_NOTIFICATION = "on_notification", e2.ON_CRYPT_ERROR = "on_crypt_error", e2.MUTE_AUDIO = "mute_audio", e2.MUTE_VIDEO = "mute_video", e2.UNMUTE_AUDIO = "unmute_audio", e2.UNMUTE_VIDEO = "unmute_video", e2.ON_P2P_OK = "on_p2p_ok", e2.RECEIVE_METADATA = "receive_metadata", e2.ON_DATA_STREAM = "on_data_stream", e2.ON_RTP_CAPABILITY_CHANGE = "on_rtp_capability_change", e2.ON_REMOTE_DATASTREAM_UPDATE = "on_remote_datastream_update", e2.ON_REMOTE_FULL_DATASTREAM_INFO = "on_remote_full_datastream_info", e2.ENABLE_LOCAL_VIDEO = "enable_local_video", e2.DISABLE_LOCAL_VIDEO = "disable_local_video", e2.ENABLE_LOCAL_AUDIO = "enable_local_audio", e2.DISABLE_LOCAL_AUDIO = "disable_local_audio", e2.ON_PUBLISHED_USER_LIST = "on_published_user_list";
      }(CI || (CI = {})), function(e2) {
        e2.CONNECTION_STATE_CHANGE = "CONNECTION_STATE_CHANGE", e2.NEED_ANSWER = "NEED_ANSWER", e2.NEED_RENEGOTIATE = "NEED_RENEGOTIATE", e2.P2P_LOST = "P2P_LOST", e2.GATEWAY_P2P_LOST = "GATEWAY_P2P_LOST", e2.NEED_UNPUB = "NEED_UNPUB", e2.NEED_UNSUB = "NEED_UNSUB", e2.NEED_UPLOAD = "NEED_UPLOAD", e2.NEED_CONTROL = "NEED_CONTROL", e2.START_RECONNECT = "START_RECONNECT", e2.END_RECONNECT = "END_RECONNECT", e2.NEED_SIGNAL_RTT = "NEED_SIGNAL_RTT";
      }(II || (II = {})), function(e2) {
        e2.SEND_ONLY = "SEND_ONLY", e2.RECEIVE_ONLY = "RECEIVE_ONLY";
      }(vI || (vI = {})), function(e2) {
        e2.CONNECTED = "websocket:connected", e2.RECONNECTING = "websocket:reconnecting", e2.WILL_RECONNECT = "websocket:will_reconnect", e2.CLOSED = "websocket:closed", e2.FAILED = "websocket:failed", e2.ON_MESSAGE = "websocket:on_message", e2.REQUEST_NEW_URLS = "websocket:request_new_urls", e2.RECONNECT_WAITTING_FINISH = "websocket:reconnect_waitting_finish", e2.RECONNECT_CREATE_CONNECTION = "websocket:reconnect_create_connection", e2.ON_TOKEN_PRIVILEGE_DID_EXPIRE = "websocket:on_token_privilege_did_expire";
      }(yI || (yI = {}));
      class VI extends VT {
        constructor(e2) {
          super(e2, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "", arguments.length > 2 ? arguments[2] : void 0), nh(this, "name", "AgoraRTCException");
        }
        print() {
          let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "error";
          return super.print(e2, YC);
        }
        throw() {
          super.throw(YC);
        }
      }
      function FI(e2) {
        if ("string" != typeof e2 || !/^[a-zA-Z0-9 \!\#\$\%\&\(\)\+\-\:\;\<\=\.\>\?\@\[\]\^\_\{\}\|\~\,]{1,64}$/.test(e2))
          throw YC.error("Invalid Channel Name ".concat(e2)), new VI(xT.INVALID_PARAMS, "The length must be within 64 bytes. The supported characters: a-z,A-Z,0-9,space,!, #, $, %, &, (, ), +, -, :, ;, <, =, ., >, ?, @, [, ], ^, _,  {, }, |, ~, ,");
      }
      function BI(e2) {
        if (!(t2 = e2, "number" == typeof t2 && Math.floor(t2) === t2 && 0 <= t2 && t2 <= 4294967295 || YT(e2, 1, 255)))
          throw new VI(xT.INVALID_PARAMS, "[String uid] Length of the string: [1,255]. ASCII characters only. [Number uid] The value range is [0,10000]");
        var t2;
        "string" == typeof e2 && YC.warn("You input a string as the user ID, to ensure better end-user experience, Agora highly suggests not using a string as the user ID.");
      }
      !function(e2) {
        e2.TRANSCODE = "mix_streaming", e2.RAW = "raw_streaming", e2.INJECT = "inject_streaming";
      }(AI || (AI = {})), function(e2) {
        e2[e2.INJECT_STREAM_STATUS_START_SUCCESS = 0] = "INJECT_STREAM_STATUS_START_SUCCESS", e2[e2.INJECT_STREAM_STATUS_START_ALREADY_EXISTS = 1] = "INJECT_STREAM_STATUS_START_ALREADY_EXISTS", e2[e2.INJECT_STREAM_STATUS_START_UNAUTHORIZED = 2] = "INJECT_STREAM_STATUS_START_UNAUTHORIZED", e2[e2.INJECT_STREAM_STATUS_START_TIMEOUT = 3] = "INJECT_STREAM_STATUS_START_TIMEOUT", e2[e2.INJECT_STREAM_STATUS_START_FAILED = 4] = "INJECT_STREAM_STATUS_START_FAILED", e2[e2.INJECT_STREAM_STATUS_STOP_SUCCESS = 5] = "INJECT_STREAM_STATUS_STOP_SUCCESS", e2[e2.INJECT_STREAM_STATUS_STOP_NOT_FOUND = 6] = "INJECT_STREAM_STATUS_STOP_NOT_FOUND", e2[e2.INJECT_STREAM_STATUS_STOP_UNAUTHORIZED = 7] = "INJECT_STREAM_STATUS_STOP_UNAUTHORIZED", e2[e2.INJECT_STREAM_STATUS_STOP_TIMEOUT = 8] = "INJECT_STREAM_STATUS_STOP_TIMEOUT", e2[e2.INJECT_STREAM_STATUS_STOP_FAILED = 9] = "INJECT_STREAM_STATUS_STOP_FAILED", e2[e2.INJECT_STREAM_STATUS_BROKEN = 10] = "INJECT_STREAM_STATUS_BROKEN";
      }(bI || (bI = {}));
      const jI = { alpha: 1, height: 640, width: 360, x: 0, y: 0, zOrder: 0, audioChannel: 0 }, GI = { x: 0, y: 0, width: 160, height: 160, zOrder: 255, alpha: 1 };
      function WI(e2, t2) {
        WT(e2.url, "".concat(t2, ".url"), 1, 1e3, false), KT(e2.x) || jT(e2.x, "".concat(t2, ".x"), 0, 1e4), KT(e2.y) || jT(e2.y, "".concat(t2, ".y"), 0, 1e4), KT(e2.width) || jT(e2.width, "".concat(t2, ".width"), 0, 1e4), KT(e2.height) || jT(e2.height, "".concat(t2, ".height"), 0, 1e4), KT(e2.zOrder) || jT(e2.zOrder, "".concat(t2, ".zOrder"), 0, 255), KT(e2.alpha) || jT(e2.alpha, "".concat(t2, ".alpha"), 0, 1, false);
      }
      const HI = { audioBitrate: 48, audioChannels: 1, audioSampleRate: 48e3, backgroundColor: 0, height: 360, lowLatency: false, videoBitrate: 400, videoCodecProfile: 100, videoCodecType: 1, videoFrameRate: 15, videoGop: 30, width: 640, images: [], userConfigs: [], userConfigExtraInfo: "" }, KI = { audioBitrate: 48, audioChannels: 2, audioVolume: 100, audioSampleRate: 48e3, height: 0, width: 0, videoBitrate: 400, videoFramerate: 15, videoGop: 30 };
      var YI, qI, JI, zI, XI, QI, ZI, $I, ev, tv, iv, nv, sv, rv;
      function ov(e2) {
        if (!e2.channelName)
          throw new VI(xT.INVALID_PARAMS, "invalid channelName in info");
        if ("number" != typeof e2.uid)
          throw new VI(xT.INVALID_PARAMS, "invalid uid in info, uid must be a number");
        return e2.token && WT(e2.token, "info.token", 1, 2047), BI(e2.uid), FI(e2.channelName), true;
      }
      !function(e2) {
        e2.WARNING = "@live_uap-warning", e2.ERROR = "@line_uap-error", e2.PUBLISH_STREAM_STATUS = "@live_uap-publish-status", e2.INJECT_STREAM_STATUS = "@live_uap-inject-status", e2.WORKER_STATUS = "@live_uap-worker-status", e2.REQUEST_NEW_ADDRESS = "@live_uap-request-address";
      }(YI || (YI = {})), function(e2) {
        e2.REQUEST_WORKER_MANAGER_LIST = "@live_req_worker_manager";
      }(qI || (qI = {})), function(e2) {
        e2[e2.LIVE_STREAM_RESPONSE_SUCCEED = 200] = "LIVE_STREAM_RESPONSE_SUCCEED", e2[e2.LIVE_STREAM_RESPONSE_ALREADY_EXISTS_STREAM = 454] = "LIVE_STREAM_RESPONSE_ALREADY_EXISTS_STREAM", e2[e2.LIVE_STREAM_RESPONSE_TRANSCODING_PARAMETER_ERROR = 450] = "LIVE_STREAM_RESPONSE_TRANSCODING_PARAMETER_ERROR", e2[e2.LIVE_STREAM_RESPONSE_BAD_STREAM = 451] = "LIVE_STREAM_RESPONSE_BAD_STREAM", e2[e2.LIVE_STREAM_RESPONSE_WM_PARAMETER_ERROR = 400] = "LIVE_STREAM_RESPONSE_WM_PARAMETER_ERROR", e2[e2.LIVE_STREAM_RESPONSE_WM_WORKER_NOT_EXIST = 404] = "LIVE_STREAM_RESPONSE_WM_WORKER_NOT_EXIST", e2[e2.LIVE_STREAM_RESPONSE_NOT_AUTHORIZED = 456] = "LIVE_STREAM_RESPONSE_NOT_AUTHORIZED", e2[e2.LIVE_STREAM_RESPONSE_FAILED_LOAD_IMAGE = 457] = "LIVE_STREAM_RESPONSE_FAILED_LOAD_IMAGE", e2[e2.LIVE_STREAM_RESPONSE_REQUEST_TOO_OFTEN = 429] = "LIVE_STREAM_RESPONSE_REQUEST_TOO_OFTEN", e2[e2.LIVE_STREAM_RESPONSE_NOT_FOUND_PUBLISH = 452] = "LIVE_STREAM_RESPONSE_NOT_FOUND_PUBLISH", e2[e2.LIVE_STREAM_RESPONSE_NOT_SUPPORTED = 453] = "LIVE_STREAM_RESPONSE_NOT_SUPPORTED", e2[e2.LIVE_STREAM_RESPONSE_MAX_STREAM_NUM = 455] = "LIVE_STREAM_RESPONSE_MAX_STREAM_NUM", e2[e2.LIVE_STREAM_RESPONSE_INTERNAL_SERVER_ERROR = 500] = "LIVE_STREAM_RESPONSE_INTERNAL_SERVER_ERROR", e2[e2.LIVE_STREAM_RESPONSE_WORKER_LOST = 501] = "LIVE_STREAM_RESPONSE_WORKER_LOST", e2[e2.LIVE_STREAM_RESPONSE_RESOURCE_LIMIT = 502] = "LIVE_STREAM_RESPONSE_RESOURCE_LIMIT", e2[e2.LIVE_STREAM_RESPONSE_WORKER_QUIT = 503] = "LIVE_STREAM_RESPONSE_WORKER_QUIT", e2[e2.ERROR_FAIL_SEND_MESSAGE = 504] = "ERROR_FAIL_SEND_MESSAGE", e2[e2.PUBLISH_STREAM_STATUS_ERROR_RTMP_HANDSHAKE = 30] = "PUBLISH_STREAM_STATUS_ERROR_RTMP_HANDSHAKE", e2[e2.PUBLISH_STREAM_STATUS_ERROR_RTMP_CONNECT = 31] = "PUBLISH_STREAM_STATUS_ERROR_RTMP_CONNECT", e2[e2.PUBLISH_STREAM_STATUS_ERROR_RTMP_PUBLISH = 32] = "PUBLISH_STREAM_STATUS_ERROR_RTMP_PUBLISH", e2[e2.PUBLISH_STREAM_STATUS_ERROR_PUBLISH_BROKEN = 33] = "PUBLISH_STREAM_STATUS_ERROR_PUBLISH_BROKEN";
      }(JI || (JI = {})), function(e2) {
        e2.CONNECT_FAILED = "connect failed", e2.CONNECT_TIMEOUT = "connect timeout", e2.WS_DISCONNECTED = "websocket disconnected", e2.REQUEST_TIMEOUT = "request timeout", e2.REQUEST_FAILED = "request failed", e2.WAIT_STATUS_TIMEOUT = "wait status timeout", e2.WAIT_STATUS_ERROR = "wait status error", e2.BAD_STATE = "bad state", e2.WS_ABORT = "ws abort", e2.AP_REQUEST_TIMEOUT = "AP request timeout", e2.AP_JSON_PARSE_ERROR = "AP json parse error", e2.AP_REQUEST_ERROR = "AP request error", e2.AP_REQUEST_ABORT = "AP request abort";
      }(zI || (zI = {})), function(e2) {
        e2[e2.SetSdkProfile = 0] = "SetSdkProfile", e2[e2.SetSourceChannel = 1] = "SetSourceChannel", e2[e2.SetSourceUserId = 2] = "SetSourceUserId", e2[e2.SetDestChannel = 3] = "SetDestChannel", e2[e2.StartPacketTransfer = 4] = "StartPacketTransfer", e2[e2.StopPacketTransfer = 5] = "StopPacketTransfer", e2[e2.UpdateDestChannel = 6] = "UpdateDestChannel", e2[e2.Reconnect = 7] = "Reconnect", e2[e2.SetVideoProfile = 8] = "SetVideoProfile";
      }(XI || (XI = {})), function(e2) {
        e2.NETWORK_DISCONNECTED = "NETWORK_DISCONNECTED", e2.NETWORK_CONNECTED = "NETWORK_CONNECTED", e2.PACKET_JOINED_SRC_CHANNEL = "PACKET_JOINED_SRC_CHANNEL", e2.PACKET_JOINED_DEST_CHANNEL = "PACKET_JOINED_DEST_CHANNEL", e2.PACKET_SENT_TO_DEST_CHANNEL = "PACKET_SENT_TO_DEST_CHANNEL", e2.PACKET_RECEIVED_VIDEO_FROM_SRC = "PACKET_RECEIVED_VIDEO_FROM_SRC", e2.PACKET_RECEIVED_AUDIO_FROM_SRC = "PACKET_RECEIVED_AUDIO_FROM_SRC", e2.PACKET_UPDATE_DEST_CHANNEL = "PACKET_UPDATE_DEST_CHANNEL", e2.PACKET_UPDATE_DEST_CHANNEL_REFUSED = "PACKET_UPDATE_DEST_CHANNEL_REFUSED", e2.PACKET_UPDATE_DEST_CHANNEL_NOT_CHANGE = "PACKET_UPDATE_DEST_CHANNEL_NOT_CHANGE";
      }(QI || (QI = {})), function(e2) {
        e2.RELAY_STATE_IDLE = "RELAY_STATE_IDLE", e2.RELAY_STATE_CONNECTING = "RELAY_STATE_CONNECTING", e2.RELAY_STATE_RUNNING = "RELAY_STATE_RUNNING", e2.RELAY_STATE_FAILURE = "RELAY_STATE_FAILURE";
      }(ZI || (ZI = {})), function(e2) {
        e2.RELAY_OK = "RELAY_OK", e2.SERVER_CONNECTION_LOST = "SERVER_CONNECTION_LOST", e2.SRC_TOKEN_EXPIRED = "SRC_TOKEN_EXPIRED", e2.DEST_TOKEN_EXPIRED = "DEST_TOKEN_EXPIRED";
      }($I || ($I = {})), function(e2) {
        e2.High = "high", e2.Low = "low", e2.Audio = "audio", e2.Screen = "screen", e2.ScreenLow = "screen_low";
      }(ev || (ev = {})), function(e2) {
        e2.DISCONNECT = "disconnect", e2.CONNECTION_STATE_CHANGE = "connection-state-change", e2.NETWORK_QUALITY = "network-quality", e2.STREAM_TYPE_CHANGE = "stream-type-change", e2.IS_P2P_DISCONNECTED = "is-p2p-dis", e2.DISCONNECT_P2P = "dis-p2p", e2.REQUEST_NEW_GATEWAY_LIST = "req-gate-url", e2.NEED_RENEW_SESSION = "need-sid", e2.REQUEST_P2P_CONNECTION_PARAMS = "request-p2p-connection-params", e2.JOIN_RESPONSE = "join-response", e2.REQUEST_DC_CONNECTION_PARAMS = "request-dc-connection-params", e2.RESET_CONNECTION_EVENTS = "reset-connection-events", e2.DATACHANNEL_PRECONNECT = "datachannel_preconnect", e2.DATACHANNEL_FAILBACK = "datachannel_failback", e2.RESET_SIGNAL = "reset-signal";
      }(tv || (tv = {})), function(e2) {
        e2.P2P_DISCONNECTED = "P2P_DISCONNECTED", e2.A_ROUND_WS_FAILED = "A_ROUND_WS_FAILED", e2.TIMEOUT = "TIMEOUT", e2.UNKNOWN_REASON = "UNKNOWN_REASON";
      }(iv || (iv = {})), function(e2) {
        e2[e2.Nothing = 0] = "Nothing", e2[e2.Audio = 1] = "Audio", e2[e2.LwoVideo = 2] = "LwoVideo", e2[e2.Video = 4] = "Video", e2[e2.Data = 8] = "Data", e2[e2.DataStream0 = 256] = "DataStream0", e2[e2.DataStream1 = 512] = "DataStream1", e2[e2.DataStream2 = 1024] = "DataStream2", e2[e2.DataStream3 = 2048] = "DataStream3", e2[e2.DataStream4 = 4096] = "DataStream4", e2[e2.DataStream5 = 8192] = "DataStream5", e2[e2.DataStream6 = 16384] = "DataStream6", e2[e2.DataStream7 = 32768] = "DataStream7";
      }(nv || (nv = {})), function(e2) {
        e2[e2.websocket = 0] = "websocket", e2[e2.datachannel = 1] = "datachannel";
      }(sv || (sv = {})), function(e2) {
        e2.CHINA = "CHINA", e2.ASIA = "ASIA", e2.NORTH_AMERICA = "NORTH_AMERICA", e2.EUROPE = "EUROPE", e2.JAPAN = "JAPAN", e2.INDIA = "INDIA", e2.KOREA = "KOREA", e2.HKMC = "HKMC", e2.US = "US", e2.OCEANIA = "OCEANIA", e2.SOUTH_AMERICA = "SOUTH_AMERICA", e2.AFRICA = "AFRICA", e2.OVERSEA = "OVERSEA", e2.GLOBAL = "GLOBAL", e2.EXTENSIONS = "EXTENSIONS";
      }(rv || (rv = {}));
      const av = [rv.AFRICA, rv.ASIA, rv.CHINA, rv.EUROPE, rv.GLOBAL, rv.INDIA, rv.JAPAN, rv.NORTH_AMERICA, rv.OCEANIA, rv.OVERSEA, rv.SOUTH_AMERICA];
      var cv;
      !function(e2) {
        e2.CHINA = "CN", e2.ASIA = "AS", e2.NORTH_AMERICA = "NA", e2.EUROPE = "EU", e2.JAPAN = "JP", e2.INDIA = "IN", e2.KOREA = "KR", e2.HKMC = "HK", e2.US = "US", e2.OCEANIA = "OC", e2.SOUTH_AMERICA = "SA", e2.AFRICA = "AF", e2.OVERSEA = "OVERSEA", e2.GLOBAL = "GLOBAL", e2.EXTENSIONS = "GLOBAL";
      }(cv || (cv = {}));
      const dv = { CHINA: {}, ASIA: { CODE: cv.ASIA, WEBCS_DOMAIN: ["ap-web-1-asia.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-asia.agora.io"], PROXY_CS: ["proxy-ap-web-asia.agora.io"], CDS_AP: ["cds-ap-web-asia.agora.io", "cds-ap-web-asia2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-asia.agora.io", "sua-ap-web-asia2.agora.io"], UAP_AP: ["uap-ap-web-asia.agora.io", "uap-ap-web-asia2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-asia.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-asia.agora.io"], LOG_UPLOAD_SERVER: ["logservice-asia.agora.io"], PROXY_SERVER_TYPE3: ["southeast-asia.webrtc-cloud-proxy.sd-rtn.com"] }, NORTH_AMERICA: { CODE: cv.NORTH_AMERICA, WEBCS_DOMAIN: ["ap-web-1-north-america.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-north-america.agora.io"], PROXY_CS: ["proxy-ap-web-america.agora.io"], CDS_AP: ["cds-ap-web-america.agora.io", "cds-ap-web-america2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-america.agora.io", "sua-ap-web-america2.agora.io"], UAP_AP: ["uap-ap-web-america.agora.io", "uap-ap-web-america2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-north-america.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-north-america.agora.io"], LOG_UPLOAD_SERVER: ["logservice-north-america.agora.io"], PROXY_SERVER_TYPE3: ["east-usa.webrtc-cloud-proxy.sd-rtn.com"] }, EUROPE: { CODE: cv.EUROPE, WEBCS_DOMAIN: ["ap-web-1-europe.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-europe.agora.io"], PROXY_CS: ["proxy-ap-web-europe.agora.io"], CDS_AP: ["cds-ap-web-europe.agora.io", "cds-ap-web-europe2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-europe.agora.io", "sua-ap-web-europe.agora.io"], UAP_AP: ["uap-ap-web-europe.agora.io", "uap-ap-web-europe2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-europe.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-europe.agora.io"], LOG_UPLOAD_SERVER: ["logservice-europe.agora.io"], PROXY_SERVER_TYPE3: ["europe.webrtc-cloud-proxy.sd-rtn.com"] }, JAPAN: { CODE: cv.JAPAN, WEBCS_DOMAIN: ["ap-web-1-japan.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-japan.agora.io"], PROXY_CS: ["proxy-ap-web-japan.agora.io"], CDS_AP: ["cds-ap-web-japan.agora.io", "cds-ap-web-japan2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-japan.agora.io", "sua-ap-web-japan2.agora.io"], UAP_AP: ["uap-ap-web-japan.agora.io", "uap-ap-web-japan2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-japan.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-japan.agora.io"], LOG_UPLOAD_SERVER: ["logservice-japan.agora.io"], PROXY_SERVER_TYPE3: ["japan.webrtc-cloud-proxy.sd-rtn.com"] }, INDIA: { CODE: cv.INDIA, WEBCS_DOMAIN: ["ap-web-1-india.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-india.agora.io"], PROXY_CS: ["proxy-ap-web-india.agora.io"], CDS_AP: ["cds-ap-web-india.agora.io", "cds-ap-web-india2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-india.agora.io", "sua-ap-web-india2.agora.io"], UAP_AP: ["uap-ap-web-india.agora.io", "uap-ap-web-india2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-india.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-india.agora.io"], LOG_UPLOAD_SERVER: ["logservice-india.agora.io"], PROXY_SERVER_TYPE3: ["india.webrtc-cloud-proxy.sd-rtn.com"] }, KOREA: { CODE: cv.KOREA, WEBCS_DOMAIN: ["ap-web-1-korea.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-korea.agora.io"], PROXY_CS: ["proxy-ap-web-korea.agora.io"], CDS_AP: ["cds-ap-web-korea.agora.io", "cds-ap-web-korea2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-korea.agora.io", "sua-ap-web-korea2.agora.io"], UAP_AP: ["uap-ap-web-korea.agora.io", "uap-ap-web-korea2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-korea.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-korea.agora.io"], LOG_UPLOAD_SERVER: ["logservice-korea.agora.io"], PROXY_SERVER_TYPE3: ["korea.webrtc-cloud-proxy.sd-rtn.com"] }, HKMC: { CODE: cv.HKMC, WEBCS_DOMAIN: ["ap-web-1-hkmc.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-hkmc.agora.io"], PROXY_CS: ["proxy-ap-web-hkmc.agora.io"], CDS_AP: ["cds-ap-web-hkmc.agora.io", "cds-ap-web-hkmc2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-hkmc.agora.io", "sua-ap-web-hkmc2.agora.io"], UAP_AP: ["uap-ap-web-hkmc.agora.io", "uap-ap-web-hkmc2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-hkmc.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-hkmc.agora.io"], LOG_UPLOAD_SERVER: ["logservice-hkmc.agora.io"], PROXY_SERVER_TYPE3: ["hkmc.webrtc-cloud-proxy.sd-rtn.com"] }, US: { CODE: cv.US, WEBCS_DOMAIN: ["ap-web-1-us.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-us.agora.io"], PROXY_CS: ["proxy-ap-web-us.agora.io"], CDS_AP: ["cds-ap-web-us.agora.io", "cds-ap-web-us2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-us.agora.io", "sua-ap-web-us2.agora.io"], UAP_AP: ["uap-ap-web-us.agora.io", "uap-ap-web-us2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-us.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-us.agora.io"], LOG_UPLOAD_SERVER: ["logservice-us.agora.io"], PROXY_SERVER_TYPE3: ["us.webrtc-cloud-proxy.sd-rtn.com"] }, OVERSEA: { CODE: cv.OVERSEA, WEBCS_DOMAIN: ["ap-web-1-oversea.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-oversea.agora.io"], PROXY_CS: ["proxy-ap-web-oversea.agora.io"], CDS_AP: ["cds-ap-web-oversea.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-oversea.agora.io"], UAP_AP: ["uap-ap-web-oversea.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-oversea.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-oversea.agora.io"], LOG_UPLOAD_SERVER: ["logservice-oversea.agora.io"], PROXY_SERVER_TYPE3: ["webrtc-cloud-proxy.agora.io"] }, GLOBAL: { CODE: cv.GLOBAL, WEBCS_DOMAIN: ["webrtc2-ap-web-1.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["webrtc2-ap-web-3.agora.io"], PROXY_CS: ["ap-proxy-1.agora.io", "ap-proxy-2.agora.io"], CDS_AP: ["cds-ap-web-1.agora.io", "cds-ap-web-3.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-1.agora.io", "sua-ap-web-3.agora.io"], UAP_AP: ["uap-ap-web-1.agora.io", "uap-ap-web-3.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2.agora.io"], LOG_UPLOAD_SERVER: ["logservice.agora.io"], PROXY_SERVER_TYPE3: ["webrtc-cloud-proxy.sd-rtn.com"] }, OCEANIA: { CODE: cv.OCEANIA, WEBCS_DOMAIN: ["ap-web-1-oceania.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-oceania.agora.io"], PROXY_CS: ["proxy-ap-web-oceania.agora.io"], CDS_AP: ["cds-ap-web-oceania.agora.io", "cds-ap-web-oceania2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-oceania.agora.io", "sua-ap-web-oceania2.agora.io"], UAP_AP: ["uap-ap-web-oceania.agora.io", "uap-ap-web-oceania2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-oceania.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-oceania.agora.io"], LOG_UPLOAD_SERVER: ["logservice-oceania.agora.io"], PROXY_SERVER_TYPE3: ["oceania.webrtc-cloud-proxy.sd-rtn.com"] }, SOUTH_AMERICA: { CODE: cv.SOUTH_AMERICA, WEBCS_DOMAIN: ["ap-web-1-south-america.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-south-america.agora.io"], PROXY_CS: ["proxy-ap-web-south-america.agora.io"], CDS_AP: ["cds-ap-web-south-america.agora.io", "cds-ap-web-south-america2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-south-america.agora.io", "sua-ap-web-south-america2.agora.io"], UAP_AP: ["uap-ap-web-south-america.agora.io", "uap-ap-web-south-america2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-south-america.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-south-america.agora.io"], LOG_UPLOAD_SERVER: ["logservice-south-america.agora.io"], PROXY_SERVER_TYPE3: ["south-america.webrtc-cloud-proxy.sd-rtn.com"] }, AFRICA: { CODE: cv.AFRICA, WEBCS_DOMAIN: ["ap-web-1-africa.agora.io"], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-africa.agora.io"], PROXY_CS: ["proxy-ap-web-africa.agora.io"], CDS_AP: ["cds-ap-web-africa.agora.io", "cds-ap-web-africa2.agora.io"], ACCOUNT_REGISTER: ["sua-ap-web-africa.agora.io", "sua-ap-web-africa2.agora.io"], UAP_AP: ["uap-ap-web-africa.agora.io", "uap-ap-web-africa2.agora.io"], EVENT_REPORT_DOMAIN: ["statscollector-1-africa.agora.io"], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-africa.agora.io"], LOG_UPLOAD_SERVER: ["logservice-south-africa.agora.io"], PROXY_SERVER_TYPE3: ["africa.webrtc-cloud-proxy.sd-rtn.com"] }, EXTENSIONS: {} };
      var lv, uv, hv, pv, _v, Ev, mv, fv, Tv, gv, Sv, Rv, Cv, Iv, vv, yv, Av, bv, wv, Ov, Nv, Dv, Pv, Lv;
      AC && (dv.CHINA = { CODE: cv.CHINA, WEBCS_DOMAIN: ["webrtc2-2.ap.sd-rtn.com"], WEBCS_DOMAIN_BACKUP_LIST: ["webrtc2-4.ap.sd-rtn.com"], PROXY_CS: ["proxy-web.ap.sd-rtn.com"], CDS_AP: ["cds-web-2.ap.sd-rtn.com", "cds-web-4.ap.sd-rtn.com"], ACCOUNT_REGISTER: ["sua-web-2.ap.sd-rtn.com", "sua-web-4.ap.sd-rtn.com"], UAP_AP: ["uap-web-2.ap.sd-rtn.com", "uap-web-4.ap.sd-rtn.com"], EVENT_REPORT_DOMAIN: ["web-3.statscollector.sd-rtn.com"], EVENT_REPORT_BACKUP_DOMAIN: ["web-4.statscollector.sd-rtn.com"], LOG_UPLOAD_SERVER: ["logservice-china.agora.io"], PROXY_SERVER_TYPE3: ["east-cn.webrtc-cloud-proxy.sd-rtn.com"] }), function(e2) {
        e2.UPDATE_BITRATE_LIMIT = "update_bitrate_limit";
      }(lv || (lv = {}));
      class kv extends ig {
        constructor(e2, t2) {
          super(), nh(this, "onICEConnectionStateChange", void 0), nh(this, "onConnectionStateChange", void 0), nh(this, "onDTLSTransportStateChange", void 0), nh(this, "onDTLSTransportError", void 0), nh(this, "onICETransportStateChange", void 0), nh(this, "onFirstAudioReceived", void 0), nh(this, "onFirstVideoReceived", void 0), nh(this, "onFirstAudioDecoded", void 0), nh(this, "onFirstVideoDecoded", void 0), nh(this, "onFirstVideoDecodedTimeout", void 0), nh(this, "onSelectedLocalCandidateChanged", void 0), nh(this, "onSelectedRemoteCandidateChanged", void 0);
        }
      }
      class Mv extends kv {
        constructor(e2, t2) {
          super(e2, t2);
        }
      }
      !function(e2) {
        e2.SEND = "sendonly", e2.RECV = "recvonly", e2.SENDRECV = "sendrecv", e2.INACTIVE = "inactive";
      }(uv || (uv = {})), function(e2) {
        e2.VIDEO = "video", e2.AUDIO = "audio";
      }(hv || (hv = {})), function(e2) {
        e2[e2.UDP = 0] = "UDP", e2[e2.TCP = 1] = "TCP", e2[e2.RELAY = 2] = "RELAY";
      }(pv || (pv = {})), function(e2) {
        e2[e2.FIRST_CONNECTION = 0] = "FIRST_CONNECTION", e2[e2.TCP_RESTART = 1] = "TCP_RESTART", e2[e2.RELAY_RESTART = 2] = "RELAY_RESTART", e2[e2.OLD_FIRST_CONNECTION = 10] = "OLD_FIRST_CONNECTION", e2[e2.OLD_RESTART = 11] = "OLD_RESTART", e2[e2.DISCONNECTED_OR_FAILED = 20] = "DISCONNECTED_OR_FAILED";
      }(_v || (_v = {})), function(e2) {
        e2.LocalVideoTrack = "videoTrack", e2.LocalAudioTrack = "audioTrack", e2.LocalVideoLowTrack = "videoLowTrack";
      }(Ev || (Ev = {})), function(e2) {
        e2.New = "new", e2.Connected = "connected", e2.Reconnecting = "reconnecting", e2.Disconnected = "disconnected";
      }(mv || (mv = {})), function(e2) {
        e2.StateChange = "stateChange", e2.IceConnectionStateChange = "iceConnectionStateChange", e2.RequestMuteLocal = "requestMuteLocal", e2.RequestUnmuteLocal = "requestUnmuteLocal", e2.RequestRePublish = "requestRePublish", e2.RequestRePublishDataChannel = "requestRePublishDataChannel", e2.RequestReSubscribe = "requestReSubscribe", e2.RequestUploadStats = "requestUploadStats", e2.RequestUpload = "requestUpload", e2.MediaReconnectStart = "MediaReconnectStart", e2.MediaReconnectEnd = "MediaReconnectEnd", e2.NeedSignalRTT = "NeedSignalRTT", e2.RequestRestartICE = "RequestRestartIce", e2.PeerConnectionStateChange = "PeerConnectionStateChange", e2.RequestReconnect = "RequestReconnect", e2.RequestReconnectPC = "RequestReconnectPC", e2.RequestUnpublishForReconnectPC = "RequestUnpublishForReconnectPC", e2.P2PLost = "P2PLost", e2.UpdateVideoEncoder = "UpdateVideoEncoder", e2.ConnectionTypeChange = "ConnectionTypeChange", e2.RequestLowStreamParameter = "RequestLowStreamParameter", e2.QueryClientConnectionState = "QueryClientConnectionState", e2.LocalCandidate = "LocalCandidate", e2.RequestP2PMuteLocal = "requestP2PMuteLocal", e2.RequestP2PUnPublish = "RequestP2PUnPublish", e2.RequestP2PUnmuteRemote = "RequestP2PUnmuteRemote", e2.RequestP2PMuteRemote = "RequestP2PMuteRemote", e2.RequestP2PRestartICE = "RequestP2PRestartICE";
      }(fv || (fv = {})), function(e2) {
        e2.MUTE_LOCAL_VIDEO = "mute_local_video", e2.MUTE_LOCAL_AUDIO = "mute_local_audio", e2.UNMUTE_LOCAL_VIDEO = "unmute_local_video", e2.UNMUTE_LOCAL_AUDIO = "unmute_local_audio", e2.MUTE_REMOTE_VIDEO = "mute_remote_video", e2.MUTE_REMOTE_AUDIO = "mute_remote_audio", e2.UNMUTE_REMOTE_VIDEO = "unmute_remote_video", e2.UNMUTE_REMOTE_AUDIO = "unmute_remote_audio";
      }(Tv || (Tv = {})), function(e2) {
        e2.CONNECTING = "CONNECTING", e2.RECONNECTING = "RECONNECTING", e2.CONNECTED = "CONNECTED", e2.CLOSED = "CLOSED";
      }(gv || (gv = {})), function(e2) {
        e2[e2.CONNECT_AP = 0] = "CONNECT_AP", e2[e2.AP_CONNECTED = 1] = "AP_CONNECTED", e2[e2.CONNECT_WORKER_MANAGER = 2] = "CONNECT_WORKER_MANAGER", e2[e2.WORKER_MANAGER_CONNECTED = 3] = "WORKER_MANAGER_CONNECTED", e2[e2.GET_WORKER_MANAGER_RESPONSE = 4] = "GET_WORKER_MANAGER_RESPONSE", e2[e2.CONNECT_WORKER = 5] = "CONNECT_WORKER", e2[e2.WORKER_CONNECTED = 6] = "WORKER_CONNECTED", e2[e2.CLOSED = 7] = "CLOSED";
      }(Sv || (Sv = {})), function(e2) {
        e2.CONNECTION_STATE_CHANGE = "connection-state-change", e2.STATE_CHANGE = "state-change", e2.INSPECT_RESULT = "inspect-result", e2.CLIENT_LOCAL_VIDEO_TRACK = "client-local-video-track", e2.REQUEST_NEW_WORKER_URL = "request-new-worker-url";
      }(Rv || (Rv = {})), function(e2) {
        e2.NETWORK_ERROR = "NETWORK_ERROR", e2.SERVER_ERROR = "SERVER_ERROR", e2.MULTI_IP = "MULTI_IP", e2.TIMEOUT = "TIMEOUT", e2.OFFLINE = "OFFLINE", e2.LEAVE = "LEAVE", e2.P2P_FAILED = "P2P_FAILED", e2.FALLBACK = "FALLBACK";
      }(Cv || (Cv = {})), function(e2) {
        e2.CONNECTED = "transmitter:connected", e2.RECONNECTING = "transmitter:reconnecting", e2.WILL_RECONNECT = "transmitter:will_reconnect", e2.CLOSED = "transmitter:closed", e2.FAILED = "transmitter:failed", e2.ON_MESSAGE = "transmitter:on_message", e2.REQUEST_NEW_URLS = "transmitter:request_new_urls", e2.RECONNECT_WAITTING_FINISH = "transmitter:reconnect_waitting_finish", e2.RECONNECT_CREATE_CONNECTION = "transmitter:reconnect_create_connection", e2.ON_TOKEN_PRIVILEGE_DID_EXPIRE = "transmitter:on_token_privilege_did_expire", e2.TO_CONNECT_DATACHANNEL = "transmitter:to_connect_datachannel", e2.FAILBACK = "transmitter:failback";
      }(Iv || (Iv = {})), function(e2) {
        e2.CAMERA_CHANGED = "camera-changed", e2.MICROPHONE_CHANGED = "microphone-changed", e2.PLAYBACK_DEVICE_CHANGED = "playback-device-changed", e2.AUDIO_AUTOPLAY_FAILED = "audio-autoplay-failed", e2.AUTOPLAY_FAILED = "autoplay-failed", e2.AUDIO_CONTEXT_STATE_CHANGED = "audio-context-state-changed", e2.SECURITY_POLICY_VIOLATION = "security-policy-violation";
      }(vv || (vv = {})), function(e2) {
        e2[e2.APP_TYPE_INVALID_VALUE = -1] = "APP_TYPE_INVALID_VALUE", e2[e2.APP_TYPE_NATIVE = 0] = "APP_TYPE_NATIVE", e2[e2.APP_TYPE_NATIVE_COCOS = 1] = "APP_TYPE_NATIVE_COCOS", e2[e2.APP_TYPE_NATIVE_UNITY = 2] = "APP_TYPE_NATIVE_UNITY", e2[e2.APP_TYPE_NATIVE_ELECTRON = 3] = "APP_TYPE_NATIVE_ELECTRON", e2[e2.APP_TYPE_NATIVE_FLUTTER = 4] = "APP_TYPE_NATIVE_FLUTTER", e2[e2.APP_TYPE_NATIVE_UNREAL = 5] = "APP_TYPE_NATIVE_UNREAL", e2[e2.APP_TYPE_NATIVE_XAMARIN = 6] = "APP_TYPE_NATIVE_XAMARIN", e2[e2.APP_TYPE_NATIVE_API_CLOUD = 7] = "APP_TYPE_NATIVE_API_CLOUD", e2[e2.APP_TYPE_NATIVE_REACT_NATIVE = 8] = "APP_TYPE_NATIVE_REACT_NATIVE", e2[e2.APP_TYPE_NATIVE_PYTHON = 9] = "APP_TYPE_NATIVE_PYTHON", e2[e2.APP_TYPE_NATIVE_COCOS_CREATOR = 10] = "APP_TYPE_NATIVE_COCOS_CREATOR", e2[e2.APP_TYPE_NATIVE_RUST = 11] = "APP_TYPE_NATIVE_RUST", e2[e2.APP_TYPE_NATIVE_C_SHARP = 12] = "APP_TYPE_NATIVE_C_SHARP", e2[e2.APP_TYPE_NATIVE_CEF = 13] = "APP_TYPE_NATIVE_CEF", e2[e2.APP_TYPE_NATIVE_UNI_APP = 14] = "APP_TYPE_NATIVE_UNI_APP", e2[e2.APP_TYPE_WEBRTC = 1e3] = "APP_TYPE_WEBRTC", e2[e2.APP_TYPE_WEBRTC_REACT = 1001] = "APP_TYPE_WEBRTC_REACT", e2[e2.APP_TYPE_WEBRTC_VUE = 1002] = "APP_TYPE_WEBRTC_VUE", e2[e2.APP_TYPE_WEBRTC_ANGULAR = 1003] = "APP_TYPE_WEBRTC_ANGULAR";
      }(yv || (yv = {})), function(e2) {
        e2.CONNECTING = "CONNECTING", e2.RECONNECTING = "RECONNECTING", e2.CONNECTED = "CONNECTED", e2.CLOSED = "CLOSED";
      }(Av || (Av = {})), function(e2) {
        e2.CONNECTION_STATE_CHANGE = "connection-state-change", e2.STATE_CHANGE = "state-change", e2.INSPECT_RESULT = "inspect-result", e2.CLIENT_LOCAL_VIDEO_TRACK = "client-local-video-track", e2.REQUEST_NEW_WORKER_URL = "request-new-worker-url";
      }(bv || (bv = {})), function(e2) {
        e2[e2.CONNECT_AP = 0] = "CONNECT_AP", e2[e2.AP_CONNECTED = 1] = "AP_CONNECTED", e2[e2.CONNECT_WORKER_MANAGER = 2] = "CONNECT_WORKER_MANAGER", e2[e2.WORKER_MANAGER_CONNECTED = 3] = "WORKER_MANAGER_CONNECTED", e2[e2.GET_WORKER_MANAGER_RESPONSE = 4] = "GET_WORKER_MANAGER_RESPONSE", e2[e2.CONNECT_WORKER = 5] = "CONNECT_WORKER", e2[e2.WORKER_CONNECTED = 6] = "WORKER_CONNECTED", e2[e2.CLOSED = 7] = "CLOSED";
      }(wv || (wv = {})), function(e2) {
        e2.CALL = "call", e2.CANDIDATE = "candidate", e2.PUBLISH = "publish", e2.UNPUBLISH = "unpublish", e2.CONTROL = "control", e2.RESTART_ICE = "restart_ice", e2.ACK = "ack", e2.RESPONSE = "response", e2.JOIN = "join", e2.CHECK = "check";
      }(Ov || (Ov = {})), function(e2) {
        e2.ABORT = "abort";
      }(Nv || (Nv = {})), function(e2) {
        e2.MUTE_LOCAL_AUDIO = "mute_local_audio", e2.MUTE_LOCAL_VIDEO = "mute_local_video", e2.UNMUTE_LOCAL_AUDIO = "unmute_local_audio", e2.UNMUTE_LOCAL_VIDEO = "unmute_local_video";
      }(Dv || (Dv = {})), function(e2) {
        e2[e2.SUCCESS = 1] = "SUCCESS", e2[e2.FAILED = 0] = "FAILED";
      }(Pv || (Pv = {})), function(e2) {
        e2.P2P_TOKEN_TIMEOUT = "p2p_token_timeout", e2.P2P_TOKEN_CHANGED = "p2p_token_changed";
      }(Lv || (Lv = {}));
      const Uv = { [pI.ACCESS_POINT]: { [mI.NO_FLAG_SET]: { desc: "flag is zero", retry: false }, [mI.FLAG_SET_BUT_EMPTY]: { desc: "flag is empty", retry: false }, [mI.INVALID_FALG_SET]: { desc: "invalid flag", retry: false }, [mI.FLAG_SET_BUT_NO_RE]: { desc: "flag set unilbs but no request", retry: false }, [mI.INVALID_SERVICE_ID]: { desc: "invalid service id", retry: false }, [mI.NO_SERVICE_AVAILABLE]: { desc: "no service available", retry: true }, [mI.NO_SERVICE_AVAILABLE_P2P]: { desc: "no unilbs p2p service available", retry: true }, [mI.NO_SERVICE_AVAILABLE_VOICE]: { desc: "no unilbs voice service available", retry: true }, [mI.NO_SERVICE_AVAILABLE_WEBRTC]: { desc: "no unilbs webrtc service available", retry: true }, [mI.NO_SERVICE_AVAILABLE_CDS]: { desc: "no cds service available", retry: true }, [mI.NO_SERVICE_AVAILABLE_CDN]: { desc: "no cdn dispatcher service available", retry: true }, [mI.NO_SERVICE_AVAILABLE_TDS]: { desc: "no tds service available", retry: true }, [mI.NO_SERVICE_AVAILABLE_REPORT]: { desc: "no unilbs report service available", retry: true }, [mI.NO_SERVICE_AVAILABLE_APP_CENTER]: { desc: "no app center service available", retry: true }, [mI.NO_SERVICE_AVAILABLE_ENV0]: { desc: "no unilbs sig env0 service available", retry: true }, [mI.NO_SERVICE_AVAILABLE_VOET]: { desc: "no unilbs voet service available", retry: true }, [mI.NO_SERVICE_AVAILABLE_STRING_UID]: { desc: "no string uid service available", retry: true }, [mI.NO_SERVICE_AVAILABLE_WEBRTC_UNILBS]: { desc: "no webrtc unilbs service available", retry: true } }, [pI.UNILBS]: { [EI.INVALID_VENDOR_KEY]: { desc: "invalid vendor key, can not find appid", retry: false }, [EI.INVALID_CHANNEL_NAME]: { desc: "invalid channel name", retry: false }, [EI.INTERNAL_ERROR]: { desc: "unilbs internal error", retry: false }, [EI.NO_AUTHORIZED]: { desc: "invalid token, authorized failed", retry: false }, [EI.DYNAMIC_KEY_TIMEOUT]: { desc: "dynamic key or token timeout", retry: false }, [EI.NO_ACTIVE_STATUS]: { desc: "no active status", retry: false }, [EI.DYNAMIC_KEY_EXPIRED]: { desc: "dynamic key expired", retry: false }, [EI.STATIC_USE_DYNAMIC_KEY]: { desc: "static use dynamic key", retry: false }, [EI.DYNAMIC_USE_STATIC_KEY]: { desc: "dynamic use static key", retry: false }, [EI.USER_OVERLOAD]: { desc: "amount of users over load", retry: false }, [EI.FORBIDDEN_REGION]: { desc: "the request is forbidden in this area", retry: false }, [EI.CANNOT_MEET_AREA_DEMAND]: { desc: "unable to allocate services in this area", retry: false } }, [pI.STRING_UID_ALLOCATOR]: { [_I.IIIEGAL_APPID]: { desc: "invalid appid", retry: false }, [_I.IIIEGAL_UID]: { desc: "invalid string uid", retry: false }, [_I.INTERNAL_ERROR]: { desc: "string uid allocator internal error", retry: true } } };
      function xv(e2) {
        const t2 = Uv[Math.floor(e2 / 1e4)];
        if (!t2)
          return { desc: "unkonw error", retry: false };
        const i2 = t2[e2 % 1e4];
        if (!i2) {
          if (Math.floor(e2 / 1e4) === pI.ACCESS_POINT) {
            const t3 = e2 % 1e4;
            if ("1" === t3.toString()[0])
              return { desc: e2.toString(), retry: false };
            if ("2" === t3.toString()[0])
              return { desc: e2.toString(), retry: true };
          }
          return { desc: "unkonw error", retry: false };
        }
        return i2;
      }
      const Vv = { [fI.K_TIMESTAMP_EXPIRED]: { desc: "K_TIMESTAMP_EXPIRED", action: "failed" }, [fI.K_CHANNEL_PERMISSION_INVALID]: { desc: "K_CHANNEL_PERMISSION_INVALID", action: "failed" }, [fI.K_CERTIFICATE_INVALID]: { desc: "K_CERTIFICATE_INVALID", action: "failed" }, [fI.K_CHANNEL_NAME_EMPTY]: { desc: "K_CHANNEL_NAME_EMPTY", action: "failed" }, [fI.K_CHANNEL_NOT_FOUND]: { desc: "K_CHANNEL_NOT_FOUND", action: "failed" }, [fI.K_TICKET_INVALID]: { desc: "K_TICKET_INVALID", action: "failed" }, [fI.K_CHANNEL_CONFLICTED]: { desc: "K_CHANNEL_CONFLICTED", action: "failed" }, [fI.K_SERVICE_NOT_READY]: { desc: "K_SERVICE_NOT_READY", action: "tryNext" }, [fI.K_SERVICE_TOO_HEAVY]: { desc: "K_SERVICE_TOO_HEAVY", action: "tryNext" }, [fI.K_UID_BANNED]: { desc: "K_UID_BANNED", action: "failed" }, [fI.K_IP_BANNED]: { desc: "K_IP_BANNED", action: "failed" }, [fI.K_AUTO_REBALANCE]: { desc: "k_AUTO_REBALANCE", action: "recover" }, [fI.ERR_INVALID_VENDOR_KEY]: { desc: "ERR_INVALID_VENDOR_KEY", action: "failed" }, [fI.ERR_INVALID_CHANNEL_NAME]: { desc: "ERR_INVALID_CHANNEL_NAME", action: "failed" }, [fI.WARN_NO_AVAILABLE_CHANNEL]: { desc: "WARN_NO_AVAILABLE_CHANNEL", action: "failed" }, [fI.WARN_LOOKUP_CHANNEL_TIMEOUT]: { desc: "WARN_LOOKUP_CHANNEL_TIMEOUT", action: "tryNext" }, [fI.WARN_LOOKUP_CHANNEL_REJECTED]: { desc: "WARN_LOOKUP_CHANNEL_REJECTED", action: "failed" }, [fI.WARN_OPEN_CHANNEL_TIMEOUT]: { desc: "WARN_OPEN_CHANNEL_TIMEOUT", action: "tryNext" }, [fI.WARN_OPEN_CHANNEL_REJECTED]: { desc: "WARN_OPEN_CHANNEL_REJECTED", action: "failed" }, [fI.WARN_REQUEST_DEFERRED]: { desc: "WARN_REQUEST_DEFERRED", action: "failed" }, [fI.ERR_DYNAMIC_KEY_TIMEOUT]: { desc: "ERR_DYNAMIC_KEY_TIMEOUT", action: "failed" }, [fI.ERR_NO_AUTHORIZED]: { desc: "ERR_NO_AUTHORIZED", action: "failed" }, [fI.ERR_VOM_SERVICE_UNAVAILABLE]: { desc: "ERR_VOM_SERVICE_UNAVAILABLE", action: "tryNext" }, [fI.ERR_NO_CHANNEL_AVAILABLE_CODE]: { desc: "ERR_NO_CHANNEL_AVAILABLE_CODE", action: "failed" }, [fI.ERR_MASTER_VOCS_UNAVAILABLE]: { desc: "ERR_MASTER_VOCS_UNAVAILABLE", action: "tryNext" }, [fI.ERR_INTERNAL_ERROR]: { desc: "ERR_INTERNAL_ERROR", action: "tryNext" }, [fI.ERR_NO_ACTIVE_STATUS]: { desc: "ERR_NO_ACTIVE_STATUS", action: "failed" }, [fI.ERR_INVALID_UID]: { desc: "ERR_INVALID_UID", action: "failed" }, [fI.ERR_DYNAMIC_KEY_EXPIRED]: { desc: "ERR_DYNAMIC_KEY_EXPIRED", action: "failed" }, [fI.ERR_STATIC_USE_DYANMIC_KE]: { desc: "ERR_STATIC_USE_DYANMIC_KE", action: "failed" }, [fI.ERR_DYNAMIC_USE_STATIC_KE]: { desc: "ERR_DYNAMIC_USE_STATIC_KE", action: "failed" }, [fI.ERR_NO_VOCS_AVAILABLE]: { desc: "ERR_NO_VOCS_AVAILABLE", action: "tryNext" }, [fI.ERR_NO_VOS_AVAILABLE]: { desc: "ERR_NO_VOS_AVAILABLE", action: "tryNext" }, [fI.ERR_JOIN_CHANNEL_TIMEOUT]: { desc: "ERR_JOIN_CHANNEL_TIMEOUT", action: "tryNext" }, [fI.ERR_JOIN_BY_MULTI_IP]: { desc: "ERR_JOIN_BY_MULTI_IP", action: "recover" }, [fI.ERR_NOT_JOINED]: { desc: "ERR_NOT_JOINED", action: "failed" }, [fI.ERR_REPEAT_JOIN_REQUEST]: { desc: "ERR_REPEAT_JOIN_REQUEST", action: "quit" }, [fI.ERR_REPEAT_JOIN_CHANNEL]: { desc: "ERR_REPEAT_JOIN_CHANNEL", action: "quit" }, [fI.ERR_INVALID_STRINGUID]: { desc: "ERR_INVALID_STRINGUID", action: "failed" }, [fI.ERR_TOO_MANY_USERS]: { desc: "ERR_TOO_MANY_USERS", action: "tryNext" }, [fI.ERR_SET_CLIENT_ROLE_TIMEOUT]: { desc: "ERR_SET_CLIENT_ROLE_TIMEOUT", action: "failed" }, [fI.ERR_SET_CLIENT_ROLE_NO_PERMISSION]: { desc: "ERR_SET_CLIENT_ROLE_TIMEOUT", action: "failed" }, [fI.ERR_SET_CLIENT_ROLE_ALREADY_IN_USE]: { desc: "ERR_SET_CLIENT_ROLE_ALREADY_IN_USE", action: "success" }, [fI.ERR_PUBLISH_REQUEST_INVALID]: { desc: "ERR_PUBLISH_REQUEST_INVALID", action: "failed" }, [fI.ERR_SUBSCRIBE_REQUEST_INVALID]: { desc: "ERR_SUBSCRIBE_REQUEST_INVALID", action: "failed" }, [fI.ERR_NOT_SUPPORTED_MESSAGE]: { desc: "ERR_NOT_SUPPORTED_MESSAGE", action: "failed" }, [fI.ERR_ILLEAGAL_PLUGIN]: { desc: "ERR_ILLEAGAL_PLUGIN", action: "failed" }, [fI.ILLEGAL_CLIENT_ROLE_LEVEL]: { desc: "ILLEGAL_CLIENT_ROLE_LEVEL", action: "failed" }, [fI.ERR_REJOIN_TOKEN_INVALID]: { desc: "ERR_REJOIN_TOKEN_INVALID", action: "failed" }, [fI.ERR_REJOIN_USER_NOT_JOINED]: { desc: "ERR_REJOIN_NOT_JOINED", action: "failed" }, [fI.ERR_INVALID_OPTIONAL_INFO]: { desc: "ERR_INVALID_OPTIONAL_INFO", action: "quit" }, [fI.ERR_TEST_RECOVER]: { desc: "ERR_TEST_RECOVER", action: "recover" }, [fI.ERR_TEST_TRYNEXT]: { desc: "ERR_TEST_TRYNEXT", action: "recover" }, [fI.ERR_TEST_RETRY]: { desc: "ERR_TEST_RETRY", action: "recover" }, [fI.ILLEGAL_AES_PASSWORD]: { desc: "ERR_TEST_RETRY", action: "failed" }, [fI.ERR_TOO_MANY_BROADCASTERS]: { desc: "ERR_TOO_MANY_BROADCASTERS", action: "failed" }, [fI.ERR_TOO_MANY_SUBSCRIBERS]: { desc: "ERR_TOO_MANY_SUBSCRIBERS", action: "failed" }, [fI.ERR_LICENSE_ILLEGAL]: { desc: "ERR_LICENSE_ILLEGAL", action: "quit" }, [fI.ERR_LICENSE_MISSING]: { desc: "ERR_LICENSE_MISSING", action: "quit" }, [fI.ERR_LICENSE_EXPIRED]: { desc: "ERR_LICENSE_EXPIRED", action: "quit" }, [fI.ERR_LICENSE_MINUTES_EXCEEDED]: { desc: "ERR_LICENSE_MINUTES_EXCEEDED", action: "quit" }, [fI.ERR_LICENSE_PERIOD_INVALID]: { desc: "ERR_LICENSE_PERIOD_INVALID", action: "quit" }, [fI.ERR_LICENSE_MULTIPLE_SDK_SERVICE]: { desc: "ERR_LICENSE_MULTIPLE_SDK_SERVICE", action: "quit" } };
      function Fv(e2) {
        const t2 = Vv[e2];
        return t2 || { desc: "UNKNOW_ERROR_".concat(e2), action: "failed" };
      }
      function Bv(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function jv(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? Bv(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : Bv(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      function Gv(e2) {
        return e2.every((e3) => e3.readyState === WebSocket.CLOSED || e3.readyState === WebSocket.CLOSING);
      }
      function Wv(e2, t2) {
        if ("string" == typeof e2)
          return e2;
        const { proxy: i2, host: n2, port: s2 } = e2;
        if (t2) {
          const e3 = DC("JOIN_GATEWAY_FALLBACK_PORT") || 443;
          return 443 === e3 ? "wss://".concat(n2, "/ws/?p=").concat(Number(s2) + 150) : "wss://".concat(n2, ":").concat(e3, "/ws/?p=").concat(Number(s2) + 150);
        }
        return i2 ? "wss://".concat(i2, "/ws/?h=").concat(n2, "&p=").concat(s2) : "wss://".concat(n2, ":").concat(s2);
      }
      const Hv = /wss:\/\/(.+)\/ws\/\?h=(.+)&p=([0-9]+)\/?/, Kv = /wss:\/\/(.+)\/ws\/\?p=([0-9]+)\/?/, Yv = /wss:\/\/(.+):([0-9]+)\/?/, qv = /wss:\/\/(.[^\/]+)\/?/;
      let Jv = 0;
      class zv {
        constructor(e2, t2) {
          nh(this, "id", 0), nh(this, "store", void 0), nh(this, "recordIndex", void 0), nh(this, "websockets", []), nh(this, "try443PortDuration", 2e3), nh(this, "forceCloseWSDuration", 5e3), nh(this, "try443PortTimeout", null), nh(this, "forceCloseTimeout", null), nh(this, "isTry443PortFailed", false), nh(this, "isNormalPortFailed", false), nh(this, "useDoubleDomain", false), nh(this, "useProxy", false), nh(this, "startTime", Date.now()), this.id = ++Jv, this.try443PortDuration = DC("JOIN_GATEWAY_TRY_443PORT_DURATION") || 2e3, this.forceCloseWSDuration = e2 || 5e3, this.store = t2;
        }
        closeAllWebsockets() {
          this.websockets.forEach((e2) => {
            e2.onopen = null, e2.onclose = null, e2.onmessage = null, e2.close();
          }), this.websockets.length = 0;
        }
        clearTimeout() {
          this.forceCloseTimeout && clearTimeout(this.forceCloseTimeout), this.try443PortTimeout && clearTimeout(this.try443PortTimeout);
        }
        logger() {
          var e2;
          const t2 = Date.now() - this.startTime;
          for (var i2 = arguments.length, n2 = new Array(i2), s2 = 0; s2 < i2; s2++)
            n2[s2] = arguments[s2];
          YC.debug("[choose-best-ws ".concat(null === (e2 = this.store) || void 0 === e2 ? void 0 : e2.clientId, " ").concat(this.id, "] ").concat(t2, "ms:"), ...n2);
        }
        createWebSocket(e2, t2, i2) {
          this.logger("createWebSocket:", e2, { isTry443Port: t2, hasTimeoutDetection: i2 });
          const n2 = DC("GATEWAY_DOMAINS"), s2 = Date.now(), r2 = [], o2 = n2.find((t3) => {
            var i3;
            return bn(i3 = e2.host).call(i3, t3);
          });
          o2 || (this.useDoubleDomain = false);
          const a2 = [];
          if (this.useDoubleDomain)
            n2.forEach((i3) => {
              a2.push(Wv(jv(jv({}, e2), {}, { host: e2.host.replace(o2, i3) }), t2));
            });
          else {
            const i3 = jv({}, e2);
            if (t2 && o2) {
              const e3 = n2.find((e4) => e4 !== o2);
              e3 && (i3.host = i3.host.replace(o2, e3));
            }
            a2.push(Wv(i3, t2));
          }
          try {
            a2.forEach((e3) => {
              const t3 = new WebSocket(e3);
              t3.binaryType = "arraybuffer", r2.push(t3), this.logger("ws is connecting:", t3.url);
            });
          } catch (n3) {
            if (this.logger("ws create failed"), r2.forEach((e3) => e3.close()), r2.length = 0, this.useDoubleDomain)
              return this.useDoubleDomain = false, this.createWebSocket(e2, t2, i2);
            if (!t2 && 443 !== Number(e2.port))
              return this.createWebSocket(e2, true, i2);
            throw new VI(xT.WS_ERR, "init websocket failed! Error: ".concat(n3.toString()));
          }
          const c2 = nT();
          this.store && this.store.recordJoinChannelService({ urls: r2.map((e3) => e3.url), service: "gateway" }, this.recordIndex), r2.forEach((e3) => {
            e3.onopen = () => {
              this.logger("onopen: ws ".concat(e3.url, " open cost ").concat(Date.now() - s2, "ms")), this.websockets.forEach((t3) => {
                t3 !== e3 && (t3.onopen = null, t3.onclose = null, t3.onmessage = null, t3.close(), this.logger("close backup websocket: ".concat(t3.url)));
              }), this.websockets.length = 0, c2.resolve(e3);
            }, e3.onclose = (i3) => {
              this.logger("onclose: ws ".concat(e3.url, " closed cost ").concat(Date.now() - s2, "ms state: ").concat(e3.readyState)), t2 ? this.isTry443PortFailed = Gv(r2) : this.isNormalPortFailed = Gv(r2), this.logger("443: ".concat(this.useProxy ? "not try" : this.isTry443PortFailed ? "failed" : "trying", " 47xx: ").concat(this.isNormalPortFailed ? "failed" : "trying")), (t2 && this.isTry443PortFailed || !t2 && (this.isTry443PortFailed || this.useProxy) && this.isNormalPortFailed) && (this.logger("onclose: all websocket is closed, ".concat(i3.reason)), c2.reject({ code: i3.code, reason: iv.A_ROUND_WS_FAILED }));
            }, e3.onmessage = (t3) => this.logger("".concat(e3.url, " onmessage: ").concat(t3.data));
          }), this.websockets.push(...r2);
          return i2 || (() => {
            const i3 = () => {
              this.logger("5s timeout close un-opens, isWebsocket created: ", c2.isResolved), this.websockets.forEach((e3) => e3.readyState !== WebSocket.OPEN && e3.close());
            };
            if (t2 || this.useProxy)
              return this.logger("add 5s timeout at ".concat(t2 ? "try-443" : "proxy", " condition")), this.forceCloseTimeout = window.setTimeout(i3, this.forceCloseWSDuration);
            this.try443PortTimeout = window.setTimeout(() => {
              if (this.logger("2s timeout, isWebsocket created: ", c2.isResolved), c2.isResolved)
                return i3();
              pT().os === aT.MAC_OS && RT() && i3(), this.createWebSocket(e2, true, true).then((e3) => c2.resolve(e3)).catch((e3) => {
                this.isNormalPortFailed && c2.reject(e3), this.logger("try 443 port to create ws failed");
              }), this.forceCloseTimeout = window.setTimeout(i3, this.forceCloseWSDuration);
            }, this.try443PortDuration);
          })(), c2.promise;
        }
        chooseBestWebsocket(e2, t2, i2, n2) {
          return this.useDoubleDomain = !!t2, "string" == typeof e2 && (e2 = function(e3) {
            let t3, i3, n3;
            return [, t3, i3, n3] = e3.match(Hv) || [], t3 || ([, i3, n3] = e3.match(Kv) || []), i3 && n3 || ([, i3, n3] = e3.match(Yv) || []), i3 && n3 || ([, i3] = e3.match(qv) || []), i3 || YC.warning("un-destructible url: ", e3), { proxy: t3, host: i3, port: n3 || "443" };
          }(e2)), this.recordIndex = n2, this.useProxy = !!e2.proxy, i2 && this.useProxy && (YC.warn("cannot use 443 only when use proxy"), i2 = false), this.createWebSocket(e2, !!i2, false).finally(() => this.clearTimeout());
        }
      }
      function Xv(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      class Qv extends ig {
        get url() {
          return this.websocket && this.websocket.url || null;
        }
        get reconnectMode() {
          return this._reconnectMode;
        }
        set reconnectMode(e2) {
          var t2;
          bn(t2 = ["tryNext", "recover"]).call(t2, e2) && this.resetReconnectCount(e2), this._reconnectMode = e2;
        }
        get state() {
          return this._state;
        }
        set state(e2) {
          e2 !== this._state && (this._state = e2, "reconnecting" === this._state ? this.emit(yI.RECONNECTING, this.reconnectReason) : "connected" === this._state ? this.emit(yI.CONNECTED) : "closed" === this._state ? this.emit(yI.CLOSED) : "failed" === this._state && this.emit(yI.FAILED));
        }
        resetReconnectCount(e2) {
          YC.debug("websocket reset reconnect count, reason: " + e2), this.reconnectCount = 0;
        }
        constructor(e2, t2) {
          let i2 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], n2 = arguments.length > 3 && void 0 !== arguments[3] && arguments[3], s2 = arguments.length > 4 && void 0 !== arguments[4] && arguments[4], r2 = arguments.length > 5 ? arguments[5] : void 0;
          super(), nh(this, "connectionID", 0), nh(this, "currentURLIndex", 0), nh(this, "urls", []), nh(this, "_reconnectMode", "tryNext"), nh(this, "reconnectReason", void 0), nh(this, "_initMutex", new Yg("websocket")), nh(this, "name", void 0), nh(this, "_state", "closed"), nh(this, "reconnectInterrupter", void 0), nh(this, "websocket", void 0), nh(this, "retryConfig", void 0), nh(this, "reconnectCount", 0), nh(this, "forceCloseTimeout", 5e3), nh(this, "onlineReconnectListener", void 0), nh(this, "useCompress", void 0), nh(this, "tryDoubleDomain", false), nh(this, "use443PortOnly", false), nh(this, "wsInflateLength", 0), nh(this, "wsDeflateLength", 0), nh(this, "closeEstablishingWs", () => {
          }), nh(this, "store", void 0), nh(this, "joinGatewayRecordIndex", void 0), this.store = r2, this.name = e2, this.retryConfig = function(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var i3 = null != arguments[t3] ? arguments[t3] : {};
              t3 % 2 ? Xv(Object(i3), true).forEach(function(t4) {
                nh(e3, t4, i3[t4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(i3)) : Xv(Object(i3)).forEach(function(t4) {
                Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(i3, t4));
              });
            }
            return e3;
          }({}, t2), this.useCompress = i2, this.tryDoubleDomain = n2, this.use443PortOnly = s2;
          const { timeout: o2, timeoutFactor: a2 } = t2, c2 = Math.max(300, Math.floor(3 * o2 / 5)), d2 = Math.max(1.2, Math.floor(8 * a2) / 10);
          ug.ONLINE && (this.retryConfig.timeout = c2, this.retryConfig.timeoutFactor = d2), Rg.on(hg.NETWORK_STATE_CHANGE, (e3, t3) => {
            e3 !== t3 && (this.resetReconnectCount("network state change: ".concat(t3, " -> ").concat(e3)), e3 === ug.ONLINE ? (this.retryConfig.timeout = c2, this.retryConfig.timeoutFactor = d2) : (this.retryConfig.timeout = o2, this.retryConfig.timeoutFactor = a2));
          });
        }
        getConnection() {
          return this.websocket || void 0;
        }
        async init(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 5e3;
          const i2 = await this._initMutex.lock();
          this.forceCloseTimeout = t2, this.urls = e2, this.state = "connecting";
          try {
            const e3 = nT(), t3 = this.urls[this.currentURLIndex];
            this.createWebSocketConnection(t3).then(e3.resolve).catch(e3.reject), this.once(yI.CLOSED, () => {
              e3.reject(new VT(xT.WS_DISCONNECT));
            }), this.once(yI.CONNECTED, e3.resolve), await e3.promise;
          } catch (e3) {
          } finally {
            i2();
          }
        }
        close(e2, t2) {
          if (this.currentURLIndex = 0, this.resetReconnectCount("close"), this.reconnectInterrupter && this.reconnectInterrupter(), this.websocket) {
            this.websocket.onclose = null, this.websocket.onopen = null, this.websocket.onmessage = null;
            const e3 = this.websocket;
            t2 ? setTimeout(() => e3.close(), 500) : e3.close(), this.websocket = void 0;
          }
          this.state = e2 ? "failed" : "closed", this.closeEstablishingWs && this.closeEstablishingWs();
        }
        reconnect(e2, t2) {
          if (!this.websocket)
            return void YC.warning("[".concat(this.name, "] can not reconnect, no websocket"));
          void 0 !== e2 && (this.reconnectMode = e2), YC.debug("[".concat(this.name, "] reconnect is triggered initiative")), "number" == typeof this.joinGatewayRecordIndex && this.store && this.store.recordJoinChannelService({ status: "error", errors: [new Error(t2)] }, this.joinGatewayRecordIndex);
          const i2 = this.websocket.onclose;
          this.websocket.onclose = null, this.websocket.close(), i2 && i2.bind(this.websocket)({ code: 9999, reason: t2 });
        }
        sendMessage(e2) {
          let t2 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
          if (!this.websocket || this.websocket.readyState !== WebSocket.OPEN)
            throw new VT(xT.WS_ABORT, "websocket is not ready");
          try {
            t2 || (e2 = JSON.stringify(e2)), this.websocket.send(e2);
          } catch (e3) {
            throw new VT(xT.WS_ERR, "send websocket message error" + e3.toString());
          }
        }
        setWsInflateData(e2) {
          this.wsDeflateLength = this.wsDeflateLength + e2.originLength, this.wsInflateLength = this.wsInflateLength + e2.compressedLength;
        }
        getWsInflateData() {
          const e2 = this.wsInflateLength, t2 = this.wsDeflateLength;
          return this.clearWsInflateData(), { wsInflateLength: e2, wsDeflateLength: t2 };
        }
        clearWsInflateData() {
          this.wsInflateLength = 0, this.wsDeflateLength = 0;
        }
        async createWebSocketConnection(e2) {
          var t2;
          const i2 = nT();
          this.connectionID += 1, this.joinGatewayRecordIndex = void 0;
          const n2 = (e3) => {
            var t3;
            null === (t3 = this.store) || void 0 === t3 || t3.signalChannelOpen(), YC.debug("[".concat(this.name, "] websocket opened:"), e3), this.reconnectMode = "retry", this.state = "connected", this.resetReconnectCount("opened"), i2.resolve();
          }, s2 = async (e3) => {
            var t3;
            if (YC.debug("[".concat(this.name, "] websocket close ").concat(null === (t3 = this.websocket) || void 0 === t3 ? void 0 : t3.url, ", code: ").concat(e3.code, ", reason: ").concat(e3.reason, ", current mode: ").concat(this.reconnectMode)), this.reconnectCount >= this.retryConfig.maxRetryCount)
              i2.reject(new VT(xT.WS_DISCONNECT, "websocket close: ".concat(e3.code))), this.close();
            else {
              "connected" === this.state && (this.reconnectReason = e3.reason, this.state = "reconnecting");
              const t4 = gg(this, yI.WILL_RECONNECT, this.reconnectMode, e3.reason) || this.reconnectMode, n3 = await this.reconnectWithAction(t4);
              if ("closed" === this.state)
                return void YC.debug("[".concat(this.connectionID, "] ws is closed, no need to reconnect"));
              if (!n3)
                return i2.reject(new VT(xT.WS_DISCONNECT, "websocket reconnect failed: ".concat(e3.code))), this.close(true);
              i2.resolve();
            }
          }, r2 = (e3) => {
            this.emit(yI.ON_MESSAGE, e3);
          }, o2 = (e3) => {
            YC.warn("[".concat(this.connectionID, "] ws open error ").concat(e3));
          };
          this.websocket && (this.websocket.onclose = null, this.websocket.close()), DC("GATEWAY_WSS_ADDRESS") && this.name.startsWith("gateway") && (e2 = DC("GATEWAY_WSS_ADDRESS")), YC.debug("[".concat(this.name, "] start connect, url:"), e2);
          const a2 = null === (t2 = this.store) || void 0 === t2 ? void 0 : t2.recordJoinChannelService({ startTs: Date.now(), status: "pending", service: "gateway" });
          try {
            var c2;
            const t3 = await this.chooseBestWebsocketConnection(e2);
            this.websocket = t3, n2 && n2(this.websocket.url), this.websocket.onclose = s2, this.websocket.onmessage = r2, this.websocket.onerror = o2, null === (c2 = this.store) || void 0 === c2 || c2.recordJoinChannelService({ endTs: Date.now(), status: "success" }, a2), this.joinGatewayRecordIndex = a2;
          } catch (e3) {
            const t3 = "closed" === this.state, n3 = e3 instanceof VT, r3 = n3 && e3.code === xT.WS_ABORT, o3 = n3 && e3.code === xT.WS_ERR, c3 = n3 ? e3.message : e3 && (e3.reason || e3.toString());
            YC.warning("[choose-best-ws] chooseBestWebsocket error: ".concat(c3)), this.store && this.store.recordJoinChannelService({ endTs: Date.now(), status: r3 ? "aborted" : "error", errors: [e3] }, a2), t3 || o3 ? (i2.reject(t3 ? new VT(xT.WS_DISCONNECT, "websocket is closed: ".concat(c3)) : new VT(xT.WS_ERR, "init websocket failed: ".concat(c3))), o3 && YC.error("[".concat(this.name, "] init websocket failed: ").concat(c3))) : s2 && s2(e3);
          }
          return i2.promise;
        }
        async reconnectWithAction(e2) {
          let t2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          if (this.reconnectCount >= this.retryConfig.maxRetryCount)
            return false;
          if (0 === this.urls.length)
            return false;
          if ("closed" === this.state)
            return false;
          YC.warning("[choose-best-ws] action: =>", e2), this.onlineReconnectListener || Rg.isOnline || !Rg.onlineWaiter || (this.onlineReconnectListener = Rg.onlineWaiter.then(() => {
            this.onlineReconnectListener = void 0;
          }));
          let i2 = true;
          if (this.reconnectInterrupter = () => i2 = false, t2) {
            const t3 = zg(this.reconnectCount, this.retryConfig);
            YC.debug("[".concat(this.name, "] wait ").concat(t3, "ms to reconnect websocket, mode: ").concat(e2)), await tT.race([Ug(t3), this.onlineReconnectListener || new tT(() => {
            })]);
          }
          if ("closed" === this._state || !i2)
            return false;
          this.reconnectCount += 1;
          const n2 = async (e3, t3) => {
            this.emit(yI.RECONNECT_CREATE_CONNECTION, t3), await this.createWebSocketConnection(e3);
          };
          try {
            if ("retry" === e2)
              this.emit(yI.RECONNECT_WAITTING_FINISH, e2), await n2(this.urls[this.currentURLIndex], e2);
            else if ("tryNext" === e2) {
              if (this.currentURLIndex += 1, this.currentURLIndex >= this.urls.length)
                return this.reconnectWithAction("recover", false);
              YC.debug("[".concat(this.name, "] websocket url length: ").concat(this.urls.length, " current index: ").concat(this.currentURLIndex)), this.emit(yI.RECONNECT_WAITTING_FINISH, e2), await n2(this.urls[this.currentURLIndex], e2);
            } else
              "recover" === e2 && (YC.debug("[".concat(this.name, "] request new urls")), this.resetReconnectCount("recover mode"), this.emit(yI.RECONNECT_WAITTING_FINISH, e2), this.urls = await fg(this, yI.REQUEST_NEW_URLS), this.currentURLIndex = 0, await n2(this.urls[this.currentURLIndex], e2));
          } catch (i3) {
            var s2;
            YC.error("[".concat(this.name, "] reconnect failed ").concat(i3 && i3.toString()));
            const n3 = null == i3 || null === (s2 = i3.data) || void 0 === s2 ? void 0 : s2.desc;
            return Array.isArray(n3) && bn(n3).call(n3, "dynamic key expired") ? (this.emit(yI.ON_TOKEN_PRIVILEGE_DID_EXPIRE), false) : this.reconnectWithAction(e2, t2);
          }
          return true;
        }
      }
      class Zv extends Qv {
        constructor(e2, t2) {
          super(e2, t2, arguments.length > 2 && void 0 !== arguments[2] && arguments[2], arguments.length > 3 && void 0 !== arguments[3] && arguments[3], arguments.length > 4 && void 0 !== arguments[4] && arguments[4], arguments.length > 5 ? arguments[5] : void 0);
        }
        async chooseBestWebsocketConnection(e2, t2) {
          const i2 = nT(), n2 = function(e3, t3) {
            return new zv(e3, t3);
          }(this.forceCloseTimeout, this.store);
          this.closeEstablishingWs = () => {
            YC.debug("[choose-best-ws] close establishing websockets"), n2.closeAllWebsockets(), i2.reject(new VT(xT.WS_ABORT, "choose best websocket aborted"));
          };
          const s2 = DC("GATEWAY_DOMAINS");
          return YC.debug("[choose-best-ws] currentDomain: ", e2, ", domains: ", s2, "total: ".concat(this.urls.length), "current: ".concat(this.currentURLIndex + 1)), n2.chooseBestWebsocket(e2, this.tryDoubleDomain, this.use443PortOnly, t2).then(i2.resolve).catch(i2.reject), i2.promise.finally(() => {
            this.closeEstablishingWs = void 0;
          });
        }
      }
      class $v extends Qv {
        constructor(e2, t2) {
          super(e2, t2, arguments.length > 2 && void 0 !== arguments[2] && arguments[2], arguments.length > 3 && void 0 !== arguments[3] && arguments[3], arguments.length > 4 && void 0 !== arguments[4] && arguments[4], arguments.length > 5 ? arguments[5] : void 0);
        }
        async chooseBestWebsocketConnection(e2, t2) {
          return new tT((i2, n2) => {
            let s2 = false;
            const r2 = [];
            this.closeEstablishingWs = () => {
              YC.debug("[choose-best-ws] close establishing websockets"), r2.forEach((e3) => {
                e3.onclose = null, e3.onopen = null, e3.onmessage = null, e3.close();
              }), n2(new VT(xT.WS_ABORT, "choose best websocket aborted"));
            };
            const o2 = DC("GATEWAY_DOMAINS");
            let a2;
            const c2 = e2.indexOf("?h="), d2 = o2.find((t3) => -1 !== c2 ? bn(e2).call(e2, t3, c2) : bn(e2).call(e2, t3));
            YC.debug("[choose-best-ws] currentDomain: ", d2, ", domains: ", o2);
            let l2 = !this.tryDoubleDomain || !d2;
            if (!l2 && d2) {
              var u2;
              const h3 = Date.now();
              try {
                o2.forEach((t3) => {
                  const i3 = -1 === c2 ? e2.replace(d2, t3) : e2.substr(0, c2) + e2.substr(c2).replace(d2, t3), n3 = new WebSocket(i3);
                  n3.binaryType = "arraybuffer", r2.push(n3), YC.debug("[choose-best-ws] ws is connecting:", n3.url);
                });
              } catch (e3) {
                for (YC.debug("[choose-best-ws] ws create failed, fallback to single url"), r2.forEach((e4) => e4.close()); r2.length; )
                  r2.pop();
                l2 = true;
              }
              null === (u2 = this.store) || void 0 === u2 || u2.recordJoinChannelService({ urls: r2.map((e3) => e3.url), service: "gateway" }, t2), r2.forEach((e3) => {
                e3.onopen = () => {
                  if (s2)
                    return;
                  const t3 = Date.now() - h3;
                  YC.debug("[choose-best-ws] ws open cost ".concat(t3, "ms")), r2.filter((t4) => t4 !== e3).forEach((e4) => {
                    YC.debug("[choose-best-ws]close backup websocket: ".concat(e4.url)), e4.close();
                  }), s2 = true, i2(e3);
                }, e3.onclose = (e4) => {
                  if (a2 = e4, s2)
                    return;
                  r2.find((e5) => !(e5.readyState === WebSocket.CLOSED || e5.readyState === WebSocket.CLOSING)) || (YC.debug("[choose-best-ws] all websocket is closed"), s2 = true, n2(a2));
                }, e3.onmessage = (t3) => {
                  YC.debug("[choose-best-ws]".concat(e3.url, " onmessage: ").concat(t3.data));
                };
              }), Ug(this.forceCloseTimeout).then(() => {
                r2.forEach((e3) => {
                  e3.readyState !== WebSocket.OPEN && e3.close();
                });
              });
            }
            if (l2) {
              var h2;
              let s3;
              YC.debug("[choose-best-ws] use single url: ", e2), null === (h2 = this.store) || void 0 === h2 || h2.recordJoinChannelService({ urls: [e2], service: "gateway" }, t2);
              try {
                s3 = new WebSocket(e2), r2.push(s3), s3.binaryType = "arraybuffer";
              } catch (e3) {
                const t3 = new VT(xT.WS_ERR, "init websocket failed! Error: ".concat(e3.toString()));
                return YC.error("[".concat(this.name, "]").concat(t3)), void n2(t3);
              }
              s3.onopen = () => {
                i2(s3);
              }, s3.onclose = (e3) => {
                n2(e3);
              }, s3.onmessage = (e3) => {
                YC.debug("[choose-best-ws]".concat(s3.url, " onmessage: ").concat(e3.data));
              }, Ug(this.forceCloseTimeout).then(() => {
                s3 && s3.readyState !== WebSocket.OPEN && s3.close();
              });
            }
          }).then((e3) => (this.closeEstablishingWs = void 0, e3)).catch((e3) => {
            throw this.closeEstablishingWs = void 0, e3;
          });
        }
      }
      class ey extends ig {
        get connectionState() {
          return this._connectionState;
        }
        set connectionState(e2) {
          e2 !== this._connectionState && (this._connectionState = e2, e2 === TI.CONNECTED ? this.emit(gI.WS_CONNECTED) : e2 === TI.RECONNECTING ? this.emit(gI.WS_RECONNECTING, this._websocketReconnectReason) : e2 === TI.CLOSED && this.emit(gI.WS_CLOSED, this._disconnectedReason));
        }
        get currentURLIndex() {
          return this.websocket.currentURLIndex;
        }
        get url() {
          return this.websocket && this.websocket.url || null;
        }
        get rtt() {
          return this.rttRolling.mean();
        }
        constructor(e2, t2) {
          super(), nh(this, "_disconnectedReason", void 0), nh(this, "_websocketReconnectReason", void 0), nh(this, "_connectionState", TI.CLOSED), nh(this, "reconnectToken", void 0), nh(this, "websocket", void 0), nh(this, "openConnectionTime", void 0), nh(this, "clientId", void 0), nh(this, "lastMsgTime", Date.now()), nh(this, "uploadCache", []), nh(this, "uploadCacheInterval", void 0), nh(this, "rttRolling", new dS(5)), nh(this, "pingpongTimer", void 0), nh(this, "wsInflateDataTimer", void 0), nh(this, "pingpongTimeoutCount", 0), nh(this, "joinResponse", void 0), nh(this, "multiIpOption", void 0), nh(this, "initError", void 0), nh(this, "spec", void 0), nh(this, "store", void 0), nh(this, "onWebsocketMessage", (e3) => {
            if (e3.data instanceof ArrayBuffer)
              return void this.emit(gI.ON_BINARY_DATA, e3.data);
            const t3 = JSON.parse(e3.data);
            if (this.lastMsgTime = Date.now(), Object.prototype.hasOwnProperty.call(t3, "_id")) {
              const e4 = "res-@".concat(t3._id);
              this.emit(e4, t3._result, t3._message);
            } else if (Object.prototype.hasOwnProperty.call(t3, "_type")) {
              if (this.emit(t3._type, t3._message), t3._type === CI.ON_NOTIFICATION && this.handleNotification(t3._message), t3._type === CI.ON_USER_BANNED)
                switch (t3._message.error_code) {
                  case 14:
                    this.close(cg.UID_BANNED);
                    break;
                  case 15:
                    this.close(cg.IP_BANNED);
                    break;
                  case 16:
                    this.close(cg.CHANNEL_BANNED);
                }
              if (t3._type === CI.ON_USER_LICENSE_BANNED)
                switch (t3._message.error_code) {
                  case fI.ERR_LICENSE_MISSING:
                    this.close(cg.LICENSE_MISSING);
                    break;
                  case fI.ERR_LICENSE_EXPIRED:
                    this.close(cg.LICENSE_EXPIRED);
                    break;
                  case fI.ERR_LICENSE_MINUTES_EXCEEDED:
                    this.close(cg.LICENSE_MINUTES_EXCEEDED);
                    break;
                  case fI.ERR_LICENSE_PERIOD_INVALID:
                    this.close(cg.LICENSE_PERIOD_INVALID);
                    break;
                  case fI.ERR_LICENSE_MULTIPLE_SDK_SERVICE:
                    this.close(cg.LICENSE_MULTIPLE_SDK_SERVICE);
                    break;
                  case fI.ERR_LICENSE_ILLEGAL:
                    this.close(cg.LICENSE_ILLEGAL);
                    break;
                  default:
                    this.close();
                }
            }
          }), this.clientId = e2.clientId, this.spec = e2, this.store = t2, this.websocket = new Zv("gateway-".concat(this.clientId), this.spec.retryConfig, true, DC("JOIN_GATEWAY_USE_DUAL_DOMAIN"), DC("JOIN_GATEWAY_USE_443PORT_ONLY"), t2), this.handleWebsocketEvents(), window.addEventListener("offline", () => {
            this.connectionState === TI.CONNECTED && this.reconnect("retry", lg.OFFLINE);
          });
        }
        async request(e2, t2, i2, n2) {
          const s2 = xg(6, ""), r2 = { _id: s2, _type: e2, _message: t2 }, o2 = this.websocket.connectionID, a2 = () => new tT((t3, i3) => {
            if (this.connectionState === TI.CONNECTED)
              return t3();
            const n3 = () => {
              this.off(gI.WS_CLOSED, s3), t3();
            }, s3 = () => {
              this.off(gI.WS_CONNECTED, n3), i3(new VI(xT.WS_ABORT));
            };
            this.once(gI.WS_CONNECTED, n3), this.once(gI.WS_CLOSED, s3), e2 !== SI.PUBLISH && e2 !== SI.SUBSCRIBE && e2 !== SI.UNSUBSCRIBE && e2 !== SI.UNPUBLISH && e2 !== SI.CONTROL && e2 !== SI.RESTART_ICE || this.once(gI.DISCONNECT_P2P, () => {
              i3(new VI(xT.DISCONNECT_P2P));
            }), e2 !== SI.PUBLISH && e2 !== SI.RESTART_ICE || this.once(gI.ABORT_P2P_EXECUTION, () => {
              i3(new VI(xT.DISCONNECT_P2P));
            });
          });
          if (this.connectionState !== TI.CONNECTING && this.connectionState !== TI.RECONNECTING || e2 === SI.JOIN || e2 === SI.REJOIN || await a2(), this.websocket.sendMessage(r2, true), n2)
            return;
          const c2 = new tT((i3, n3) => {
            let r3 = false;
            const a3 = (n4, s3) => {
              r3 = true, i3({ isSuccess: "success" === n4, message: s3 || {} }), this.off(gI.WS_CLOSED, c3), this.off(gI.WS_RECONNECTING, c3), this.emit(gI.REQUEST_SUCCESS, e2, t2);
            };
            this.once("res-@".concat(s2), a3);
            const c3 = () => {
              n3(new VI(xT.WS_ABORT, "type: ".concat(e2))), this.off(gI.WS_CLOSED, c3), this.off(gI.WS_RECONNECTING, c3), this.off("res-@".concat(s2), a3);
            };
            this.once(gI.WS_CLOSED, c3), this.once(gI.WS_RECONNECTING, c3), Ug(DC("SIGNAL_REQUEST_TIMEOUT")).then(() => {
              this.websocket.connectionID !== o2 || r3 || (YC.warning("[".concat(this.clientId, "] ws request timeout, type: ").concat(e2)), this.emit(gI.REQUEST_TIMEOUT, e2, t2));
            });
          });
          let d2 = null;
          try {
            d2 = await c2;
          } catch (n3) {
            if (this.connectionState === TI.CLOSED || e2 === SI.LEAVE)
              throw new VI(xT.WS_ABORT);
            return !this.spec.forceWaitGatewayResponse || i2 ? n3.throw() : e2 === SI.JOIN || e2 === SI.REJOIN ? null : (await a2(), await this.request(e2, t2));
          }
          if (d2.isSuccess)
            return d2.message;
          const l2 = Number(d2.message.error_code || d2.message.code), u2 = Fv(l2), h2 = new VI(xT.UNEXPECTED_RESPONSE, "".concat(u2.desc, ": ").concat(d2.message.error_str), { code: l2, data: d2.message });
          return "success" === u2.action ? d2.message : (YC.warning("[".concat(this.clientId, "] [").concat(this.websocket.connectionID, "] unexpected response from type ").concat(e2, ", error_code: ").concat(l2, ", message: ").concat(u2.desc, ", action: ").concat(u2.action)), l2 === fI.ERR_TOO_MANY_BROADCASTERS ? e2 === SI.JOIN || e2 === SI.REJOIN ? (this.initError = h2, this.close(), h2.throw()) : h2.throw() : "failed" === u2.action ? h2.throw() : "quit" === u2.action ? (this.initError = h2, this.close(), h2.throw()) : (l2 === fI.ERR_JOIN_BY_MULTI_IP ? (this.multiIpOption = d2.message.option, YC.warning("[".concat(this.clientId, "] detect multi ip, recover")), this.reconnect("recover", lg.MULTI_IP)) : this.reconnect(u2.action, lg.SERVER_ERROR), e2 === SI.JOIN || e2 === SI.REJOIN ? null : await this.request(e2, t2)));
        }
        waitMessage(e2, t2) {
          return new tT((i2) => {
            const n2 = (s2) => {
              (!t2 || t2(s2)) && (this.off(e2, n2), i2(s2));
            };
            this.on(e2, n2);
          });
        }
        uploadWRTCStats(e2) {
          if (!this.store.sessionId)
            return void YC.warn("[".concat(this.clientId, "] no session id when upload wrtc stats"));
          const t2 = { lts: Date.now(), sid: this.store.sessionId, uid: this.store.intUid, stats: e2 };
          this.upload(RI.WRTC_STATS, t2);
        }
        upload(e2, t2) {
          const i2 = { _type: e2, _message: t2 };
          try {
            this.websocket.sendMessage(i2);
          } catch (e3) {
            const t3 = DC("MAX_UPLOAD_CACHE") || 50;
            this.uploadCache.push(i2), this.uploadCache.length > t3 && this.uploadCache.splice(0, 1), this.uploadCache.length > 0 && !this.uploadCacheInterval && (this.uploadCacheInterval = window.setInterval(() => {
              if (this.connectionState !== TI.CONNECTED)
                return;
              const e4 = this.uploadCache.splice(0, 1)[0];
              0 === this.uploadCache.length && (window.clearInterval(this.uploadCacheInterval), this.uploadCacheInterval = void 0), this.upload(e4._type, e4._message);
            }, DC("UPLOAD_CACHE_INTERVAL") || 2e3));
          }
        }
        send(e2, t2) {
          const i2 = { _type: e2, _message: t2 };
          this.websocket.sendMessage(i2);
        }
        init(e2, t2) {
          return this.initError = void 0, this.multiIpOption = void 0, this.joinResponse = void 0, this.reconnectToken = void 0, this.openConnectionTime = void 0, new tT((t3, i2) => {
            this.once(gI.WS_CONNECTED, () => t3(this.joinResponse)), this.once(gI.WS_CLOSED, () => i2(this.initError || new VI(xT.WS_ABORT))), this.connectionState = TI.CONNECTING, this.websocket.init(e2).catch(i2), this.wsInflateDataTimer && window.clearInterval(this.wsInflateDataTimer), this.wsInflateDataTimer = window.setInterval(() => {
              this.handleWsInflateData();
            }, 2e4);
          });
        }
        close(e2) {
          this.pingpongTimer && (this.pingpongTimeoutCount = 0, window.clearInterval(this.pingpongTimer), this.pingpongTimer = void 0), this.wsInflateDataTimer && (this.handleWsInflateData(), window.clearInterval(this.wsInflateDataTimer), this.wsInflateDataTimer = void 0), this.reconnectToken = void 0, this.joinResponse = void 0, this._disconnectedReason = e2 || cg.LEAVE, this.connectionState = TI.CLOSED, YC.debug("[".concat(this.clientId, "] ") + "will close websocket in signal"), this.websocket.close(), e2 === cg.FALLBACK && (this.websocket.removeAllListeners(), this.websocket = new Zv("gateway-".concat(this.clientId), this.spec.retryConfig, true, DC("JOIN_GATEWAY_USE_DUAL_DOMAIN"), DC("JOIN_GATEWAY_USE_443PORT_ONLY"), this.store), this.handleWebsocketEvents());
        }
        async join() {
          if (!this.joinResponse) {
            this.emit(gI.ABORT_P2P_EXECUTION);
            const e2 = await fg(this, gI.REQUEST_JOIN_INFO), t2 = await this.request(SI.JOIN, e2);
            if (!t2)
              return this.emit(gI.REPORT_JOIN_GATEWAY, iv.TIMEOUT, this.url || ""), false;
            this.joinResponse = t2, this.emit(gI.JOIN_RESPONSE, this.joinResponse), this.reconnectToken = this.joinResponse.rejoin_token;
          }
          return this.connectionState = TI.CONNECTED, this.pingpongTimer && window.clearInterval(this.pingpongTimer), this.pingpongTimer = window.setInterval(this.handlePingPong.bind(this), 3e3), true;
        }
        async rejoin() {
          if (!this.reconnectToken)
            throw new VI(xT.UNEXPECTED_ERROR, "can not rejoin, no rejoin token");
          const e2 = Sg(this, gI.REQUEST_REJOIN_INFO);
          e2.token = this.reconnectToken;
          const t2 = await this.request(SI.REJOIN, e2);
          return !!t2 && (this.connectionState = TI.CONNECTED, this.pingpongTimer && window.clearInterval(this.pingpongTimer), this.pingpongTimer = window.setInterval(this.handlePingPong.bind(this), 3e3), t2.peers && t2.peers.forEach((e3) => {
            this.emit(CI.ON_USER_ONLINE, { uid: e3.uid }), e3.audio && this.emit(CI.ON_ADD_AUDIO_STREAM, { uid: e3.uid, uint_id: e3.uint_id, audio: true, ssrcId: e3.audio_ssrc }), e3.video && this.emit(CI.ON_ADD_VIDEO_STREAM, { uid: e3.uid, uint_id: e3.uint_id, video: true, ssrcId: e3.video_ssrc }), e3.audio_mute ? this.emit(CI.MUTE_AUDIO, { uid: e3.uid }) : this.emit(CI.UNMUTE_AUDIO, { uid: e3.uid }), e3.video_mute ? this.emit(CI.MUTE_VIDEO, { uid: e3.uid }) : this.emit(CI.UNMUTE_VIDEO, { uid: e3.uid }), e3.audio_enable_local ? this.emit(CI.ENABLE_LOCAL_AUDIO, { uid: e3.uid }) : this.emit(CI.DISABLE_LOCAL_AUDIO, { uid: e3.uid }), e3.video_enable_local ? this.emit(CI.ENABLE_LOCAL_VIDEO, { uid: e3.uid }) : this.emit(CI.DISABLE_LOCAL_VIDEO, { uid: e3.uid }), e3.audio || e3.video || this.emit(CI.ON_REMOVE_STREAM, { uid: e3.uid, uint_id: e3.uint_id });
          }), true);
        }
        reconnect(e2, t2) {
          this.pingpongTimer && (this.pingpongTimeoutCount = 0, window.clearInterval(this.pingpongTimer), this.pingpongTimer = void 0), this.websocket.reconnect(e2, t2);
        }
        handleNotification(e2) {
          YC.debug("[".concat(this.clientId, "] receive notification: "), e2);
          const t2 = Fv(e2.code);
          if ("success" !== t2.action) {
            if ("failed" !== t2.action)
              return "quit" === t2.action ? ("ERR_REPEAT_JOIN_CHANNEL" === t2.desc && this.close(cg.UID_BANNED), void this.close()) : void this.reconnect(t2.action, lg.SERVER_ERROR);
            YC.error("[".concat(this.clientId, "] ignore error: "), t2.desc);
          }
        }
        handlePingPong() {
          if (!this.websocket || "connected" !== this.websocket.state)
            return;
          this.pingpongTimeoutCount > 0 && this.rttRolling.add(3e3), this.pingpongTimeoutCount += 1;
          const e2 = DC("PING_PONG_TIME_OUT"), t2 = Date.now();
          this.pingpongTimeoutCount >= e2 && (YC.warning("[".concat(this.clientId, "] PING-PONG Timeout. Last Socket Message: ").concat(t2 - this.lastMsgTime, "ms")), t2 - this.lastMsgTime > DC("WEBSOCKET_TIMEOUT_MIN")) ? this.reconnect("retry", lg.TIMEOUT) : this.request(SI.PING, void 0, true).then(() => {
            this.pingpongTimeoutCount = 0;
            const e3 = Date.now() - t2;
            this.rttRolling.add(e3), DC("REPORT_STATS") && this.send(SI.PING_BACK, { pingpongElapse: e3 });
          }).catch((e3) => {
          });
        }
        handleWsInflateData() {
          const { wsInflateLength: e2, wsDeflateLength: t2 } = this.websocket.getWsInflateData();
          0 !== e2 && 0 !== t2 && this.upload(RI.WS_INFLATE_DATA_LENGTH, { ws_deflate_length: t2, ws_inflate_length: e2 });
        }
        handleWebsocketEvents() {
          this.websocket.on(yI.RECONNECT_WAITTING_FINISH, (e2) => {
            this.emit(gI.WS_RECONNECT_WAITTING_FINISH, e2);
          }), this.websocket.on(yI.RECONNECT_CREATE_CONNECTION, (e2) => {
            this.emit(gI.WS_RECONNECT_CREATE_CONNECTION, e2);
          }), this.websocket.on(yI.ON_MESSAGE, this.onWebsocketMessage), this.websocket.on(yI.CLOSED, () => {
            this.connectionState = TI.CLOSED;
          }), this.websocket.on(yI.FAILED, () => {
            this._disconnectedReason = cg.NETWORK_ERROR, this.connectionState = TI.CLOSED;
          }), this.websocket.on(yI.RECONNECTING, (e2) => {
            this._websocketReconnectReason = e2, this.joinResponse = void 0, this.connectionState === TI.CONNECTED ? this.connectionState = TI.RECONNECTING : this.connectionState = TI.CONNECTING;
          }), this.websocket.on(yI.WILL_RECONNECT, (e2, t2, i2) => {
            const n2 = Sg(this, gI.IS_P2P_DISCONNECTED), s2 = n2 || "retry" !== e2;
            n2 && "retry" === e2 && (YC.debug("".concat(this.clientId, " reconnect mode is retry, but p2p lost, change to tryNext")), e2 = "tryNext", t2 = iv.P2P_DISCONNECTED), s2 && (YC.debug("".concat(this.clientId, " will renewSession, reconnect mode: ").concat(e2)), this.emit(gI.REPORT_JOIN_GATEWAY, t2 || iv.UNKNOWN_REASON, this.url || ""), this.reconnectToken = void 0, this.emit(gI.NEED_RENEW_SESSION), this.emit(gI.DISCONNECT_P2P)), i2(e2);
          }), this.websocket.on(yI.CONNECTED, () => {
            this.openConnectionTime = Date.now(), this.reconnectToken ? this.rejoin().catch((e2) => {
              YC.warning("[".concat(this.clientId, "] rejoin failed ").concat(e2)), this.reconnect("tryNext", lg.SERVER_ERROR);
            }) : this.join().catch((e2) => {
              if (this.emit(gI.REPORT_JOIN_GATEWAY, e2.message || e2.code || iv.UNKNOWN_REASON, this.url || ""), e2 instanceof VI && e2.code === xT.UNEXPECTED_RESPONSE && e2.data.code === fI.ERR_NO_AUTHORIZED)
                return YC.warning("[".concat(this.clientId, "] reconnect no authorized, recover")), void this.reconnect("recover", lg.SERVER_ERROR);
              YC.error("[".concat(this.clientId, "] join gateway request failed"), e2.toString()), this.spec.forceWaitGatewayResponse ? this.reconnect("tryNext", lg.SERVER_ERROR) : (this.initError = e2, this.close());
            });
          }), this.websocket.on(yI.REQUEST_NEW_URLS, (e2, t2) => {
            fg(this, gI.REQUEST_RECOVER, this.multiIpOption).then(e2).catch(t2);
          }), this.websocket.on(yI.ON_TOKEN_PRIVILEGE_DID_EXPIRE, () => {
            this.emit(CI.ON_TOKEN_PRIVILEGE_DID_EXPIRE);
          });
        }
      }
      var ty = "	\n\v\f\r Â áââââââââââââ¯âã\u2028\u2029\uFEFF", iy = z, ny = pn, sy = ty, ry = d("".replace), oy = RegExp("^[" + sy + "]+"), ay = RegExp("(^|[^" + sy + "])[" + sy + "]+$"), cy = function(e2) {
        return function(t2) {
          var i2 = ny(iy(t2));
          return 1 & e2 && (i2 = ry(i2, oy, "")), 2 & e2 && (i2 = ry(i2, ay, "$1")), i2;
        };
      }, dy = { start: cy(1), end: cy(2), trim: cy(3) }, ly = Jd.PROPER, uy = n, hy = ty, py = dy.trim;
      wi({ target: "String", proto: true, forced: function(e2) {
        return uy(function() {
          return !!hy[e2]() || "âÂá " !== "âÂá "[e2]() || ly && hy[e2].name !== e2;
        });
      }("trim") }, { trim: function() {
        return py(this);
      } });
      var _y, Ey, my = Ji("String").trim, fy = l, Ty = my, gy = String.prototype, Sy = i(function(e2) {
        var t2 = e2.trim;
        return "string" == typeof e2 || e2 === gy || fy(gy, e2) && t2 === gy.trim ? Ty : t2;
      });
      function Ry(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function Cy(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? Ry(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : Ry(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      function Iy(e2) {
        return e2.match(/^[\.\:\d]+$/) ? "".concat(e2.replace(/[^\d]/g, "-"), ".").concat(DC("TURN_DOMAIN")) : (YC.info("Unidentified as ip: ".concat(e2, ", use as host")), e2);
      }
      function vy(e2, t2) {
        e2.addresses || (e2.addresses = []);
        const i2 = function(e3, t3) {
          if (DC("CONNECT_GATEWAY_WITHOUT_DOMAIN"))
            return e3.map((e4) => {
              let { ip: t4, port: i4 } = e4;
              return { address: "".concat(t4, ":").concat(i4) };
            });
          const i3 = DC("GATEWAY_DOMAINS");
          let n3 = i3[1] && bn(t3).call(t3, i3[1]) ? 1 : 0;
          return e3.map((e4) => {
            let { domain_prefix: t4, port: s3, ip: r2 } = e4;
            if (t4)
              return { address: "".concat(t4, ".").concat(i3[n3++ % i3.length], ":").concat(s3) };
            const o2 = /^[\.\:\d]+$/.test(r2), a2 = o2 ? "".concat(r2.replace(/[^\d]/g, "-"), ".").concat(i3[n3++ % i3.length], ":").concat(s3) : "".concat(r2, ":").concat(s3);
            return o2 || YC.info("Unidentified as ip: ".concat(r2, ", use as host")), { ip: r2, port: s3, address: a2 };
          });
        }(e2.addresses, t2), n2 = Array.isArray(e2.detail) && e2.detail[18];
        if (n2 && "string" == typeof n2) {
          const e3 = n2.split(";");
          for (let t3 = 0; t3 < e3.length; t3++) {
            var s2;
            const n3 = Sy(s2 = e3[t3]).call(s2);
            i2[t3] && n3 && (i2[t3].ip6 = n3);
          }
        }
        return { gatewayAddrs: i2, uid: e2.uid, cid: e2.cid, cert: e2.cert, vid: e2.detail && e2.detail[8], uni_lbs_ip: e2.detail && e2.detail[1], res: e2, csIp: e2.detail && e2.detail[502] };
      }
      function yy(e2) {
        return "number" == typeof e2 ? e2 : e2.exact || e2.ideal || e2.max || e2.min || 0;
      }
      function Ay(e2) {
        const t2 = e2._encoderConfig;
        if (!t2)
          return {};
        const i2 = { resolution: t2.width && t2.height ? "".concat(yy(t2.width), "x").concat(yy(t2.height)) : void 0, maxVideoBW: t2.bitrateMax, minVideoBW: t2.bitrateMin };
        return "number" == typeof t2.frameRate ? (i2.maxFrameRate = t2.frameRate, i2.minFrameRate = t2.frameRate) : t2.frameRate && (i2.maxFrameRate = t2.frameRate.max || t2.frameRate.ideal || t2.frameRate.exact || t2.frameRate.min, i2.minFrameRate = t2.frameRate.min || t2.frameRate.ideal || t2.frameRate.exact || t2.frameRate.max), i2;
      }
      function by(e2) {
        return e2 >= 0 && e2 < 0.17 ? 1 : e2 >= 0.17 && e2 < 0.36 ? 2 : e2 >= 0.36 && e2 < 0.59 ? 3 : e2 >= 0.59 && e2 <= 1 ? 4 : e2 > 1 ? 5 : 0;
      }
      function wy(e2, t2) {
        let i2, n2, s2;
        switch (t2) {
          case _y.CHOOSE_SERVER:
            n2 = 4096, s2 = "choose server";
            break;
          case _y.CLOUD_PROXY:
            n2 = 1048576, s2 = "proxy";
            break;
          case _y.CLOUD_PROXY_5:
            n2 = 4194304, s2 = "proxy5";
            break;
          case _y.CLOUD_PROXY_FALLBACK:
            n2 = 4194310, s2 = "proxy fallback";
            break;
          default:
            throw new VI(xT.UNEXPECTED_ERROR, "multi unlibs response transformer get unknown service id", { csIp: e2.detail && e2.detail[502], retry: false });
        }
        if (e2.response_body.forEach((t3) => {
          t3.buffer && t3.buffer.flag === n2 && (i2 = { code: t3.buffer.code, addresses: (t3.buffer.edges_services || []).map((e3) => Cy(Cy({}, e3), {}, { ticket: t3.buffer.cert })), server_ts: e2.enter_ts, uid: t3.buffer.uid, cid: t3.buffer.cid, cname: t3.buffer.cname, detail: Cy(Cy({}, t3.buffer.detail), e2.detail), flag: t3.buffer.flag, opid: e2.opid, cert: t3.buffer.cert });
        }), !i2)
          throw new VI(xT.MULTI_UNILBS_RESPONSE_ERROR, "cannot parse response ".concat(s2, " from multi unilbs response"), { csIp: e2.detail && e2.detail[502] });
        return i2;
      }
      async function Oy(e2, t2) {
        return await tT.all(e2.addresses.map(async (e3) => ({ address: Iy(e3.ip), tcpport: e3.port, udpport: e3.port, username: t2 && DC("ENCRYPT_PROXY_USERNAME_AND_PSW") && window.isSecureContext ? t2.toString() : aI.username, password: t2 && DC("ENCRYPT_PROXY_USERNAME_AND_PSW") && window.isSecureContext ? await tg(t2.toString()) : aI.password })));
      }
      function Ny(e2, t2) {
        const i2 = t2._videoHeight || t2.getMediaStreamTrack(true).getSettings().height;
        return i2 ? Math.max(i2 / yy(e2.height), 1) : (YC.warning("can't get ori-track's height, default scale down 4 times for low stream"), 4);
      }
      function Dy(e2) {
        let { candidateType: t2, relayProtocol: i2, type: n2, address: s2, port: r2, protocol: o2 } = e2;
        return "local-candidate" === n2 ? { candidateType: t2, relayProtocol: i2, protocol: o2 } : { candidateType: t2, relayProtocol: i2, address: s2, port: r2, protocol: o2 };
      }
      function Py(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      !function(e2) {
        e2[e2.CHOOSE_SERVER = 11] = "CHOOSE_SERVER", e2[e2.CLOUD_PROXY = 18] = "CLOUD_PROXY", e2[e2.CLOUD_PROXY_5 = 20] = "CLOUD_PROXY_5", e2[e2.CLOUD_PROXY_FALLBACK = 26] = "CLOUD_PROXY_FALLBACK";
      }(_y || (_y = {}));
      class Ly extends ig {
        get url() {
          return this._url ? this._url : null;
        }
        get reconnectMode() {
          return this._reconnectMode;
        }
        set reconnectMode(e2) {
          var t2;
          bn(t2 = ["tryNext", "recover"]).call(t2, e2) && this.resetReconnectCount(e2), this._reconnectMode = e2;
        }
        get state() {
          return this._state;
        }
        set state(e2) {
          e2 !== this._state && (this._state = e2, "reconnecting" === this._state ? this.emit(Iv.RECONNECTING, this.reconnectReason) : "connected" === this._state ? this.emit(Iv.CONNECTED) : "closed" === this._state ? this.emit(Iv.CLOSED) : "failed" === this._state && this.emit(Iv.FAILED));
        }
        constructor(e2, t2, i2, n2) {
          super(), nh(this, "connectionID", 0), nh(this, "currentURLIndex", 0), nh(this, "reconnectReason", void 0), nh(this, "_reconnectMode", "tryNext"), nh(this, "_name", void 0), nh(this, "_state", "closed"), nh(this, "_retryConfig", void 0), nh(this, "_reconnectCount", 0), nh(this, "_forceCloseTimeout", 5e3), nh(this, "_onlineReconnectListener", void 0), nh(this, "_closeEstablishingTransmitter", () => {
          }), nh(this, "_store", void 0), nh(this, "_joinChannelServiceRecordIndex", void 0), nh(this, "_useCompress", void 0), nh(this, "_inflateLength", 0), nh(this, "_deflateLength", 0), this._store = n2, this._name = e2, this._retryConfig = function(e3) {
            for (var t3 = 1; t3 < arguments.length; t3++) {
              var i3 = null != arguments[t3] ? arguments[t3] : {};
              t3 % 2 ? Py(Object(i3), true).forEach(function(t4) {
                nh(e3, t4, i3[t4]);
              }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(i3)) : Py(Object(i3)).forEach(function(t4) {
                Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(i3, t4));
              });
            }
            return e3;
          }({}, t2), this._useCompress = i2;
        }
        resetReconnectCount(e2) {
          YC.debug("".concat(this._name, " reset reconnect count, reason: ").concat(e2)), this._reconnectCount = 0;
        }
        close(e2, t2) {
          if (this.currentURLIndex = 0, this.resetReconnectCount("close"), this._reconnectInterrupter && this._reconnectInterrupter(), this._transmitter) {
            this._transmitter.onclose = null, this._transmitter.onopen = null, this._transmitter.onmessage = null;
            const e3 = this._transmitter;
            t2 ? setTimeout(() => e3.close(), 500) : e3.close(), this._transmitter = void 0;
          }
          this.state = e2 ? "failed" : "closed", this._closeEstablishingTransmitter && this._closeEstablishingTransmitter();
        }
        reconnect(e2, t2) {
          if (!this._transmitter)
            return void YC.warning("[".concat(this._name, "] can not reconnect, no websocket"));
          var i2;
          (void 0 !== e2 && (this.reconnectMode = e2), YC.debug("[".concat(this._name, "] reconnect is triggered initiative")), "number" == typeof this._joinChannelServiceRecordIndex) && (null === (i2 = this._store) || void 0 === i2 || i2.recordJoinChannelService({ status: "error", errors: [new Error(t2)] }, this._joinChannelServiceRecordIndex));
          const n2 = this._transmitter.onclose;
          this._transmitter.onclose = null, this._transmitter.close(), n2 && n2.bind(this._transmitter)({ code: 9999, reason: t2 });
        }
        getInflateData() {
          const e2 = this._inflateLength, t2 = this._deflateLength;
          return this.clearInflateData(), { inflateLength: e2, deflateLength: t2 };
        }
        setInflateData(e2) {
          this._deflateLength = this._deflateLength + e2.originLength, this._inflateLength = this._inflateLength + e2.compressedLength;
        }
        clearInflateData() {
          this._inflateLength = 0, this._deflateLength = 0;
        }
      }
      !function(e2) {
        e2[e2.Default = 0] = "Default", e2[e2.Ack = 1] = "Ack";
      }(Ey || (Ey = {}));
      class ky {
        constructor(e2, t2, i2) {
          nh(this, "version", 1), nh(this, "initialRTO", void 0), nh(this, "maxBatchAckCount", void 0), nh(this, "maxRTO", void 0), nh(this, "initialRTT", void 0), nh(this, "ID", void 0), nh(this, "rtt", void 0), nh(this, "packetNumber", 1), nh(this, "rtoRatioMap", /* @__PURE__ */ new Map()), nh(this, "timeoutMap", /* @__PURE__ */ new Map()), nh(this, "unorderedPacketQueue", []), nh(this, "batchAckPacketQueue", []), nh(this, "lastOrderedPacketNumber", 0), nh(this, "batchAckTimer", void 0), nh(this, "sendImpl", void 0), nh(this, "receiveImpl", void 0), this.sendImpl = e2, this.receiveImpl = t2, this.ID = xg(7, "transmitter-"), this.initialRTO = void 0 !== (null == i2 ? void 0 : i2.initialRTO) ? i2.initialRTO : DC("TRANSMITTER_INITIAL_RTO"), this.initialRTT = void 0 !== (null == i2 ? void 0 : i2.initialRTT) ? i2.initialRTT : DC("TRANSMITTER_INITIAL_RTT"), this.rtt = void 0 !== (null == i2 ? void 0 : i2.initialRTT) ? i2.initialRTT : DC("TRANSMITTER_INITIAL_RTT"), this.maxBatchAckCount = void 0 !== (null == i2 ? void 0 : i2.maxBatchAckCount) ? i2.maxBatchAckCount : DC("TRANSMITTER_MAX_BATCH_ACK_COUNT"), this.maxRTO = void 0 !== (null == i2 ? void 0 : i2.maxRTO) ? i2.maxRTO : DC("TRANSMITTER_MAX_RTO");
        }
        packetize(e2, t2) {
          return { type: Ey.Default, version: this.version, packetNumber: t2, payload: e2 };
        }
        serialize(e2) {
          switch (e2.type) {
            case Ey.Default: {
              let t2;
              if ("string" == typeof e2.payload) {
                t2 = new TextEncoder().encode(e2.payload);
              } else
                t2 = e2.payload;
              const i2 = new ArrayBuffer(t2.length + 15), n2 = new DataView(i2);
              n2.setUint16(0, e2.version), n2.setUint8(2, e2.type), n2.setUint32(3, e2.packetNumber), JT(n2, 7, BigInt(e2.sendTs));
              return new Uint8Array(n2.buffer).set(t2, 15), i2;
            }
            case Ey.Ack: {
              const t2 = new ArrayBuffer(16), i2 = new DataView(t2);
              return i2.setUint16(0, e2.version), i2.setUint8(2, e2.type), i2.setUint32(3, e2.maxAckPacketNumber), i2.setUint8(7, e2.shift), JT(i2, 8, BigInt(e2.ackSendTs)), t2;
            }
          }
        }
        deserialize(e2) {
          const t2 = new DataView(e2), i2 = t2.getUint16(0), n2 = t2.getUint8(2);
          switch (n2) {
            case Ey.Default: {
              const s2 = t2.getUint32(3), r2 = qT(t2, 7), o2 = e2.slice(15), a2 = new TextDecoder().decode(o2);
              return { version: i2, type: n2, packetNumber: s2, sendTs: Number(r2), payload: a2 };
            }
            case Ey.Ack: {
              const e3 = t2.getUint32(3), s2 = t2.getUint8(7), r2 = qT(t2, 8);
              return { version: i2, type: n2, maxAckPacketNumber: e3, shift: s2, ackSendTs: Number(r2) };
            }
            default:
              throw YC.error("[".concat(this.ID, "] Unrecognized packet type ").concat(n2)), new Error("Unrecognized packet type ".concat(n2));
          }
        }
        sendMessage(e2) {
          const t2 = this.packetize(e2, this.packetNumber);
          this.packetNumber = 4294967295 === this.packetNumber ? 1 : this.packetNumber + 1;
          const i2 = this.calculateRTO(t2), n2 = window.setTimeout(() => {
            this.resendMessage(t2);
          }, i2);
          this.timeoutMap.set(t2.packetNumber, n2), this.sendPacket(t2);
        }
        onData(e2) {
          const t2 = this.deserialize(e2);
          t2.type === Ey.Default ? this.ack(t2) : t2.type === Ey.Ack && (this.updateRTT(t2, Math.round(performance.now())), this.clearRTO(t2));
        }
        close() {
          this.rtt = this.initialRTT, this.packetNumber = 1, Array.from(this.timeoutMap.entries()).forEach((e2) => {
            let [t2, i2] = e2;
            window.clearTimeout(i2);
          }), this.timeoutMap = /* @__PURE__ */ new Map(), this.rtoRatioMap = /* @__PURE__ */ new Map(), this.unorderedPacketQueue = [], this.batchAckPacketQueue = [], this.lastOrderedPacketNumber = 0, void 0 !== this.batchAckTimer && window.clearTimeout(this.batchAckTimer);
        }
        resendMessage(e2) {
          const t2 = this.calculateRTO(e2), i2 = window.setTimeout(() => {
            this.resendMessage(e2);
          }, t2);
          this.timeoutMap.set(e2.packetNumber, i2), this.sendPacket(e2);
        }
        calculateRTO(e2) {
          const t2 = this.rtoRatioMap.get(e2.packetNumber);
          if (void 0 === t2)
            return this.rtoRatioMap.set(e2.packetNumber, 1), this.initialRTO;
          {
            const i2 = 9 * this.rtt / 8 * t2;
            return this.rtoRatioMap.set(e2.packetNumber, t2 + 1), i2 > this.maxRTO ? this.maxRTO : i2;
          }
        }
        updateRTT(e2, t2) {
          const i2 = e2.ackSendTs;
          this.rtt = this.rtt * (7 / 8) + (t2 - i2 - this.rtt) / 8;
        }
        ack(e2) {
          if (e2.packetNumber === this.lastOrderedPacketNumber + 1)
            for (this.batchAckPacketQueue.length >= this.maxBatchAckCount && this.batchAck(), this.batchAckTimer ? this.batchAckPacketQueue.push(e2) : (this.batchAckPacketQueue.push(e2), this.batchAckTimer = window.setTimeout(() => {
              this.batchAck();
            }, this.rtt / 8)), this.lastOrderedPacketNumber += 1, this.receiveImpl(e2.payload); ; ) {
              const e3 = this.unorderedPacketQueue[0];
              if (!e3) {
                this.unorderedPacketQueue.shift();
                break;
              }
              this.batchAckTimer && this.batchAck(), this.receiveImpl(e3.payload), this.unorderedPacketQueue.shift(), this.lastOrderedPacketNumber += 1;
            }
          else if (e2.packetNumber <= this.lastOrderedPacketNumber) {
            const t2 = { ackSendTs: e2.sendTs, maxAckPacketNumber: e2.packetNumber, shift: 0, type: Ey.Ack, version: this.version };
            this.sendPacket(t2);
          } else if (e2.packetNumber > this.lastOrderedPacketNumber) {
            this.unorderedPacketQueue[e2.packetNumber - this.lastOrderedPacketNumber - 2] = e2;
            const t2 = { ackSendTs: e2.sendTs, maxAckPacketNumber: e2.packetNumber, shift: 0, type: Ey.Ack, version: this.version };
            this.sendPacket(t2);
          }
        }
        batchAck() {
          window.clearTimeout(this.batchAckTimer), this.batchAckTimer = void 0;
          const e2 = { ackSendTs: this.batchAckPacketQueue[this.batchAckPacketQueue.length - 1].sendTs, maxAckPacketNumber: this.batchAckPacketQueue[this.batchAckPacketQueue.length - 1].packetNumber, shift: this.batchAckPacketQueue.length - 1, type: Ey.Ack, version: this.version };
          this.sendPacket(e2), this.batchAckPacketQueue = [];
        }
        sendPacket(e2) {
          e2.type === Ey.Default && (e2.sendTs = Math.round(performance.now()));
          const t2 = this.serialize(e2);
          this.sendImpl(t2);
        }
        clearRTO(e2) {
          for (let t2 = e2.maxAckPacketNumber - e2.shift; t2 <= e2.maxAckPacketNumber; t2++) {
            const e3 = this.timeoutMap.get(t2);
            void 0 !== e3 && window.clearTimeout(e3), this.timeoutMap.delete(t2), this.rtoRatioMap.delete(t2);
          }
        }
      }
      class My extends Ly {
        constructor(e2, t2) {
          super(e2, t2, arguments.length > 2 && void 0 !== arguments[2] && arguments[2], arguments.length > 3 ? arguments[3] : void 0), nh(this, "_initMutex", void 0), nh(this, "_reconnectInterrupter", void 0), nh(this, "_url", void 0), nh(this, "_transmitter", void 0), nh(this, "_addresses", void 0), nh(this, "_reliableTransmission", void 0), this._initMutex = new Yg("datachannel");
          const { timeout: i2, timeoutFactor: n2 } = t2, s2 = Math.max(300, Math.floor(3 * i2 / 5)), r2 = Math.max(1.2, Math.floor(8 * n2) / 10);
          ug.ONLINE && (this._retryConfig.timeout = s2, this._retryConfig.timeoutFactor = r2), Rg.on(hg.NETWORK_STATE_CHANGE, (e3, t3) => {
            e3 !== t3 && (this.resetReconnectCount("network state change: ".concat(t3, " -> ").concat(e3)), e3 === ug.ONLINE ? (this._retryConfig.timeout = s2, this._retryConfig.timeoutFactor = r2) : (this._retryConfig.timeout = i2, this._retryConfig.timeoutFactor = n2));
          });
        }
        getConnection() {
          if (this._reliableTransmission)
            return this._reliableTransmission;
        }
        async init(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 5e3;
          this._forceCloseTimeout = t2;
          const i2 = (t3, i3) => {
            this._addresses = e2, this.currentURLIndex = this._addresses.findIndex((e3) => e3.fingerprint || DC("FINGERPRINT"));
            const n2 = this._addresses[this.currentURLIndex];
            this.state = "connecting", this.createTransmitterConnection(n2).then(t3).catch(i3), this.once(Iv.CLOSED, () => i3(new VI(xT.WS_DISCONNECT))), this.once(Iv.CONNECTED, () => t3());
          };
          return this._initMutex.lock().then((e3) => new tT((e4, t3) => {
            i2(e4, t3);
          }).then(() => {
            e3();
          }).catch(() => {
            e3();
          }));
        }
        sendMessage(e2) {
          let t2 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
          if (!this._transmitter || !this._reliableTransmission)
            throw new VI(xT.WS_ABORT, "datachannel is not ready");
          try {
            t2 || (e2 = JSON.stringify(e2)), this._reliableTransmission.sendMessage(e2);
          } catch (e3) {
            throw new VI(xT.WS_ERR, "send datachannel signal message error" + e3.toString());
          }
        }
        unbindDcCloseEventListener() {
          this._transmitter && (this._transmitter.onclose = null);
        }
        sendMessageWithJSON(e2) {
          const t2 = JSON.stringify(e2);
          return { compressed: t2, compressedLength: t2.length, origin: e2 };
        }
        sendMessageWithUint8Array(e2) {
          return { compressed: e2, compressedLength: e2.byteLength, origin: e2 };
        }
        createTransmitterConnection(e2) {
          return this.connectionID += 1, this._joinChannelServiceRecordIndex = void 0, this._url = "dc://".concat(e2.ip, ":").concat(e2.port), new tT((t2, i2) => {
            var n2;
            const s2 = () => {
              YC.debug("[".concat(this._name, "] datachannel opened:"), this._url), this.reconnectMode = "retry", this.state = "connected", this.resetReconnectCount("opened"), t2();
            }, r2 = async (e3) => {
              var n3;
              if (null === (n3 = this._closeEstablishingTransmitter) || void 0 === n3 || n3.call(this), YC.debug("[".concat(this._name, "] datachannel close ").concat(this._url, ", code: ").concat(e3.code, ", reason: ").concat(e3.reason, ", current mode: ").concat(this.reconnectMode)), this._reconnectCount < this._retryConfig.maxRetryCount) {
                "connected" === this.state && (this.reconnectReason = e3.reason, this.state = "reconnecting");
                const n4 = gg(this, Iv.WILL_RECONNECT, this.reconnectMode) || this.reconnectMode, s3 = await this.reconnectWithAction(n4);
                if ("closed" === this.state)
                  return void YC.debug("[".concat(this.connectionID, "] dc is closed, no need to reconnect"));
                if (!s3)
                  return i2(new VI(xT.WS_DISCONNECT, "datachannel reconnect failed: ".concat(e3.code))), void this.close(true);
                t2();
              } else
                i2(new VI(xT.WS_DISCONNECT, "datachannel close: ".concat(e3.code))), this.close();
            }, o2 = (e3) => {
              var t3;
              null === (t3 = this._reliableTransmission) || void 0 === t3 || t3.onData(e3.data);
            };
            this._transmitter && (this._transmitter.onclose = null, this._transmitter.close()), this._reliableTransmission && (this._reliableTransmission.close(), this._reliableTransmission = void 0), YC.debug("[".concat(this._name, "] start connect, address: ").concat(JSON.stringify(e2)));
            const a2 = null === (n2 = this._store) || void 0 === n2 ? void 0 : n2.recordJoinChannelService({ startTs: Date.now(), status: "pending", service: "gateway" }), c2 = Date.now();
            fg(this, Iv.TO_CONNECT_DATACHANNEL, e2).then((e3) => {
              var t3, i3;
              if (!e3)
                throw new Error("transmissonInfo not exist yet");
              const { transmitter: n3, close: d2 } = e3;
              this._transmitter = n3, null === (t3 = this._store) || void 0 === t3 || t3.signalChannelOpen();
              const l2 = Date.now() - c2;
              YC.debug("[choose dc] dc open cost ".concat(l2, "ms"));
              this._reliableTransmission = new ky((e4) => {
                var t4;
                this._transmitter && "open" === this._transmitter.readyState && (null === (t4 = this._transmitter) || void 0 === t4 || t4.send(e4));
              }, (e4) => {
                "string" == typeof e4 && this.emit(Iv.ON_MESSAGE, e4);
              }), this._closeEstablishingTransmitter = () => {
                var e4;
                null === (e4 = this._reliableTransmission) || void 0 === e4 || e4.close(), this._reliableTransmission = void 0, d2();
              }, s2 && s2(), n3.onclose = r2, n3.onmessage = o2, null === (i3 = this._store) || void 0 === i3 || i3.recordJoinChannelService({ endTs: Date.now(), status: "success" }, a2), this._joinChannelServiceRecordIndex = a2;
            }).catch((e3) => {
              var t3;
              if (null === (t3 = this._store) || void 0 === t3 || t3.recordJoinChannelService({ endTs: Date.now(), status: e3 instanceof VI && e3.code === xT.WS_ABORT ? "aborted" : "error", errors: [e3] }, a2), "closed" !== this.state) {
                if (e3 instanceof VI && e3.code === xT.WS_ERR) {
                  const t4 = new VI(xT.WS_ERR, "init datachannel failed! Error: ".concat(e3.toString()));
                  return YC.error("[".concat(this._name, "]").concat(t4)), void i2(t4);
                }
                r2 && r2(e3);
              } else
                i2(new VI(xT.WS_DISCONNECT, "datachannel is closed: ".concat(e3.toString())));
            });
          });
        }
        async reconnectWithAction(e2) {
          let t2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          if (this._reconnectCount >= this._retryConfig.maxRetryCount)
            return false;
          if (!this._addresses)
            return false;
          if ("closed" === this.state)
            return false;
          this._onlineReconnectListener || Rg.networkState !== ug.OFFLINE || (this._onlineReconnectListener = Rg.onlineWaiter && Rg.onlineWaiter.then(() => {
            this._onlineReconnectListener = void 0;
          }));
          let i2 = true;
          if (this._reconnectInterrupter = () => {
            i2 = false;
          }, t2) {
            const t3 = zg(this._reconnectCount, this._retryConfig);
            YC.debug("[".concat(this._name, "] wait ").concat(t3, "ms to reconnect datachannel, mode: ").concat(e2)), await tT.race([Ug(t3), this._onlineReconnectListener || new tT(() => {
            })]);
          }
          if ("closed" === this.state || !i2)
            return false;
          this._reconnectCount += 1;
          const n2 = async (e3, t3) => {
            this.emit(Iv.RECONNECT_CREATE_CONNECTION, t3), await this.createTransmitterConnection(e3);
          };
          try {
            if ("retry" === e2) {
              const t3 = this._addresses[this.currentURLIndex];
              this.emit(Iv.RECONNECT_WAITTING_FINISH, e2), await n2(t3, e2);
            } else if ("tryNext" === e2) {
              this.currentURLIndex += 1;
              for (let e3 = this.currentURLIndex; e3 < this._addresses.length; e3++) {
                if (this._addresses[e3].fingerprint || DC("FINGERPRINT")) {
                  this.currentURLIndex = e3;
                  break;
                }
                this.currentURLIndex += 1;
              }
              if (this.currentURLIndex >= this._addresses.length)
                return YC.debug("[".concat(this._name, "] the available addresses are exhausted, change to recover")), await this.reconnectWithAction("recover", false);
              YC.debug("[".concat(this._name, "] datachannel url length: ").concat(this._addresses.length, " current index: ").concat(this.currentURLIndex));
              const t3 = this._addresses[this.currentURLIndex];
              this.emit(Iv.RECONNECT_WAITTING_FINISH, e2), await n2(t3, e2);
            } else
              "recover" === e2 && (YC.debug("[".concat(this._name, "] start to failback to websocket")), this.resetReconnectCount("recover mode"), this.emit(Iv.RECONNECT_WAITTING_FINISH, e2), this.emit(Iv.FAILBACK));
            return true;
          } catch (i3) {
            var s2, r2;
            return YC.error("[".concat(this._name, "] reconnect failed"), i3.toString()), null != i3 && null !== (s2 = i3.data) && void 0 !== s2 && s2.desc && Array.isArray(i3.data.desc) && i3.data.desc.length && bn(r2 = i3.data.desc).call(r2, "dynamic key expired") ? (this.emit(Iv.ON_TOKEN_PRIVILEGE_DID_EXPIRE), false) : await this.reconnectWithAction(e2, t2);
          }
        }
      }
      class Uy extends ig {
        get connectionState() {
          return this._connectionState;
        }
        set connectionState(e2) {
          e2 !== this._connectionState && (this._connectionState = e2, e2 === TI.CONNECTED ? this.emit(gI.WS_CONNECTED) : e2 === TI.RECONNECTING ? this.emit(gI.WS_RECONNECTING, this._websocketReconnectReason) : e2 === TI.CLOSED && this.emit(gI.WS_CLOSED, this._disconnectedReason));
        }
        get currentURLIndex() {
          return this.websocket.currentURLIndex;
        }
        get url() {
          return this.websocket ? this.websocket.url : null;
        }
        get rtt() {
          return this.rttRolling.mean();
        }
        constructor(e2, t2) {
          super(), nh(this, "_disconnectedReason", void 0), nh(this, "_websocketReconnectReason", void 0), nh(this, "_connectionState", TI.CLOSED), nh(this, "reconnectToken", void 0), nh(this, "websocket", void 0), nh(this, "openConnectionTime", void 0), nh(this, "clientId", void 0), nh(this, "lastMsgTime", Date.now()), nh(this, "uploadCache", []), nh(this, "uploadCacheInterval", void 0), nh(this, "rttRolling", new dS(5)), nh(this, "pingpongTimer", void 0), nh(this, "inflateDataTimer", void 0), nh(this, "pingpongTimeoutCount", 0), nh(this, "joinResponse", void 0), nh(this, "multiIpOption", void 0), nh(this, "initError", void 0), nh(this, "spec", void 0), nh(this, "store", void 0), nh(this, "onWebsocketMessage", (e3) => {
            if (e3 instanceof ArrayBuffer)
              return void this.emit(gI.ON_BINARY_DATA, e3);
            const t3 = JSON.parse(e3);
            if (this.lastMsgTime = Date.now(), Object.prototype.hasOwnProperty.call(t3, "_id")) {
              const e4 = "res-@".concat(t3._id);
              this.emit(e4, t3._result, t3._message);
            } else if (Object.prototype.hasOwnProperty.call(t3, "_type") && (this.emit(t3._type, t3._message), t3._type === CI.ON_NOTIFICATION && this.handleNotification(t3._message), t3._type === CI.ON_USER_BANNED))
              switch (t3._message.error_code) {
                case 14:
                  this.close(cg.UID_BANNED);
                  break;
                case 15:
                  this.close(cg.IP_BANNED);
                  break;
                case 16:
                  this.close(cg.CHANNEL_BANNED);
              }
          }), this.clientId = e2.clientId, this.spec = e2, this.store = t2, this.websocket = new My("gateway-".concat(this.clientId), this.spec.retryConfig, true, t2), this.handleWebsocketEvents(), window.addEventListener("offline", () => {
            this.connectionState === TI.CONNECTED && this.reconnect("retry", Cv.OFFLINE);
          });
        }
        async request(e2, t2, i2, n2) {
          const s2 = xg(6, ""), r2 = { _id: s2, _type: e2, _message: t2 }, o2 = this.websocket.connectionID, a2 = () => new tT((t3, i3) => {
            if (this.connectionState === TI.CONNECTED)
              return t3();
            const n3 = () => {
              this.off(gI.WS_CLOSED, s3), t3();
            }, s3 = () => {
              this.off(gI.WS_CONNECTED, n3), i3(new VI(xT.WS_ABORT));
            };
            this.once(gI.WS_CONNECTED, n3), this.once(gI.WS_CLOSED, s3), e2 !== SI.PUBLISH && e2 !== SI.SUBSCRIBE && e2 !== SI.UNSUBSCRIBE && e2 !== SI.UNPUBLISH && e2 !== SI.CONTROL && e2 !== SI.RESTART_ICE || this.once(gI.DISCONNECT_P2P, () => {
              i3(new VI(xT.DISCONNECT_P2P));
            }), e2 !== SI.PUBLISH && e2 !== SI.RESTART_ICE || this.once(gI.ABORT_P2P_EXECUTION, () => {
              i3(new VI(xT.DISCONNECT_P2P));
            });
          });
          if (this.connectionState !== TI.CONNECTING && this.connectionState !== TI.RECONNECTING || e2 === SI.JOIN || e2 === SI.REJOIN || await a2(), e2 === SI.LEAVE && (this.websocket.unbindDcCloseEventListener(), n2 = true), this.websocket.sendMessage(r2, true, false), n2)
            return;
          const c2 = new tT((i3, n3) => {
            let r3 = false;
            const a3 = (n4, s3) => {
              r3 = true, i3({ isSuccess: "success" === n4, message: s3 || {} }), this.off(gI.WS_CLOSED, c3), this.off(gI.WS_RECONNECTING, c3), this.emit(gI.REQUEST_SUCCESS, e2, t2);
            };
            this.once("res-@".concat(s2), a3);
            const c3 = () => {
              n3(new VI(xT.WS_ABORT, "type: ".concat(e2))), this.off(gI.WS_CLOSED, c3), this.off(gI.WS_RECONNECTING, c3), this.off("res-@".concat(s2), a3);
            };
            this.once(gI.WS_CLOSED, c3), this.once(gI.WS_RECONNECTING, c3), Ug(DC("SIGNAL_REQUEST_TIMEOUT")).then(() => {
              this.websocket.connectionID !== o2 || r3 || (YC.warning("dc request timeout, type: ".concat(e2)), this.emit(gI.REQUEST_TIMEOUT, e2, t2));
            });
          });
          let d2 = null;
          try {
            d2 = await c2;
          } catch (n3) {
            if (this.connectionState === TI.CLOSED || e2 === SI.LEAVE)
              throw new VI(xT.WS_ABORT);
            return !this.spec.forceWaitGatewayResponse || i2 ? n3.throw() : e2 === SI.JOIN || e2 === SI.REJOIN ? null : (await a2(), await this.request(e2, t2));
          }
          if (d2.isSuccess)
            return d2.message;
          const l2 = Number(d2.message.error_code || d2.message.code), u2 = Fv(l2), h2 = new VI(xT.UNEXPECTED_RESPONSE, "".concat(u2.desc, ": ").concat(d2.message.error_str), { code: l2, data: d2.message });
          return "success" === u2.action ? d2.message : (YC.warning("[".concat(this.websocket.connectionID, "] unexpected response from type ").concat(e2, ", error_code: ").concat(l2, ", message: ").concat(u2.desc, ", action: ").concat(u2.action)), l2 === fI.ERR_TOO_MANY_BROADCASTERS ? e2 === SI.JOIN || e2 === SI.REJOIN ? (this.initError = h2, this.close(), h2.throw()) : h2.throw() : "failed" === u2.action ? h2.throw() : "quit" === u2.action ? (this.initError = h2, this.close(), h2.throw()) : (l2 === fI.ERR_JOIN_BY_MULTI_IP ? (this.multiIpOption = d2.message.option, YC.warning("[".concat(this.clientId, "] detect multi ip, recover")), this.reconnect("recover", Cv.MULTI_IP)) : this.reconnect(u2.action, Cv.SERVER_ERROR), e2 === SI.JOIN || e2 === SI.REJOIN ? null : await this.request(e2, t2)));
        }
        waitMessage(e2, t2) {
          return new tT((i2) => {
            const n2 = (s2) => {
              (!t2 || t2(s2)) && (this.off(e2, n2), i2(s2));
            };
            this.on(e2, n2);
          });
        }
        uploadWRTCStats(e2) {
          if (!this.store.sessionId)
            return void YC.warn("[".concat(this.clientId, "] no session id when upload wrtc stats"));
          const t2 = { lts: Date.now(), sid: this.store.sessionId, uid: this.store.intUid, stats: e2 };
          this.upload(RI.WRTC_STATS, t2);
        }
        upload(e2, t2) {
          const i2 = { _type: e2, _message: t2 };
          try {
            this.websocket.sendMessage(i2);
          } catch (e3) {
            const t3 = DC("MAX_UPLOAD_CACHE") || 50;
            this.uploadCache.push(i2), this.uploadCache.length > t3 && this.uploadCache.splice(0, 1), this.uploadCache.length > 0 && !this.uploadCacheInterval && (this.uploadCacheInterval = window.setInterval(() => {
              if (this.connectionState !== TI.CONNECTED)
                return;
              const e4 = this.uploadCache.splice(0, 1)[0];
              0 === this.uploadCache.length && (window.clearInterval(this.uploadCacheInterval), this.uploadCacheInterval = void 0), this.upload(e4._type, e4._message);
            }, DC("UPLOAD_CACHE_INTERVAL") || 2e3));
          }
        }
        send(e2, t2) {
          const i2 = { _type: e2, _message: t2 };
          this.websocket.sendMessage(i2);
        }
        init(e2, t2) {
          return this.initError = void 0, this.multiIpOption = void 0, this.joinResponse = void 0, this.reconnectToken = void 0, this.openConnectionTime = void 0, new tT((i2, n2) => {
            this.once(gI.WS_CONNECTED, () => i2(this.joinResponse)), this.once(gI.WS_CLOSED, () => n2(this.initError || new VI(xT.WS_ABORT))), this.connectionState = TI.CONNECTING, this.websocket.init(e2).catch(n2), this.websocket.once(Iv.FAILBACK, () => {
              void 0 === this.openConnectionTime && n2(new VI(xT.INIT_DATACHANNEL_TIMEOUT));
            }), this.inflateDataTimer && window.clearInterval(this.inflateDataTimer), this.inflateDataTimer = window.setInterval(() => {
              this.handleInflateData();
            }, 2e4), setTimeout(() => {
              t2 && void 0 === this.openConnectionTime && (YC.debug("[".concat(this.clientId, "] init datachannel timeout while join with failback to websocket")), n2(new VI(xT.INIT_DATACHANNEL_TIMEOUT)));
            }, DC("DC_JOIN_WITH_FAILBACK"));
          });
        }
        close(e2) {
          this.pingpongTimer && (this.pingpongTimeoutCount = 0, window.clearInterval(this.pingpongTimer), this.pingpongTimer = void 0), this.inflateDataTimer && (this.handleInflateData(), window.clearInterval(this.inflateDataTimer), this.inflateDataTimer = void 0), this.reconnectToken = void 0, this.joinResponse = void 0, this._disconnectedReason = e2 || cg.LEAVE, this.connectionState = TI.CLOSED, YC.debug("[".concat(this.clientId, "] ") + "will close datachannel in signal"), this.websocket.close(), e2 === cg.FALLBACK && (this.websocket.removeAllListeners(), this.websocket = new My("gateway-".concat(this.clientId), this.spec.retryConfig, true, this.store), this.handleWebsocketEvents());
        }
        async join() {
          if (!this.joinResponse) {
            this.emit(gI.ABORT_P2P_EXECUTION);
            const e2 = await fg(this, gI.DATACHANNEL_CONNECTING), t2 = await this.request(SI.JOIN, e2);
            if (!t2)
              return this.emit(gI.REPORT_JOIN_GATEWAY, xT.TIMEOUT, this.url || ""), false;
            this.joinResponse = t2, this.emit(gI.JOIN_RESPONSE, this.joinResponse), this.reconnectToken = this.joinResponse.rejoin_token;
          }
          return this.connectionState = TI.CONNECTED, this.pingpongTimer && window.clearInterval(this.pingpongTimer), this.pingpongTimer = window.setInterval(this.handlePingPong.bind(this), 3e3), true;
        }
        async rejoin() {
          if (!this.reconnectToken)
            throw new VI(xT.UNEXPECTED_ERROR, "can not rejoin, no rejoin token");
          const e2 = Sg(this, gI.REQUEST_REJOIN_INFO);
          e2.token = this.reconnectToken;
          const t2 = await this.request(SI.REJOIN, e2);
          return !!t2 && (this.connectionState = TI.CONNECTED, this.pingpongTimer && window.clearInterval(this.pingpongTimer), this.pingpongTimer = window.setInterval(this.handlePingPong.bind(this), 3e3), t2.peers && t2.peers.forEach((e3) => {
            this.emit(CI.ON_USER_ONLINE, { uid: e3.uid }), e3.audio && this.emit(CI.ON_ADD_AUDIO_STREAM, { uid: e3.uid, uint_id: e3.uint_id, audio: true, ssrcId: e3.audio_ssrc }), e3.video && this.emit(CI.ON_ADD_VIDEO_STREAM, { uid: e3.uid, uint_id: e3.uint_id, video: true, ssrcId: e3.video_ssrc }), e3.audio_mute ? this.emit(CI.MUTE_AUDIO, { uid: e3.uid }) : this.emit(CI.UNMUTE_AUDIO, { uid: e3.uid }), e3.video_mute ? this.emit(CI.MUTE_VIDEO, { uid: e3.uid }) : this.emit(CI.UNMUTE_VIDEO, { uid: e3.uid }), e3.audio_enable_local ? this.emit(CI.ENABLE_LOCAL_AUDIO, { uid: e3.uid }) : this.emit(CI.DISABLE_LOCAL_AUDIO, { uid: e3.uid }), e3.video_enable_local ? this.emit(CI.ENABLE_LOCAL_VIDEO, { uid: e3.uid }) : this.emit(CI.DISABLE_LOCAL_VIDEO, { uid: e3.uid }), e3.audio || e3.video || this.emit(CI.ON_REMOVE_STREAM, { uid: e3.uid, uint_id: e3.uint_id });
          }), true);
        }
        reconnect(e2, t2) {
          this.pingpongTimer && (this.pingpongTimeoutCount = 0, window.clearInterval(this.pingpongTimer), this.pingpongTimer = void 0), this.websocket.reconnect(e2, t2);
        }
        handleNotification(e2) {
          YC.debug("[".concat(this.clientId, "] receive notification: "), e2);
          const t2 = Fv(e2.code);
          if ("success" !== t2.action) {
            if ("failed" !== t2.action)
              return "quit" === t2.action ? ("ERR_REPEAT_JOIN_CHANNEL" === t2.desc && this.close(cg.UID_BANNED), void this.close()) : void this.reconnect(t2.action, Cv.SERVER_ERROR);
            YC.error("[".concat(this.clientId, "] ignore error: "), t2.desc);
          }
        }
        handlePingPong() {
          if (!this.websocket || "connected" !== this.websocket.state)
            return;
          this.pingpongTimeoutCount > 0 && this.rttRolling.add(3e3), this.pingpongTimeoutCount += 1;
          const e2 = DC("PING_PONG_TIME_OUT"), t2 = Date.now();
          this.pingpongTimeoutCount >= e2 && (YC.warning("PINGPONG Timeout. Last Socket Message: ".concat(t2 - this.lastMsgTime, "ms")), t2 - this.lastMsgTime > DC("WEBSOCKET_TIMEOUT_MIN")) ? this.reconnect("retry", Cv.TIMEOUT) : this.request(SI.PING, void 0, true).then(() => {
            this.pingpongTimeoutCount = 0;
            const e3 = Date.now() - t2;
            this.rttRolling.add(e3), DC("REPORT_STATS") && this.send(SI.PING_BACK, { pingpongElapse: e3 });
          }).catch((e3) => {
          });
        }
        handleInflateData() {
          const { inflateLength: e2, deflateLength: t2 } = this.websocket.getInflateData();
          0 !== e2 && 0 !== t2 && this.upload(RI.WS_INFLATE_DATA_LENGTH, { ws_deflate_length: t2, ws_inflate_length: e2 });
        }
        handleWebsocketEvents() {
          this.websocket.on(Iv.RECONNECT_WAITTING_FINISH, (e2) => {
            this.emit(gI.WS_RECONNECT_WAITTING_FINISH, e2);
          }), this.websocket.on(Iv.RECONNECT_CREATE_CONNECTION, (e2) => {
            this.emit(gI.WS_RECONNECT_CREATE_CONNECTION, e2);
          }), this.websocket.on(Iv.ON_MESSAGE, this.onWebsocketMessage), this.websocket.on(Iv.CLOSED, () => {
            this.connectionState = TI.CLOSED;
          }), this.websocket.on(Iv.FAILED, () => {
            this._disconnectedReason = cg.NETWORK_ERROR, this.connectionState = TI.CLOSED;
          }), this.websocket.on(Iv.RECONNECTING, (e2) => {
            this._websocketReconnectReason = e2, this.joinResponse = void 0, this.connectionState === TI.CONNECTED ? this.connectionState = TI.RECONNECTING : this.connectionState = TI.CONNECTING;
          }), this.websocket.on(Iv.WILL_RECONNECT, (e2, t2) => {
            if (Sg(this, gI.IS_P2P_DISCONNECTED) && "retry" === e2)
              return YC.debug("".concat(this.clientId, " reconnect mode is retry, but p2p lost, change to tryNext")), this.reconnectToken = void 0, this.emit(gI.NEED_RENEW_SESSION), this.emit(gI.DISCONNECT_P2P), t2("tryNext");
            "retry" !== e2 && (YC.debug("".concat(this.clientId, " websockt will_connect event, renewSession reconnectMode is ").concat(e2)), this.reconnectToken = void 0, this.emit(gI.NEED_RENEW_SESSION), this.emit(gI.DISCONNECT_P2P)), t2(e2);
          }), this.websocket.on(Iv.CONNECTED, () => {
            this.openConnectionTime = Date.now(), this.reconnectToken ? this.rejoin().catch((e2) => {
              YC.warning("[".concat(this.clientId, "] rejoin failed ").concat(e2)), this.reconnect("tryNext", Cv.SERVER_ERROR);
            }) : this.join().catch((e2) => {
              if (this.emit(gI.REPORT_JOIN_GATEWAY, e2.message || e2.code, this.url || ""), e2 instanceof VI && e2.code === xT.UNEXPECTED_RESPONSE && e2.data.code === fI.ERR_NO_AUTHORIZED)
                return YC.warning("[".concat(this.clientId, "] reconnect no authorized, recover")), void this.reconnect("recover", Cv.SERVER_ERROR);
              YC.error("[".concat(this.clientId, "] join gateway request failed"), e2.toString()), this.spec.forceWaitGatewayResponse ? this.reconnect("tryNext", Cv.SERVER_ERROR) : (this.initError = e2, this.close());
            });
          }), this.websocket.on(Iv.REQUEST_NEW_URLS, (e2, t2) => {
            fg(this, gI.REQUEST_RECOVER, this.multiIpOption).then(e2).catch(t2);
          }), this.websocket.on(Iv.ON_TOKEN_PRIVILEGE_DID_EXPIRE, () => {
            this.emit(CI.ON_TOKEN_PRIVILEGE_DID_EXPIRE);
          }), this.websocket.on(Iv.TO_CONNECT_DATACHANNEL, async (e2, t2, i2) => fg(this, gI.DATACHANNEL_PRECONNECT, e2).then(t2).catch(i2)), this.websocket.on(Iv.FAILBACK, () => {
            void 0 !== this.openConnectionTime && this.emit(gI.DATACHANNEL_FAILBACK);
          });
        }
      }
      class xy extends ig {
        constructor(e2, t2) {
          super(), nh(this, "signal", void 0), nh(this, "token", void 0), nh(this, "tokenTimeout", void 0), nh(this, "tokenInterval", void 0), nh(this, "_sequence", 0), nh(this, "userMap", /* @__PURE__ */ new Map()), nh(this, "encoder", new TextEncoder()), this.signal = e2, this.token = t2;
          const i2 = () => {
            this.signal.connectionState === TI.CONNECTED && this.check(), 0 === this.userMap.size ? this.tokenInterval = window.setTimeout(i2, 1e3) : this.tokenInterval = window.setTimeout(i2, 3 * DC("P2P_TOKEN_INTERVAL"));
          };
          i2();
        }
        async send(e2, t2, i2, n2, s2) {
          var r2, o2, a2;
          if (0 === this.userMap.size)
            return;
          const c2 = Array.from(MI(r2 = this.userMap).call(r2))[0].token;
          "string" != typeof t2 && (t2 = JSON.stringify(t2)), n2 = null !== (o2 = n2) && void 0 !== o2 ? o2 : xg(6, ""), s2 = null !== (a2 = s2) && void 0 !== a2 ? a2 : this._sequence++;
          const d2 = { _id: n2, _type: e2, _seq: s2, _message: t2, token: "".concat(this.token, "_").concat(c2) };
          DC("SHOW_P2P_LOG") && YC.debug("send message", d2, "noNeedResponse : ".concat(i2));
          this.splitMessage(JSON.stringify(d2)).forEach((e3) => {
            this.signal.request(SI.DATA_STREAM, { payload: Pg(this.encoder.encode(e3)) });
          });
          const l2 = new tT((t3, s3) => {
            const r3 = window.setTimeout(() => {
              this.off("res-@".concat(n2, "_ack"), o3), this.off("res-@".concat(n2), c3), this.off(Nv.ABORT, a3), YC.debug("[external-signal] request timeout, type: ".concat(e2, ", requestId: ").concat(n2)), 0 === this.userMap.size ? s3(new VT(xT.INVALID_REMOTE_USER)) : s3(new VT(xT.TIMEOUT));
            }, DC("EXTERNAL_SIGNAL_REQUEST_TIMEOUT")), o3 = () => {
              r3 && window.clearTimeout(r3), this.off(Nv.ABORT, a3), i2 && t3();
            }, a3 = () => {
              r3 && window.clearTimeout(r3), this.off("res-@".concat(n2, "_ack"), o3), this.off("res-@".concat(n2), c3), s3(new VT(xT.EXTERNAL_SIGNAL_ABORT, "type: ".concat(e2, ", requestId: ").concat(n2)));
            };
            this.once(Nv.ABORT, a3), this.once("res-@".concat(n2, "_ack"), o3);
            const c3 = (i3, c4) => {
              l3 = true, r3 && window.clearTimeout(r3), this.off("res-@".concat(n2, "_ack"), o3), this.off(Nv.ABORT, a3), "success" === i3 ? t3(c4) : s3(new VT(xT.P2P_MESSAGE_FAILED, "request ".concat(e2, " failed, requestId: ").concat(n2)));
            };
            let l3 = false;
            i2 || (this.once("res-@".concat(n2), c3), Ug(DC("SIGNAL_REQUEST_TIMEOUT")).then(() => {
              l3 || YC.warning("external_signal request timeout, type: ".concat(e2, ", requestId: ").concat(n2, ", ").concat(d2));
            }));
          });
          try {
            return await l2;
          } catch (r3) {
            if (r3.code === xT.TIMEOUT)
              return await this.send(e2, t2, i2, n2, s2);
            throw r3;
          }
        }
        onMessage(e2) {
          var t2;
          const { _uid: i2 } = e2;
          let n2, s2 = this.userMap.get(i2);
          if (s2)
            n2 = s2.splitMessageMap;
          else {
            if (this.userMap.size > 0 || !("_type" in e2) || e2._type !== Ov.CHECK)
              return;
            const { token: t3 } = e2;
            n2 = /* @__PURE__ */ new Map(), s2 = { uid: i2, isStart: true, token: t3, splitMessageMap: n2, nextExpectedSequenceNumber: 0, receivedMessagesMap: /* @__PURE__ */ new Map() }, this.userMap.set(i2, s2), this.signal.emit(CI.ON_USER_ONLINE, { uid: i2 }), this.handleUserOnline();
          }
          if ("id" in e2 && "total" in e2) {
            var r2;
            const { id: t3, total: s3 } = e2, o3 = null !== (r2 = n2.get(t3)) && void 0 !== r2 ? r2 : [];
            if (o3.push(e2), n2.has(t3) || n2.set(t3, o3), o3.length !== s3)
              return;
            {
              const s4 = Zh(o3).call(o3, (e3, t4) => e3.index - t4.index).map((e3) => e3.payload).join("");
              n2.delete(t3), (e2 = JSON.parse(s4))._uid = i2;
            }
          }
          const { _type: o2, token: a2 } = e2;
          if (bn(t2 = [Ov.ACK, Ov.CHECK]).call(t2, o2))
            return o2 === Ov.CHECK && this.handleCheckToken(s2, a2), void this.receiveMessage(e2);
          a2 === "".concat(s2.token, "_").concat(this.token) ? this.handleReceivedMessage(e2) : YC.debug('Receive unexpected message", '.concat(a2, ", cur_token: ").concat(s2.token, "_").concat(this.token), e2);
        }
        check() {
          const e2 = { _id: xg(6, ""), token: this.token, _type: Ov.CHECK };
          DC("SHOW_P2P_LOG") && YC.debug("send message", e2), this.signal.request(SI.DATA_STREAM, { payload: Pg(this.encoder.encode(JSON.stringify(e2))) });
        }
        ack(e2) {
          const t2 = { _id: e2, _type: Ov.ACK, token: this.token };
          DC("SHOW_P2P_LOG") && YC.debug("send message", t2), this.signal.request(SI.DATA_STREAM, { payload: Pg(this.encoder.encode(JSON.stringify(t2))) });
        }
        response(e2, t2, i2) {
          this.send(Ov.RESPONSE, JSON.stringify({ success: !i2, message: t2 }), true, e2);
        }
        handleReceivedMessage(e2) {
          const t2 = () => {
            this.userMap.forEach((e3) => {
              const { receivedMessagesMap: t3, nextExpectedSequenceNumber: i3 } = e3;
              for (; t3.has(i3); ) {
                const n3 = t3.get(i3);
                t3.delete(i3), this.receiveMessage(n3), e3.nextExpectedSequenceNumber++;
              }
            });
          };
          if (!e2)
            return void t2();
          const { _uid: i2, _seq: n2 } = e2, s2 = this.userMap.get(i2), { receivedMessagesMap: r2, isStart: o2, nextExpectedSequenceNumber: a2 } = s2;
          if (n2 < a2)
            return this.ack(e2._id), void YC.debug("[external-signal] receive old message, seq: ".concat(n2, ", ").concat(e2._message));
          r2.set(n2, e2), o2 && n2 === a2 && (this.receiveMessage(e2), r2.delete(a2), s2.nextExpectedSequenceNumber++, t2());
        }
        receiveMessage(e2) {
          const { _id: t2, _type: i2, _message: n2, _uid: s2 } = e2;
          if (DC("SHOW_P2P_LOG") && YC.debug("receive message", e2), t2) {
            let r2;
            switch (e2._type !== Ov.ACK && (n2 && (r2 = JSON.parse(n2)), this.ack(e2._id)), e2._type) {
              case Ov.CANDIDATE:
              case Ov.CONTROL:
                this.signal.emit(i2, r2, s2);
                break;
              case Ov.PUBLISH:
              case Ov.UNPUBLISH:
              case Ov.RESTART_ICE:
              case Ov.CALL:
                r2.uid = s2, fg(this.signal, i2, r2).then((t3) => {
                  this.response(e2._id, t3);
                }).catch(() => {
                  this.response(e2._id, void 0, true);
                });
                break;
              case Ov.ACK:
                this.getListeners("res-@".concat(t2, "_ack")).length > 0 && this.emit("res-@".concat(t2, "_ack"));
                break;
              case Ov.RESPONSE: {
                const { success: e3, message: i3 } = r2;
                this.emit("res-@".concat(t2), e3 ? "success" : "failed", i3);
                break;
              }
            }
          }
        }
        splitMessage(e2) {
          if (e2.length < xy.MAX_MESSAGE_SIZE)
            return [e2];
          const t2 = [], { remoteToken: i2 } = JSON.parse(e2), n2 = xg(6, "");
          let s2 = 0, r2 = 800;
          const o2 = Math.ceil(e2.length / r2);
          for (; e2.length > 0; ) {
            s2++;
            const a2 = { id: n2, index: s2, total: o2, payload: e2.slice(0, r2), token: "".concat(this.token, "_").concat(i2) };
            JSON.stringify(a2).length > xy.MAX_MESSAGE_SIZE ? r2 -= 50 : (t2.push(a2), e2 = e2.slice(r2));
          }
          return t2.map((e3) => JSON.stringify(e3));
        }
        handleCheckToken(e2, t2) {
          return e2.token !== t2 ? (YC.debug("token changed, from ".concat(e2.token, " to ").concat(t2)), this.reset(e2.uid, t2), false) : (this.tokenTimeout && (window.clearTimeout(this.tokenTimeout), this.tokenTimeout = void 0), this.tokenTimeout = window.setTimeout(() => {
            YC.debug("token timeout, ".concat(t2)), this.reset(e2.uid);
          }, DC("MAX_P2P_TIMEOUT")), true);
        }
        async handleUserOnline() {
          const e2 = await fg(this.signal, Ov.CALL, void 0), t2 = await this.send(Ov.CALL, e2);
          this.signal.emit(gI.P2P_CONNECTION, t2, true);
        }
        async reset(e2, t2) {
          const i2 = this.userMap.get(e2);
          i2 && (this.emit(Nv.ABORT), this.signal.emit(CI.ON_USER_OFFLINE, { uid: i2.uid, reason: Lv.P2P_TOKEN_CHANGED }), this._sequence = 0, this.userMap.clear(), t2 || (YC.debug("change local token from ".concat(t2, " to ").concat(t2)), this.token = xg(6, "")));
        }
        clear() {
          this._sequence = 0, this.userMap.clear(), this.tokenInterval && window.clearTimeout(this.tokenInterval), this.tokenInterval = void 0, this.tokenTimeout && window.clearTimeout(this.tokenTimeout), this.tokenTimeout = void 0, this.emit(Nv.ABORT);
        }
      }
      nh(xy, "MAX_SIZE", 1), nh(xy, "MAX_MESSAGE_SIZE", 1024);
      class Vy extends ig {
        get connectionState() {
          return this._connectionState;
        }
        set connectionState(e2) {
          e2 !== this._connectionState && (this._connectionState = e2, e2 === TI.CONNECTED ? this.emit(gI.WS_CONNECTED) : e2 === TI.RECONNECTING ? this.emit(gI.WS_RECONNECTING, this._websocketReconnectReason) : e2 === TI.CLOSED && this.emit(gI.WS_CLOSED, this._disconnectedReason));
        }
        get currentURLIndex() {
          return this.websocket.currentURLIndex;
        }
        get url() {
          return this.websocket && this.websocket.url || null;
        }
        get rtt() {
          return this.rttRolling.mean();
        }
        constructor(e2, t2) {
          super(), nh(this, "_disconnectedReason", void 0), nh(this, "_websocketReconnectReason", void 0), nh(this, "_connectionState", TI.CLOSED), nh(this, "reconnectToken", void 0), nh(this, "p2pToken", void 0), nh(this, "websocket", void 0), nh(this, "openConnectionTime", void 0), nh(this, "clientId", void 0), nh(this, "lastMsgTime", Date.now()), nh(this, "uploadCache", []), nh(this, "uploadCacheInterval", void 0), nh(this, "rttRolling", new dS(5)), nh(this, "pingpongTimer", void 0), nh(this, "pingpongTimeoutCount", 0), nh(this, "joinResponse", void 0), nh(this, "multiIpOption", void 0), nh(this, "initError", void 0), nh(this, "spec", void 0), nh(this, "store", void 0), nh(this, "_external_signal", void 0), nh(this, "onWebsocketMessage", (e3) => {
            if (e3.data instanceof ArrayBuffer)
              return void this.emit(gI.ON_BINARY_DATA, e3.data);
            const t3 = JSON.parse(e3.data);
            if (this.lastMsgTime = Date.now(), Object.prototype.hasOwnProperty.call(t3, "_id")) {
              const e4 = "res-@".concat(t3._id);
              this.emit(e4, t3._result, t3._message);
            } else if (Object.prototype.hasOwnProperty.call(t3, "_type")) {
              switch (t3._type) {
                case CI.ON_DATA_STREAM:
                  return void this.handleDataStream(t3._message);
                case CI.MUTE_AUDIO:
                case CI.MUTE_VIDEO:
                case CI.ON_P2P_LOST:
                case CI.ON_USER_ONLINE:
                  return;
                case CI.ON_USER_OFFLINE:
                  const { uid: e4 } = t3._message;
                  return YC.debug("[".concat(this.clientId, "] user-offline uid: ").concat(e4)), void this._external_signal.reset(e4);
              }
              if (this.emit(t3._type, t3._message), t3._type === CI.ON_NOTIFICATION && this.handleNotification(t3._message), t3._type === CI.ON_USER_BANNED)
                switch (t3._message.error_code) {
                  case 14:
                    this.close(cg.UID_BANNED);
                    break;
                  case 15:
                    this.close(cg.IP_BANNED);
                    break;
                  case 16:
                    this.close(cg.CHANNEL_BANNED);
                }
              if (t3._type === CI.ON_USER_LICENSE_BANNED)
                switch (t3._message.error_code) {
                  case fI.ERR_LICENSE_MISSING:
                    this.close(cg.LICENSE_MISSING);
                    break;
                  case fI.ERR_LICENSE_EXPIRED:
                    this.close(cg.LICENSE_EXPIRED);
                    break;
                  case fI.ERR_LICENSE_MINUTES_EXCEEDED:
                    this.close(cg.LICENSE_MINUTES_EXCEEDED);
                    break;
                  case fI.ERR_LICENSE_PERIOD_INVALID:
                    this.close(cg.LICENSE_PERIOD_INVALID);
                    break;
                  case fI.ERR_LICENSE_MULTIPLE_SDK_SERVICE:
                    this.close(cg.LICENSE_MULTIPLE_SDK_SERVICE);
                    break;
                  case fI.ERR_LICENSE_ILLEGAL:
                    this.close(cg.LICENSE_ILLEGAL);
                    break;
                  default:
                    this.close();
                }
            }
          }), this.clientId = e2.clientId, this.spec = e2, this.store = t2, this.websocket = new Zv("gateway-".concat(this.clientId), this.spec.retryConfig, true, DC("JOIN_GATEWAY_USE_DUAL_DOMAIN"), DC("JOIN_GATEWAY_USE_443PORT_ONLY"), t2), this.handleWebsocketEvents(), window.addEventListener("offline", () => {
            this.connectionState === TI.CONNECTED && this.reconnect("retry", lg.OFFLINE);
          }), this.p2pToken = xg(6, ""), this._external_signal = new xy(this, this.p2pToken);
        }
        async request(e2, t2, i2, n2) {
          const s2 = xg(6, ""), r2 = { _id: s2, _type: e2, _message: t2 }, o2 = this.websocket.connectionID, a2 = () => new tT((e3, t3) => {
            if (this.connectionState === TI.CONNECTED)
              return e3();
            const i3 = () => {
              this.off(gI.WS_CLOSED, n3), e3();
            }, n3 = () => {
              this.off(gI.WS_CONNECTED, i3), t3(new VT(xT.WS_ABORT));
            };
            this.once(gI.WS_CONNECTED, i3), this.once(gI.WS_CLOSED, n3);
          });
          if (this.connectionState !== TI.CONNECTING && this.connectionState !== TI.RECONNECTING || e2 === SI.JOIN || e2 === SI.REJOIN || await a2(), this.websocket.sendMessage(r2, true), n2)
            return;
          const c2 = new tT((i3, n3) => {
            let r3 = false;
            const a3 = (n4, s3) => {
              r3 = true, i3({ isSuccess: "success" === n4, message: s3 || {} }), this.off(gI.WS_CLOSED, c3), this.off(gI.WS_RECONNECTING, c3), this.emit(gI.REQUEST_SUCCESS, e2, t2);
            };
            this.once("res-@".concat(s2), a3);
            const c3 = () => {
              n3(new VT(xT.WS_ABORT, "type: ".concat(e2))), this.off(gI.WS_CLOSED, c3), this.off(gI.WS_RECONNECTING, c3), this.off("res-@".concat(s2), a3);
            };
            this.once(gI.WS_CLOSED, c3), this.once(gI.WS_RECONNECTING, c3), Ug(DC("SIGNAL_REQUEST_TIMEOUT")).then(() => {
              this.websocket.connectionID !== o2 || r3 || (YC.warning("[".concat(this.clientId, "] ws request timeout, type: ").concat(e2)), this.emit(gI.REQUEST_TIMEOUT, e2, t2));
            });
          });
          let d2 = null;
          try {
            d2 = await c2;
          } catch (n3) {
            if (this.connectionState === TI.CLOSED || e2 === SI.LEAVE)
              throw new VT(xT.WS_ABORT);
            return !this.spec.forceWaitGatewayResponse || i2 ? n3.throw() : e2 === SI.JOIN || e2 === SI.REJOIN ? null : (await a2(), await this.request(e2, t2));
          }
          if (d2.isSuccess)
            return d2.message;
          const l2 = Number(d2.message.error_code || d2.message.code), u2 = Fv(l2), h2 = new VT(xT.UNEXPECTED_RESPONSE, "".concat(u2.desc, ": ").concat(d2.message.error_str), { code: l2, data: d2.message });
          return "success" === u2.action ? d2.message : (YC.warning("[".concat(this.clientId, "] [").concat(this.websocket.connectionID, "] unexpected response from type ").concat(e2, ", error_code: ").concat(l2, ", message: ").concat(u2.desc, ", action: ").concat(u2.action)), l2 === fI.ERR_TOO_MANY_BROADCASTERS ? e2 === SI.JOIN || e2 === SI.REJOIN ? (this.initError = h2, this.close(), h2.throw()) : h2.throw() : "failed" === u2.action ? h2.throw() : "quit" === u2.action ? (this.initError = h2, this.close(), h2.throw()) : (l2 === fI.ERR_JOIN_BY_MULTI_IP ? (this.multiIpOption = d2.message.option, YC.warning("[".concat(this.clientId, "] detect multi ip, recover")), this.reconnect("recover", lg.MULTI_IP)) : this.reconnect(u2.action, lg.SERVER_ERROR), e2 === SI.JOIN || e2 === SI.REJOIN ? null : await this.request(e2, t2)));
        }
        waitMessage(e2, t2) {
          return new tT((i2) => {
            const n2 = (s2) => {
              (!t2 || t2(s2)) && (this.off(e2, n2), i2(s2));
            };
            this.on(e2, n2);
          });
        }
        uploadWRTCStats(e2) {
          if (!this.store.sessionId)
            return void YC.warn("[".concat(this.clientId, "] no session id when upload wrtc stats"));
          const t2 = { lts: Date.now(), sid: this.store.sessionId, uid: this.store.intUid, stats: e2 };
          this.upload(RI.WRTC_STATS, t2);
        }
        upload(e2, t2) {
          const i2 = { _type: e2, _message: t2 };
          try {
            this.websocket.sendMessage(i2);
          } catch (e3) {
            const t3 = DC("MAX_UPLOAD_CACHE") || 50;
            this.uploadCache.push(i2), this.uploadCache.length > t3 && this.uploadCache.splice(0, 1), this.uploadCache.length > 0 && !this.uploadCacheInterval && (this.uploadCacheInterval = window.setInterval(() => {
              if (this.connectionState !== TI.CONNECTED)
                return;
              const e4 = this.uploadCache.splice(0, 1)[0];
              0 === this.uploadCache.length && (window.clearInterval(this.uploadCacheInterval), this.uploadCacheInterval = void 0), this.upload(e4._type, e4._message);
            }, DC("UPLOAD_CACHE_INTERVAL") || 2e3));
          }
        }
        send(e2, t2) {
          const i2 = { _type: e2, _message: t2 };
          this.websocket.sendMessage(i2);
        }
        async sendExtensionMessage(e2, t2, i2) {
          return await this._external_signal.send(e2, t2, i2);
        }
        init(e2) {
          return this.initError = void 0, this.multiIpOption = void 0, this.joinResponse = void 0, this.reconnectToken = void 0, this.openConnectionTime = void 0, new tT((t2, i2) => {
            this.once(gI.WS_CONNECTED, () => t2(this.joinResponse)), this.once(gI.WS_CLOSED, () => i2(this.initError || new VT(xT.WS_ABORT))), this.connectionState = TI.CONNECTING, this.websocket.init(e2).catch(i2);
          });
        }
        close(e2) {
          this.pingpongTimer && (this.pingpongTimeoutCount = 0, window.clearInterval(this.pingpongTimer), this.pingpongTimer = void 0), this.reconnectToken = void 0, this.joinResponse = void 0, this._external_signal.clear(), this._disconnectedReason = e2 || cg.LEAVE, this.connectionState = TI.CLOSED, YC.debug("[".concat(this.clientId, "] ") + "will close websocket in signal"), this.websocket.close(), e2 === cg.FALLBACK && (this.websocket.removeAllListeners(), this.websocket = new Zv("gateway-".concat(this.clientId), this.spec.retryConfig, true, DC("JOIN_GATEWAY_USE_DUAL_DOMAIN"), DC("JOIN_GATEWAY_USE_443PORT_ONLY"), this.store), this.handleWebsocketEvents()), this.p2pToken = xg(6, ""), this._external_signal.clear(), this._external_signal = new xy(this, this.p2pToken);
        }
        async join() {
          if (!this.joinResponse) {
            this.emit(gI.ABORT_P2P_EXECUTION);
            const e2 = await fg(this, gI.REQUEST_JOIN_INFO), t2 = await this.request(SI.JOIN, e2);
            if (!t2)
              return this.emit(gI.REPORT_JOIN_GATEWAY, xT.TIMEOUT, this.url || ""), false;
            this.joinResponse = t2, this.emit(gI.JOIN_RESPONSE, this.joinResponse), this.reconnectToken = this.joinResponse.rejoin_token;
          }
          return this.connectionState = TI.CONNECTED, this.pingpongTimer && window.clearInterval(this.pingpongTimer), this.pingpongTimer = window.setInterval(this.handlePingPong.bind(this), 3e3), true;
        }
        reconnect(e2, t2) {
          this.pingpongTimer && (this.pingpongTimeoutCount = 0, window.clearInterval(this.pingpongTimer), this.pingpongTimer = void 0), this.websocket.reconnect(e2, t2);
        }
        handleDataStream(e2) {
          try {
            var t2;
            const i2 = Dg(e2.payload), n2 = new TextDecoder().decode(i2), s2 = JSON.parse(n2);
            "total" in s2 && "id" in s2 || bn(t2 = Object.values(Ov)).call(t2, s2._type) ? (s2._uid = e2.uid, this._external_signal.onMessage(s2)) : this.emit(CI.ON_DATA_STREAM, e2);
          } catch (t3) {
            this.emit(CI.ON_DATA_STREAM, e2);
          }
        }
        handleNotification(e2) {
          YC.debug("[".concat(this.clientId, "] receive notification: "), e2);
          const t2 = Fv(e2.code);
          if ("success" !== t2.action) {
            if ("failed" !== t2.action)
              return "quit" === t2.action ? ("ERR_REPEAT_JOIN_CHANNEL" === t2.desc && this.close(cg.UID_BANNED), void this.close()) : void this.reconnect(t2.action, lg.SERVER_ERROR);
            YC.error("[".concat(this.clientId, "] ignore error: "), t2.desc);
          }
        }
        handlePingPong() {
          if (!this.websocket || "connected" !== this.websocket.state)
            return;
          this.pingpongTimeoutCount > 0 && this.rttRolling.add(3e3), this.pingpongTimeoutCount += 1;
          const e2 = DC("PING_PONG_TIME_OUT"), t2 = Date.now();
          this.pingpongTimeoutCount >= e2 && (YC.warning("[".concat(this.clientId, "] PINGPONG Timeout. Last Socket Message: ").concat(t2 - this.lastMsgTime, "ms")), t2 - this.lastMsgTime > DC("WEBSOCKET_TIMEOUT_MIN")) ? this.reconnect("retry", lg.TIMEOUT) : this.request(SI.PING, void 0, true).then(() => {
            this.pingpongTimeoutCount = 0;
            const e3 = Date.now() - t2;
            this.rttRolling.add(e3), DC("REPORT_STATS") && this.send(SI.PING_BACK, { pingpongElapse: e3 });
          }).catch((e3) => {
          });
        }
        handleWebsocketEvents() {
          this.websocket.on(yI.RECONNECT_WAITTING_FINISH, (e2) => {
            this.emit(gI.WS_RECONNECT_WAITTING_FINISH, e2);
          }), this.websocket.on(yI.RECONNECT_CREATE_CONNECTION, (e2) => {
            this.emit(gI.WS_RECONNECT_CREATE_CONNECTION, e2);
          }), this.websocket.on(yI.ON_MESSAGE, this.onWebsocketMessage), this.websocket.on(yI.CLOSED, () => {
            this.connectionState = TI.CLOSED;
          }), this.websocket.on(yI.FAILED, () => {
            this._disconnectedReason = cg.NETWORK_ERROR, this.connectionState = TI.CLOSED;
          }), this.websocket.on(yI.RECONNECTING, (e2) => {
            this._websocketReconnectReason = e2, this.joinResponse = void 0, this.connectionState === TI.CONNECTED ? this.connectionState = TI.RECONNECTING : this.connectionState = TI.CONNECTING;
          }), this.websocket.on(yI.WILL_RECONNECT, (e2, t2, i2) => {
            "retry" !== e2 ? (YC.debug("".concat(this.clientId, " websocket will_connect event, renewSession reconnectMode is ").concat(e2)), this.reconnectToken = void 0, this.emit(gI.NEED_RENEW_SESSION)) : YC.debug("".concat(this.clientId, " reconnect mode is retry, no need to renew session")), i2(e2);
          }), this.websocket.on(yI.CONNECTED, () => {
            this.openConnectionTime = Date.now(), this.join().catch((e2) => {
              if (this.emit(gI.REPORT_JOIN_GATEWAY, e2.message || e2.code, this.url || ""), e2 instanceof VT && e2.code === xT.UNEXPECTED_RESPONSE && e2.data.code === fI.ERR_NO_AUTHORIZED)
                return YC.warning("[".concat(this.clientId, "] reconnect no authorized, recover")), void this.reconnect("recover", lg.SERVER_ERROR);
              YC.error("[".concat(this.clientId, "] join gateway request failed"), e2.toString()), this.spec.forceWaitGatewayResponse ? this.reconnect("tryNext", lg.SERVER_ERROR) : (this.initError = e2, this.close());
            });
          }), this.websocket.on(yI.REQUEST_NEW_URLS, (e2, t2) => {
            fg(this, gI.REQUEST_RECOVER, this.multiIpOption).then(e2).catch(t2);
          }), this.websocket.on(yI.ON_TOKEN_PRIVILEGE_DID_EXPIRE, () => {
            this.emit(CI.ON_TOKEN_PRIVILEGE_DID_EXPIRE);
          });
        }
      }
      function Fy(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function By(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? Fy(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : Fy(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      const jy = /* @__PURE__ */ new Map();
      class Gy extends ig {
        get state() {
          return this._state;
        }
        set state(e2) {
          if (e2 === this._state)
            return;
          const t2 = this._state;
          this._state = e2, "DISCONNECTED" === e2 && this._disconnectedReason ? this.emit(tv.CONNECTION_STATE_CHANGE, e2, t2, this._disconnectedReason) : this.emit(tv.CONNECTION_STATE_CHANGE, e2, t2);
        }
        get joinGatewayStartTime() {
          return this._joinGatewayStartTime;
        }
        set joinGatewayStartTime(e2) {
          YC.debug("[".concat(this.store.clientId, "] set joinGatewayStartTime at ").concat(e2)), this._joinGatewayStartTime = e2;
        }
        constructor(e2, t2) {
          super(), nh(this, "store", void 0), nh(this, "joinInfo", void 0), nh(this, "key", void 0), nh(this, "ntpOffset", 0), nh(this, "signal", void 0), nh(this, "role", void 0), nh(this, "inChannelInfo", { joinAt: null, duration: 0 }), nh(this, "spec", void 0), nh(this, "_state", "DISCONNECTED"), nh(this, "_statsCollector", void 0), nh(this, "_disconnectedReason", void 0), nh(this, "isSignalRecover", false), nh(this, "hasChangeBGPAddress", false), nh(this, "trafficStatsInterval", void 0), nh(this, "networkQualityInterval", void 0), nh(this, "_joinGatewayStartTime", 0), nh(this, "_signalTimeout", false), nh(this, "_clientRoleOptions", void 0), nh(this, "_isProactiveJoin", false), this.store = e2, this.spec = t2, this.signal = this.store.useP2P ? new Vy(By(By({}, t2), {}, { retryConfig: t2.websocketRetryConfig }), e2) : this.store.useDataChannel ? new Uy(By(By({}, t2), {}, { retryConfig: t2.websocketRetryConfig }), e2) : new ey(By(By({}, t2), {}, { retryConfig: t2.websocketRetryConfig }), e2), this._statsCollector = t2.statsCollector, this.role = t2.role || "audience", this._clientRoleOptions = t2.clientRoleOptions, this.handleSignalEvents();
        }
        async join(e2, t2, i2) {
          if (this.signal instanceof Uy) {
            let t3 = false;
            "disabled" !== e2.cloudProxyServer ? (YC.debug("[".concat(this.store.clientId, "] Dc is not supported, because cloudProxyServer are not supported (").concat(e2.cloudProxyServer, ")")), t3 = true) : "".concat(e2.apResponse.cid, "_").concat(e2.apResponse.cert).length > 255 || "".concat(e2.apResponse.cid, "_").concat(e2.apResponse.cert).length < 22 ? (YC.debug("[".concat(this.store.clientId, "] Dc is not supported, because ticket length is incorrect, it has to be between 22 and 255")), t3 = true) : e2.apResponse.addresses.some((e3) => e3.fingerprint) || DC("FINGERPRINT") || (YC.debug("[".concat(this.store.clientId, "] Dc is not supported, because fingerprint does not exist")), t3 = true), t3 && this.resetSignal();
          }
          this.store.joinGatewayStart(), "disabled" !== e2.cloudProxyServer && (this.hasChangeBGPAddress = true);
          const n2 = Date.now();
          let s2 = jy.get(e2.cname);
          if (s2 || (s2 = /* @__PURE__ */ new Map(), jy.set(e2.cname, s2)), this._isProactiveJoin = true, s2.has(e2.uid)) {
            const t3 = new VI(xT.UID_CONFLICT);
            throw rI.joinGateway(e2.sid, { lts: n2, succ: false, ec: t3.message, addr: null, uid: e2.uid, cid: e2.cid, firstSuccess: this._isProactiveJoin, avoidJoinStartTime: this.store.avoidJoinStart, isProxy: !!e2.proxyServer, signalChannel: this.signal instanceof Uy ? "1" : "0" }), this._isProactiveJoin = false, t3;
          }
          s2.set(e2.uid, true), this.joinInfo = e2, this.key = t2;
          let r2 = 0;
          this.joinGatewayStartTime = n2;
          const o2 = e2.proxyServer;
          try {
            let t3;
            if (YC.debug("[".concat(this.store.clientId, "] use ").concat(this.signal instanceof Uy ? "datachannel" : "websocket", " join uid ").concat(r2)), this.signal instanceof Uy)
              t3 = await this.signal.init(e2.apResponse.addresses, i2);
            else {
              const n3 = e2.gatewayAddrs.map((t4) => {
                let { address: i3 } = t4;
                const [n4, s3] = i3.split(":"), r3 = { host: n4, port: s3 };
                return e2.proxyServer && (r3.proxy = e2.proxyServer), r3;
              });
              t3 = await this.signal.init(n3, i2);
            }
            r2 = t3.uid, YC.debug("[".concat(this.store.clientId, "] ").concat(this.signal instanceof Uy ? "datachannel" : "websocket", " join uid ").concat(r2, " cost ").concat(Date.now() - this.joinGatewayStartTime));
          } catch (t3) {
            if (t3 && t3.code === xT.INIT_WEBSOCKET_TIMEOUT)
              throw YC.warning("[".concat(this.store.clientId, "] User join failed"), t3.toString()), t3;
            if (t3 && t3.code === xT.INIT_DATACHANNEL_TIMEOUT)
              throw YC.warning("[".concat(this.store.clientId, "] User join datachannel failed"), t3.toString()), this.resetSignal(), t3;
            throw YC.error("[".concat(this.store.clientId, "] User join failed"), t3.toString()), rI.joinGateway(e2.sid, { lts: n2, succ: false, ec: t3.message, addr: this.signal.url, uid: e2.uid, cid: e2.cid, firstSuccess: this._isProactiveJoin, avoidJoinStartTime: this.store.avoidJoinStart, isProxy: !!o2, signalChannel: this.signal instanceof Uy ? "1" : "0" }), this._isProactiveJoin = false, s2.delete(e2.uid), this.signal.close(), t3;
          }
          return this.state = "CONNECTED", this.inChannelInfo.joinAt = Date.now(), YC.debug("[".concat(this.store.clientId, "] Connected to gateway server")), this.trafficStatsInterval = window.setInterval(() => {
            this.updateTrafficStats().catch((e3) => {
              YC.warning("[".concat(this.store.clientId, "] get traffic stats error"), e3.toString());
            });
          }, 3e3), this.networkQualityInterval = window.setInterval(() => {
            navigator && void 0 !== navigator.onLine && !navigator.onLine ? this.emit(tv.NETWORK_QUALITY, { downlinkNetworkQuality: 6, uplinkNetworkQuality: 6 }) : this._signalTimeout ? this.emit(tv.NETWORK_QUALITY, { downlinkNetworkQuality: 5, uplinkNetworkQuality: 5 }) : "CONNECTED" === this.state && this._statsCollector.trafficStats ? this.emit(tv.NETWORK_QUALITY, { uplinkNetworkQuality: by(this._statsCollector.trafficStats.B_unq), downlinkNetworkQuality: by(this._statsCollector.trafficStats.B_dnq) }) : this.emit(tv.NETWORK_QUALITY, { uplinkNetworkQuality: 0, downlinkNetworkQuality: 0 });
          }, 2e3), this.store.joinGatewayEnd(), r2;
        }
        async leave() {
          let e2 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], t2 = arguments.length > 1 ? arguments[1] : void 0;
          if ("DISCONNECTED" !== this.state) {
            t2 !== cg.FALLBACK && (this.state = "DISCONNECTING");
            try {
              e2 || this.signal.connectionState !== TI.CONNECTED || await function(e3, t3) {
                return t3 === 1 / 0 ? e3 : tT.race([e3, Mg(t3)]);
              }(this.signal.request(SI.LEAVE, void 0, true), 3e3);
            } catch (e3) {
              YC.warning("[".concat(this.store.clientId, "] leave request failed, ignore"), e3);
            }
            this.signal.close(t2), t2 !== cg.FALLBACK && (this.state = "DISCONNECTED"), this.reset();
          }
        }
        async publish(e2, t2, i2) {
          if ("CONNECTED" !== this.state && "RECONNECTING" !== this.state)
            throw new VI(xT.INVALID_OPERATION, "can not publish when connection state is ".concat(this.state));
          const n2 = { state: "offer", p2p_id: this.store.p2pId, ortc: t2, mode: this.spec.mode, extend: DC("PUB_EXTEND"), twcc: !!DC("PUBLISH_TWCC"), rtx: !!DC("USE_PUB_RTX") };
          try {
            return (await this.signal.request(SI.PUBLISH, n2, true))._message;
          } catch (n3) {
            if (i2 && n3.data && n3.data.code === fI.ERR_PUBLISH_REQUEST_INVALID)
              return YC.warning("[".concat(this.store.clientId, "] receive publish error code, retry"), n3.toString()), await this.tryUnpubBeforeRepub(e2, t2), this.publish(e2, t2, false);
            throw n3;
          }
        }
        async publishDataChannel(e2, t2, i2) {
          var n2;
          if ("CONNECTED" !== this.state && "RECONNECTING" !== this.state)
            throw new VI(xT.INVALID_OPERATION, "can not publish when connection state is ".concat(this.state));
          const s2 = { stream_id: t2.streamId, ordered: t2.ordered ? 1 : 0, max_retrans_times: null !== (n2 = t2.maxRetransmits) && void 0 !== n2 ? n2 : 10, channel_id: t2.channelId, metadata: t2.metadata };
          try {
            await this.signal.request(SI.PUBLISH_DATASTREAM, s2, true);
          } catch (n3) {
            if (i2 && n3.data && n3.data.code === fI.ERR_PUBLISH_REQUEST_INVALID)
              return YC.warning("[".concat(this.store.clientId, "] receive publish datachannels error code, retry"), n3.toString()), await this.tryUnpubDataChannelBeforeRepub(e2, t2), this.publishDataChannel(e2, t2, false);
            throw n3;
          }
        }
        async unpublish(e2, t2) {
          try {
            if ("CONNECTED" !== this.state && "RECONNECTING" !== this.state)
              throw new VI(xT.INVALID_OPERATION, "can not publish when connection state is ".concat(this.state));
            await this.signal.request(SI.UNPUBLISH, { stream_id: t2, ortc: e2 }, true);
          } catch (e3) {
            YC.warning("[".concat(this.store.clientId, "] unpublish warning: "), e3);
          }
        }
        async unpublishDataChannel(e2) {
          try {
            if ("CONNECTED" !== this.state && "RECONNECTING" !== this.state)
              throw new VI(xT.INVALID_OPERATION, "can not publish when connection state is ".concat(this.state));
            await tT.all(e2.map((e3) => this.signal.request(SI.UNPUBLISH_DATASTREAM, { channel_id: e3 }, true)));
          } catch (e3) {
            YC.warning("unpublish datachannels warning: ", e3);
          }
        }
        async presubscribe(e2, t2, i2) {
          if ("CONNECTED" !== this.state && "RECONNECTING" !== this.state)
            throw new VI(xT.INVALID_OPERATION, "can not presubscribe when connection state is ".concat(this.state));
          const n2 = { stream_id: e2, stream_type: t2, mode: this.spec.mode, codec: this.spec.codec, p2p_id: this.store.p2pId, twcc: !!DC("SUBSCRIBE_TWCC"), rtx: !!DC("USE_SUB_RTX") || void 0, extend: DC("SUB_EXTEND"), svc: Array.isArray(DC("SVC")) && 0 !== DC("SVC").length ? DC("SVC") : void 0 };
          try {
            return await this.signal.request(SI.PRE_SUBSCRIBE, n2, true);
          } catch (n3) {
            if (i2 && n3.data && n3.data.code === fI.ERR_SUBSCRIBE_REQUEST_INVALID)
              return YC.warning("[".concat(this.store.clientId, "] pre-subscribe error, retry"), n3.toString()), this.presubscribe(e2, t2, false);
            throw n3;
          }
        }
        async subscribe(e2, t2, i2) {
          if ("CONNECTED" !== this.state && "RECONNECTING" !== this.state)
            throw new VI(xT.INVALID_OPERATION, "can not subscribe when connection state is ".concat(this.state));
          const n2 = { stream_id: e2, stream_type: t2.stream_type, mode: this.spec.mode, codec: this.spec.codec, p2p_id: this.store.p2pId, twcc: !!DC("SUBSCRIBE_TWCC"), rtx: !!DC("USE_SUB_RTX"), extend: DC("SUB_EXTEND"), ssrcId: t2.ssrcId, svc: Array.isArray(DC("SVC")) && 0 !== DC("SVC").length ? DC("SVC") : void 0 };
          try {
            return (await this.signal.request(SI.SUBSCRIBE, n2, true))._message;
          } catch (n3) {
            if (i2 && n3.data && n3.data.code === fI.ERR_SUBSCRIBE_REQUEST_INVALID)
              return YC.warning("[".concat(this.store.clientId, "] receiver subscribe error code, retry"), n3.toString()), await this.tryUnsubBeforeResub(e2, t2), await this.subscribe(e2, t2, false);
            throw n3;
          }
        }
        async subscribeDataChannel(e2, t2, i2) {
          if ("CONNECTED" !== this.state && "RECONNECTING" !== this.state)
            throw new VI(xT.INVALID_OPERATION, "can not subscribe datachannel when connection state is ".concat(this.state));
          const n2 = { uid: e2, stream_id: t2.id, channel_id: t2.datachannelId };
          try {
            return void await this.signal.request(SI.SUBSCRIBE_DATASTREAM, n2, true);
          } catch (n3) {
            if (i2 && n3.data && n3.data.code === fI.ERR_SUBSCRIBE_REQUEST_INVALID)
              return YC.warning("[".concat(this.store.clientId, "] receiver subscribe datachannel error code, retry"), n3.toString()), await this.tryUnsubDataChannelBeforeResub(e2, t2), await this.subscribeDataChannel(e2, t2, false);
            throw n3;
          }
        }
        async subscribeAll(e2, t2) {
          if ("CONNECTED" !== this.state && "RECONNECTING" !== this.state)
            throw new VI(xT.INVALID_OPERATION, "can not massSubscribe when connection state is ".concat(this.state));
          const i2 = { p2p_id: this.store.p2pId, users: e2, dtx: false, rtx: !!DC("USE_SUB_RTX") };
          try {
            return await this.signal.request(SI.SUBSCRIBE_STREAMS, i2, true);
          } catch (i3) {
            if (t2 && i3.data && i3.data.code === fI.ERR_SUBSCRIBE_REQUEST_INVALID)
              return YC.warning("[".concat(this.store.clientId, "] receiver massSubscribe error code, retry"), i3.toString()), await this.tryMassUnsubBeforeResub(e2), await this.subscribeAll(e2, false);
            throw i3;
          }
        }
        async setVideoProfile(e2) {
          const t2 = function(e3) {
            if (!(e3.bitrateMax && e3.bitrateMin && e3.frameRate && e3.height && e3.width))
              return;
            let t3 = e3.frameRate, i2 = e3.width, n2 = e3.height, s2 = true;
            return "number" != typeof t3 && (t3 = t3.exact || t3.ideal || t3.max || t3.min || 0, t3 || (s2 = false)), "number" != typeof i2 && (i2 = i2.exact || i2.ideal || i2.max || i2.min || 0, i2 || (s2 = false)), "number" != typeof n2 && (n2 = n2.exact || n2.ideal || n2.max || n2.min || 0, t3 || (s2 = false)), s2 ? { stream_type: 0, width: i2, height: n2, fps: t3, start_bps: 1e3 * e3.bitrateMax, min_bps: 1e3 * e3.bitrateMin, target_bps: 1e3 * e3.bitrateMax } : void 0;
          }(e2);
          if (t2)
            return this.signal.request(SI.SET_VIDEO_PROFILE, t2);
          YC.debug("[".concat(this.store.clientId, "] encoder config is not complete, do not report to gateway"));
        }
        async unsubscribe(e2, t2) {
          try {
            await this.signal.request(SI.UNSUBSCRIBE, { p2p_id: this.store.p2pId, ortc: e2, stream_id: t2 }, true);
          } catch (e3) {
            YC.warning("[".concat(this.store.clientId, "] unsubscribe warning: "), e3);
          }
        }
        async unsubscribeDataChannel(e2, t2) {
          try {
            if ("CONNECTED" !== this.state && "RECONNECTING" !== this.state)
              throw new VI(xT.INVALID_OPERATION, "can not publish when connection state is ".concat(this.state));
            await tT.all(e2.map((e3) => this.signal.request(SI.UNSUBSCRIBE_DATASTREAM, { stream_id: e3, uid: t2 }, true)));
          } catch (e3) {
            YC.warning("unsubscribeDataChannel warning: ", e3);
          }
        }
        async massUnsubscribe(e2) {
          try {
            await this.signal.request(SI.UNSUBSCRIBE_STREAMS, e2, true);
          } catch (e3) {
            YC.warning("[".concat(this.store.clientId, "] massUnsubscribeAll warning: "), e3);
          }
        }
        async reconnectPC(e2) {
          const { iceParameters: t2, dtlsParameters: i2, rtpCapabilities: n2 } = e2;
          return { gatewayEstablishParams: await this.signal.request(SI.CONNECT_PC, { p2p_id: this.store.p2pId, stream_id: this.store.uid, ortc: { iceParameters: t2, dtlsParameters: i2, rtpCapabilities: n2 } }, true), gatewayAddress: this.getCurrentGatewayAddress() };
        }
        getGatewayInfo() {
          return this.signal.request(SI.GATEWAY_INFO);
        }
        async renewToken(e2) {
          await this.signal.request(SI.RENEW_TOKEN, e2), this.key = e2.token;
        }
        async setClientRole(e2, t2) {
          if (t2 && (this._clientRoleOptions = Object.assign({}, t2)), "CONNECTED" !== this.state)
            return void (this.role = e2);
          let i2, n2 = 0;
          "audience" === e2 ? this._clientRoleOptions && this._clientRoleOptions.delay ? (i2 = this._clientRoleOptions.delay, n2 = 1) : n2 = this._clientRoleOptions && this._clientRoleOptions.level ? this._clientRoleOptions.level : 2 : n2 = 0, await this.signal.request(SI.SET_CLIENT_ROLE, { role: e2, level: n2, delay: i2, client_ts: Date.now() }), this.role = e2;
        }
        async setRemoteVideoStreamType(e2, t2) {
          await this.signal.request(SI.SWITCH_VIDEO_STREAM, { stream_id: e2, stream_type: t2 });
        }
        async setDefaultRemoteVideoStreamType(e2) {
          await this.signal.request(SI.DEFAULT_VIDEO_STREAM, { stream_type: e2 });
        }
        async setStreamFallbackOption(e2, t2) {
          await this.signal.request(SI.SET_FALLBACK_OPTION, { stream_id: e2, fallback_type: t2 });
        }
        async pickSVCLayer(e2, t2) {
          await this.signal.request(SI.PICK_SVC_LAYER, { stream_id: e2, spatial_layer: t2.spatialLayer, temporal_layer: t2.temporalLayer });
        }
        async setRTM2Flag(e2) {
          await this.signal.request(SI.SET_RTM2_FLAG, { rtm2_flag: e2 });
        }
        async sendExtensionMessage(e2, t2, i2) {
          if (this.signal instanceof Vy)
            return this.signal.sendExtensionMessage(e2, t2, i2);
        }
        getInChannelInfo() {
          return this.inChannelInfo.joinAt && (this.inChannelInfo.duration = Date.now() - this.inChannelInfo.joinAt), By({}, this.inChannelInfo);
        }
        async getGatewayVersion() {
          return (await this.signal.request(SI.GATEWAY_INFO)).version;
        }
        reset() {
          if (this.inChannelInfo.joinAt && (this.inChannelInfo.duration = Date.now() - this.inChannelInfo.joinAt, this.inChannelInfo.joinAt = null), this.trafficStatsInterval && (window.clearInterval(this.trafficStatsInterval), this.trafficStatsInterval = void 0), this.joinInfo) {
            const e2 = jy.get(this.joinInfo.cname);
            e2 && e2.delete(this.joinInfo.uid);
          }
          this.joinInfo = void 0, this.key = void 0, this.networkQualityInterval && (window.clearInterval(this.networkQualityInterval), this.networkQualityInterval = void 0);
        }
        updateTurnConfigFromSignal() {
          if (!this.joinInfo)
            return;
          const e2 = function(e3) {
            let t2;
            return t2 = e3.startsWith("dc") ? e3.match(/(dc\:\/\/)?([^:]+):(\d+)/) : e3.match(/(wss\:\/\/)?([^:]+):(\d+)/), t2 ? { username: aI.username, password: aI.password, turnServerURL: t2[2], tcpport: parseInt(t2[3]) + 30, udpport: parseInt(t2[3]) + 30, forceturn: false } : null;
          }(("disabled" === this.joinInfo.cloudProxyServer ? this.signal.url : this.joinInfo.gatewayAddrs[this.signal.currentURLIndex].address) || "");
          this.joinInfo.turnServer.serversFromGateway = [], e2 && "off" !== this.joinInfo.turnServer.mode && "disabled" === this.joinInfo.cloudProxyServer && this.joinInfo.turnServer.serversFromGateway.push(By(By({}, aI), {}, { turnServerURL: e2.turnServerURL, tcpport: e2.tcpport, udpport: e2.udpport, username: this.joinInfo.uid.toString(), password: this.joinInfo.token }));
        }
        async updateTrafficStats() {
          if ("CONNECTED" !== this.state)
            return;
          const e2 = await this.signal.request(SI.TRAFFIC_STATS, void 0, true);
          e2.timestamp = Date.now(), null != e2.ntp_offset && (this.ntpOffset = e2.ntp_offset), e2.peer_delay.forEach((e3) => {
            const t2 = this._statsCollector.trafficStats && this._statsCollector.trafficStats.peer_delay.find((t3) => t3.peer_uid === e3.peer_uid);
            t2 && t2.B_st !== e3.B_st && Ag(() => {
              this.emit(tv.STREAM_TYPE_CHANGE, e3.peer_uid, e3.B_st);
            });
          }), this._statsCollector.updateTrafficStats(e2);
        }
        getJoinMessage(e2) {
          if (!this.joinInfo || !this.key)
            throw new VI(xT.UNEXPECTED_ERROR, "can not generate join message, no join info");
          const t2 = Object.assign({}, this.joinInfo.apResponse);
          let i2 = DC("REPORT_APP_SCENARIO");
          if ("string" != typeof i2)
            try {
              i2 = JSON.stringify(i2);
            } catch (e3) {
              i2 = void 0;
            }
          i2 && i2.length > 128 && (i2 = void 0);
          const n2 = By({ license: this.joinInfo.license, p2p_id: this.store.p2pId, session_id: this.joinInfo.sid, app_id: this.joinInfo.appId, channel_key: this.key, channel_name: this.joinInfo.cname, sdk_version: yC, browser: navigator.userAgent, process_id: DC("PROCESS_ID"), mode: this.store.useP2P ? "p2p" : this.spec.mode, codec: this.spec.codec, role: this.role, has_changed_gateway: this.hasChangeBGPAddress, ap_response: t2, extend: DC("JOIN_EXTEND"), details: { 6: this.joinInfo.stringUid, cservice_map: "proxy3" === this.joinInfo.cloudProxyServer ? "1" : "proxy5" === this.joinInfo.cloudProxyServer ? "2" : void 0 }, features: { rejoin: true }, optionalInfo: this.joinInfo.optionalInfo, appScenario: i2, attributes: { userAttributes: { enablePublishedUserList: DC("ENABLE_PUBLISHED_USER_LIST"), maxSubscription: DC("MAX_SUBSCRIPTION"), subscribeAudioFilterTopN: "number" == typeof DC("SUBSCRIBE_AUDIO_FILTER_TOPN") ? DC("SUBSCRIBE_AUDIO_FILTER_TOPN") : void 0, enablePublishAudioFilter: "boolean" == typeof DC("ENABLE_PUBLISH_AUDIO_FILTER") ? DC("ENABLE_PUBLISH_AUDIO_FILTER") : void 0, enableUserLicenseCheck: "boolean" == typeof DC("ENABLE_USER_LICENSE_CHECK") ? DC("ENABLE_USER_LICENSE_CHECK") : void 0, enableRTX: true === DC("USE_PUB_RTX") || true === DC("USE_SUB_RTX") || void 0, disableFEC: DC("DISABLE_FEC"), enableNTPReport: !!DC("ENABLE_NTP_REPORT") || void 0, enableInstantVideo: !!DC("ENABLE_INSTANT_VIDEO") || void 0, enableDataStream2: "boolean" == typeof DC("ENABLE_DATASTREAM_2") ? DC("ENABLE_DATASTREAM_2") : void 0, rtm2Flag: "number" == typeof this.joinInfo.rtmFlag ? this.joinInfo.rtmFlag : void 0, enableUserAutoRebalanceCheck: !!DC("ENABLE_USER_AUTO_REBALANCE_CHECK"), enableXR: "boolean" == typeof DC("USE_XR") ? DC("USE_XR") : void 0 } }, join_ts: this.joinGatewayStartTime }, e2);
          return this.joinInfo.stringUid && (n2.string_uid = this.joinInfo.stringUid), this.joinInfo.aesmode && this.joinInfo.aespassword && (n2.aes_mode = this.joinInfo.aesmode, DC("ENCRYPT_AES") ? (n2.aes_secret = this.joinInfo.aespassword, n2.aes_encrypt = true) : n2.aes_secret = this.joinInfo.aespassword, this.joinInfo.aessalt && (n2.aes_salt = this.joinInfo.aessalt)), t2.addresses[this.signal.websocket.currentURLIndex] && (n2.ap_response.ticket = t2.addresses[this.signal.websocket.currentURLIndex].ticket, delete t2.addresses), void 0 !== this.joinInfo.defaultVideoStream && (n2.default_video_stream = this.joinInfo.defaultVideoStream), n2;
        }
        getRejoinMessage() {
          if (!this.joinInfo)
            throw new VI(xT.UNEXPECTED_ERROR, "can not generate rejoin message, no join info");
          return { session_id: this.joinInfo.sid, channel_name: this.joinInfo.cname, cid: this.joinInfo.cid, uid: this.joinInfo.uid, vid: Number(this.joinInfo.vid) };
        }
        handleSignalEvents() {
          this.signal.on(gI.WS_RECONNECT_WAITTING_FINISH, (e2) => {
            var t2;
            bn(t2 = ["tryNext", "recover"]).call(t2, e2) && this.joinInfo && rI.adjustSessionStartTime(this.joinInfo.sid);
          }), this.signal.on(gI.WS_RECONNECT_CREATE_CONNECTION, (e2) => {
            this.joinGatewayStartTime = Date.now();
          }), this.signal.on(gI.WS_RECONNECTING, (e2) => {
            this.joinInfo && rI.WebSocketQuit(this.joinInfo.sid, { lts: Date.now(), succ: -1, cname: this.joinInfo.cname, uid: this.joinInfo.uid, cid: this.joinInfo.cid, errorCode: e2 || lg.NETWORK_ERROR }), this.joinInfo && (this.state = "RECONNECTING", rI.sessionInit(this.joinInfo.sid, { lts: (/* @__PURE__ */ new Date()).getTime(), extend: this.isSignalRecover ? { recover: true } : { rejoin: true }, cname: this.joinInfo.cname, appid: this.joinInfo.appId, mode: this.spec.mode, stringUid: this.joinInfo.stringUid, channelProfile: "live" === this.spec.mode ? 1 : 0, channelMode: 0, lsid: this.joinInfo.sid, clientRole: "audience" === this.role ? 2 : 1 }), this.isSignalRecover = false, this.joinGatewayStartTime = Date.now());
          }), this.signal.on(gI.WS_CLOSED, (e2) => {
            let t2;
            switch (e2) {
              case cg.LEAVE:
                t2 = lg.LEAVE;
                break;
              case cg.UID_BANNED:
              case cg.IP_BANNED:
              case cg.CHANNEL_BANNED:
              case cg.SERVER_ERROR:
                t2 = lg.SERVER_ERROR;
                break;
              case cg.FALLBACK:
                t2 = lg.FALLBACK;
                break;
              case cg.LICENSE_MISSING:
              case cg.LICENSE_EXPIRED:
              case cg.LICENSE_MINUTES_EXCEEDED:
              case cg.LICENSE_PERIOD_INVALID:
              case cg.LICENSE_MULTIPLE_SDK_SERVICE:
              case cg.LICENSE_ILLEGAL:
              case cg.TOKEN_EXPIRE:
                t2 = e2;
                break;
              default:
                t2 = lg.NETWORK_ERROR;
            }
            YC.debug("[".concat(this.store.clientId, "] [signal] websocket closed, reason: ").concat(t2 || "undefined -> " + lg.NETWORK_ERROR)), this.joinInfo && rI.WebSocketQuit(this.joinInfo.sid, { lts: Date.now(), succ: e2 === cg.LEAVE ? 1 : -1, cname: this.joinInfo.cname, uid: this.joinInfo.uid, cid: this.joinInfo.cid, errorCode: t2 }), this._disconnectedReason = e2, e2 !== cg.FALLBACK && (this.state = "DISCONNECTED"), this.reset();
          }), this.signal.on(gI.WS_CONNECTED, () => {
            if (this.updateTurnConfigFromSignal(), this.state = "CONNECTED", this.joinInfo && ("audience" === this.role && this._clientRoleOptions && (this._clientRoleOptions.level || this._clientRoleOptions.delay) && (YC.debug("[".concat(this.store.clientId, "] patch to send set client role, role: ").concat(this.role, ", mode: ").concat(this.spec.mode, ", level: ").concat(this._clientRoleOptions.level, ", delay: ").concat(this._clientRoleOptions.delay)), this.setClientRole(this.role, this._clientRoleOptions)), rI.joinGateway(this.joinInfo.sid, { lts: this.joinGatewayStartTime, succ: true, ec: null, vid: this.joinInfo.vid, addr: this.signal.url, uid: this.joinInfo.uid, cid: this.joinInfo.cid, firstSuccess: this._isProactiveJoin, avoidJoinStartTime: this.store.avoidJoinStart, isProxy: !!this.joinInfo.proxyServer, signalChannel: this.signal instanceof Uy ? "1" : "0" }), this._isProactiveJoin = false, this.joinInfo.useLocalAccessPoint && 1 === this.joinInfo.setLocalAPVersion)) {
              const e2 = this.signal.url && this.signal.url.match(/wss\:\/\/([^:]+):(\d+)/);
              if (!e2)
                return void YC.error("[".concat(this.store.clientId, "] set local access point after joined failed: ").concat(e2));
              NC("EVENT_REPORT_DOMAIN", e2[1]), NC("EVENT_REPORT_BACKUP_DOMAIN", e2[1]), NC("LOG_UPLOAD_SERVER", "".concat(e2[1], ":6444"));
            }
          }), this.signal.on(CI.ON_UPLINK_STATS, (e2) => {
            this._statsCollector.updateUplinkStats(e2);
          }), this.signal.on(gI.REQUEST_RECOVER, (e2, t2, i2) => {
            if (!this.joinInfo)
              return i2(new VI(xT.UNEXPECTED_ERROR, "gateway: can not recover, no join info"));
            e2 && (this.joinInfo.multiIP = e2, this.hasChangeBGPAddress = true), this.isSignalRecover = true, fg(this, tv.REQUEST_NEW_GATEWAY_LIST).then(t2).catch(i2);
          }), this.signal.on(gI.REQUEST_JOIN_INFO, async (e2) => {
            var t2;
            if (this.updateTurnConfigFromSignal(), this.store.useP2P)
              return void e2(this.getJoinMessage({ ortc: {} }));
            const { iceParameters: i2, dtlsParameters: n2, rtpCapabilities: s2 } = await fg(this, tv.REQUEST_P2P_CONNECTION_PARAMS, { turnServer: null === (t2 = this.joinInfo) || void 0 === t2 ? void 0 : t2.turnServer });
            e2(this.getJoinMessage({ ortc: { iceParameters: i2, dtlsParameters: n2, rtpCapabilities: s2, version: "2" } }));
          }), this.signal.on(gI.REQUEST_REJOIN_INFO, (e2) => {
            e2(this.getRejoinMessage());
          }), this.signal.on(gI.REPORT_JOIN_GATEWAY, (e2, t2) => {
            this.joinInfo && (rI.joinGateway(this.joinInfo.sid, { lts: this.joinGatewayStartTime, succ: false, ec: e2, addr: t2, uid: this.joinInfo.uid, cid: this.joinInfo.cid, firstSuccess: this._isProactiveJoin, avoidJoinStartTime: this.store.avoidJoinStart, isProxy: !!this.joinInfo.proxyServer, signalChannel: this.signal instanceof Uy ? "1" : "0" }), this._isProactiveJoin = false);
          }), this.signal.on(gI.IS_P2P_DISCONNECTED, (e2) => {
            e2(Sg(this, tv.IS_P2P_DISCONNECTED));
          }), this.signal.on(gI.DISCONNECT_P2P, () => {
            this.emit(tv.DISCONNECT_P2P);
          }), this.signal.on(gI.NEED_RENEW_SESSION, () => {
            this.emit(tv.NEED_RENEW_SESSION);
          }), this.signal.on(gI.REQUEST_SUCCESS, () => {
            this._signalTimeout = false;
          }), this.signal.on(gI.REQUEST_TIMEOUT, () => {
            this._signalTimeout = true;
          }), this.signal.on(gI.JOIN_RESPONSE, (e2) => {
            const t2 = this.getCurrentGatewayAddress();
            this.emit(tv.JOIN_RESPONSE, e2, t2);
          }), this.signal.on(gI.DATACHANNEL_PRECONNECT, async (e2, t2, i2) => {
            this.updateTurnConfigFromSignal();
            const n2 = this.getCurrentGatewayAddress();
            return fg(this, tv.DATACHANNEL_PRECONNECT, e2, n2).then(t2).catch(i2);
          }), this.signal.on(gI.DATACHANNEL_CONNECTING, async (e2) => {
            const { iceParameters: t2, dtlsParameters: i2, rtpCapabilities: n2 } = await fg(this, tv.REQUEST_DC_CONNECTION_PARAMS);
            e2(this.getJoinMessage({ ortc: { iceParameters: t2, dtlsParameters: i2, rtpCapabilities: n2, version: "2" } }));
          }), this.signal.on(gI.DATACHANNEL_FAILBACK, () => {
            YC.warning("[".concat(this.store.clientId, "] User join datachannel failed")), this.reset(), this.resetSignal(), this.emit(tv.DATACHANNEL_FAILBACK);
          });
        }
        async tryUnsubBeforeResub(e2, t2) {
          try {
            await this.signal.request(SI.UNSUBSCRIBE, { p2p_id: this.store.p2pId, stream_id: e2, ortc: [t2] }, true);
          } catch (e3) {
            throw YC.warning("[".concat(this.store.clientId, "] tryUnsubBeforeResub warning"), e3), e3;
          }
        }
        async tryUnsubDataChannelBeforeResub(e2, t2) {
          try {
            await this.signal.request(SI.UNSUBSCRIBE, { stream_id: t2.id }, true);
          } catch (e3) {
            throw YC.warning("unsubscribe datachannel warning", e3), e3;
          }
        }
        async tryUnpubBeforeRepub(e2, t2) {
          try {
            await this.signal.request(SI.UNPUBLISH, { stream_id: e2, ortc: t2 }, true);
          } catch (e3) {
            throw YC.warning("[".concat(this.store.clientId, "] tryUnpubBeforeRepub warning: "), e3), e3;
          }
        }
        async tryUnpubDataChannelBeforeRepub(e2, t2) {
          try {
            await this.signal.request(SI.UNPUBLISH_DATASTREAM, { channnel_id: t2.channelId }, true);
          } catch (e3) {
            throw YC.warning("unpublish datastream warning: ", e3), e3;
          }
        }
        async tryMassUnsubBeforeResub(e2) {
          const t2 = { users: e2.map((e3) => ({ stream_id: e3.stream_id, stream_type: e3.stream_type })) };
          try {
            await this.signal.request(SI.UNSUBSCRIBE_STREAMS, t2, true);
          } catch (e3) {
            throw YC.warning("[".concat(this.store.clientId, "] tryMassUnsubBeforeResub warning"), e3), e3;
          }
        }
        async muteLocal(e2, t2) {
          const i2 = { action: e2.find((e3) => e3.stream_type === ev.Audio) ? "mute_local_audio" : "mute_local_video", p2p_id: this.store.p2pId, ortc: e2, stream_id: t2 };
          try {
            await this.signal.request(SI.CONTROL, i2, true, true);
          } catch (e3) {
            throw YC.warning("[".concat(this.store.clientId, "] gateway muteLocal warning: "), e3), e3;
          }
        }
        async unmuteLocal(e2, t2) {
          const i2 = { action: e2.find((e3) => e3.stream_type === ev.Audio) ? "unmute_local_audio" : "unmute_local_video", p2p_id: this.store.p2pId, ortc: e2, stream_id: t2 };
          try {
            await this.signal.request(SI.CONTROL, i2, true, true);
          } catch (e3) {
            throw YC.warning("[".concat(this.store.clientId, "] gateway unmuteLocal warning: "), e3), e3;
          }
        }
        async muteRemote(e2, t2) {
          const i2 = { action: e2 === hv.AUDIO ? "mute_remote_audio" : "mute_remote_video", p2p_id: this.store.p2pId, stream_id: t2 };
          try {
            await this.signal.request(SI.CONTROL, i2, true, true);
          } catch (e3) {
            throw YC.warning("[".concat(this.store.clientId, "] gateway muteRemote warning: "), e3), e3;
          }
        }
        async unmuteRemote(e2, t2) {
          const i2 = { action: e2 === hv.AUDIO ? "unmute_remote_audio" : "unmute_remote_video", p2p_id: this.store.p2pId, stream_id: t2 };
          try {
            await this.signal.request(SI.CONTROL, i2, true, true);
          } catch (e3) {
            throw YC.warning("[".concat(this.store.clientId, "] gateway unmuteRemote warning: "), e3), e3;
          }
        }
        uploadWRTCStats(e2) {
          this.signal.uploadWRTCStats(e2);
        }
        upload(e2, t2) {
          this.signal.upload(e2, t2);
        }
        getSignalRTT() {
          return this.signal.rtt;
        }
        async restartICE(e2) {
          const t2 = { p2p_id: this.store.p2pId, stream_id: this.store.uid, ortc: e2 };
          try {
            return await this.signal.request(SI.RESTART_ICE, t2, true);
          } catch (e3) {
            throw YC.warning("[".concat(this.store.clientId, "] P2PChannel.restartICE warning: "), e3), e3;
          }
        }
        reconnect() {
          "CONNECTED" === this.state && this.signal.reconnect(void 0, lg.P2P_FAILED);
        }
        getCurrentGatewayAddress() {
          var e2;
          if (!DC("GATEWAY_WSS_ADDRESS"))
            return null !== (e2 = this.joinInfo) && void 0 !== e2 && e2.gatewayAddrs ? this.joinInfo.gatewayAddrs[this.signal.currentURLIndex] : void 0;
        }
        async setPublishAudioFilterEnabled(e2) {
          await this.signal.request(SI.SET_PARAMETER, { enablePublishAudioFilter: e2 });
        }
        resetSignal() {
          this.signal && (this.signal.removeAllListeners(), this.signal.close(cg.FALLBACK)), this.store.useDataChannel = false, this.signal = new ey(By(By({}, this.spec), {}, { retryConfig: this.spec.websocketRetryConfig }), this.store), this.handleSignalEvents(), this.emit(tv.RESET_SIGNAL, sv.websocket);
        }
      }
      let Wy = 0, Hy = 0;
      function Ky(e2, t2, i2, n2) {
        return new tT((s2, r2) => {
          t2.timeout = t2.timeout || DC("HTTP_CONNECT_TIMEOUT"), t2.responseType = t2.responseType || "json", t2.data && !i2 ? (t2.data = JSON.stringify(t2.data), Wy += Lg(t2.data)) : i2 && (t2.data.size ? Wy += t2.data.size : t2.data instanceof FormData ? Wy += kg(t2.data) : Wy += Lg(JSON.stringify(t2.data))), t2.headers = t2.headers || {}, t2.headers["Content-Type"] = t2.headers["Content-Type"] || "application/json", t2.method = "POST", t2.url = e2, EC.request(t2).then((e3) => {
            "string" == typeof e3.data ? Hy += Lg(e3.data) : e3.data instanceof ArrayBuffer || e3.data instanceof Uint8Array ? Hy += e3.data.byteLength : Hy += Lg(JSON.stringify(e3.data)), n2 && s2({ data: e3.data, headers: e3.headers }), s2(e3.data);
          }).catch((e3) => {
            EC.isCancel(e3) ? r2(new VI(xT.OPERATION_ABORTED, "cancel token canceled")) : "ECONNABORTED" === e3.code ? r2(new VI(xT.NETWORK_TIMEOUT, e3.message)) : e3.response ? r2(new VI(xT.NETWORK_RESPONSE_ERROR, e3.response.status)) : r2(new VI(xT.NETWORK_ERROR, e3.message));
          });
        });
      }
      !function() {
        var e2;
        function i2(e3) {
          var t2 = 0;
          return function() {
            return t2 < e3.length ? { done: false, value: e3[t2++] } : { done: true };
          };
        }
        var n2 = "function" == typeof Object.defineProperties ? Object.defineProperty : function(e3, t2, i3) {
          return e3 == Array.prototype || e3 == Object.prototype || (e3[t2] = i3.value), e3;
        };
        var s2, r2 = function(e3) {
          e3 = ["object" == typeof globalThis && globalThis, e3, "object" == typeof window && window, "object" == typeof self && self, "object" == typeof t && t];
          for (var i3 = 0; i3 < e3.length; ++i3) {
            var n3 = e3[i3];
            if (n3 && n3.Math == Math)
              return n3;
          }
          throw Error("Cannot find global object");
        }(this);
        function o2(e3, t2) {
          if (t2)
            e: {
              var i3 = r2;
              e3 = e3.split(".");
              for (var s3 = 0; s3 < e3.length - 1; s3++) {
                var o3 = e3[s3];
                if (!(o3 in i3))
                  break e;
                i3 = i3[o3];
              }
              (t2 = t2(s3 = i3[e3 = e3[e3.length - 1]])) != s3 && null != t2 && n2(i3, e3, { configurable: true, writable: true, value: t2 });
            }
        }
        function a2(e3) {
          return (e3 = { next: e3 })[Symbol.iterator] = function() {
            return this;
          }, e3;
        }
        function c2(e3) {
          var t2 = "undefined" != typeof Symbol && Symbol.iterator && e3[Symbol.iterator];
          return t2 ? t2.call(e3) : { next: i2(e3) };
        }
        if (o2("Symbol", function(e3) {
          function t2(e4, t3) {
            this.A = e4, n2(this, "description", { configurable: true, writable: true, value: t3 });
          }
          if (e3)
            return e3;
          t2.prototype.toString = function() {
            return this.A;
          };
          var i3 = "jscomp_symbol_" + (1e9 * Math.random() >>> 0) + "_", s3 = 0;
          return function e4(n3) {
            if (this instanceof e4)
              throw new TypeError("Symbol is not a constructor");
            return new t2(i3 + (n3 || "") + "_" + s3++, n3);
          };
        }), o2("Symbol.iterator", function(e3) {
          if (e3)
            return e3;
          e3 = Symbol("Symbol.iterator");
          for (var t2 = "Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array".split(" "), s3 = 0; s3 < t2.length; s3++) {
            var o3 = r2[t2[s3]];
            "function" == typeof o3 && "function" != typeof o3.prototype[e3] && n2(o3.prototype, e3, { configurable: true, writable: true, value: function() {
              return a2(i2(this));
            } });
          }
          return e3;
        }), "function" == typeof Object.setPrototypeOf)
          s2 = Object.setPrototypeOf;
        else {
          var d2;
          e: {
            var l2 = {};
            try {
              l2.__proto__ = { a: true }, d2 = l2.a;
              break e;
            } catch (e3) {
            }
            d2 = false;
          }
          s2 = d2 ? function(e3, t2) {
            if (e3.__proto__ = t2, e3.__proto__ !== t2)
              throw new TypeError(e3 + " is not extensible");
            return e3;
          } : null;
        }
        var u2 = s2;
        function h2() {
          this.m = false, this.j = null, this.v = void 0, this.h = 1, this.u = this.C = 0, this.l = null;
        }
        function p2(e3) {
          if (e3.m)
            throw new TypeError("Generator is already running");
          e3.m = true;
        }
        function _2(e3, t2) {
          return e3.h = 3, { value: t2 };
        }
        function E2(e3) {
          this.g = new h2(), this.G = e3;
        }
        function m2(e3, t2, i3, n3) {
          try {
            var s3 = t2.call(e3.g.j, i3);
            if (!(s3 instanceof Object))
              throw new TypeError("Iterator result " + s3 + " is not an object");
            if (!s3.done)
              return e3.g.m = false, s3;
            var r3 = s3.value;
          } catch (t3) {
            return e3.g.j = null, e3.g.s(t3), f2(e3);
          }
          return e3.g.j = null, n3.call(e3.g, r3), f2(e3);
        }
        function f2(e3) {
          for (; e3.g.h; )
            try {
              var t2 = e3.G(e3.g);
              if (t2)
                return e3.g.m = false, { value: t2.value, done: false };
            } catch (t3) {
              e3.g.v = void 0, e3.g.s(t3);
            }
          if (e3.g.m = false, e3.g.l) {
            if (t2 = e3.g.l, e3.g.l = null, t2.F)
              throw t2.D;
            return { value: t2.return, done: true };
          }
          return { value: void 0, done: true };
        }
        function T2(e3) {
          this.next = function(t2) {
            return e3.o(t2);
          }, this.throw = function(t2) {
            return e3.s(t2);
          }, this.return = function(t2) {
            return function(e4, t3) {
              p2(e4.g);
              var i3 = e4.g.j;
              return i3 ? m2(e4, "return" in i3 ? i3.return : function(e5) {
                return { value: e5, done: true };
              }, t3, e4.g.return) : (e4.g.return(t3), f2(e4));
            }(e3, t2);
          }, this[Symbol.iterator] = function() {
            return this;
          };
        }
        function g2(e3, t2) {
          return t2 = new T2(new E2(t2)), u2 && e3.prototype && u2(t2, e3.prototype), t2;
        }
        if (h2.prototype.o = function(e3) {
          this.v = e3;
        }, h2.prototype.s = function(e3) {
          this.l = { D: e3, F: true }, this.h = this.C || this.u;
        }, h2.prototype.return = function(e3) {
          this.l = { return: e3 }, this.h = this.u;
        }, E2.prototype.o = function(e3) {
          return p2(this.g), this.g.j ? m2(this, this.g.j.next, e3, this.g.o) : (this.g.o(e3), f2(this));
        }, E2.prototype.s = function(e3) {
          return p2(this.g), this.g.j ? m2(this, this.g.j.throw, e3, this.g.o) : (this.g.s(e3), f2(this));
        }, o2("Array.prototype.entries", function(e3) {
          return e3 || function() {
            return function(e4, t2) {
              e4 instanceof String && (e4 += "");
              var i3 = 0, n3 = false, s3 = { next: function() {
                if (!n3 && i3 < e4.length) {
                  var s4 = i3++;
                  return { value: t2(s4, e4[s4]), done: false };
                }
                return n3 = true, { done: true, value: void 0 };
              } };
              return s3[Symbol.iterator] = function() {
                return s3;
              }, s3;
            }(this, function(e4, t2) {
              return [e4, t2];
            });
          };
        }), "undefined" != typeof Blob && ("undefined" == typeof FormData || !FormData.prototype.keys)) {
          var S2 = function(e3, t2) {
            for (var i3 = 0; i3 < e3.length; i3++)
              t2(e3[i3]);
          }, R2 = function(e3) {
            return e3.replace(/\r?\n|\r/g, "\r\n");
          }, C2 = function(e3, t2, i3) {
            return t2 instanceof Blob ? (i3 = void 0 !== i3 ? String(i3 + "") : "string" == typeof t2.name ? t2.name : "blob", t2.name === i3 && "[object Blob]" !== Object.prototype.toString.call(t2) || (t2 = new File([t2], i3)), [String(e3), t2]) : [String(e3), String(t2)];
          }, I2 = function(e3, t2) {
            if (e3.length < t2)
              throw new TypeError(t2 + " argument required, but only " + e3.length + " present.");
          }, v2 = "object" == typeof globalThis ? globalThis : "object" == typeof window ? window : "object" == typeof self ? self : this, y2 = v2.FormData, A2 = v2.XMLHttpRequest && v2.XMLHttpRequest.prototype.send, b2 = v2.Request && v2.fetch, w2 = v2.navigator && v2.navigator.sendBeacon, O2 = v2.Element && v2.Element.prototype, N2 = v2.Symbol && Symbol.toStringTag;
          N2 && (Blob.prototype[N2] || (Blob.prototype[N2] = "Blob"), "File" in v2 && !File.prototype[N2] && (File.prototype[N2] = "File"));
          try {
            new File([], "");
          } catch (e3) {
            v2.File = function(e4, t2, i3) {
              return e4 = new Blob(e4, i3 || {}), Object.defineProperties(e4, { name: { value: t2 }, lastModified: { value: +(i3 && void 0 !== i3.lastModified ? new Date(i3.lastModified) : /* @__PURE__ */ new Date()) }, toString: { value: function() {
                return "[object File]";
              } } }), N2 && Object.defineProperty(e4, N2, { value: "File" }), e4;
            };
          }
          var D2 = function(e3) {
            return e3.replace(/\n/g, "%0A").replace(/\r/g, "%0D").replace(/"/g, "%22");
          }, P2 = function(e3) {
            this.i = [];
            var t2 = this;
            e3 && S2(e3.elements, function(e4) {
              if (e4.name && !e4.disabled && "submit" !== e4.type && "button" !== e4.type && !e4.matches("form fieldset[disabled] *"))
                if ("file" === e4.type) {
                  var i3 = e4.files && e4.files.length ? e4.files : [new File([], "", { type: "application/octet-stream" })];
                  S2(i3, function(i4) {
                    t2.append(e4.name, i4);
                  });
                } else
                  "select-multiple" === e4.type || "select-one" === e4.type ? S2(e4.options, function(i4) {
                    !i4.disabled && i4.selected && t2.append(e4.name, i4.value);
                  }) : "checkbox" === e4.type || "radio" === e4.type ? e4.checked && t2.append(e4.name, e4.value) : (i3 = "textarea" === e4.type ? R2(e4.value) : e4.value, t2.append(e4.name, i3));
            });
          };
          if ((e2 = P2.prototype).append = function(e3, t2, i3) {
            I2(arguments, 2), this.i.push(C2(e3, t2, i3));
          }, e2.delete = function(e3) {
            I2(arguments, 1);
            var t2 = [];
            e3 = String(e3), S2(this.i, function(i3) {
              i3[0] !== e3 && t2.push(i3);
            }), this.i = t2;
          }, e2.entries = function e3() {
            var t2, i3 = this;
            return g2(e3, function(e4) {
              if (1 == e4.h && (t2 = 0), 3 != e4.h)
                return t2 < i3.i.length ? e4 = _2(e4, i3.i[t2]) : (e4.h = 0, e4 = void 0), e4;
              t2++, e4.h = 2;
            });
          }, e2.forEach = function(e3, t2) {
            I2(arguments, 1);
            for (var i3 = c2(this), n3 = i3.next(); !n3.done; n3 = i3.next()) {
              var s3 = c2(n3.value);
              n3 = s3.next().value, s3 = s3.next().value, e3.call(t2, s3, n3, this);
            }
          }, e2.get = function(e3) {
            I2(arguments, 1);
            var t2 = this.i;
            e3 = String(e3);
            for (var i3 = 0; i3 < t2.length; i3++)
              if (t2[i3][0] === e3)
                return t2[i3][1];
            return null;
          }, e2.getAll = function(e3) {
            I2(arguments, 1);
            var t2 = [];
            return e3 = String(e3), S2(this.i, function(i3) {
              i3[0] === e3 && t2.push(i3[1]);
            }), t2;
          }, e2.has = function(e3) {
            I2(arguments, 1), e3 = String(e3);
            for (var t2 = 0; t2 < this.i.length; t2++)
              if (this.i[t2][0] === e3)
                return true;
            return false;
          }, e2.keys = function e3() {
            var t2, i3, n3, s3, r3 = this;
            return g2(e3, function(e4) {
              if (1 == e4.h && (t2 = c2(r3), i3 = t2.next()), 3 != e4.h)
                return i3.done ? void (e4.h = 0) : (n3 = i3.value, s3 = c2(n3), _2(e4, s3.next().value));
              i3 = t2.next(), e4.h = 2;
            });
          }, e2.set = function(e3, t2, i3) {
            I2(arguments, 2), e3 = String(e3);
            var n3 = [], s3 = C2(e3, t2, i3), r3 = true;
            S2(this.i, function(t3) {
              t3[0] === e3 ? r3 && (r3 = !n3.push(s3)) : n3.push(t3);
            }), r3 && n3.push(s3), this.i = n3;
          }, e2.values = function e3() {
            var t2, i3, n3, s3, r3 = this;
            return g2(e3, function(e4) {
              if (1 == e4.h && (t2 = c2(r3), i3 = t2.next()), 3 != e4.h)
                return i3.done ? void (e4.h = 0) : (n3 = i3.value, (s3 = c2(n3)).next(), _2(e4, s3.next().value));
              i3 = t2.next(), e4.h = 2;
            });
          }, P2.prototype._asNative = function() {
            for (var e3 = new y2(), t2 = c2(this), i3 = t2.next(); !i3.done; i3 = t2.next()) {
              var n3 = c2(i3.value);
              i3 = n3.next().value, n3 = n3.next().value, e3.append(i3, n3);
            }
            return e3;
          }, P2.prototype._blob = function() {
            var e3 = "----formdata-polyfill-" + Math.random(), t2 = [], i3 = "--" + e3 + '\r\nContent-Disposition: form-data; name="';
            return this.forEach(function(e4, n3) {
              return "string" == typeof e4 ? t2.push(i3 + D2(R2(n3)) + '"\r\n\r\n' + R2(e4) + "\r\n") : t2.push(i3 + D2(R2(n3)) + '"; filename="' + D2(e4.name) + '"\r\nContent-Type: ' + (e4.type || "application/octet-stream") + "\r\n\r\n", e4, "\r\n");
            }), t2.push("--" + e3 + "--"), new Blob(t2, { type: "multipart/form-data; boundary=" + e3 });
          }, P2.prototype[Symbol.iterator] = function() {
            return this.entries();
          }, P2.prototype.toString = function() {
            return "[object FormData]";
          }, O2 && !O2.matches && (O2.matches = O2.matchesSelector || O2.mozMatchesSelector || O2.msMatchesSelector || O2.oMatchesSelector || O2.webkitMatchesSelector || function(e3) {
            for (var t2 = (e3 = (this.document || this.ownerDocument).querySelectorAll(e3)).length; 0 <= --t2 && e3.item(t2) !== this; )
              ;
            return -1 < t2;
          }), N2 && (P2.prototype[N2] = "FormData"), A2) {
            var L2 = v2.XMLHttpRequest.prototype.setRequestHeader;
            v2.XMLHttpRequest.prototype.setRequestHeader = function(e3, t2) {
              L2.call(this, e3, t2), "content-type" === e3.toLowerCase() && (this.B = true);
            }, v2.XMLHttpRequest.prototype.send = function(e3) {
              e3 instanceof P2 ? (e3 = e3._blob(), this.B || this.setRequestHeader("Content-Type", e3.type), A2.call(this, e3)) : A2.call(this, e3);
            };
          }
          b2 && (v2.fetch = function(e3, t2) {
            return t2 && t2.body && t2.body instanceof P2 && (t2.body = t2.body._blob()), b2.call(this, e3, t2);
          }), w2 && (v2.navigator.sendBeacon = function(e3, t2) {
            return t2 instanceof P2 && (t2 = t2._asNative()), w2.call(this, e3, t2);
          }), v2.FormData = P2;
        }
      }();
      const Yy = () => {
        const e2 = DC("AREAS");
        0 === e2.length && e2.push(rv.GLOBAL);
        return cS(e2).call(e2, (e3, t2, i2) => {
          const n2 = qy(t2);
          return n2 ? 0 === i2 ? n2 : "".concat(e3, ",").concat(n2) : e3;
        }, "");
      }, qy = (e2) => e2 === rv.OVERSEA ? "".concat(cv.ASIA, ",").concat(cv.EUROPE, ",").concat(cv.AFRICA, ",").concat(cv.NORTH_AMERICA, ",").concat(cv.SOUTH_AMERICA, ",").concat(cv.OCEANIA) : cv[e2], Jy = (e2) => {
        const t2 = { CODE: "", WEBCS_DOMAIN: [], WEBCS_DOMAIN_BACKUP_LIST: [], PROXY_CS: [], CDS_AP: [], ACCOUNT_REGISTER: [], UAP_AP: [], EVENT_REPORT_DOMAIN: [], EVENT_REPORT_BACKUP_DOMAIN: [], LOG_UPLOAD_SERVER: [], PROXY_SERVER_TYPE3: [] };
        return e2.map((e3) => {
          const i2 = dv[e3], n2 = Object.keys(i2);
          n2 && n2.map((e4) => {
            "CODE" !== e4 && (t2[e4] = t2[e4].concat(i2[e4]));
          });
        }), t2;
      }, zy = { GLOBAL: { ASIA: [rv.CHINA, rv.JAPAN, rv.INDIA, rv.KOREA, rv.HKMC], EUROPE: [], NORTH_AMERICA: [rv.US], SOUTH_AMERICA: [], OCEANIA: [], AFRICA: [] } }, Xy = Object.keys(zy[rv.GLOBAL]), Qy = [rv.CHINA, rv.NORTH_AMERICA, rv.EUROPE, rv.ASIA, rv.JAPAN, rv.INDIA, rv.OCEANIA, rv.SOUTH_AMERICA, rv.AFRICA, rv.KOREA, rv.HKMC, rv.US], Zy = function(e2, t2) {
        let i2 = [];
        if (bn(e2).call(e2, rv.GLOBAL)) {
          const r2 = [rv.GLOBAL, rv.OVERSEA], o2 = Object.keys(dv);
          if (t2 === rv.GLOBAL)
            throw new VI(xT.INVALID_PARAMS, "GLOBAL is an invalid excludedArea value");
          if (t2 === rv.CHINA)
            i2 = [rv.OVERSEA];
          else if (s2 = t2, bn(Xy).call(Xy, s2)) {
            const e3 = (n2 = t2, zy[rv.GLOBAL][n2] || []), s3 = [...r2, t2, ...e3];
            i2 = o2.filter((e4) => !bn(s3).call(s3, e4));
          } else if (function(e3) {
            let t3 = false;
            return Xy.forEach((i3) => {
              var n3;
              bn(n3 = zy[rv.GLOBAL][i3]).call(n3, e3) && (t3 = true);
            }), t3;
          }(t2)) {
            const e3 = function(e4) {
              let t3;
              return Xy.forEach((i3) => {
                var n4;
                bn(n4 = zy[rv.GLOBAL][i3]).call(n4, e4) && (t3 = i3);
              }), t3;
            }(t2), n3 = [...r2, e3, t2];
            i2 = o2.filter((e4) => !bn(n3).call(n3, e4));
          } else
            i2 = e2;
          i2 = function(e3) {
            const t3 = [];
            return Qy.forEach((i3) => {
              bn(e3).call(e3, i3) && t3.push(i3);
            }), t3.concat(e3.filter((e4) => !bn(Qy).call(Qy, e4)));
          }(i2);
        } else
          i2 = e2;
        var n2, s2;
        return i2;
      };
      function $y(e2) {
        var t2, i2;
        if (!e2 && bn(t2 = DC("AREAS")).call(t2, rv.EXTENSIONS))
          return YC.debug("update area from ap : reset"), void eA(oI, true);
        if (!bn(i2 = DC("AREAS")).call(i2, rv.GLOBAL) || !e2)
          return;
        let n2 = dv.EXTENSIONS;
        n2 && (n2 = { CODE: qy(rv.EXTENSIONS), WEBCS_DOMAIN: ["ap-web-1-".concat(e2, ".agora.io")], WEBCS_DOMAIN_BACKUP_LIST: ["ap-web-2-".concat(e2, ".ap.sd-rtn.com")], PROXY_CS: ["proxy-ap-web-".concat(e2, ".agora.io")], CDS_AP: ["cds-ap-web-1-".concat(e2, ".agora.io"), "cds-ap-web-2-".concat(e2, ".ap.sd-rtn.com")], ACCOUNT_REGISTER: ["sua-ap-web-1-".concat(e2, ".agora.io"), "sua-ap-web-2-".concat(e2, ".ap.sd-rtn.com")], UAP_AP: ["uap-ap-web-1-".concat(e2, ".agora.io"), "uap-ap-web-2-".concat(e2, ".ap.sd-rtn.com")], EVENT_REPORT_DOMAIN: ["statscollector-1-".concat(e2, ".agora.io")], EVENT_REPORT_BACKUP_DOMAIN: ["statscollector-2-".concat(e2, ".agora.io")], LOG_UPLOAD_SERVER: ["logservice-".concat(e2, ".agora.io")], PROXY_SERVER_TYPE3: ["webrtc-cloud-proxy-".concat(e2, ".agora.io")] }, YC.debug("update area from ap success: ".concat(e2, ",config is "), n2), NC("AREAS", [rv.EXTENSIONS], true), Object.keys(n2).map((e3) => {
          if ("LOG_UPLOAD_SERVER" === e3 || "EVENT_REPORT_DOMAIN" === e3 || "EVENT_REPORT_BACKUP_DOMAIN" === e3 || "PROXY_SERVER_TYPE3" === e3) {
            NC(e3, n2[e3][0]);
          } else
            NC(e3, n2[e3]);
        }));
      }
      function eA(e2) {
        let t2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        const i2 = rI.reportApiInvoke(null, { name: rg.SET_AREA, options: e2, tag: og.TRACER });
        try {
          let n2 = [];
          if ("string" == typeof e2 && (n2 = [e2]), Array.isArray(e2) && (e2.forEach((e3) => {
            if (!bn(av).call(av, e3))
              throw new VI(xT.INVALID_PARAMS, "invalid area code");
          }), n2 = e2), "[object Object]" === Object.prototype.toString.call(e2)) {
            const { areaCode: t3, excludedArea: i3 } = e2;
            if (!t3)
              throw new VI(xT.INVALID_PARAMS, "area code is needed");
            let s3 = t3;
            "string" == typeof t3 && (s3 = [t3]), n2 = i3 ? Zy(s3, i3) : s3;
          }
          if (!t2) {
            if (PC.AREAS) {
              const e3 = new VI(xT.PROHIBITED_OPERATION, "setArea is prohibited because of config-distribute");
              return i2.onError(e3), void YC.warning("setArea is prohibited because of config-distribute");
            }
            if (bn(n2).call(n2, rv.GLOBAL) && DC("AREAS") === rv.EXTENSIONS) {
              const e3 = new VI(xT.PROHIBITED_OPERATION, "setArea is prohibited because of ap extensions");
              return i2.onError(e3), void YC.warning("setArea is prohibited because of ap extensions");
            }
          }
          NC("AREAS", n2, t2);
          const s2 = Jy(n2);
          Object.keys(s2).map((e3) => {
            if ("LOG_UPLOAD_SERVER" === e3 || "EVENT_REPORT_DOMAIN" === e3 || "EVENT_REPORT_BACKUP_DOMAIN" === e3 || "PROXY_SERVER_TYPE3" === e3) {
              NC(e3, s2[e3][0]);
            } else
              NC(e3, s2[e3]);
          }), YC.debug("set area success:", n2.join(","));
        } catch (e3) {
          throw i2.onError(e3), e3;
        }
        i2.onSuccess();
      }
      function tA(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function iA(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? tA(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : tA(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      let nA = 1;
      function sA(e2, t2, i2, n2, s2) {
        nA += 1;
        const r2 = { sid: i2.sid, command: "convergeAllocateEdge", uid: "666", appId: i2.appId, ts: Math.floor(Date.now() / 1e3), seq: nA, requestId: nA, version: yC, cname: i2.cname }, o2 = { service_name: t2, json_body: JSON.stringify(r2) };
        let a2, c2, d2 = e2[0];
        return Xg(async () => {
          a2 = Date.now();
          const e3 = await Ky(d2, { data: o2, cancelToken: n2, headers: { "X-Packet-Service-Type": "0", "X-Packet-URI": "61" } });
          if (c2 = Date.now() - a2, 0 !== e3.code) {
            const t3 = new VI(xT.UNEXPECTED_RESPONSE, "live streaming ap error, code" + e3.code, { retry: true, responseTime: c2 });
            throw YC.error(t3.toString()), t3;
          }
          const i3 = JSON.parse(e3.json_body);
          if (200 !== i3.code) {
            const e4 = new VI(xT.UNEXPECTED_RESPONSE, "live streaming app center error, code: ".concat(i3.code, ", reason: ").concat(i3.reason), { code: i3.code, responseTime: c2 });
            throw YC.error(e4.toString()), e4;
          }
          if (!i3.servers || 0 === i3.servers.length) {
            const e4 = new VI(xT.UNEXPECTED_RESPONSE, "live streaming app center empty server", { code: i3.code, responseTime: c2 });
            throw YC.error(e4.toString()), e4;
          }
          const s3 = function(e4, t3) {
            return { addressList: e4.servers.map((e5) => "wss://".concat(e5.address.replace(/\./g, "-"), ".").concat(DC("WORKER_DOMAIN"), ":").concat(e5.wss, "?serviceName=").concat(encodeURIComponent(t3))), workerToken: e4.workerToken, vid: e4.vid };
          }(i3, t2);
          return DC("LIVE_STREAMING_ADDRESS") && (s3.addressList = DC("LIVE_STREAMING_ADDRESS") instanceof Array ? DC("LIVE_STREAMING_ADDRESS") : [DC("LIVE_STREAMING_ADDRESS")]), iA(iA({}, s3), {}, { responseTime: c2 });
        }, (n3, s3) => (rI.apworkerEvent(i2.sid, { success: true, sc: 200, serviceName: t2, responseDetail: JSON.stringify(n3.addressList), firstSuccess: 0 === s3, responseTime: c2, serverIp: e2[s3 % e2.length] }), false), (n3, s3) => (rI.apworkerEvent(i2.sid, { success: false, sc: n3.data && n3.data.code || 200, serviceName: t2, responseTime: c2, serverIp: e2[s3 % e2.length] }), !!(n3.code !== xT.OPERATION_ABORTED && n3.code !== xT.UNEXPECTED_RESPONSE || n3.data && n3.data.retry) && (d2 = e2[(s3 + 1) % e2.length], true)), s2);
      }
      let rA = 1;
      function oA(e2, t2, i2, n2) {
        let { url: s2, areaCode: r2 } = e2;
        const o2 = Date.now();
        let a2;
        const [c2, d2] = uA(t2, r2, [_y.CHOOSE_SERVER]);
        let l2 = Rg.networkState;
        return Xg(async () => {
          l2 && Rg.networkState === ug.OFFLINE && Rg.onlineWaiter && await tT.race([Rg.onlineWaiter, Ug(n2 && n2.maxRetryTimeout || Jg.maxRetryTimeout)]), l2 = Rg.networkState;
          const { data: e3, headers: r3 } = await Ky(s2, { data: c2, cancelToken: i2, headers: { "Content-Type": "multipart/form-data;" } }, true, true);
          a2 = "1" === r3.http3 ? 1 : -1, rI.reportResourceTiming(s2, t2.sid), cA(e3, s2, t2, o2, [_y.CHOOSE_SERVER], a2);
          const d3 = wy(e3, _y.CHOOSE_SERVER);
          return dA(d3), vy(d3, s2);
        }, (e3) => (e3 && rI.joinChooseServer(t2.sid, { lts: o2, succ: true, csAddr: s2, opid: d2, serverList: e3.gatewayAddrs.map((e4) => e4.address), ec: null, cid: e3.cid.toString(), uid: e3.uid.toString(), csIp: e3.csIp, unilbsServerIds: [_y.CHOOSE_SERVER].toString(), isHttp3: a2 }), false), (e3) => e3.code !== xT.OPERATION_ABORTED && (e3.code === xT.CAN_NOT_GET_GATEWAY_SERVER ? e3.data.retry : (rI.joinChooseServer(t2.sid, { lts: o2, succ: false, csAddr: s2, serverList: null, opid: d2, ec: e3.code, csIp: e3.data && e3.data.csIp, unilbsServerIds: [_y.CHOOSE_SERVER].toString(), extend: JSON.stringify({ networkState: l2 }), isHttp3: a2 }), YC.warning("[".concat(t2.clientId, "] Choose server network error, retry"), e3), true)), n2);
      }
      function aA(e2, t2, i2, n2) {
        let s2, { url: r2, areaCode: o2, serviceIds: a2 } = e2;
        const c2 = Date.now(), [d2, l2] = uA(t2, o2, a2);
        let u2;
        return Xg(async () => {
          u2 && Rg.networkState === ug.OFFLINE && Rg.onlineWaiter && await tT.race([Rg.onlineWaiter, Ug(n2 && n2.maxRetryTimeout || Jg.maxRetryTimeout)]), u2 = Rg.networkState;
          const { data: e3, headers: o3 } = await Ky(r2, { data: d2, cancelToken: i2, headers: { "Content-Type": "multipart/form-data;" } }, true, true);
          s2 = "1" === o3.http3 ? 1 : -1, rI.reportResourceTiming(r2, t2.sid), cA(e3, r2, t2, c2, a2, s2);
          const l3 = wy(e3, _y.CHOOSE_SERVER), h2 = wy(e3, "proxy5" === t2.cloudProxyServer ? _y.CLOUD_PROXY_5 : "proxy3" === t2.cloudProxyServer || "proxy4" === t2.cloudProxyServer ? _y.CLOUD_PROXY : _y.CLOUD_PROXY_FALLBACK);
          return dA(l3), { gatewayInfo: vy(l3, r2), proxyInfo: h2, url: r2 };
        }, (e3) => (e3.gatewayInfo && rI.joinChooseServer(t2.sid, { lts: c2, succ: true, csAddr: r2, serverList: e3.gatewayInfo.gatewayAddrs.map((e4) => e4.address), ec: null, opid: l2, cid: e3.gatewayInfo.cid.toString(), uid: e3.gatewayInfo.uid.toString(), csIp: e3.gatewayInfo.csIp, unilbsServerIds: a2.toString(), isHttp3: s2 }), e3.proxyInfo && rI.joinWebProxyAP(t2.sid, { lts: c2, sucess: 1, apServerAddr: r2, turnServerAddrList: e3.proxyInfo.addresses.map((e4) => e4.ip).join(","), errorCode: null, eventType: t2.cloudProxyServer, unilbsServerIds: a2.toString() }), false), (e3) => e3.code !== xT.OPERATION_ABORTED && (e3.code === xT.CAN_NOT_GET_GATEWAY_SERVER ? e3.data.retry : (rI.joinWebProxyAP(t2.sid, { lts: c2, sucess: 0, apServerAddr: r2, turnServerAddrList: null, errorCode: e3.code, eventType: t2.cloudProxyServer, unilbsServerIds: a2.toString(), extend: JSON.stringify({ networkState: u2 }) }), YC.warning("[".concat(t2.clientId, "] multi unilbs network error, retry"), e3), true)), n2);
      }
      const cA = (e2, t2, i2, n2, s2, r2) => {
        const o2 = [], a2 = (o3) => {
          4096 === o3.flag ? rI.joinChooseServer(i2.sid, { lts: n2, succ: false, csAddr: t2, opid: e2.opid, serverList: null, ec: o3.error.message, csIp: o3.error.data && o3.error.data.csIp, unilbsServerIds: s2.toString(), isHttp3: r2 }) : 1048576 !== o3.flag && 4194304 !== o3.flag && 4194310 !== o3.flag || rI.joinWebProxyAP(i2.sid, { lts: n2, sucess: 0, apServerAddr: t2, turnServerAddrList: null, errorCode: o3.error.code, eventType: i2.cloudProxyServer, unilbsServerIds: s2.toString() });
        };
        if (e2.response_body.forEach((t3) => {
          const i3 = t3.buffer.code;
          if (23 === t3.uri && 0 === i3 && !t3.buffer.edges_services)
            if (4194310 === t3.buffer.flag)
              YC.warning("no edge services in ap response of proxy fallback, will not set proxy in iceServers"), t3.buffer.edges_services = [];
            else {
              const i4 = { error: new VI(xT.CAN_NOT_GET_GATEWAY_SERVER, "no edge services in ap response", { retry: true, csIp: e2.detail[502] }), flag: t3.buffer.flag };
              o2.push(i4), a2(i4);
            }
          if (0 !== i3) {
            const n3 = xv(i3), s3 = { error: new VI(xT.CAN_NOT_GET_GATEWAY_SERVER, n3.desc, { desc: n3.desc, retry: n3.retry, csIp: e2.detail[502] }), flag: t3.buffer.flag };
            4194310 === t3.buffer.flag ? YC.warning(s3.error.toString()) : o2.push(s3), a2(s3);
          }
        }), o2.length)
          throw YC.warning("[".concat(i2.clientId, "] multi unilbs ").concat(t2, " failed, ").concat(o2.map((e3) => "flag: ".concat(e3.flag, ", message: ").concat(e3.error.message, ", retry: ").concat(e3.error.data.retry)).join(" | "))), new VI(xT.CAN_NOT_GET_GATEWAY_SERVER, o2.map((e3) => "flag: ".concat(e3.flag, ", message: ").concat(e3.error.message)).join(" | "), { retry: !!o2.find((e3) => e3.error.data.retry), csIp: e2.detail[502], desc: [...new Set(o2.map((e3) => {
            var t3;
            return null == e3 || null === (t3 = e3.error) || void 0 === t3 || null === (t3 = t3.data) || void 0 === t3 ? void 0 : t3.desc;
          }).filter((e3) => !!e3))] });
      }, dA = (e2) => {
        var t2, i2, n2, s2;
        if (e2.addresses && 0 === e2.addresses.length && 0 === e2.code)
          throw new VI(xT.CAN_NOT_GET_GATEWAY_SERVER, "void gateway address", { retry: true, csIp: e2.detail && e2.detail[502] });
        DC("AP_AREA") && (null !== (n2 = e2.detail) && void 0 !== n2 && n2[23] && "string" == typeof (null === (s2 = e2.detail) || void 0 === s2 ? void 0 : s2[23]) ? $y(e2.detail[23].toLowerCase()) : $y());
        if (null !== (t2 = e2.detail) && void 0 !== t2 && t2[19] && "string" == typeof (null === (i2 = e2.detail) || void 0 === i2 ? void 0 : i2[19])) {
          const t3 = e2.detail[19], i3 = null == t3 ? void 0 : t3.split(";");
          for (let t4 = 0; t4 < i3.length; t4++) {
            var r2;
            const n3 = Sy(r2 = i3[t4]).call(r2);
            e2.addresses[t4] && i3 && (e2.addresses[t4].fingerprint = n3);
          }
        }
        if (DC("GATEWAY_ADDRESS") && DC("GATEWAY_ADDRESS").length > 0) {
          YC.debug("assign gateway address to", DC("GATEWAY_ADDRESS"));
          const t3 = DC("GATEWAY_ADDRESS").map((t4) => {
            var i3, n3;
            const s3 = null !== (i3 = null === (n3 = e2.addresses.find((e3) => e3.ip === t4.ip && e3.port === t4.port)) || void 0 === n3 ? void 0 : n3.fingerprint) && void 0 !== i3 ? i3 : "";
            return { ip: t4.ip, port: t4.port, ticket: e2.addresses[0] && e2.addresses[0].ticket, fingerprint: s3 };
          });
          e2.addresses = t3;
        }
      }, lA = (e2, t2) => {
        if (e2.response_body && e2.response_body.length) {
          const t3 = e2.response_body[0];
          if (0 !== t3.buffer.code) {
            const e3 = xv(t3.buffer.code);
            throw new VI(xT.UPDATE_TICKET_FAILED, "[".concat(t3.buffer.code, "]: ").concat(e3.desc), { retry: e3.retry });
          }
          return t3.buffer.ticket;
        }
        throw YC.debug("update ticket request received ap response without response body:", t2), new VI(xT.UPDATE_TICKET_FAILED, "cannot find response body from ap response", { retry: false });
      }, uA = (e2, t2, i2) => {
        const n2 = Math.floor(Math.random() * 10 ** 12), s2 = { appid: e2.appId, client_ts: Date.now(), opid: n2, sid: e2.sid, request_bodies: [{ uri: 22, buffer: { cname: e2.cname, detail: iA({ 6: e2.stringUid, 11: t2, 12: DC("USE_NEW_TOKEN") ? "1" : void 0, 22: t2 }, e2.apRTM ? { 26: "RTM2" } : {}), key: e2.token, service_ids: i2, uid: e2.uid || 0 } }] };
        s2.request_bodies.forEach((t3) => {
          e2.multiIP && e2.multiIP.gateway_ip && (t3.buffer.detail[5] = JSON.stringify({ vocs_ip: [e2.multiIP.uni_lbs_ip], vos_ip: [e2.multiIP.gateway_ip] }));
        });
        const r2 = new FormData();
        return r2.append("request", JSON.stringify(s2)), [r2, n2];
      }, hA = (e2, t2) => {
        const i2 = Math.floor(Math.random() * 10 ** 12), n2 = { appid: e2.appId, client_ts: Date.now(), opid: i2, sid: e2.sid, request_bodies: [{ uri: 28, buffer: { cname: e2.cname, detail: { 1: "", 6: e2.stringUid, 12: "1" }, token: e2.token, service_ids: t2, uid: e2.uid || 0, edges_services: e2.apResponse.addresses.map((e3) => ({ ip: e3.ip, port: e3.port })) } }] }, s2 = new FormData();
        return s2.append("request", JSON.stringify(n2)), [s2, i2];
      };
      let pA = 0;
      function _A(e2) {
        return tT.all(e2.map((e3) => e3.then((e4) => {
          throw e4;
        }, (e4) => e4))).then((e3) => {
          throw e3;
        }, (e3) => e3);
      }
      const EA = async (e2) => {
        let { fragementLength: t2, referenceList: i2, asyncMapHandler: n2, allFailedhandler: s2, promisesCollector: r2 } = e2, o2 = 0;
        const a2 = t2;
        let c2, d2 = 0;
        const l2 = async () => {
          const e3 = (() => {
            const e4 = o2 * a2, t3 = e4 + a2;
            return i2.slice(e4, t3).map(n2);
          })();
          r2 && r2.push(...e3);
          try {
            c2 = await _A(e3);
          } catch (e4) {
            if (d2 += a2, o2++, !(d2 >= i2.length))
              return void await l2();
            s2(e4);
          }
          e3.forEach((e4) => e4.cancel());
        };
        return await l2(), c2;
      };
      async function mA(e2, t2, i2, n2) {
        const s2 = async function(e3, t3, i3, n3) {
          let s3 = null;
          const r2 = [], o2 = async () => {
            const s4 = DC("WEBCS_DOMAIN").slice(0, DC("AJAX_REQUEST_CONCURRENT")).map((t4) => ({ url: e3.proxyServer ? "https://".concat(e3.proxyServer, "/ap/?url=").concat(t4 + "/api/v2/transpond/webrtc?v=2") : "https://".concat(t4, "/api/v2/transpond/webrtc?v=2"), areaCode: Yy() })), o3 = n3.recordJoinChannelService({ startTs: Date.now(), status: "pending", service: "chooseServer", urls: s4.map((e4) => e4.url) }), a3 = await EA({ fragementLength: DC("FRAGEMENT_LENGTH"), referenceList: s4, asyncMapHandler: (n4) => (YC.debug("[".concat(e3.clientId, "] Connect to choose_server:"), n4.url), oA(n4, e3, t3, i3)), allFailedhandler: (e4) => {
              throw n3.recordJoinChannelService({ endTs: Date.now(), status: "error", errors: e4 }, o3), e4[0];
            }, promisesCollector: r2 });
            return n3.recordJoinChannelService({ endTs: Date.now(), status: "success" }, o3), a3;
          }, a2 = async () => {
            if (await Ug(1e3), null !== s3)
              return s3;
            const o3 = DC("WEBCS_DOMAIN_BACKUP_LIST").map((t4) => ({ url: e3.proxyServer ? "https://".concat(e3.proxyServer, "/ap/?url=").concat(t4 + "/api/v2/transpond/webrtc?v=2") : "https://".concat(t4, "/api/v2/transpond/webrtc?v=2"), areaCode: Yy() })), a3 = n3.recordJoinChannelService({ endTs: void 0, startTs: Date.now(), status: "pending", service: "chooseServer", urls: o3.map((e4) => e4.url) }), c2 = await EA({ fragementLength: DC("FRAGEMENT_LENGTH"), referenceList: o3, asyncMapHandler: (n4) => (YC.debug("[".concat(e3.clientId, "] Connect to backup choose_server:"), n4.url), oA(n4, e3, t3, i3)), allFailedhandler: (e4) => {
              throw n3.recordJoinChannelService({ endTs: Date.now(), status: "error", errors: e4 }, a3), e4[0];
            }, promisesCollector: r2 });
            return n3.recordJoinChannelService({ endTs: Date.now(), status: "success" }, a3), c2;
          };
          try {
            return s3 = await _A([o2(), a2()]), r2.length && r2.forEach((e4) => e4.cancel && "function" == typeof e4.cancel && e4.cancel()), s3;
          } catch (e4) {
            throw e4[0];
          }
        }(e2, t2, i2, n2);
        return { gatewayInfo: await s2 };
      }
      async function fA(e2, t2, i2, n2, s2) {
        const r2 = e2.cloudProxyServer;
        if ("disabled" === r2) {
          if (!n2)
            return;
          if (e2.useLocalAccessPoint)
            return await mA(e2, t2, i2, s2);
          if (DC("JOIN_WITH_FALLBACK_MEDIA_PROXY")) {
            const { gatewayInfo: n3, proxyInfo: r3 } = await SA(e2, t2, i2, s2);
            if (e2.turnServer && "auto" !== e2.turnServer.mode)
              return { gatewayInfo: n3 };
            const a3 = r3.map((e3) => ({ turnServerURL: e3.address, tcpport: e3.tcpport || aI.tcpport, udpport: e3.udpport || aI.udpport, username: e3.username || aI.username, password: e3.password || aI.password, forceturn: false, security: true }));
            if (s2.useP2P) {
              var o2;
              const t3 = null !== (o2 = e2.uid) && void 0 !== o2 ? o2 : n3.uid, i3 = "glb:".concat(t3.toString()), s3 = await tg(i3), c3 = r3.map((e3) => ({ turnServerURL: e3.address, tcpport: e3.tcpport || aI.tcpport, udpport: e3.udpport || aI.udpport, username: i3, password: s3, forceturn: false, security: true }));
              a3.push(...c3);
            }
            return e2.turnServer = { mode: "manual", servers: a3 }, { gatewayInfo: n3 };
          }
          return await mA(e2, t2, i2, s2);
        }
        const { proxyInfo: a2, gatewayInfo: c2 } = await SA(e2, t2, i2, s2), d2 = { gatewayInfo: c2 }, l2 = a2.map((e3) => ({ turnServerURL: e3.address, tcpport: "proxy3" === r2 ? void 0 : e3.tcpport ? e3.tcpport : aI.tcpport, udpport: "proxy4" === r2 ? void 0 : e3.udpport ? e3.udpport : aI.udpport, username: e3.username || aI.username, password: e3.password || aI.password, forceturn: "proxy4" !== r2, security: "proxy5" === r2 }));
        if (s2.useP2P) {
          var u2;
          const t3 = null !== (u2 = e2.uid) && void 0 !== u2 ? u2 : c2.uid, i3 = "glb:".concat(t3.toString()), n3 = await tg(i3), s3 = a2.map((e3) => ({ turnServerURL: e3.address, tcpport: "proxy3" === r2 ? void 0 : e3.tcpport || aI.tcpport, udpport: "proxy4" === r2 ? void 0 : e3.udpport || aI.udpport, username: i3, password: n3, forceturn: "proxy4" !== r2, security: "proxy5" === r2 }));
          l2.push(...s3);
        }
        return e2.turnServer = { mode: "manual", servers: l2 }, YC.debug("[".concat(e2.clientId, "] set proxy server: ").concat(e2.proxyServer, ", mode: ").concat(r2)), d2;
      }
      async function TA(e2, t2, i2, n2, s2) {
        const r2 = DC("ACCOUNT_REGISTER").slice(0, DC("AJAX_REQUEST_CONCURRENT"));
        let o2 = [];
        o2 = t2.proxyServer ? r2.map((e3) => "https://".concat(t2.proxyServer, "/ap/?url=").concat(e3 + "/api/v1")) : r2.map((e3) => "https://".concat(e3, "/api/v1"));
        const a2 = null == s2 ? void 0 : s2.recordJoinChannelService({ startTs: Date.now(), status: "pending", service: "stringUID", urls: o2 });
        try {
          const r3 = await async function(e3, t3, i3, n3, s3) {
            const r4 = Date.now(), o3 = { sid: i3.sid, opid: 10, appid: i3.appId, string_uid: t3 };
            let a3 = e3[0];
            const c2 = await Xg(() => Ky(a3 + "".concat(-1 === a3.indexOf("?") ? "?" : "&", "action=stringuid"), { data: o3, cancelToken: n3, headers: { "X-Packet-Service-Type": 0, "X-Packet-URI": 72 } }), (i4, n4) => {
              if (0 === i4.code) {
                if (i4.uid <= 0 || i4.uid >= Math.pow(2, 32))
                  throw YC.error("Invalid Uint Uid ".concat(t3, " => ").concat(i4.uid), i4), rI.reqUserAccount(o3.sid, { lts: r4, success: false, serverAddr: a3, stringUid: o3.string_uid, uid: i4.uid, errorCode: xT.INVALID_UINT_UID_FROM_STRING_UID, extend: o3 }), new VI(xT.INVALID_UINT_UID_FROM_STRING_UID);
                return rI.reqUserAccount(o3.sid, { lts: r4, success: true, serverAddr: a3, stringUid: o3.string_uid, uid: i4.uid, errorCode: null, extend: o3 }), false;
              }
              const s4 = xv(i4.code);
              return s4.retry && (a3 = e3[(n4 + 1) % e3.length]), rI.reqUserAccount(o3.sid, { lts: r4, success: false, serverAddr: a3, stringUid: o3.string_uid, uid: i4.uid, errorCode: s4.desc, extend: o3 }), s4.retry;
            }, (t4, i4) => t4.code !== xT.OPERATION_ABORTED && (rI.reqUserAccount(o3.sid, { lts: r4, success: false, serverAddr: a3, stringUid: o3.string_uid, uid: null, errorCode: t4.code, extend: o3 }), a3 = e3[(i4 + 1) % e3.length], true), s3);
            if (0 !== c2.code) {
              const e4 = xv(c2.code);
              throw new VI(xT.UNEXPECTED_RESPONSE, e4.desc);
            }
            return c2;
          }(o2, e2, t2, i2, n2);
          return null == s2 || s2.recordJoinChannelService({ status: "success", endTs: Date.now() }, a2), r3.uid;
        } catch (e3) {
          throw null == s2 || s2.recordJoinChannelService({ status: "error", endTs: Date.now(), errors: [e3] }, a2), e3;
        }
      }
      async function gA(e2, t2, i2) {
        const n2 = DC("CDS_AP").slice(0, DC("AJAX_REQUEST_CONCURRENT")).map((t3) => e2.proxyServer ? "https://".concat(e2.proxyServer, "/ap/?url=").concat(t3 + "/api/v1") : "https://".concat(t3, "/api/v1?action=config")).map((n3) => function(e3, t3, i3, n4) {
          const s3 = pT(), r3 = { flag: 64, cipher_method: 0, features: { device: s3.name, system: s3.os, system_general: navigator.userAgent, vendor: t3.appId, version: yC, cname: t3.cname, sid: t3.sid, session_id: t3.sid, detail: "", proxyServer: t3.proxyServer } };
          return Xg(() => Ky(e3, { data: r3, timeout: 1e3, cancelToken: i3, headers: { "X-Packet-Service-Type": 0, "X-Packet-URI": 54 } }), void 0, (e4) => e4.code !== xT.OPERATION_ABORTED, n4);
        }(n3, e2, t2, i2));
        let s2 = null, r2 = null, o2 = {};
        try {
          s2 = await _A(n2);
        } catch (e3) {
          if (e3.code === xT.OPERATION_ABORTED)
            throw e3;
          r2 = e3;
        }
        n2.forEach((e3) => e3.cancel());
        if (rI.reportApiInvoke(e2.sid, { name: rg.REQUEST_CONFIG_DISTRIBUTE, options: { error: r2, res: s2 } }).onSuccess(), s2 && s2.test_tags)
          try {
            o2 = function(e3) {
              if (!e3.test_tags)
                return {};
              const t3 = e3.test_tags, i3 = Object.keys(t3), n3 = {};
              return i3.forEach((e4) => {
                var i4;
                const s3 = Sy(i4 = e4.slice(4)).call(i4), r3 = JSON.parse(t3[e4])[1];
                n3[s3] = r3;
              }), n3;
            }(s2);
          } catch (e3) {
          }
        return o2;
      }
      async function SA(e2, t2, i2, n2) {
        const s2 = DC("PROXY_SERVER_TYPE3"), r2 = (e3, t3, i3) => {
          let n3 = i3 || s2;
          return Array.isArray(n3) && (n3 = t3 % 2 == 0 ? s2[1] : s2[0]), "https://".concat(n3, "/ap/?url=").concat(e3);
        };
        let o2 = null;
        const a2 = [], c2 = async () => {
          const s3 = DC("WEBCS_DOMAIN").slice(0, DC("AJAX_REQUEST_CONCURRENT")).map((t3, i3) => {
            let n3;
            return n3 = "disabled" === e2.cloudProxyServer && e2.proxyServer ? r2("".concat(t3, "/api/v2/transpond/webrtc?v=2"), i3, e2.proxyServer) : "disabled" === e2.cloudProxyServer || "fallback" === e2.cloudProxyServer ? "https://".concat(t3, "/api/v2/transpond/webrtc?v=2") : r2("".concat(t3, "/api/v2/transpond/webrtc?v=2"), i3), { url: n3, areaCode: Yy(), serviceIds: [_y.CHOOSE_SERVER, "proxy5" === e2.cloudProxyServer ? _y.CLOUD_PROXY_5 : "proxy3" === e2.cloudProxyServer || "proxy4" === e2.cloudProxyServer ? _y.CLOUD_PROXY : _y.CLOUD_PROXY_FALLBACK] };
          }), o3 = n2.recordJoinChannelService({ startTs: Date.now(), status: "pending", service: "chooseServer", urls: s3.map((e3) => e3.url) }), c3 = await EA({ fragementLength: DC("FRAGEMENT_LENGTH"), referenceList: s3, asyncMapHandler: (n3) => (YC.debug("[".concat(e2.clientId, "] Connect to choose_server:"), n3.url), aA(n3, e2, t2, i2)), allFailedhandler: (e3) => {
            throw n2.recordJoinChannelService({ endTs: Date.now(), status: "error", errors: e3 }, o3), e3[0];
          }, promisesCollector: a2 });
          return n2.recordJoinChannelService({ endTs: Date.now(), status: "success" }, o3), c3;
        }, d2 = async () => {
          if (await Ug(1e3), null !== o2)
            return o2;
          const s3 = DC("WEBCS_DOMAIN_BACKUP_LIST").map((t3, i3) => {
            let n3;
            return n3 = "disabled" === e2.cloudProxyServer && e2.proxyServer ? r2("".concat(t3, "/api/v2/transpond/webrtc?v=2"), i3, e2.proxyServer) : "disabled" === e2.cloudProxyServer || "fallback" === e2.cloudProxyServer ? "https://".concat(t3, "/api/v2/transpond/webrtc?v=2") : r2("".concat(t3, "/api/v2/transpond/webrtc?v=2"), i3), { url: n3, areaCode: Yy(), serviceIds: [_y.CHOOSE_SERVER, "proxy5" === e2.cloudProxyServer ? _y.CLOUD_PROXY_5 : "proxy3" === e2.cloudProxyServer || "proxy4" === e2.cloudProxyServer ? _y.CLOUD_PROXY : _y.CLOUD_PROXY_FALLBACK] };
          }), c3 = n2.recordJoinChannelService({ startTs: Date.now(), status: "pending", service: "chooseServer", urls: s3.map((e3) => e3.url) }), d3 = await EA({ fragementLength: DC("FRAGEMENT_LENGTH"), referenceList: s3, asyncMapHandler: (n3) => (YC.debug("[".concat(e2.clientId, "] Connect to backup choose_server:"), n3.url), aA(n3, e2, t2, i2)), allFailedhandler: (e3) => {
            throw n2.recordJoinChannelService({ endTs: Date.now(), status: "error", errors: e3 }, c3), e3[0];
          }, promisesCollector: a2 });
          return n2.recordJoinChannelService({ endTs: Date.now(), status: "success" }, c3), d3;
        };
        let l2, u2, h2;
        try {
          ({ gatewayInfo: l2, proxyInfo: u2, url: h2 } = await _A([c2(), d2()]));
        } catch (e3) {
          throw e3[0];
        }
        if (a2.length && a2.forEach((e3) => e3.cancel && "function" == typeof e3.cancel && e3.cancel()), !l2 || !u2)
          throw new VI(xT.UNEXPECTED_ERROR, "missing gateway or proxy response").print();
        if (e2.apUrl = h2, "disabled" !== e2.cloudProxyServer && Array.isArray(s2) && h2) {
          const t3 = /^https?:\/\/(.+?)(\/.*)?$/.exec(h2)[1];
          bn(s2).call(s2, t3) && (e2.proxyServer = t3, YC.setProxyServer(t3), rI.setProxyServer(t3));
        }
        return o2 = { gatewayInfo: l2, proxyInfo: await Oy(u2, l2.uid) }, o2;
      }
      async function RA(e2, t2, i2, n2) {
        const s2 = DC("UAP_AP").slice(0, DC("AJAX_REQUEST_CONCURRENT")).map((e3) => t2.proxyServer ? "https://".concat(t2.proxyServer, "/ap/?url=").concat(e3 + "/api/v1?action=uap") : "https://".concat(e3, "/api/v1?action=uap"));
        return await sA(s2, e2, t2, i2, n2);
      }
      async function CA(e2, t2, i2) {
        const n2 = DC("UAP_AP").slice(0, DC("AJAX_REQUEST_CONCURRENT")).map((t3) => e2.proxyServer ? "https://".concat(e2.proxyServer, "/ap/?url=").concat(t3 + "/api/v1?action=uap") : "https://".concat(t3, "/api/v1?action=uap")).map((n3) => function(e3, t3, i3, n4) {
          const s2 = { command: "convergeAllocateEdge", sid: t3.sid, appId: t3.appId, token: t3.token, ts: Date.now(), version: yC, cname: t3.cname, uid: t3.uid.toString(), requestId: rA, seq: rA };
          rA += 1;
          const r2 = { service_name: "tele_channel", json_body: JSON.stringify(s2) };
          return Xg(async () => {
            const t4 = await Ky(e3, { data: r2, cancelToken: i3, headers: { "X-Packet-Service-Type": 0, "X-Packet-URI": 61 } });
            if (0 !== t4.code) {
              const e4 = new VI(xT.UNEXPECTED_RESPONSE, "cross channel ap error, code" + t4.code, { retry: true });
              throw YC.error(e4.toString()), e4;
            }
            const n5 = JSON.parse(t4.json_body);
            if (200 !== n5.code) {
              const e4 = new VI(xT.UNEXPECTED_RESPONSE, "cross channel app center error, code: ".concat(n5.code, ", reason: ").concat(n5.reason));
              throw YC.error(e4.toString()), e4;
            }
            if (!n5.servers || 0 === n5.servers.length) {
              const e4 = new VI(xT.UNEXPECTED_RESPONSE, "cross channel app center empty server");
              throw YC.error(e4.toString()), e4;
            }
            return { vid: n5.vid, workerToken: n5.workerToken, addressList: (DC("CHANNEL_MEDIA_RELAY_SERVERS") || n5.servers).map((e4) => "wss://".concat(e4.address.replace(/\./g, "-"), ".").concat(DC("WORKER_DOMAIN"), ":").concat(e4.wss)) };
          }, void 0, (e4) => !!(e4.code !== xT.OPERATION_ABORTED && e4.code !== xT.UNEXPECTED_RESPONSE || e4.data && e4.data.retry), n4);
        }(n3, e2, t2, i2));
        try {
          const e3 = await _A(n2);
          return n2.forEach((e4) => e4.cancel()), e3;
        } catch (e3) {
          throw e3[0];
        }
      }
      async function IA(e2, t2, i2) {
        let n2 = null;
        const s2 = [], r2 = async (r3) => {
          const o2 = DC(r3 ? "WEBCS_DOMAIN_BACKUP_LIST" : "WEBCS_DOMAIN").map((t3) => e2.proxyServer ? "https://".concat(e2.proxyServer, "/ap/?url=").concat(t3 + "/api/v2/transpond/webrtc?v=2") : "https://".concat(t3, "/api/v2/transpond/webrtc?v=2"));
          return r3 && (await Ug(1e3), null !== n2) ? n2 : await EA({ fragementLength: DC("FRAGEMENT_LENGTH"), referenceList: o2, asyncMapHandler: (n3) => (YC.debug("[".concat(e2.clientId, "] update ticket, Connect to ").concat(r3 ? "backup" : "", " choose_server:"), n3), function(e3, t3, i3, n4) {
            const [s3] = hA(t3, [_y.CHOOSE_SERVER]);
            let r4 = Rg.networkState;
            return Xg(async () => {
              r4 && Rg.networkState === ug.OFFLINE && Rg.onlineWaiter && await tT.race([Rg.onlineWaiter, Ug(n4 && n4.maxRetryTimeout || Jg.maxRetryTimeout)]), r4 = Rg.networkState;
              const t4 = await Ky(e3, { data: s3, cancelToken: i3, headers: { "Content-Type": "multipart/form-data;" } }, true);
              return lA(t4, e3);
            }, () => false, (e4) => e4.code !== xT.OPERATION_ABORTED && (e4.code === xT.UPDATE_TICKET_FAILED ? e4.data.retry : (YC.warning("[".concat(t3.clientId, "] update ticket network error, retry"), e4), true)), n4);
          }(n3, e2, t2, i2)), allFailedhandler: (e3) => {
            throw e3[0];
          }, promisesCollector: s2 });
        };
        try {
          return n2 = await _A([r2(false), r2(true)]), s2.length && s2.forEach((e3) => e3.cancel && "function" == typeof e3.cancel && e3.cancel()), n2;
        } catch (e3) {
          throw e3[0];
        }
      }
      function vA(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function yA(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? vA(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : vA(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      class AA extends ig {
        get isSuccess() {
          return !!this.configs;
        }
        constructor() {
          super(), nh(this, "configs", void 0), nh(this, "joinInfo", void 0), nh(this, "cancelToken", void 0), nh(this, "retryConfig", { timeout: 3e3, timeoutFactor: 1.5, maxRetryCount: 1, maxRetryTimeout: 1e4 }), nh(this, "interval", void 0), nh(this, "mutex", new Yg("config-distribute")), nh(this, "mutableParamsRead", false);
        }
        startGetConfigDistribute(e2, t2) {
          this.joinInfo = e2, this.cancelToken = t2, this.interval && this.stopGetConfigDistribute(), DC("ENABLE_CONFIG_DISTRIBUTE") && (this.updateConfigDistribute(), this.interval = window.setInterval(() => {
            this.updateConfigDistribute();
          }, DC("CONFIG_DISTRIBUTE_INTERVAL")));
        }
        stopGetConfigDistribute() {
          this.interval && clearInterval(this.interval), this.interval = void 0, this.joinInfo = void 0, this.cancelToken = void 0;
        }
        async awaitConfigDistributeComplete() {
          if (!this.mutex.isLocked)
            return;
          (await this.mutex.lock())();
        }
        async updateConfigDistribute() {
          if (!this.mutableParamsRead) {
            this.mutableParamsRead = true;
            rI.reportApiInvoke(null, { options: void 0, name: rg.LOAD_CONFIG_FROM_LOCALSTORAGE, tag: og.TRACER }).onSuccess(JSON.stringify(PC));
          }
          if (!this.joinInfo || !this.cancelToken || !this.retryConfig)
            return void YC.debug("[config-distribute] get config distribute interrupted have no joininfo");
          let e2;
          const t2 = await this.mutex.lock();
          try {
            e2 = await gA(this.joinInfo, this.cancelToken, this.retryConfig), YC.debug("[config-distribute] get config distribute", JSON.stringify(e2)), e2.limit_bitrate && this.handleBitrateLimit(e2.limit_bitrate), this.cacheGlobalParameterConfig(e2), this.configs = e2;
          } catch (e3) {
            const t3 = new VI(xT.NETWORK_RESPONSE_ERROR, e3);
            YC.warning("[config-distribute] ".concat(t3.toString()));
          } finally {
            t2();
          }
        }
        getBitrateLimit() {
          return this.configs ? this.configs.limit_bitrate : void 0;
        }
        handleBitrateLimit(e2) {
          var t2;
          (t2 = e2) && t2.uplink && t2.id && void 0 !== t2.uplink.max_bitrate && void 0 !== t2.uplink.min_bitrate && (this.configs && this.configs.limit_bitrate ? this.configs && this.configs.limit_bitrate && this.configs.limit_bitrate.id !== e2.id && this.emit(lv.UPDATE_BITRATE_LIMIT, e2) : this.emit(lv.UPDATE_BITRATE_LIMIT, e2));
        }
        getLowStreamConfigDistribute() {
          return this.configs && this.configs.limit_bitrate && yA({}, this.configs.limit_bitrate.low_stream_uplink);
        }
        cacheGlobalParameterConfig(e2) {
          var t2;
          const i2 = Zh(t2 = Object.keys(e2).filter((e3) => /^webrtc_ng_global_parameter/.test(e3))).call(t2);
          for (let t3 = 0; t3 < i2.length; t3++)
            for (let n3 = i2.length - 1; n3 > t3; n3--) {
              const t4 = i2[n3];
              if ("number" == typeof e2[t4].__priority) {
                const s2 = e2[t4].__priority, r2 = i2[n3 - 1];
                if ("number" == typeof e2[r2].__priority) {
                  if (!(s2 > e2[r2].__priority))
                    continue;
                  {
                    const e3 = t4;
                    i2[n3] = i2[n3 - 1], i2[n3 - 1] = e3;
                  }
                } else {
                  const e3 = t4;
                  i2[n3] = i2[n3 - 1], i2[n3 - 1] = e3;
                }
              }
            }
          const n2 = {};
          i2.forEach((t3) => {
            const i3 = e2[t3], s2 = i3.__expires;
            Object.keys(i3).forEach((e3) => {
              "__priority" === e3 || "__expires" === e3 || Object.prototype.hasOwnProperty.call(n2, e3) || (n2[e3] = yA({ value: i3[e3] }, s2 && { expires: s2 }));
            });
          });
          try {
            !function(e4) {
              try {
                const t4 = Date.now();
                Object.keys(e4).forEach((i3) => {
                  switch (i3) {
                    case "ENABLE_EVENT_REPORT":
                    case "UPLOAD_LOG":
                      if (Object.prototype.hasOwnProperty.call(OC, i3)) {
                        const { value: n3, expires: s2 } = e4[i3];
                        if (s2 && s2 <= t4)
                          return;
                        PC[i3] = n3, OC[i3] = n3, YC.debug("Update global parameters from config distribute", i3, n3);
                      }
                  }
                });
              } catch (t4) {
                YC.error("Error update config immediately: ".concat(e4), t4.message);
              }
            }(n2);
            const e3 = JSON.stringify(n2), t3 = window.btoa(e3);
            window.localStorage.setItem("websdk_ng_global_parameter", t3), YC.debug("Caching global parameters ".concat(e3));
          } catch (e3) {
            YC.error("Error caching global parameters:", e3.message);
          }
        }
      }
      const bA = { getDisplayMedia: false, getStreamFromExtension: false, supportUnifiedPlan: false, supportMinBitrate: false, supportSetRtpSenderParameters: false, supportDualStream: true, webAudioMediaStreamDest: false, supportReplaceTrack: false, supportWebGL: false, webAudioWithAEC: false, supportRequestFrame: false, supportShareAudio: false, supportDualStreamEncoding: false, supportDataChannel: false, supportPCSetConfiguration: false, supportWebRTCEncodedTransform: false, supportWebRTCInsertableStream: false };
      function wA() {
        return bA;
      }
      var OA;
      function NA(e2, t2, i2) {
        return { sampleRate: e2, stereo: t2, bitrate: i2 };
      }
      function DA(e2, t2, i2, n2, s2) {
        return { width: e2, height: t2, frameRate: i2, bitrateMin: n2, bitrateMax: s2 };
      }
      function PA(e2, t2, i2, n2, s2) {
        return { width: { max: e2 }, height: { max: t2 }, frameRate: i2, bitrateMin: n2, bitrateMax: s2 };
      }
      function LA(e2, t2) {
        return { numSpatialLayers: e2, numTemporalLayers: t2 };
      }
      !function(e2) {
        e2.IOS_15_16_INTERRUPTION_START = "ios15_16-interruption-start", e2.IOS_15_16_INTERRUPTION_END = "ios15_16-interruption-end", e2.IOS_INTERRUPTION_START = "ios-interruption-start", e2.IOS_INTERRUPTION_END = "ios-interruption-end", e2.STATE_CHANGE = "state-change";
      }(OA || (OA = {}));
      const kA = { "90p": DA(160, 90), "90p_1": DA(160, 90), "120p": DA(160, 120, 15, 30, 65), "120p_1": DA(160, 120, 15, 30, 65), "120p_3": DA(120, 120, 15, 30, 50), "120p_4": DA(212, 120), "180p": DA(320, 180, 15, 30, 140), "180p_1": DA(320, 180, 15, 30, 140), "180p_3": DA(180, 180, 15, 30, 100), "180p_4": DA(240, 180, 15, 30, 120), "240p": DA(320, 240, 15, 40, 200), "240p_1": DA(320, 240, 15, 40, 200), "240p_3": DA(240, 240, 15, 40, 140), "240p_4": DA(424, 240, 15, 40, 220), "360p": DA(640, 360, 15, 80, 400), "360p_1": DA(640, 360, 15, 80, 400), "360p_3": DA(360, 360, 15, 80, 260), "360p_4": DA(640, 360, 30, 80, 600), "360p_6": DA(360, 360, 30, 80, 400), "360p_7": DA(480, 360, 15, 80, 320), "360p_8": DA(480, 360, 30, 80, 490), "360p_9": DA(640, 360, 15, 80, 800), "360p_10": DA(640, 360, 24, 80, 800), "360p_11": DA(640, 360, 24, 80, 1e3), "480p": DA(640, 480, 15, 100, 500), "480p_1": DA(640, 480, 15, 100, 500), "480p_2": DA(640, 480, 30, 100, 1e3), "480p_3": DA(480, 480, 15, 100, 400), "480p_4": DA(640, 480, 30, 100, 750), "480p_6": DA(480, 480, 30, 100, 600), "480p_8": DA(848, 480, 15, 100, 610), "480p_9": DA(848, 480, 30, 100, 930), "480p_10": DA(640, 480, 10, 100, 400), "720p": DA(1280, 720, 15, 120, 1130), "720p_auto": DA(1280, 720, 30, 900, 3e3), "720p_1": DA(1280, 720, 15, 120, 1130), "720p_2": DA(1280, 720, 30, 120, 2e3), "720p_3": DA(1280, 720, 30, 120, 1710), "720p_5": DA(960, 720, 15, 120, 910), "720p_6": DA(960, 720, 30, 120, 1380), "1080p": DA(1920, 1080, 15, 120, 2080), "1080p_1": DA(1920, 1080, 15, 120, 2080), "1080p_2": DA(1920, 1080, 30, 120, 3e3), "1080p_3": DA(1920, 1080, 30, 120, 3150), "1080p_5": DA(1920, 1080, 60, 120, 4780), "1440p": DA(2560, 1440, 30, 120, 4850), "1440p_1": DA(2560, 1440, 30, 120, 4850), "1440p_2": DA(2560, 1440, 60, 120, 7350), "4k": DA(3840, 2160, 30, 120, 8910), "4k_1": DA(3840, 2160, 30, 120, 8910), "4k_3": DA(3840, 2160, 60, 120, 13500) }, MA = [{ scaleResolutionDownBy: 2, width: 1280, height: 720, frameRate: 30, bitrateMin: 300, bitrateMax: 900 }, { scaleResolutionDownBy: 1.333333, width: 1280, height: 720, frameRate: 30, bitrateMin: 600, bitrateMax: 2e3 }, { scaleResolutionDownBy: 1, width: 1280, height: 720, frameRate: 30, bitrateMin: 900, bitrateMax: 3e3 }], UA = { "480p": PA(640, 480, 5), "480p_1": PA(640, 480, 5), "480p_2": PA(640, 480, 30), "480p_3": PA(640, 480, 15), "720p": PA(1280, 720, 5), "720p_auto": DA(1280, 720, 30, 900, 3e3), "720p_1": PA(1280, 720, 5), "720p_2": PA(1280, 720, 30), "720p_3": PA(1280, 720, 15), "1080p": PA(1920, 1080, 5), "1080p_1": PA(1920, 1080, 5), "1080p_2": PA(1920, 1080, 30), "1080p_3": PA(1920, 1080, 15) }, xA = { "1SL1TL": LA(1, 1), "3SL3TL": LA(3, 3), "2SL3TL": LA(2, 3) };
      function VA(e2) {
        return e2 || (e2 = "480p_1"), "string" == typeof e2 ? Object.assign({}, kA[e2]) : e2;
      }
      function FA(e2) {
        return "string" == typeof e2 ? Object.assign({}, UA[e2]) : e2;
      }
      function BA(e2) {
        return "string" == typeof e2 ? Object.assign({}, xA[e2]) : e2;
      }
      const jA = { speech_low_quality: NA(16e3, false), speech_standard: NA(32e3, false, 18), music_standard: NA(48e3, false), standard_stereo: NA(48e3, true, 56), high_quality: NA(48e3, false, 128), high_quality_stereo: NA(48e3, true, 192) };
      function GA(e2) {
        return "string" == typeof e2 ? Object.assign({}, jA[e2]) : e2;
      }
      const WA = [];
      function HA(e2) {
        return BT(e2, "mediaSource", ["screen", "window", "application"]), true;
      }
      var KA, YA, qA, JA, zA, XA, QA, ZA, $A, eb;
      !function(e2) {
        e2.NEED_RENEGOTIATE = "@need_renegotiate", e2.NEED_REPLACE_TRACK = "@need_replace_track", e2.NEED_CLOSE = "@need_close", e2.NEED_ENABLE_TRACK = "@need_enable_track", e2.NEED_DISABLE_TRACK = "@need_disable_track", e2.NEED_SESSION_ID = "@need_sid", e2.SET_OPTIMIZATION_MODE = "@set_optimization_mode", e2.GET_STATS = "@get_stats", e2.GET_RTC_STATS = "@get_rtc_stats", e2.GET_LOW_VIDEO_TRACK = "@get_low_video_track", e2.NEED_RESET_REMOTE_SDP = "@need_reset_remote_sdp", e2.NEED_UPDATE_VIDEO_ENCODER = "@need_update_video_encoder", e2.NEED_MUTE_TRACK = "@need_mute_track", e2.NEED_UNMUTE_TRACK = "@need_unmute_track";
      }(KA || (KA = {})), function(e2) {
        e2.SCREEN_TRACK = "screen_track", e2.CUSTOM_TRACK = "custome_track", e2.LOW_STREAM = "low_stream";
      }(YA || (YA = {})), function(e2) {
        e2[e2.HIGH_STREAM = 0] = "HIGH_STREAM", e2[e2.LOW_STREAM = 1] = "LOW_STREAM";
      }(qA || (qA = {})), function(e2) {
        e2[e2.HIGH_STREAM = 0] = "HIGH_STREAM", e2[e2.LOW_STREAM = 1] = "LOW_STREAM";
      }(JA || (JA = {})), function(e2) {
        e2[e2.DISABLE = 0] = "DISABLE", e2[e2.LOW_STREAM = 1] = "LOW_STREAM", e2[e2.AUDIO_ONLY = 2] = "AUDIO_ONLY";
      }(zA || (zA = {})), function(e2) {
        e2.TRANSCEIVER_UPDATED = "transceiver-updated";
      }(XA || (XA = {})), function(e2) {
        e2.SOURCE_STATE_CHANGE = "source-state-change", e2.TRACK_ENDED = "track-ended", e2.BEAUTY_EFFECT_OVERLOAD = "beauty-effect-overload", e2.VIDEO_ELEMENT_VISIBLE_STATUS = "video-element-visible-status", e2.CLOSED = "closed";
      }(QA || (QA = {})), function(e2) {
        e2.FIRST_FRAME_DECODED = "first-frame-decoded", e2.VIDEO_ELEMENT_VISIBLE_STATUS = "video-element-visible-status";
      }(ZA || (ZA = {})), function(e2) {
        e2.AUDIO_SOURCE_STATE_CHANGE = "audio_source_state_change", e2.RECEIVE_TRACK_BUFFER = "receive_track_buffer", e2.ON_AUDIO_BUFFER = "on_audio_buffer", e2.UPDATE_SOURCE = "update_source";
      }($A || ($A = {})), function(e2) {
        e2.UPDATE_TRACK_SOURCE = "update-track-source";
      }(eb || (eb = {}));
      const tb = { sendVolumeLevel: 0, sendBitrate: 0, sendBytes: 0, sendPackets: 0, sendPacketsLost: 0, sendJitterMs: 0, sendRttMs: 0, currentPacketLossRate: 0 }, ib = { sendBytes: 0, sendBitrate: 0, sendPackets: 0, sendPacketsLost: 0, sendJitterMs: 0, sendRttMs: 0, sendResolutionHeight: 0, sendResolutionWidth: 0, captureResolutionHeight: 0, captureResolutionWidth: 0, targetSendBitrate: 0, totalDuration: 0, totalFreezeTime: 0, currentPacketLossRate: 0 }, nb = { transportDelay: 0, end2EndDelay: 0, receiveBitrate: 0, receiveLevel: 0, receiveBytes: 0, receiveDelay: 0, receivePackets: 0, receivePacketsLost: 0, totalDuration: 0, totalFreezeTime: 0, freezeRate: 0, packetLossRate: 0, currentPacketLossRate: 0, publishDuration: -1 }, sb = { uplinkNetworkQuality: 0, downlinkNetworkQuality: 0 }, rb = { transportDelay: 0, end2EndDelay: 0, receiveBitrate: 0, receiveBytes: 0, receiveDelay: 0, receivePackets: 0, receivePacketsLost: 0, receiveResolutionHeight: 0, receiveResolutionWidth: 0, totalDuration: 0, totalFreezeTime: 0, freezeRate: 0, packetLossRate: 0, currentPacketLossRate: 0, publishDuration: -1 };
      var ob, ab, cb, db, lb;
      !function(e2) {
        e2.ON_TRACK = "on_track", e2.ON_NODE = "on_node";
      }(ob || (ob = {})), function(e2) {
        e2.REQUEST_UPDATE_CONSTRAINTS = "request_update_constraints", e2.REQUEST_CONSTRAINTS = "request_constraints";
      }(ab || (ab = {})), function(e2) {
        e2.IDLE = "IDLE", e2.INITING = "INITING", e2.INITEND = "INITEND";
      }(cb || (cb = {})), function(e2) {
        e2.STATE_CHANGE = "state_change", e2.RECORDING_DEVICE_CHANGED = "recordingDeviceChanged", e2.PLAYOUT_DEVICE_CHANGED = "playoutDeviceChanged", e2.CAMERA_DEVICE_CHANGED = "cameraDeviceChanged";
      }(db || (db = {})), function(e2) {
        e2.NONE = "none", e2.INIT = "init", e2.CANPLAY = "canplay", e2.PLAYING = "playing", e2.PAUSED = "paused", e2.SUSPEND = "suspend", e2.STALLED = "stalled", e2.WAITING = "waiting", e2.ERROR = "error", e2.DESTROYED = "destroyed", e2.ABORT = "abort", e2.ENDED = "ended", e2.EMPTIED = "emptied", e2.LOADEDDATA = "loadeddata";
      }(lb || (lb = {}));
      const ub = { uninit: 100, none: 110, init: 120, loadeddata: 130, canplay: 200, playing: 210, paused: 220, suspend: 300, stalled: 310, waiting: 320, error: 330, destroyed: 340, abort: 350, ended: 360, emptied: 370 };
      var hb;
      !function(e2) {
        e2.OPEN = "open", e2.MESSAGE = "message", e2.CLOSE = "close", e2.CLOSING = "closing", e2.ERROR = "error";
      }(hb || (hb = {}));
      class pb extends ig {
        constructor(e2, t2) {
          super(), nh(this, "_ID", void 0), nh(this, "_rtpTransceiver", void 0), nh(this, "_lowRtpTransceiver", void 0), nh(this, "_hints", []), nh(this, "_isClosed", false), nh(this, "_originMediaStreamTrack", void 0), nh(this, "_mediaStreamTrack", void 0), nh(this, "_external", {}), this._ID = t2 || xg(8, "track-"), this._originMediaStreamTrack = e2, this._mediaStreamTrack = e2, function(e3) {
            bn(WA).call(WA, e3) || WA.push(e3);
          }(this);
        }
        toString() {
          return this._ID;
        }
        getTrackId() {
          return this._ID;
        }
        getMediaStreamTrack(e2) {
          if (!e2) {
            const e3 = rI.reportApiInvoke(null, { name: rg.GET_MEDIA_STREAM_TRACK, options: [], tag: og.TRACER });
            this._mediaStreamTrack && "string" == typeof this._mediaStreamTrack.label ? e3.onSuccess(this._mediaStreamTrack.label) : e3.onSuccess("");
          }
          return this._mediaStreamTrack;
        }
        getRTCRtpTransceiver(e2) {
          return e2 === qA.LOW_STREAM ? this._lowRtpTransceiver : this._rtpTransceiver;
        }
        getMediaStreamTrackSettings() {
          return this.getMediaStreamTrack(true).getSettings();
        }
        close() {
          this._isClosed = true, this._lowRtpTransceiver = void 0, this._rtpTransceiver = void 0, function(e2) {
            const t2 = WA.indexOf(e2);
            -1 !== t2 && WA.splice(t2, 1);
          }(this), this.emit(QA.CLOSED);
        }
        _updateRtpTransceiver(e2, t2) {
          if (t2 === qA.LOW_STREAM) {
            if (this._lowRtpTransceiver === e2)
              return;
            this._lowRtpTransceiver = e2;
          } else {
            if (this._rtpTransceiver === e2)
              return;
            this._rtpTransceiver = e2;
          }
          this.emit(XA.TRANSCEIVER_UPDATED, e2, t2);
        }
      }
      class _b extends pb {
        get isExternalTrack() {
          return this._isExternalTrack;
        }
        get muted() {
          return this._muted;
        }
        get enabled() {
          return this._enabled;
        }
        get processorContext() {
          return this._processorContext;
        }
        set processorContext(e2) {
          this._processorContext = e2;
        }
        constructor(e2, t2) {
          super(e2, t2), nh(this, "_enabled", true), nh(this, "_muted", false), nh(this, "_isExternalTrack", false), nh(this, "_isClosed", false), nh(this, "_enabledMutex", void 0), nh(this, "processor", void 0), nh(this, "_handleTrackEnded", () => {
            this.onTrackEnded();
          }), this._enabledMutex = new Yg("".concat(this.getTrackId())), e2.addEventListener("ended", this._handleTrackEnded);
        }
        getTrackLabel() {
          var e2, t2;
          return null !== (e2 = null === (t2 = this._originMediaStreamTrack) || void 0 === t2 ? void 0 : t2.label) && void 0 !== e2 ? e2 : "";
        }
        close() {
          this._isClosed || (this.stop(), this._originMediaStreamTrack.stop(), this._mediaStreamTrack !== this._originMediaStreamTrack && (this._mediaStreamTrack.stop(), this._mediaStreamTrack = null), this._originMediaStreamTrack = null, this._enabledMutex = null, YC.debug("[".concat(this.getTrackId(), "] close")), this.emit(KA.NEED_CLOSE), super.close());
        }
        async _updateOriginMediaStreamTrack(e2, t2) {
          let i2 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
          this._isExternalTrack = i2, e2 !== this._originMediaStreamTrack && (this._originMediaStreamTrack && (this._originMediaStreamTrack.removeEventListener("ended", this._handleTrackEnded), t2 && this._originMediaStreamTrack.stop()), e2.addEventListener("ended", this._handleTrackEnded), this._originMediaStreamTrack = e2, this._muted && (this._originMediaStreamTrack.enabled = false), this._mediaStreamTrack = this._originMediaStreamTrack, this._updatePlayerSource(), await Tg(this, KA.NEED_REPLACE_TRACK, this), this.processor && this.processor.updateInput({ track: this._originMediaStreamTrack, context: this.processorContext }));
        }
        _getDefaultPlayerConfig() {
          return {};
        }
        onTrackEnded() {
          YC.debug("[".concat(this.getTrackId(), "] track ended")), this.safeEmit(QA.TRACK_ENDED);
        }
        stateCheck(e2, t2) {
          if (YC.debug("check track state, [muted: ".concat(this._muted, ", enabled: ").concat(this._enabled, "] to [").concat(e2, ": ").concat(t2, "]")), FT(t2, e2), this._enabled && this._muted && "enabled" === e2 && false === t2)
            throw new VT(xT.TRACK_STATE_UNREACHABLE, "cannot set enabled while the track is muted").print("error", YC);
          if (!this._enabled && !this._muted && "muted" === e2 && true === t2)
            throw new VT(xT.TRACK_STATE_UNREACHABLE, "cannot set muted while the track is disabled").print("error", YC);
        }
        getProcessorStats() {
          return this.processorContext.gatherStats();
        }
        getProcessorUsage() {
          return this.processorContext.gatherUsage();
        }
      }
      function Eb(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      const mb = window.AudioContext || window.webkitAudioContext;
      let fb = null;
      const Tb = new class extends ig {
        constructor() {
          super(...arguments), nh(this, "prevState", void 0), nh(this, "curState", void 0), nh(this, "currentTime", void 0), nh(this, "currentTimeStuckAt", void 0), nh(this, "interruptDetectorTrack", void 0), nh(this, "onLocalAudioTrackMute", () => {
            YC.info("ios15-interruption-start"), this.emit(OA.IOS_15_16_INTERRUPTION_START);
          }), nh(this, "onLocalAudioTrackUnmute", async () => {
            YC.info("ios15-interruption-end"), "running" !== this.curState || this.duringInterruption ? YC.info("ios15-interruption-end-canceled") : (fb && await fb.suspend(), this.emit(OA.IOS_15_16_INTERRUPTION_END));
          });
        }
        get duringInterruption() {
          return "running" === this.prevState && "interrupted" === this.curState;
        }
        bindInterruptDetectorTrack(e2) {
          YC.debug("webaudio bindInterruptDetectorTrack ".concat(e2.getTrackId())), this.interruptDetectorTrack || (this.interruptDetectorTrack = e2, this.interruptDetectorTrack._mediaStreamTrack.onmute = this.onLocalAudioTrackMute, this.interruptDetectorTrack._mediaStreamTrack.onunmute = this.onLocalAudioTrackUnmute);
        }
        unbindInterruptDetectorTrack(e2) {
          YC.debug("webaudio unbindInterruptDetectorTrack ".concat(e2.getTrackId())), this.interruptDetectorTrack && this.interruptDetectorTrack === e2 && (this.interruptDetectorTrack._mediaStreamTrack && (this.interruptDetectorTrack._mediaStreamTrack.onmute = null, this.interruptDetectorTrack._mediaStreamTrack.onunmute = null), this.interruptDetectorTrack = void 0);
        }
      }();
      function gb() {
        if (!mb)
          return void YC.error("your browser is not support web audio");
        YC.info("create audio context");
        const e2 = function(e3) {
          for (var t2 = 1; t2 < arguments.length; t2++) {
            var i2 = null != arguments[t2] ? arguments[t2] : {};
            t2 % 2 ? Eb(Object(i2), true).forEach(function(t3) {
              nh(e3, t3, i2[t3]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(i2)) : Eb(Object(i2)).forEach(function(t3) {
              Object.defineProperty(e3, t3, Object.getOwnPropertyDescriptor(i2, t3));
            });
          }
          return e3;
        }({}, DC("WEBAUDIO_INIT_OPTIONS"));
        YC.debug("audio context init option:", JSON.stringify(e2)), fb = new mb(e2), Tb.curState = fb.state, fb.onstatechange = () => {
          Tb.prevState = Tb.curState, Tb.curState = fb ? fb.state : void 0;
          const { prevState: e3, curState: t2 } = Tb, i2 = "running" === t2, n2 = "interrupted" === t2, s2 = "running" === e3, r2 = "suspended" === e3, o2 = "interrupted" === e3, a2 = pT().osVersion;
          (CT() || DT()) && s2 && n2 && (YC.info("ios".concat(a2, "-interruption-start")), Tb.emit(OA.IOS_INTERRUPTION_START)), (CT() || DT()) && (r2 || o2) && i2 && (YC.info("ios".concat(a2, "-interruption-end")), Tb.emit(OA.IOS_INTERRUPTION_END)), e3 !== t2 && Tb.emit(OA.STATE_CHANGE, t2, e3);
        }, setInterval(() => {
          var e3;
          const t2 = null === (e3 = fb) || void 0 === e3 ? void 0 : e3.currentTime;
          if (Tb.currentTime !== t2)
            Tb.currentTimeStuckAt && (YC.debug("AudioContext current time resume at ".concat(t2)), Tb.currentTimeStuckAt = void 0), Tb.currentTime = t2;
          else {
            if (t2 !== Tb.currentTimeStuckAt) {
              rI.reportApiInvoke(null, { name: "WEB_AUDIO_CURRENT_TIME_STUCK", options: { currentTime: t2 }, tag: og.TRACER }).onSuccess(), YC.warning("AudioContext current time stuck at ".concat(t2));
            }
            Tb.currentTimeStuckAt = t2;
          }
        }, 5e3), async function(e3) {
          const t2 = ["click", "contextmenu", "auxclick", "dblclick", "mousedown", "mouseup", "touchend", "keydown", "keyup"];
          let i2, n2 = false, s2 = false, r2 = false;
          function o2(t3) {
            "running" === e3.state ? a2(false) : CT() || DT() ? "suspended" === e3.state && (a2(true), t3 && e3.resume().then(d2, d2)) : "closed" !== e3.state && (a2(true), t3 && e3.resume().then(d2, d2));
          }
          function a2(e4) {
            if (n2 !== e4) {
              n2 = e4;
              for (let i3 = 0, n3 = t2; i3 < n3.length; i3 += 1) {
                const t3 = n3[i3];
                e4 ? window.addEventListener(t3, l2, { capture: true, passive: true }) : window.removeEventListener(t3, l2, { capture: true, passive: true });
              }
            }
          }
          function c2() {
            o2(true);
          }
          function d2() {
            o2(false);
          }
          function l2() {
            o2(true);
          }
          function u2(e4) {
            if (!r2)
              if (i2.paused)
                if (e4) {
                  let e5;
                  h2(false), r2 = true;
                  try {
                    e5 = i2.play(), e5 ? e5.then(p2, p2) : (i2.addEventListener("playing", p2), i2.addEventListener("abort", p2), i2.addEventListener("error", p2));
                  } catch (e6) {
                    p2();
                  }
                } else
                  h2(true);
              else
                h2(false);
          }
          function h2(e4) {
            if (s2 !== e4) {
              s2 = e4;
              for (let i3 = 0, n3 = t2; i3 < n3.length; i3++) {
                const t3 = n3[i3];
                e4 ? window.addEventListener(t3, _2, { capture: true, passive: true }) : window.removeEventListener(t3, _2, { capture: true, passive: true });
              }
            }
          }
          function p2() {
            i2.removeEventListener("playing", p2), i2.removeEventListener("abort", p2), i2.removeEventListener("error", p2), r2 = false, u2(false);
          }
          function _2() {
            u2(true);
          }
          if (CT()) {
            const t3 = e3.createMediaStreamDestination(), n3 = document.createElement("div");
            n3.innerHTML = "<audio x-webkit-airplay='deny'></audio>", i2 = n3.children.item(0), i2.controls = false, i2.disableRemotePlayback = true, i2.preload = "auto", i2.srcObject = t3.stream, u2(true);
          }
          Tb.on(OA.STATE_CHANGE, c2), o2(false);
        }(fb);
      }
      function Sb() {
        if (!fb) {
          if (gb(), !fb)
            throw new VT(xT.NOT_SUPPORTED, "can not create audio context");
          return fb;
        }
        return fb;
      }
      function Rb() {
        return !!fb;
      }
      function Cb(e2) {
        if (function() {
          if (null !== Ib)
            return Ib;
          const e3 = Sb(), t3 = e3.createBufferSource(), i3 = e3.createGain(), n2 = e3.createGain();
          t3.connect(i3), t3.connect(n2), t3.disconnect(i3);
          let s2 = false;
          try {
            t3.disconnect(i3);
          } catch (e4) {
            s2 = true;
          }
          return t3.disconnect(), Ib = s2, s2;
        }())
          return;
        const t2 = e2.connect, i2 = e2.disconnect;
        e2.connect = (i3, n2, s2) => {
          var r2;
          return e2._inputNodes || (e2._inputNodes = []), bn(r2 = e2._inputNodes).call(r2, i3) || (i3 instanceof AudioNode ? (e2._inputNodes.push(i3), t2.call(e2, i3, n2, s2)) : t2.call(e2, i3, n2)), e2;
        }, e2.disconnect = (n2, s2, r2) => {
          i2.call(e2), n2 ? vg(e2._inputNodes, n2) : e2._inputNodes = [];
          for (const i3 of e2._inputNodes)
            t2.call(e2, i3);
        };
      }
      let Ib = null;
      function vb(e2, t2) {
        let i2 = false;
        const n2 = 1 / t2;
        if (DC("DISABLE_WEBAUDIO")) {
          const t3 = window.setInterval(() => {
            i2 ? window.clearInterval(t3) : e2(performance.now() / 1e3);
          }, 1e3 * n2);
        } else {
          const t3 = Sb();
          let s2 = t3.createGain();
          s2.gain.value = 0, s2.connect(t3.destination);
          const r2 = () => {
            if (i2)
              return void (s2 = null);
            const o2 = t3.createOscillator();
            o2.onended = r2, o2.connect(s2), o2.start(0), o2.stop(t3.currentTime + n2), e2(t3.currentTime);
          };
          r2();
        }
        return () => {
          i2 = true;
        };
      }
      class yb {
        constructor() {
          nh(this, "context", void 0), nh(this, "analyserNode", void 0), nh(this, "sourceNode", void 0), this.context = Sb(), this.analyserNode = this.context.createAnalyser(), this.analyserNode.fftSize = 2048, this.analyserNode.smoothingTimeConstant = 0.4;
        }
        updateSource(e2) {
          if (e2 !== this.sourceNode) {
            if (this.sourceNode)
              try {
                this.sourceNode.disconnect(this.analyserNode);
              } catch (e3) {
              }
            this.sourceNode = e2, null == e2 || e2.connect(this.analyserNode);
          }
        }
        getVolumeLevel() {
          if (!this.sourceNode)
            return 0;
          if (!this.context || CT() || DT() || "running" !== this.context.state && this.context.resume(), !this.analyserNode)
            return 0;
          const e2 = new Float32Array(this.analyserNode.fftSize);
          if (this.analyserNode.getFloatTimeDomainData)
            this.analyserNode.getFloatTimeDomainData(e2);
          else {
            const t3 = new Uint8Array(this.analyserNode.fftSize);
            this.analyserNode.getByteTimeDomainData(t3);
            for (let i2 = 0; i2 < e2.length; ++i2)
              e2[i2] = t3[i2] / 128 - 1;
          }
          const t2 = cS(e2).call(e2, (e3, t3) => e3 + t3 * t3, 0) / e2.length;
          return Math.max(10 * Math.log10(t2) + 100, 0) / 100;
        }
        getAnalyserNode() {
          return this.analyserNode;
        }
        rebuildAnalyser() {
          try {
            var e2, t2;
            null === (e2 = this.sourceNode) || void 0 === e2 || e2.disconnect(this.analyserNode), this.analyserNode = this.context.createAnalyser(), this.analyserNode.fftSize = 2048, this.analyserNode.smoothingTimeConstant = 0.4, null === (t2 = this.sourceNode) || void 0 === t2 || t2.connect(this.analyserNode);
          } catch (e3) {
            YC.warning("rebuild analyser node failed.");
          }
        }
        destroy() {
          this.updateSource(void 0);
        }
      }
      class Ab extends ig {
        get processSourceNode() {
          return this.sourceNode;
        }
        set processedNode(e2) {
          var t2;
          if (!this.isDestroyed && this._processedNode !== e2) {
            try {
              var i2;
              null === (i2 = this.sourceNode) || void 0 === i2 || i2.disconnect(this.outputNode);
            } catch (e3) {
            }
            null === (t2 = this._processedNode) || void 0 === t2 || t2.disconnect(), this._processedNode = e2, this.connect();
          }
        }
        get processedNode() {
          return this._processedNode;
        }
        constructor() {
          super(), nh(this, "outputNode", void 0), nh(this, "outputTrack", void 0), nh(this, "isPlayed", false), nh(this, "context", void 0), nh(this, "audioBufferNode", void 0), nh(this, "destNode", void 0), nh(this, "audioOutputLevel", 0), nh(this, "volumeLevelAnalyser", void 0), nh(this, "_processedNode", void 0), nh(this, "playNode", void 0), nh(this, "isDestroyed", false), nh(this, "onNoAudioInput", void 0), nh(this, "isNoAudioInput", false), nh(this, "_noAudioInputCount", 0), this.context = Sb(), this.playNode = this.context.destination, this.outputNode = this.context.createGain(), Cb(this.outputNode), this.volumeLevelAnalyser = new yb();
        }
        startGetAudioBuffer(e2) {
          this.audioBufferNode || (this.audioBufferNode = this.context.createScriptProcessor(e2), this.outputNode.connect(this.audioBufferNode), this.audioBufferNode.connect(this.context.destination), this.audioBufferNode.onaudioprocess = (e3) => {
            this.emit($A.ON_AUDIO_BUFFER, function(e4) {
              for (let t2 = 0; t2 < e4.outputBuffer.numberOfChannels; t2 += 1) {
                const i2 = e4.outputBuffer.getChannelData(t2);
                for (let e5 = 0; e5 < i2.length; e5 += 1)
                  i2[e5] = 0;
              }
              return e4.inputBuffer;
            }(e3));
          });
        }
        stopGetAudioBuffer() {
          this.audioBufferNode && (this.audioBufferNode.onaudioprocess = null, this.outputNode.disconnect(this.audioBufferNode), this.audioBufferNode = void 0);
        }
        createOutputTrack() {
          if (!wA().webAudioMediaStreamDest)
            throw new VT(xT.NOT_SUPPORTED, "your browser is not support audio processor");
          return this.destNode && this.outputTrack || (this.destNode = this.context.createMediaStreamDestination(), this.outputNode.connect(this.destNode), this.outputTrack = this.destNode.stream.getAudioTracks()[0]), this.outputTrack;
        }
        play(e2) {
          "running" !== this.context.state && Ag(() => {
            Tb.emit("autoplay-failed");
          }), this.isPlayed = true, this.playNode = e2 || this.context.destination, this.outputNode.connect(this.playNode);
        }
        stop() {
          if (this.isPlayed)
            try {
              this.outputNode.disconnect(this.playNode);
            } catch (e2) {
            }
          this.isPlayed = false;
        }
        getAccurateVolumeLevel() {
          return this.volumeLevelAnalyser.getVolumeLevel();
        }
        async checkHasAudioInput() {
          let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
          if (e2 > 5)
            return this.isNoAudioInput = true, this.onNoAudioInput && this.onNoAudioInput(), false;
          CT() || DT() ? "suspended" === this.context.state && this.context.resume() : "running" !== this.context.state && this.context.resume();
          const t2 = this.volumeLevelAnalyser.getAnalyserNode();
          let i2;
          t2.getFloatTimeDomainData ? (i2 = new Float32Array(t2.fftSize), t2.getFloatTimeDomainData(i2)) : (i2 = new Uint8Array(t2.fftSize), t2.getByteTimeDomainData(i2));
          let n2 = false;
          for (let e3 = 0; e3 < i2.length; e3++)
            0 !== i2[e3] && (n2 = true);
          return n2 ? (this.isNoAudioInput = false, true) : (await Ug(200), await this.checkHasAudioInput(e2 ? e2 + 1 : 1) && n2);
        }
        getAudioVolume() {
          return this.outputNode.gain.value;
        }
        setVolume(e2) {
          this.outputNode.gain.setValueAtTime(e2, this.context.currentTime);
        }
        destroy() {
          this.disconnect(), this.stop(), this.isDestroyed = true, this.onNoAudioInput = void 0;
        }
        disconnect() {
          var e2, t2;
          null === (e2 = this.processedNode) || void 0 === e2 || e2.disconnect(), null === (t2 = this.sourceNode) || void 0 === t2 || t2.disconnect(), this.outputNode && this.outputNode.disconnect();
        }
        connect() {
          var e2;
          this.processedNode ? null === (e2 = this.processedNode) || void 0 === e2 || e2.connect(this.outputNode) : this.sourceNode && this.sourceNode.connect(this.outputNode);
          this.volumeLevelAnalyser.updateSource(this.outputNode);
        }
      }
      class bb extends Ab {
        get isFreeze() {
          return false;
        }
        constructor(e2, t2, i2) {
          var n2;
          if (super(), nh(this, "sourceNode", void 0), nh(this, "track", void 0), nh(this, "clonedTrack", void 0), nh(this, "audioElement", void 0), nh(this, "isCurrentTrackCloned", false), nh(this, "isRemoteTrack", false), nh(this, "originVolumeLevelAnalyser", void 0), nh(this, "rebuildWebAudio", async () => {
            if (YC.debug("ready to rebuild web audio, state:", this.context.state), this.isNoAudioInput && await this.checkHasAudioInput(), !this.isNoAudioInput || this.isDestroyed)
              return document.body.removeEventListener("click", this.rebuildWebAudio, true), void YC.debug("rebuild web audio success, current volume status", this.getAccurateVolumeLevel());
            this.context.resume().then(() => YC.info("resume success")), YC.debug("rebuild web audio because of ios 12 bugs"), this.disconnect();
            const e3 = this.track;
            this.track = this.track.clone(), this.isCurrentTrackCloned ? e3.stop() : this.isCurrentTrackCloned = true;
            const t3 = new MediaStream([this.track]);
            this.sourceNode = this.context.createMediaStreamSource(t3), Cb(this.sourceNode), this.volumeLevelAnalyser.rebuildAnalyser();
            const i3 = this.outputNode.gain.value;
            this.outputNode = this.context.createGain(), this.outputNode.gain.setValueAtTime(i3, this.context.currentTime), Cb(this.outputNode), this.emit($A.UPDATE_SOURCE), this.connect(), this.audioElement.srcObject = t3, this.isPlayed && this.play(this.playNode), this.checkHasAudioInput();
          }), "audio" !== e2.kind)
            throw new VT(xT.UNEXPECTED_ERROR);
          this.track = e2;
          const s2 = new MediaStream([this.track]);
          if (this.isRemoteTrack = !!t2, this.sourceNode = this.context.createMediaStreamSource(s2), Cb(this.sourceNode), i2) {
            const e3 = i2.clone();
            e3.enabled = true, this.clonedTrack = e3, YC.debug("create an unmuted track ".concat(e3.id, " from the original track ").concat(i2.id, " to get the volume"));
            const t3 = this.context.createMediaStreamSource(new MediaStream([e3]));
            Cb(t3), this.originVolumeLevelAnalyser = new yb(), this.originVolumeLevelAnalyser.updateSource(t3);
          }
          this.connect(), this.audioElement = document.createElement("audio"), this.audioElement.srcObject = s2;
          const r2 = pT();
          t2 && r2.os === aT.IOS && Number(null === (n2 = r2.osVersion) || void 0 === n2 ? void 0 : n2.split(".")[0]) < 15 && (Tb.on(OA.STATE_CHANGE, () => {
            "suspended" === this.context.state ? document.body.addEventListener("click", this.rebuildWebAudio, true) : "running" === this.context.state && this.rebuildWebAudio();
          }), this.checkHasAudioInput().then((e3) => {
            e3 || document.body.addEventListener("click", this.rebuildWebAudio, true);
          }));
        }
        updateTrack(e2) {
          this.sourceNode.disconnect(), this.track = e2, this.isCurrentTrackCloned = false;
          const t2 = new MediaStream([e2]);
          this.sourceNode = this.context.createMediaStreamSource(t2), Cb(this.sourceNode), this.processedNode || this.sourceNode.connect(this.outputNode), this.emit($A.UPDATE_SOURCE), this.audioElement.srcObject = t2;
        }
        destroy() {
          var e2;
          this.audioElement.srcObject = null, this.audioElement.remove(), Tb.off("state-change", this.rebuildWebAudio), null === (e2 = this.originVolumeLevelAnalyser) || void 0 === e2 || e2.destroy(), this.clonedTrack = void 0, super.destroy();
        }
        createMediaStreamSourceNode(e2) {
          return this.context.createMediaStreamSource(new MediaStream([e2]));
        }
        updateOriginTrack(e2) {
          const t2 = e2.clone();
          t2.enabled = true, this.clonedTrack && (this.clonedTrack.stop(), this.clonedTrack = t2), YC.debug("create an unmuted track ".concat(t2.id, " from the original track ").concat(e2.id, " to get the volume"));
          const i2 = this.context.createMediaStreamSource(new MediaStream([t2]));
          Cb(i2), this.originVolumeLevelAnalyser && this.originVolumeLevelAnalyser.updateSource(i2);
        }
        getOriginVolumeLevel() {
          return this.originVolumeLevelAnalyser ? this.originVolumeLevelAnalyser.getVolumeLevel() : this.getAccurateVolumeLevel();
        }
      }
      async function wb(e2, t2, i2) {
        const n2 = (e3, t3) => e3 ? "number" != typeof e3 ? e3.max || e3.exact || e3.ideal || e3.min || t3 : e3 : t3, s2 = { audio: !!i2 && { mandatory: { chromeMediaSource: "desktop" } }, video: { mandatory: { chromeMediaSource: "desktop", chromeMediaSourceId: e2, maxHeight: n2(t2.height, 1080), maxWidth: n2(t2.width, 1920) } } };
        return t2.frameRate && "number" != typeof t2.frameRate ? (s2.video.mandatory.maxFrameRate = t2.frameRate.max, s2.video.mandatory.minFrameRate = t2.frameRate.min) : "number" == typeof t2.frameRate && (s2.video.mandatory.maxFrameRate = t2.frameRate), await navigator.mediaDevices.getUserMedia(s2);
      }
      async function Ob(e2, t2) {
        const i2 = await Nb(e2.mediaSource), { sourceId: n2, audio: s2 } = await function(e3) {
          let t3 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          return new tT((i3, n3) => {
            const s3 = document.createElement("div");
            s3.innerText = "share screen", s3.setAttribute("style", "text-align: center; height: 25px; line-height: 25px; border-radius: 4px 4px 0 0; background: #D4D2D4; border-bottom:  solid 1px #B9B8B9;");
            const r2 = document.createElement("div");
            r2.setAttribute("style", "width: 100%; height: 500px; padding: 15px 25px ; box-sizing: border-box;");
            const o2 = document.createElement("div");
            o2.innerText = "Agora Web Screensharing wants to share the contents of your screen with webdemo.agorabeckon.com. Choose what you'd like to share.", o2.setAttribute("style", "height: 12%;");
            const a2 = document.createElement("div");
            a2.setAttribute("style", "width: 100%; height: 80%; background: #FFF; border:  solid 1px #CBCBCB; display: flex; flex-wrap: wrap; justify-content: space-around; overflow-y: scroll; padding: 0 15px; box-sizing: border-box;");
            const c2 = document.createElement("div");
            c2.setAttribute("style", "display: flex; justify-content: space-between; padding: 16px 0;");
            const d2 = document.createElement("button");
            d2.innerHTML = "cancel", d2.setAttribute("style", "width: 85px;"), d2.onclick = () => {
              document.body.removeChild(h2);
              const e4 = new Error("NotAllowedError");
              e4.name = "NotAllowedError", n3(e4);
            };
            let l2 = t3;
            const u2 = document.createElement("div");
            if (t3) {
              const e4 = document.createElement("input");
              e4.setAttribute("type", "checkbox");
              const t4 = document.createElement("span");
              e4.setAttribute("style", "margin-right: 6px;"), t4.innerText = "Share audio", e4.checked = l2, e4.onchange = () => {
                l2 = e4.checked;
              }, u2.appendChild(e4), u2.appendChild(t4);
            }
            c2.appendChild(u2), c2.appendChild(d2), r2.appendChild(o2), r2.appendChild(a2), r2.appendChild(c2);
            const h2 = document.createElement("div");
            h2.setAttribute("style", "position: fixed; z-index: 99999999; top: 50%; left: 50%; width: 620px; height: 525px; background: #ECECEC; border-radius: 4px; -webkit-transform: translate(-50%,-50%); transform: translate(-50%,-50%);"), h2.appendChild(s3), h2.appendChild(r2), document.body.appendChild(h2), e3.map((e4) => {
              if (e4.id) {
                const t4 = document.createElement("div");
                t4.setAttribute("style", "width: 30%; height: 160px; padding: 20px 0; text-align: center;box-sizing: content-box;");
                let n4 = e4.thumbnail;
                try {
                  const { width: e5 } = n4.getSize();
                  e5 > 1920 && (n4 = n4.resize({ width: 1920 }));
                } catch (e5) {
                  throw e5 && e5.message.startsWith("Illegal invocation") && console.error("Operate thumbnail error, please try to set contextIsolation: false. (https://github.com/electron/electron/issues/34953)"), e5;
                }
                t4.innerHTML = '<div style="height: 120px; display: table-cell; vertical-align: middle;"><img style="width: 100%; background: #333333; box-shadow: 1px 1px 1px 1px rgba(0, 0, 0, 0.2);" src=' + n4.toDataURL() + ' /></div><span style="	height: 40px; line-height: 40px; display: inline-block; width: 70%; word-break: keep-all; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">' + e4.name.replace(/[\u00A0-\u9999<>\&]/g, function(e5) {
                  return "&#" + e5.charCodeAt(0) + ";";
                }) + "</span>", t4.onclick = () => {
                  document.body.removeChild(h2), i3({ sourceId: e4.id, audio: l2 });
                }, a2.appendChild(t4);
              }
            });
          });
        }(i2, t2);
        return await wb(n2, e2, s2);
      }
      async function Nb(e2) {
        let t2 = ["window", "screen"];
        "application" !== e2 && "window" !== e2 || (t2 = ["window"]), "screen" === e2 && (t2 = ["screen"]);
        const i2 = sg();
        if (!i2)
          throw console.error("failed to fetch electron, please mount it to window"), new VT(xT.ELECTRON_IS_NULL);
        let n2 = null;
        try {
          var s2;
          n2 = (null === (s2 = i2.desktopCapturer) || void 0 === s2 ? void 0 : s2.getSources({ types: t2 })) || i2.ipcRenderer.invoke("DESKTOP_CAPTURER_GET_SOURCES", { types: t2 });
        } catch (e3) {
          n2 = null;
        }
        n2 && n2.then || (n2 = new tT((e3, n3) => {
          i2.desktopCapturer.getSources({ types: t2 }, (t3, i3) => {
            t3 ? n3(t3) : e3(i3);
          });
        }));
        try {
          return await n2;
        } catch (e3) {
          throw new VT(xT.ELECTRON_DESKTOP_CAPTURER_GET_SOURCES_ERROR, e3.toString());
        }
      }
      function Db(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      const Pb = new Yg("safari");
      let Lb = false, kb = false;
      async function Mb(e2, t2) {
        let i2 = 0, n2 = null;
        for (; i2 < 2; )
          try {
            n2 = await Ub(e2, t2, i2 > 0);
            break;
          } catch (e3) {
            if (e3 instanceof VT)
              throw YC.error("[".concat(t2, "] ").concat(e3.toString())), e3;
            const n3 = xb(e3.name || e3.code || e3, e3.message);
            if (n3.code === xT.MEDIA_OPTION_INVALID) {
              YC.debug("[".concat(t2, "] detect media option invalid, retry")), i2 += 1, await Ug(500);
              continue;
            }
            throw YC.error("[".concat(t2, "] ").concat(n3.toString())), n3;
          }
        if (!n2)
          throw new VT(xT.UNEXPECTED_ERROR, "can not find stream after getUserMedia");
        return n2;
      }
      async function Ub(e2, t2, i2) {
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia)
          throw new VT(xT.NOT_SUPPORTED, "can not find getUserMedia");
        i2 && (e2.video && (delete e2.video.width, delete e2.video.height), e2.screen && (delete e2.screen.width, delete e2.screen.height));
        const n2 = wA(), s2 = new MediaStream();
        if (e2.audioSource && s2.addTrack(e2.audioSource), e2.videoSource && s2.addTrack(e2.videoSource), !e2.audio && !e2.video && !e2.screen)
          return YC.debug("Using Video Source/ Audio Source"), s2;
        if (e2.screen)
          if (sg())
            if (e2.screen.sourceId) {
              Vb(s2, await wb(e2.screen.sourceId, e2.screen, e2.screenAudio));
            } else {
              Vb(s2, await Ob(e2.screen, e2.screenAudio));
            }
          else if (gT() && e2.screen.extensionId && e2.screen.mandatory) {
            if (!n2.getStreamFromExtension)
              throw new VT(xT.NOT_SUPPORTED, "This browser does not support screen sharing");
            YC.debug("[".concat(t2, '] Screen access on chrome stable, looking for extension"'));
            const i3 = await (o2 = e2.screen.extensionId, a2 = t2, new tT((e3, t3) => {
              try {
                chrome.runtime.sendMessage(o2, { getStream: true }, (i4) => {
                  if (!i4 || !i4.streamId)
                    return YC.error("[".concat(a2, "] No response from Chrome Plugin. Plugin not installed properly"), i4), void t3(new VT(xT.CHROME_PLUGIN_NO_RESPONSE, "No response from Chrome Plugin. Plugin not installed properly"));
                  e3(i4.streamId);
                });
              } catch (e4) {
                YC.error("[".concat(a2, "] AgoraRTC screensharing plugin is not accessible(").concat(o2, ")"), e4.toString()), t3(new VT(xT.CHROME_PLUGIN_NOT_INSTALL));
              }
            }));
            e2.screen.mandatory.chromeMediaSourceId = i3;
            Vb(s2, await navigator.mediaDevices.getUserMedia({ video: { mandatory: e2.screen.mandatory } }));
          } else if (n2.getDisplayMedia) {
            var r2;
            e2.screen.mediaSource && HA(e2.screen.mediaSource);
            const i3 = { width: e2.screen.width, height: e2.screen.height, frameRate: e2.screen.frameRate, displaySurface: null !== (r2 = e2.screen.displaySurface) && void 0 !== r2 ? r2 : "screen" === e2.screen.mediaSource ? "monitor" : e2.screen.mediaSource }, { selfBrowserSurface: n3, surfaceSwitching: o3, systemAudio: a3 } = e2.screen, c3 = { selfBrowserSurface: n3, surfaceSwitching: o3, systemAudio: a3 };
            !n3 && delete c3.selfBrowserSurface, !o3 && delete c3.surfaceSwitching, !a3 && delete c3.systemAudio, YC.debug("[".concat(t2, "] getDisplayMedia:"), JSON.stringify({ video: i3, audio: !!e2.screenAudio, controls: c3 }));
            const d3 = await navigator.mediaDevices.getDisplayMedia(function(e3) {
              for (var t3 = 1; t3 < arguments.length; t3++) {
                var i4 = null != arguments[t3] ? arguments[t3] : {};
                t3 % 2 ? Db(Object(i4), true).forEach(function(t4) {
                  nh(e3, t4, i4[t4]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(i4)) : Db(Object(i4)).forEach(function(t4) {
                  Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(i4, t4));
                });
              }
              return e3;
            }({ video: i3, audio: !!e2.screenAudio }, c3));
            Vb(s2, d3);
          } else {
            if (!RT())
              throw YC.error("[".concat(t2, "] This browser does not support screenSharing")), new VT(xT.NOT_SUPPORTED, "This browser does not support screen sharing");
            {
              e2.screen.mediaSource && HA(e2.screen.mediaSource);
              const i3 = { video: { mediaSource: e2.screen.mediaSource, width: e2.screen.width, height: e2.screen.height, frameRate: e2.screen.frameRate } };
              YC.debug("[".concat(t2, "] getUserMedia: ").concat(JSON.stringify(i3)));
              Vb(s2, await navigator.mediaDevices.getUserMedia(i3));
            }
          }
        var o2, a2;
        if (!e2.video && !e2.audio)
          return s2;
        let c2 = { video: e2.video, audio: e2.audio }, d2 = DC("MEDIA_DEVICE_CONSTRAINTS");
        if (d2)
          try {
            "string" == typeof d2 && (d2 = JSON.parse(d2)), c2 = Wg(c2, d2);
          } catch (e3) {
          }
        YC.debug("[".concat(t2, "] GetUserMedia"), JSON.stringify(c2)), pT();
        let l2, u2 = null;
        (ST() || CT() || mT()) && (u2 = await Pb.lock());
        try {
          l2 = await navigator.mediaDevices.getUserMedia(c2);
        } catch (e3) {
          throw u2 && u2(), e3;
        }
        return c2.audio && (Lb = true), c2.video && (kb = true), Vb(s2, l2), u2 && u2(), s2;
      }
      function xb(e2, t2) {
        switch (e2) {
          case "Starting video failed":
          case "OverconstrainedError":
          case "TrackStartError":
            return new VT(xT.MEDIA_OPTION_INVALID, "".concat(e2, ": ").concat(t2));
          case "NotFoundError":
          case "DevicesNotFoundError":
            return new VT(xT.DEVICE_NOT_FOUND, "".concat(e2, ": ").concat(t2));
          case "NotSupportedError":
            return new VT(xT.NOT_SUPPORTED, "".concat(e2, ": ").concat(t2));
          case "NotReadableError":
            return new VT(xT.NOT_READABLE, "".concat(e2, ": ").concat(t2));
          case "InvalidStateError":
          case "NotAllowedError":
          case "PERMISSION_DENIED":
          case "PermissionDeniedError":
            return new VT(xT.PERMISSION_DENIED, "".concat(e2, ": ").concat(t2));
          case "ConstraintNotSatisfiedError":
            return new VT(xT.CONSTRAINT_NOT_SATISFIED, "".concat(e2, ": ").concat(t2));
          default:
            return YC.error("getUserMedia unexpected error", e2), new VT(xT.UNEXPECTED_ERROR, "".concat(e2, ": ").concat(t2));
        }
      }
      function Vb(e2, t2) {
        const i2 = e2.getVideoTracks()[0], n2 = e2.getAudioTracks()[0], s2 = t2.getVideoTracks()[0], r2 = t2.getAudioTracks()[0];
        r2 && (n2 && e2.removeTrack(n2), e2.addTrack(r2)), s2 && (i2 && e2.removeTrack(i2), e2.addTrack(s2));
      }
      const Fb = new class extends ig {
        get state() {
          return this._state;
        }
        set state(e2) {
          e2 !== this._state && (this.emit(db.STATE_CHANGE, e2), this._state = e2);
        }
        constructor() {
          super(), nh(this, "_state", cb.IDLE), nh(this, "isAccessMicrophonePermission", false), nh(this, "isAccessCameraPermission", false), nh(this, "lastAccessMicrophonePermission", false), nh(this, "lastAccessCameraPermission", false), nh(this, "checkdeviceMatched", false), nh(this, "deviceInfoMap", /* @__PURE__ */ new Map()), this.init().then(() => {
            navigator.mediaDevices.addEventListener && navigator.mediaDevices.addEventListener("devicechange", this.updateDevicesInfo.bind(this)), window.setInterval(() => {
              (DC("ENUMERATE_DEVICES_INTERVAL") || (MT() || _T() === aT.HARMONY_OS) && kT()) && this.updateDevicesInfo();
            }, DC("ENUMERATE_DEVICES_INTERVAL_TIME"));
          }).catch((e2) => YC.error(e2.toString()));
        }
        async enumerateDevices(e2, t2) {
          let i2 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
          if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {
            return new VT(xT.NOT_SUPPORTED, "enumerateDevices() not supported.").throw();
          }
          const n2 = await navigator.mediaDevices.enumerateDevices(), s2 = this.checkMediaDeviceInfoIsOk(n2);
          let r2 = !this.isAccessMicrophonePermission && e2, o2 = !this.isAccessCameraPermission && t2;
          s2.audio && (r2 = false), s2.video && (o2 = false);
          let a2 = null, c2 = null, d2 = null;
          if (!i2 && (r2 || o2)) {
            if (Pb.isLocked) {
              YC.debug("[device manager] wait GUM lock");
              (await Pb.lock())(), YC.debug("[device manager] GUM unlock");
            }
            if (Lb && (r2 = false, this.isAccessMicrophonePermission = true), kb && (o2 = false, this.isAccessCameraPermission = true), YC.debug("[device manager] check media device permissions", e2, t2, r2, o2), r2 && o2) {
              try {
                d2 = await navigator.mediaDevices.getUserMedia({ audio: true, video: true });
              } catch (e3) {
                const t3 = xb(e3.name || e3.code || e3, e3.message);
                if (t3.code === xT.PERMISSION_DENIED)
                  throw t3;
                YC.warning("getUserMedia failed in getDevices", t3);
              }
              this.isAccessCameraPermission = true, this.isAccessMicrophonePermission = true;
            } else if (r2) {
              try {
                a2 = await navigator.mediaDevices.getUserMedia({ audio: e2 });
              } catch (e3) {
                const t3 = xb(e3.name || e3.code || e3, e3.message);
                if (t3.code === xT.PERMISSION_DENIED)
                  throw t3;
                YC.warning("getUserMedia failed in getDevices", t3);
              }
              this.isAccessMicrophonePermission = true;
            } else if (o2) {
              try {
                c2 = await navigator.mediaDevices.getUserMedia({ video: t2 });
              } catch (e3) {
                const t3 = xb(e3.name || e3.code || e3, e3.message);
                if (t3.code === xT.PERMISSION_DENIED)
                  throw t3;
                YC.warning("getUserMedia failed in getDevices", t3);
              }
              this.isAccessCameraPermission = true;
            }
            YC.debug("[device manager] mic permission", e2, "cam permission", t2);
          }
          try {
            const e3 = await navigator.mediaDevices.enumerateDevices();
            return a2 && a2.getTracks().forEach((e4) => e4.stop()), c2 && c2.getTracks().forEach((e4) => e4.stop()), d2 && d2.getTracks().forEach((e4) => e4.stop()), a2 = null, c2 = null, d2 = null, e3;
          } catch (e3) {
            a2 && a2.getTracks().forEach((e4) => e4.stop()), c2 && c2.getTracks().forEach((e4) => e4.stop()), d2 && d2.getTracks().forEach((e4) => e4.stop()), a2 = null, c2 = null, d2 = null;
            return new VT(xT.ENUMERATE_DEVICES_FAILED, e3.toString()).throw();
          }
        }
        async getRecordingDevices() {
          let e2 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
          return (await this.enumerateDevices(true, false, e2)).filter((e3) => "audioinput" === e3.kind);
        }
        async getCamerasDevices() {
          let e2 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
          return (await this.enumerateDevices(false, true, e2)).filter((e3) => "videoinput" === e3.kind);
        }
        async getSpeakers() {
          let e2 = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
          return (await this.enumerateDevices(true, false, e2)).filter((e3) => "audiooutput" === e3.kind);
        }
        searchDeviceIdByName(e2) {
          let t2 = null;
          return this.deviceInfoMap.forEach((i2) => {
            i2.device.label === e2 && (t2 = i2.device.deviceId);
          }), t2;
        }
        async getDeviceById(e2) {
          const t2 = (await this.enumerateDevices(true, true, true)).find((t3) => t3.deviceId === e2);
          if (!t2)
            throw new VT(xT.DEVICE_NOT_FOUND, "deviceId: ".concat(e2));
          return t2;
        }
        async init() {
          this.state = cb.INITING;
          try {
            await this.updateDevicesInfo(), this.state = cb.INITEND;
          } catch (e2) {
            if (YC.warning("Device Detection functionality cannot start properly.", e2.toString()), this.state = cb.IDLE, !("boolean" == typeof isSecureContext ? isSecureContext : "https:" === location.protocol || "file:" === location.protocol || "localhost" === location.hostname || "127.0.0.1" === location.hostname || "::1" === location.hostname)) {
              new VT(xT.WEB_SECURITY_RESTRICT, "Your context is limited by web security, please try using https protocol or localhost.").throw();
            }
            throw e2;
          }
        }
        async updateDevicesInfo() {
          const e2 = await this.enumerateDevices(true, true, true), t2 = Date.now(), i2 = [];
          if (e2[0] && e2[0].label && false === this.checkdeviceMatched) {
            this.checkdeviceMatched = true;
            const t3 = e2.find((e3) => "audioinput" === e3.kind && "default" === e3.deviceId), i3 = e2.find((e3) => "audiooutput" === e3.kind && "default" === e3.deviceId);
            t3 && i3 ? i3.groupId === t3.groupId ? YC.debug("[device-check] default input ".concat(t3.label, " and output ").concat(i3.label, " is the same group")) : YC.warning("[device-check] default input ".concat(t3.label, " and output ").concat(i3.label, " is not the same group")) : YC.debug("[device-check] default input or output not found");
          }
          const n2 = this.checkMediaDeviceInfoIsOk(e2);
          if (e2.forEach((e3) => {
            if (!e3.deviceId)
              return;
            const n3 = this.deviceInfoMap.get("".concat(e3.kind, "_").concat(e3.deviceId));
            if ("ACTIVE" !== (n3 ? n3.state : "INACTIVE")) {
              const n4 = { initAt: t2, updateAt: t2, device: e3, state: "ACTIVE" };
              this.deviceInfoMap.set("".concat(e3.kind, "_").concat(e3.deviceId), n4), i2.push(n4);
            }
            n3 && (n3.updateAt = t2);
          }), this.deviceInfoMap.forEach((e3, n3) => {
            "ACTIVE" === e3.state && e3.updateAt !== t2 && (e3.state = "INACTIVE", i2.push(e3));
          }), this.state !== cb.INITEND)
            return n2.audio && (this.lastAccessMicrophonePermission = true, this.isAccessMicrophonePermission = true), void (n2.video && (this.lastAccessCameraPermission = true, this.isAccessCameraPermission = true));
          i2.forEach((e3) => {
            switch (e3.device.kind) {
              case "audioinput":
                this.lastAccessMicrophonePermission && this.isAccessMicrophonePermission && this.emit(db.RECORDING_DEVICE_CHANGED, e3);
                break;
              case "videoinput":
                this.lastAccessCameraPermission && this.isAccessCameraPermission && this.emit(db.CAMERA_DEVICE_CHANGED, e3);
                break;
              case "audiooutput":
                this.lastAccessMicrophonePermission && this.isAccessMicrophonePermission && this.emit(db.PLAYOUT_DEVICE_CHANGED, e3);
            }
          }), n2.audio && (this.lastAccessMicrophonePermission = true, this.isAccessMicrophonePermission = true), n2.video && (this.lastAccessCameraPermission = true, this.isAccessCameraPermission = true);
        }
        checkMediaDeviceInfoIsOk(e2) {
          const t2 = e2.filter((e3) => "audioinput" === e3.kind), i2 = e2.filter((e3) => "videoinput" === e3.kind), n2 = { audio: false, video: false };
          for (const e3 of t2)
            if (e3.label && e3.deviceId) {
              n2.audio = true;
              break;
            }
          for (const e3 of i2)
            if (e3.label && e3.deviceId) {
              n2.video = true;
              break;
            }
          return n2;
        }
      }();
      let Bb = false;
      const jb = new class extends ig {
        constructor() {
          super(...arguments), nh(this, "onAutoplayFailed", void 0), nh(this, "onAudioAutoplayFailed", void 0);
        }
      }();
      function Gb() {
        if (pT(), !Bb) {
          const e2 = (t2) => {
            t2.preventDefault(), Bb = false, UT() ? document.body.removeEventListener("click", e2, true) : (document.body.removeEventListener("touchstart", e2, true), document.body.removeEventListener("mousedown", e2, true));
          };
          Bb = true, UT() ? document.body.addEventListener("click", e2, true) : (document.body.addEventListener("touchstart", e2, true), document.body.addEventListener("mousedown", e2, true)), YC.info("detect media autoplay failed, document: https://docs.agora.io/cn/Voice/autoplay_policy_web_ng?platform=Web"), jb.onAutoplayFailed ? jb.onAutoplayFailed() : jb.onAudioAutoplayFailed ? YC.warning("AgoraRTC.onAudioAutoplayFailed has been deprecated in favor of AgoraRTC.onAutoplayFailed.\n\n  Please refer to the Agora document to migrate the newer API, https://docs.agora.io/en/Voice/autoplay_policy_web_ng?platform=Web .") : YC.warning("We have detected a media autoplay failed event, and found out that you haven't implemented AgoraRTC.onAutoplayFailed callback yet.\n\n  It will cause audio/video element not playing automatically on some browsers without user interaction, possibly hurting user experiences.\n\n  Please refer to the Agora document to properly handle autoplay failed event, https://docs.agora.io/en/Voice/autoplay_policy_web_ng?platform=Web ."), jb.emit("autoplay-failed");
        }
      }
      function Wb(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function Hb(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? Wb(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : Wb(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      function Kb(e2, t2, i2, n2) {
        if (!e2)
          return;
        const s2 = rI.getBaseInfoBySessionId(e2);
        if (!s2)
          return;
        const r2 = s2.info, o2 = Date.now(), a2 = Hb(Hb({}, r2), {}, { vid: void 0 === r2.vid ? 0 : Number(r2.vid), lts: o2, elapse: o2 - s2.startTime, cbRegistered: jb.onAutoplayFailed || jb.onAudioAutoplayFailed ? 1 : -1, errorMsg: i2, mediaType: t2, trackId: n2, extend: void 0 });
        rI.send({ type: ZC.AUTOPLAY_FAILED, data: a2 }, true);
      }
      const Yb = ["play", "playing", "loadeddata", "canplay", "pause", "stalled", "suspend", "waiting", "abort", "emptied", "ended", "error"], qb = new class {
        constructor() {
          nh(this, "onAutoplayFailed", void 0), nh(this, "elementMap", /* @__PURE__ */ new Map()), nh(this, "elementStateMap", /* @__PURE__ */ new Map()), nh(this, "elementsNeedToResume", []), nh(this, "sinkIdMap", /* @__PURE__ */ new Map()), nh(this, "autoResumeAfterInterruption", (e2) => {
            Array.from(this.elementMap.entries()).forEach((t2) => {
              let [i2, n2] = t2;
              const s2 = this.elementStateMap.get(i2), r2 = n2.srcObject.getAudioTracks()[0], o2 = r2 && r2.readyState;
              if (YC.debug("resume after interrupted, ele: ".concat(s2, " audio: ").concat(o2, " ").concat(e2)), "live" === o2) {
                if (e2)
                  return n2.pause(), void n2.play();
                if ("running" === Tb.curState)
                  return wT() ? (n2.pause(), void n2.play()) : void (s2 && "paused" === s2 && n2.play());
              }
            });
          }), nh(this, "autoResumeAfterInterruptionOnIOS15_16", () => {
            Array.from(this.elementMap.entries()).forEach((e2) => {
              let [t2, i2] = e2;
              const n2 = i2.srcObject.getAudioTracks()[0];
              n2 && "live" === n2.readyState && (YC.debug("auto resume after interruption inside autoResumeAfterInterruptionOnIOS15"), i2.pause(), i2.play());
            });
          }), this.autoResumeAudioElement(), Tb.on(OA.IOS_INTERRUPTION_END, this.autoResumeAfterInterruption), Tb.on(OA.IOS_15_16_INTERRUPTION_END, this.autoResumeAfterInterruptionOnIOS15_16), Tb.on(OA.STATE_CHANGE, () => {
            CT() && "suspended" === Tb.prevState && "running" === Tb.curState && this.autoResumeAfterInterruption();
          });
        }
        async setSinkID(e2, t2) {
          const i2 = this.elementMap.get(e2);
          if (this.sinkIdMap.set(e2, t2), i2)
            try {
              await i2.setSinkId(t2);
            } catch (e3) {
              throw new VT(xT.PERMISSION_DENIED, "can not set sink id: " + e3.toString());
            }
        }
        play(e2, t2, i2, n2) {
          if (this.elementMap.has(t2))
            return;
          const s2 = document.createElement("audio");
          s2.autoplay = true, s2.srcObject = new MediaStream([e2]), this.bindAudioElementEvents(t2, s2), this.elementMap.set(t2, s2), this.elementStateMap.set(t2, lb.INIT), this.setVolume(t2, i2);
          const r2 = this.sinkIdMap.get(t2);
          if (r2)
            try {
              s2.setSinkId(r2).catch((e3) => {
                YC.warning("[".concat(t2, "] set sink id failed"), e3.toString());
              });
            } catch (e3) {
              YC.warning("[".concat(t2, "] set sink id failed"), e3.toString());
            }
          const o2 = s2.play();
          o2 && o2.then && o2.catch((e3) => {
            n2 && Kb(n2, "audio", e3.message, t2), YC.warning("audio element play warning", e3.toString()), this.elementMap.has(t2) && "NotAllowedError" === e3.name && (YC.warning("detected audio element autoplay failed"), this.elementsNeedToResume.push(s2), Ag(() => {
              this.onAutoplayFailed && this.onAutoplayFailed(), Gb();
            }));
          });
        }
        updateTrack(e2, t2) {
          const i2 = this.elementMap.get(e2);
          i2 && (i2.srcObject = new MediaStream([t2]));
        }
        isPlaying(e2) {
          return this.elementMap.has(e2) && "playing" === this.elementStateMap.get(e2);
        }
        setVolume(e2, t2) {
          const i2 = this.elementMap.get(e2);
          i2 && (t2 = Math.max(0, Math.min(100, t2)), i2.volume = t2 / 100);
        }
        stop(e2) {
          const t2 = this.elementMap.get(e2);
          if (this.sinkIdMap.delete(e2), !t2)
            return;
          const i2 = this.elementsNeedToResume.indexOf(t2);
          this.elementsNeedToResume.splice(i2, 1), t2.srcObject = null, t2.remove(), this.elementMap.delete(e2), this.elementStateMap.delete(e2);
        }
        bindAudioElementEvents(e2, t2) {
          Yb.forEach((i2) => {
            t2.addEventListener(i2, (i3) => {
              const n2 = this.elementStateMap.get(e2), s2 = "pause" === i3.type ? "paused" : i3.type;
              if (YC.debug("[".concat(e2, "] audio-element-status change ").concat(n2, " => ").concat(s2)), "error" === i3.type) {
                const i4 = null == t2 ? void 0 : t2.error;
                i4 && YC.error("[".concat(e2, "] media error, code: ").concat(i4.code, ", message: ").concat(i4.message));
              }
              this.elementStateMap.set(e2, s2);
            });
          });
        }
        getPlayerState(e2) {
          return this.elementStateMap.get(e2) || "uninit";
        }
        autoResumeAudioElement() {
          const e2 = () => {
            this.elementsNeedToResume.forEach((e3) => {
              e3.play().then((e4) => {
                YC.debug("Auto resume audio element success");
              }).catch((e4) => {
                YC.warning("Auto resume audio element failed!", e4);
              });
            }), this.elementsNeedToResume = [];
          };
          new tT((e3) => {
            document.body ? e3() : window.addEventListener("load", () => e3());
          }).then(() => {
            UT() ? document.body.addEventListener("click", e2, true) : (document.body.addEventListener("touchstart", e2, true), document.body.addEventListener("mousedown", e2, true));
          });
        }
      }();
      function Jb() {
        return function(e2, t2, i2) {
          const n2 = i2.value;
          return "function" == typeof n2 && (i2.value = function() {
            this._isClosed && new VT(xT.INVALID_OPERATION, "[".concat(this.getTrackId(), "] cannot operate a closed track")).print("warning", YC);
            for (var e3 = arguments.length, t3 = new Array(e3), i3 = 0; i3 < e3; i3++)
              t3[i3] = arguments[i3];
            const s2 = n2.apply(this, t3);
            return s2 instanceof tT ? new tT((e4, t4) => {
              s2.then(e4).catch(t4);
            }) : s2;
          }), i2;
        };
      }
      function zb(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function Xb(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? zb(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : zb(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      class Qb extends ig {
        constructor(e2) {
          super(), nh(this, "name", "VideoProcessorDestination"), nh(this, "ID", "0"), nh(this, "_source", void 0), nh(this, "videoContext", void 0), nh(this, "inputTrack", void 0), this.videoContext = e2;
        }
        get kind() {
          return "video";
        }
        get enabled() {
          return true;
        }
        pipe() {
          throw new VT(xT.NOT_SUPPORTED, "VideoProcessor cannot pipe to any other Processor");
        }
        unpipe() {
          throw new VT(xT.NOT_SUPPORTED, "VideoProcessor cannot unpipe to any other Processor");
        }
        enable() {
        }
        disable() {
        }
        updateInput(e2) {
          if (e2.context !== this.videoContext)
            throw new Error("ProcessorContext passed to VideoTrack.processorDestination doesn't match it's belonging VideoTrack's context.\nProbably you are making pipeline like this:\nvideoTrack1.pipe(processor).pipe(videoTrack2.processorDestination).");
          e2.track && e2.track !== this.inputTrack && (this.videoContext.chained = true, this.inputTrack = e2.track, this.emit(ob.ON_TRACK, e2.track));
        }
        reset() {
          this.inputTrack = void 0, this.videoContext.chained = false, this.emit(ob.ON_TRACK, void 0);
        }
      }
      class Zb extends ig {
        set chained(e2) {
          this._chained = e2;
        }
        get chained() {
          return this._chained;
        }
        constructor(e2, t2) {
          super(), nh(this, "constraintsMap", /* @__PURE__ */ new Map()), nh(this, "statsRegistry", []), nh(this, "usageRegistry", []), nh(this, "trackId", void 0), nh(this, "direction", void 0), nh(this, "_chained", false), this.trackId = e2, this.direction = t2;
        }
        async getConstraints() {
          return await fg(this, ab.REQUEST_CONSTRAINTS);
        }
        async requestApplyConstraints(e2, t2) {
          var i2;
          return YC.info("processor ".concat(t2.name, " requestApplyConstraints for ").concat(this.trackId)), e2 && this.constraintsMap.set(t2, e2), Tg(this, ab.REQUEST_UPDATE_CONSTRAINTS, Array.from(MI(i2 = this.constraintsMap).call(i2)));
        }
        async requestRevertConstraints(e2) {
          var t2;
          if (this.constraintsMap.has(e2))
            return YC.info("processor ".concat(e2.name, " requestRevertConstraints for ").concat(this.trackId)), this.constraintsMap.delete(e2), Tg(this, ab.REQUEST_UPDATE_CONSTRAINTS, Array.from(MI(t2 = this.constraintsMap).call(t2)));
        }
        registerStats(e2, t2, i2) {
          this.statsRegistry.find((i3) => i3.processorID === e2.ID && i3.processorName === e2.name && i3.type === t2) || this.statsRegistry.push({ processorName: e2.name, processorID: e2.ID, type: t2, cb: i2 });
        }
        unregisterStats(e2, t2) {
          const i2 = this.statsRegistry.findIndex((i3) => i3.processorID === e2.ID && i3.processorName === e2.name && i3.type === t2);
          -1 !== i2 && this.statsRegistry.splice(i2, 1);
        }
        gatherStats() {
          const e2 = [];
          for (const { processorID: t2, processorName: i2, type: n2, cb: s2 } of this.statsRegistry)
            try {
              const r2 = s2();
              e2.push({ processorID: t2, processorName: i2, type: n2, stats: r2 });
            } catch (e3) {
              YC.error(new VT(xT.UNEXPECTED_ERROR, e3.message));
            }
          return e2;
        }
        registerUsage(e2, t2) {
          this.usageRegistry.find((t3) => t3.processorID === e2.ID && t3.processorName === e2.name) || this.usageRegistry.push({ processorID: e2.ID, processorName: e2.name, cb: t2 });
        }
        unregisterUsage(e2) {
          const t2 = this.usageRegistry.findIndex((t3) => t3.processorID === e2.ID && t3.processorName === e2.name);
          -1 !== t2 && this.usageRegistry.splice(t2, 1);
        }
        async gatherUsage() {
          const e2 = [];
          if (!this.chained)
            return [];
          for (const { cb: t2 } of this.usageRegistry)
            try {
              let i2 = t2();
              i2 instanceof tT && (i2 = await i2), e2.push(Xb(Xb({}, i2), {}, { direction: this.direction }));
            } catch (e3) {
              YC.error("gather extension usage error", e3);
            }
          return e2;
        }
        getDirection() {
          return this.direction;
        }
      }
      class $b extends ig {
        constructor(e2) {
          super(), nh(this, "name", "AudioProcessorDestination"), nh(this, "ID", "0"), nh(this, "inputTrack", void 0), nh(this, "inputNode", void 0), nh(this, "audioProcessorContext", void 0), nh(this, "_source", void 0), this.audioProcessorContext = e2;
        }
        get kind() {
          return "audio";
        }
        get enabled() {
          return true;
        }
        pipe() {
          throw new VT(xT.NOT_SUPPORTED, "AudioProcessorDestination cannot pipe to any other Processor");
        }
        unpipe() {
          throw new VT(xT.NOT_SUPPORTED, "AudioProcessor cannot unpipe to any other Processor");
        }
        enable() {
        }
        disable() {
        }
        reset() {
          this.inputTrack = void 0, this.inputNode = void 0, this.audioProcessorContext.chained = false, this.emit(ob.ON_TRACK, void 0), this.emit(ob.ON_NODE, void 0);
        }
        updateInput(e2) {
          if (e2.context !== this.audioProcessorContext)
            throw new Error("ProcessorContext passed to AudioTrack.processorDestination doesn't match it's belonging AudioTrack's context.\n        Probably you are making pipeline like this: audioTrack1.pipe(processor).pipe(audioTrack2.processorDestination).");
          e2.track && this.inputTrack !== e2.track && (this.audioProcessorContext.chained = true, this.inputTrack = e2.track, this.emit(ob.ON_TRACK, this.inputTrack)), e2.node && this.inputNode !== e2.node && (this.audioProcessorContext.chained = true, this.inputNode = e2.node, this.emit(ob.ON_NODE, this.inputNode));
        }
      }
      class ew extends ig {
        set chained(e2) {
          this._chained = e2;
        }
        get chained() {
          return this._chained;
        }
        constructor(e2, t2, i2) {
          super(), nh(this, "constraintsMap", /* @__PURE__ */ new Map()), nh(this, "statsRegistry", []), nh(this, "audioContext", void 0), nh(this, "trackId", void 0), nh(this, "direction", void 0), nh(this, "usageRegistry", []), nh(this, "_chained", false), this.audioContext = e2, this.trackId = t2, this.direction = i2;
        }
        async getConstraints() {
          return fg(this, ab.REQUEST_CONSTRAINTS);
        }
        getAudioContext() {
          return this.audioContext;
        }
        async requestApplyConstraints(e2, t2) {
          var i2;
          return YC.info("processor ".concat(t2.name, " requestApplyConstraints for ").concat(this.trackId)), e2 && this.constraintsMap.set(t2, e2), Tg(this, ab.REQUEST_UPDATE_CONSTRAINTS, Array.from(MI(i2 = this.constraintsMap).call(i2)));
        }
        async requestRevertConstraints(e2) {
          var t2;
          if (this.constraintsMap.has(e2))
            return this.constraintsMap.delete(e2), Tg(this, ab.REQUEST_UPDATE_CONSTRAINTS, Array.from(MI(t2 = this.constraintsMap).call(t2)));
        }
        registerStats(e2, t2, i2) {
          this.statsRegistry.find((i3) => i3.processorID === e2.ID && i3.processorName === e2.name && i3.type === t2) || this.statsRegistry.push({ processorName: e2.name, processorID: e2.ID, type: t2, cb: i2 });
        }
        unregisterStats(e2, t2) {
          const i2 = this.statsRegistry.findIndex((i3) => i3.processorID === e2.ID && i3.processorName === e2.name && i3.type === t2);
          -1 !== i2 && this.statsRegistry.splice(i2, 1);
        }
        gatherStats() {
          const e2 = [];
          for (const { processorID: t2, processorName: i2, type: n2, cb: s2 } of this.statsRegistry)
            try {
              const r2 = s2();
              e2.push({ processorID: t2, processorName: i2, type: n2, stats: r2 });
            } catch (e3) {
              YC.error(new VT(xT.UNEXPECTED_ERROR, e3.message));
            }
          return e2;
        }
        registerUsage(e2, t2) {
          this.usageRegistry.find((t3) => t3.processorID === e2.ID && t3.processorName === e2.name) || this.usageRegistry.push({ processorID: e2.ID, processorName: e2.name, cb: t2 });
        }
        unregisterUsage(e2) {
          const t2 = this.usageRegistry.findIndex((t3) => t3.processorID === e2.ID && t3.processorName === e2.name);
          -1 !== t2 && this.usageRegistry.splice(t2, 1);
        }
        async gatherUsage() {
          const e2 = [];
          if (!this.chained)
            return [];
          for (const { cb: t2 } of this.usageRegistry)
            try {
              let i2 = t2();
              i2 instanceof tT && (i2 = await i2), e2.push(Xb(Xb({}, i2), {}, { direction: this.direction }));
            } catch (e3) {
              YC.error("gather extension usage error", e3);
            }
          return e2;
        }
        getDirection() {
          return this.direction;
        }
      }
      class tw extends ig {
        get isPlayed() {
          return true;
        }
        get isFreeze() {
          return false;
        }
        constructor() {
          super(), nh(this, "context", void 0), nh(this, "processSourceNode", void 0), nh(this, "outputTrack", void 0), nh(this, "processedNode", void 0), nh(this, "clonedTrack", void 0), nh(this, "outputNode", void 0), this.outputNode = new iw();
        }
        setVolume() {
        }
        createOutputTrack() {
          throw new VT(xT.NOT_SUPPORTED, "can not create output MediaStreamTrack when WebAudio disabled");
        }
        getOriginVolumeLevel() {
          return 0;
        }
        getAccurateVolumeLevel() {
          return 0;
        }
        stopGetAudioBuffer() {
        }
        startGetAudioBuffer() {
        }
        play() {
        }
        stop() {
        }
        destroy() {
        }
        updateTrack() {
        }
        updateOriginTrack() {
        }
        createMediaStreamSourceNode() {
        }
      }
      class iw {
        disconnect() {
        }
        connect() {
        }
      }
      let nw = null;
      class sw {
        constructor() {
          nh(this, "state", "open"), nh(this, "trigger", void 0), nh(this, "tasks", []), YC.debug("[macro-task-queue] is created."), this.trigger = window.setTimeout(() => {
            this.state = "closed", YC.debug("[macro-task-queue] will be closed, all remaining tasks will execute. [".concat(this.tasks.map((e2) => e2.key), "]")), this.trigger = void 0, this.tasks.forEach((e2) => {
              let { func: t2 } = e2;
              return t2();
            }), this.tasks.length = 0, YC.debug("[macro-task-queue] is closed.");
          });
        }
        enqueue(e2, t2) {
          "closed" !== this.state && (this.tasks.push({ key: e2, func: t2 }), YC.debug("[macro-task-queue] is queued, current queue ".concat(this.tasks.length, ". ").concat("string" == typeof e2 ? e2 : "")));
        }
        runTask(e2) {
          if ("closed" === this.state)
            return;
          const t2 = this.tasks.findIndex((t3) => t3.key === e2);
          if (-1 !== t2) {
            const i2 = this.tasks.splice(t2, 1);
            YC.debug("[macro-task-queue] is unqueued, current queue ".concat(this.tasks.length, ". ").concat("string" == typeof e2 ? e2 : "")), i2[0].func();
          }
        }
        release() {
          this.trigger && (this.state = "closed", clearTimeout(this.trigger), this.trigger = void 0, this.tasks.length = 0, YC.debug("[macro-task-queue] is closed."));
        }
      }
      function rw(e2) {
        return function(t2, i2, n2) {
          var s2;
          const r2 = null !== (s2 = n2.value) && void 0 !== s2 ? s2 : n2.get, o2 = function() {
            nw && "open" === nw.state && nw.runTask(e2);
            for (var t3 = arguments.length, i3 = new Array(t3), n3 = 0; n3 < t3; n3++)
              i3[n3] = arguments[n3];
            return null == r2 ? void 0 : r2.apply(this, ...i3);
          };
          return n2.value ? n2.value = o2 : n2.get = o2, n2;
        };
      }
      function ow(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function aw(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? ow(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : ow(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      class cw extends _b {
        get _source() {
          return this._trackSource;
        }
        set _source(e2) {
          this._trackSource = e2;
        }
        get processorContext() {
          return this._processorContext;
        }
        set processorContext(e2) {
          this._processorContext = e2;
        }
        get processorDestination() {
          return this._processorDestination;
        }
        set processorDestination(e2) {
          this._processorDestination = e2;
        }
        get isPlaying() {
          return this._useAudioElement ? qb.isPlaying(this.getTrackId()) : this._source.isPlayed;
        }
        get __className__() {
          return "LocalAudioTrack";
        }
        constructor(e2, t2, i2, n2, s2) {
          super(e2, i2), nh(this, "trackMediaType", "audio"), nh(this, "_encoderConfig", void 0), nh(this, "_trackSource", void 0), nh(this, "_enabled", true), nh(this, "_volume", 100), nh(this, "_useAudioElement", false), nh(this, "_bypassWebAudio", false), nh(this, "processor", void 0), nh(this, "_processorContext", void 0), nh(this, "_processorDestination", void 0), nh(this, "_getOriginVolumeLevel", void 0), this._encoderConfig = t2, this._getOriginVolumeLevel = !!n2;
          const r2 = () => {
            this.processorContext = new ew(this._source.context, this.getTrackId(), "local"), this.processorDestination = new $b(this.processorContext), this.bindProcessorDestinationEvents(), this._source.on($A.UPDATE_SOURCE, () => {
              this.processor && this.processor.updateInput({ node: this._source.processSourceNode, context: this.processorContext });
            });
          }, o2 = s2 && ST() && !Rb();
          if (DC("DISABLE_WEBAUDIO") ? (this._source = new tw(), this._useAudioElement = true, this._bypassWebAudio = true) : o2 ? this._source = new tw() : (this._source = new bb(e2, false, this._getOriginVolumeLevel ? e2 : void 0), DC("LOCAL_AUDIO_TRACK_USES_WEB_AUDIO") || (this._useAudioElement = true)), r2(), !DC("DISABLE_WEBAUDIO") && o2) {
            (nw || (nw = new sw()), nw).enqueue("INIT_WEBAUDIO", () => {
              this._source = new bb(e2, false, this._getOriginVolumeLevel ? e2 : void 0), DC("LOCAL_AUDIO_TRACK_USES_WEB_AUDIO") || (this._useAudioElement = true), r2(), this.emit(eb.UPDATE_TRACK_SOURCE);
            });
          }
        }
        setVolume(e2) {
          jT(e2, "volume", 0, 1e3), this._volume = e2, this._source.setVolume(e2 / 100), this._useAudioElement && qb.setVolume(this.getTrackId(), e2);
          try {
            if (this._bypassWebAudio)
              return void YC.debug("[".concat(this.getTrackId(), "] setVolume returned because no pass through WebAudio."));
            const e3 = this._source.createOutputTrack();
            this._mediaStreamTrack !== e3 && (this._mediaStreamTrack = e3, Tg(this, KA.NEED_REPLACE_TRACK, this).then(() => {
              YC.debug("[".concat(this.getTrackId(), "] replace web audio track success"));
            }).catch((e4) => {
              YC.warning("[".concat(this.getTrackId(), "] replace web audio track failed"), e4);
            }));
          } catch (e3) {
          }
        }
        getVolumeLevel() {
          return this._muted && this.enabled && this._getOriginVolumeLevel ? this._source.getOriginVolumeLevel() : this._source.getAccurateVolumeLevel();
        }
        async setPlaybackDevice(e2) {
          if (!this._useAudioElement || !gT() && DC("RESTRICTION_SET_PLAYBACK_DEVICE"))
            throw new VT(xT.NOT_SUPPORTED, "your browser does not support setting the audio output device");
          await qb.setSinkID(this.getTrackId(), e2);
        }
        async setEnabled(e2, t2, i2) {
          return this._setEnabled(e2, t2, i2);
        }
        async _setEnabled(e2, t2, i2) {
          if (!i2) {
            if (e2 === this._enabled)
              return;
            this.stateCheck("enabled", e2);
          }
          if (YC.info("[".concat(this.getTrackId(), "] start setEnabled"), e2), e2) {
            this._originMediaStreamTrack.enabled = true;
            try {
              i2 || (this._enabled = true), await Tg(this, KA.NEED_ENABLE_TRACK, this), YC.info("[".concat(this.getTrackId(), "] setEnabled to ").concat(e2, " success"));
            } catch (e3) {
              throw i2 || (this._enabled = false), YC.error("[".concat(this.getTrackId(), "] setEnabled to true error"), e3.toString()), e3;
            }
          } else {
            this._originMediaStreamTrack.enabled = false, i2 || (this._enabled = false);
            try {
              await Tg(this, KA.NEED_DISABLE_TRACK, this);
            } catch (e3) {
              throw i2 || (this._enabled = true), YC.error("[".concat(this.getTrackId(), "] setEnabled to false error"), e3.toString()), e3;
            }
          }
        }
        async setMuted(e2) {
          e2 !== this._muted && (this.stateCheck("muted", e2), this._muted = e2, this._originMediaStreamTrack.enabled = !e2, YC.debug("[".concat(this.getTrackId(), "] start set muted: ").concat(e2)), e2 ? await Tg(this, KA.NEED_MUTE_TRACK, this) : await Tg(this, KA.NEED_UNMUTE_TRACK, this));
        }
        getStats() {
          Ng(() => {
            YC.warning("[deprecated] LocalAudioTrack.getStats will be removed in the future, use AgoraRTCClient.getLocalAudioStats instead");
          }, "localAudioTrackGetStatsWarning");
          const e2 = gg(this, KA.GET_STATS);
          return e2 || aw({}, tb);
        }
        setAudioFrameCallback(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 4096;
          if (!e2)
            return this._source.removeAllListeners($A.ON_AUDIO_BUFFER), void this._source.stopGetAudioBuffer();
          this._source.startGetAudioBuffer(t2), this._source.removeAllListeners($A.ON_AUDIO_BUFFER), this._source.on($A.ON_AUDIO_BUFFER, (t3) => e2(t3));
        }
        play() {
          YC.debug("[".concat(this.getTrackId(), "] start audio playback")), this._useAudioElement ? (YC.debug("[".concat(this.getTrackId(), "] start audio playback in element")), qb.play(this._mediaStreamTrack, this.getTrackId(), this._volume)) : this._source.play();
        }
        stop() {
          YC.debug("[".concat(this.getTrackId(), "] stop audio playback")), this._useAudioElement ? qb.stop(this.getTrackId()) : this._source.stop();
        }
        close() {
          super.close(), this.unbindProcessorDestinationEvents(), this.unbindProcessorContextEvents(), this.unpipe(), this.processorDestination._source && this.processorDestination._source.unpipe(), this._source.destroy();
        }
        _updatePlayerSource() {
          let e2 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
          YC.debug("[".concat(this.getTrackId(), "] update player source track")), e2 && this._source.updateTrack(this._mediaStreamTrack), this._useAudioElement && qb.updateTrack(this.getTrackId(), this._mediaStreamTrack);
        }
        async _updateOriginMediaStreamTrack(e2, t2) {
          this._originMediaStreamTrack !== e2 && (this._originMediaStreamTrack && (this._originMediaStreamTrack.removeEventListener("ended", this._handleTrackEnded), t2 && this._originMediaStreamTrack.stop()), e2.addEventListener("ended", this._handleTrackEnded), this._originMediaStreamTrack = e2, this._muted && (this._originMediaStreamTrack.enabled = false), this.processor && this.processor.updateInput({ track: e2, context: this.processorContext }), this._mediaStreamTrack !== this._source.outputTrack ? (this._mediaStreamTrack = this._originMediaStreamTrack, this._updatePlayerSource(), await Tg(this, KA.NEED_REPLACE_TRACK, this)) : this._source.updateTrack(this._originMediaStreamTrack), this._getOriginVolumeLevel && this._source.updateOriginTrack(e2));
        }
        renewMediaStreamTrack(e2) {
          return tT.resolve(void 0);
        }
        pipe(e2) {
          if (this._bypassWebAudio)
            throw new VT(xT.INVALID_OPERATION, "Can not process AudioTrack when bypassWebAudio set to true.");
          if (this.processor === e2)
            return e2;
          if (e2._source)
            throw new VT(xT.INVALID_OPERATION, "Processor ".concat(e2.name, " already piped, please call unpipe beforehand."));
          return this.unpipe(), this.processor = e2, this.processor._source = this, e2.updateInput({ track: this._originMediaStreamTrack, node: this._source.processSourceNode, context: this.processorContext }), e2;
        }
        unpipe() {
          var e2;
          if (!this.processor)
            return;
          const t2 = this.processor;
          null === (e2 = this._source.processSourceNode) || void 0 === e2 || e2.disconnect(), this.processor._source = false, this.processor = void 0, t2.reset();
        }
        bindProcessorDestinationEvents() {
          this.processorDestination.on(ob.ON_TRACK, async (e2) => {
            e2 ? e2 !== this._mediaStreamTrack && (this._mediaStreamTrack = e2, this._updatePlayerSource(false), this._source.processedNode = this._source.createMediaStreamSourceNode(e2), await Tg(this, KA.NEED_REPLACE_TRACK, this)) : this._mediaStreamTrack !== this._originMediaStreamTrack && (this._mediaStreamTrack = this._originMediaStreamTrack, this._updatePlayerSource(), await Tg(this, KA.NEED_REPLACE_TRACK, this));
          }), this.processorDestination.on(ob.ON_NODE, (e2) => {
            this._source.processedNode = e2;
          });
        }
        unbindProcessorDestinationEvents() {
          this.processorDestination.removeAllListeners(ob.ON_TRACK), this.processorDestination.removeAllListeners(ob.ON_NODE);
        }
        unbindProcessorContextEvents() {
          this.processorContext.removeAllListeners(ab.REQUEST_UPDATE_CONSTRAINTS), this.processorContext.removeAllListeners(ab.REQUEST_CONSTRAINTS);
        }
      }
      UI([rw("INIT_WEBAUDIO"), xI("design:type", Object), xI("design:paramtypes", [Object])], cw.prototype, "_source", null), UI([rw("INIT_WEBAUDIO"), xI("design:type", ew), xI("design:paramtypes", [ew])], cw.prototype, "processorContext", null), UI([rw("INIT_WEBAUDIO"), xI("design:type", $b), xI("design:paramtypes", [$b])], cw.prototype, "processorDestination", null), UI([sI({ argsMap: (e2, t2) => [e2.getTrackId(), t2], throttleTime: 300 }), xI("design:type", Function), xI("design:paramtypes", [Number]), xI("design:returntype", void 0)], cw.prototype, "setVolume", null), UI([sI({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), Jb(), xI("design:type", Function), xI("design:paramtypes", [String]), xI("design:returntype", tT)], cw.prototype, "setPlaybackDevice", null), UI([qg("LocalAudioTrack", "_enabledMutex"), sI({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), Jb(), xI("design:type", Function), xI("design:paramtypes", [Boolean, Object, Boolean]), xI("design:returntype", tT)], cw.prototype, "setEnabled", null), UI([qg("LocalAudioTrack", "_enabledMutex"), sI({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), Jb(), xI("design:type", Function), xI("design:paramtypes", [Boolean]), xI("design:returntype", tT)], cw.prototype, "setMuted", null), UI([Jb(), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", Object)], cw.prototype, "getStats", null), UI([Jb(), xI("design:type", Function), xI("design:paramtypes", [Object, Number]), xI("design:returntype", void 0)], cw.prototype, "setAudioFrameCallback", null), UI([sI({ argsMap: (e2) => [e2.getTrackId()] }), Jb(), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", void 0)], cw.prototype, "play", null), UI([sI({ argsMap: (e2) => [e2.getTrackId()] }), Jb(), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", void 0)], cw.prototype, "stop", null), UI([sI({ argsMap: (e2) => [e2.getTrackId()] }), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", void 0)], cw.prototype, "close", null), UI([sI({ argsMap: (e2, t2) => [e2.getTrackId(), t2.name] }), xI("design:type", Function), xI("design:paramtypes", [Object]), xI("design:returntype", Object)], cw.prototype, "pipe", null), UI([sI({ argsMap: (e2) => [e2.getTrackId()] }), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", void 0)], cw.prototype, "unpipe", null);
      class dw extends cw {
        get __className__() {
          return "MicrophoneAudioTrack";
        }
        constructor(e2, t2, i2, n2) {
          super(e2, t2.encoderConfig ? GA(t2.encoderConfig) : {}, n2, DC("GET_VOLUME_OF_MUTED_AUDIO_TRACK"), true), nh(this, "_config", void 0), nh(this, "_deviceName", "default"), nh(this, "_constraints", void 0), nh(this, "_originalConstraints", void 0), nh(this, "_enabled", true), this._config = t2, this._constraints = i2, this._originalConstraints = i2, this._deviceName = e2.label, "boolean" == typeof t2.bypassWebAudio && (this._bypassWebAudio = t2.bypassWebAudio), (wT() || OT()) && Tb.bindInterruptDetectorTrack(this), this.on(eb.UPDATE_TRACK_SOURCE, () => {
            this.bindProcessorContextEvents();
          }), Rb() && this.bindProcessorContextEvents();
        }
        async setDevice(e2) {
          if (YC.info("[".concat(this.getTrackId(), "] start set device to ").concat(e2)), this._enabled)
            try {
              const t2 = await Fb.getDeviceById(e2), i2 = {};
              i2.audio = aw({}, this._constraints), i2.audio.deviceId = { exact: e2 }, this._originMediaStreamTrack.stop();
              let n2 = null;
              try {
                n2 = await Mb(i2, this.getTrackId());
              } catch (e3) {
                throw YC.error("[".concat(this.getTrackId(), "] setDevice failed"), e3.toString()), n2 = await Mb({ audio: this._constraints }, this.getTrackId()), await this._updateOriginMediaStreamTrack(n2.getAudioTracks()[0], false), e3;
              }
              await this._updateOriginMediaStreamTrack(n2.getAudioTracks()[0], false), this._deviceName = t2.label, this._config.microphoneId = e2, this._constraints.deviceId = { exact: e2 };
            } catch (e3) {
              throw YC.error("[".concat(this.getTrackId(), "] setDevice error"), e3.toString()), e3;
            }
          else
            try {
              const t2 = await Fb.getDeviceById(e2);
              this._deviceName = t2.label, this._config.microphoneId = e2, this._constraints.deviceId = { exact: e2 };
            } catch (e3) {
              throw YC.error("[".concat(this.getTrackId(), "] setDevice error"), e3.toString()), e3;
            }
          YC.info("[".concat(this.getTrackId(), "] set device to ").concat(e2, " success"));
        }
        async setEnabled(e2, t2, i2) {
          if (t2)
            return YC.debug("[".concat(this.getTrackId(), "] setEnabled false (do not close microphone)")), await super._setEnabled(e2);
          if (!i2) {
            if (e2 === this._enabled)
              return;
            this.stateCheck("enabled", e2);
          }
          if (YC.info("[".concat(this.getTrackId(), "] start setEnabled"), e2), !e2) {
            var n2;
            this._originMediaStreamTrack.onended = null, this._originMediaStreamTrack.stop(), null === (n2 = this._source.clonedTrack) || void 0 === n2 || n2.stop(), i2 || (this._enabled = false);
            try {
              await Tg(this, KA.NEED_DISABLE_TRACK, this);
            } catch (e3) {
              throw YC.error("[".concat(this.getTrackId(), "] setEnabled false failed"), e3.toString()), e3;
            }
            return;
          }
          const s2 = aw({}, this._constraints), r2 = Fb.searchDeviceIdByName(this._deviceName);
          r2 && !s2.deviceId && (s2.deviceId = r2);
          try {
            i2 || (this._enabled = true);
            const e3 = await Mb({ audio: this._constraints }, this.getTrackId());
            await this._updateOriginMediaStreamTrack(e3.getAudioTracks()[0], false), await Tg(this, KA.NEED_ENABLE_TRACK, this);
          } catch (e3) {
            throw i2 || (this._enabled = false), YC.error("[".concat(this.getTrackId(), "] setEnabled true failed"), e3.toString()), e3;
          }
          YC.info("[".concat(this.getTrackId(), "] setEnabled success"));
        }
        close() {
          super.close(), (wT() || OT()) && Tb.unbindInterruptDetectorTrack(this);
        }
        onTrackEnded() {
          if ((CT() || DT()) && this._enabled && !this._isClosed && Tb.duringInterruption) {
            const e2 = async () => {
              Tb.off(OA.IOS_INTERRUPTION_END, e2), this._enabled && !this._isClosed && (YC.debug("[".concat(this.getTrackId(), "] try capture microphone media device for interrupted iOS device.")), await this.setEnabled(false), await this.setEnabled(true));
            };
            Tb.on(OA.IOS_INTERRUPTION_END, e2);
          } else
            YC.debug("[".concat(this.getTrackId(), "] track ended")), this.safeEmit(QA.TRACK_ENDED);
        }
        async renewMediaStreamTrack(e2) {
          const t2 = e2 || this._constraints, i2 = Fb.searchDeviceIdByName(this._deviceName);
          if (i2 && !t2.deviceId && (t2.deviceId = i2), this._constraints = t2, this._enabled) {
            this._originMediaStreamTrack.stop();
            const e3 = await Mb({ audio: this._constraints }, this.getTrackId());
            await this._updateOriginMediaStreamTrack(e3.getAudioTracks()[0], true);
          }
        }
        bindProcessorContextEvents() {
          this.processorContext.on(ab.REQUEST_UPDATE_CONSTRAINTS, async (e2, t2, i2) => {
            try {
              const i3 = Object.assign({}, this._originalConstraints, ...e2);
              await this.renewMediaStreamTrack(i3), t2();
            } catch (e3) {
              i2(e3);
            }
          }), this.processorContext.on(ab.REQUEST_CONSTRAINTS, async (e2) => {
            e2(this._originMediaStreamTrack.getSettings());
          });
        }
      }
      UI([sI({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), Jb(), xI("design:type", Function), xI("design:paramtypes", [String]), xI("design:returntype", tT)], dw.prototype, "setDevice", null), UI([qg("MicrophoneAudioTrack", "_enabledMutex"), sI({ argsMap: (e2, t2, i2) => [e2.getTrackId(), t2, i2] }), Jb(), xI("design:type", Function), xI("design:paramtypes", [Boolean, Boolean, Boolean]), xI("design:returntype", tT)], dw.prototype, "setEnabled", null), UI([sI({ argsMap: (e2) => [e2.getTrackId()] }), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", void 0)], dw.prototype, "close", null);
      class lw extends cw {
        get __className__() {
          return "BufferSourceAudioTrack";
        }
        constructor(e2, t2, i2, n2) {
          super(t2.createOutputTrack(), i2, n2), nh(this, "source", void 0), nh(this, "_bufferSource", void 0), this.source = e2, this._bufferSource = t2, this._bufferSource.on($A.AUDIO_SOURCE_STATE_CHANGE, (e3) => {
            this.safeEmit(QA.SOURCE_STATE_CHANGE, e3);
          });
          try {
            this._mediaStreamTrack = this._source.createOutputTrack();
          } catch (e3) {
          }
        }
        get currentState() {
          return this._bufferSource.currentState;
        }
        get duration() {
          return this._bufferSource.duration;
        }
        get playbackSpeed() {
          return this._bufferSource.playbackSpeed;
        }
        getCurrentTime() {
          return this._bufferSource.currentTime;
        }
        startProcessAudioBuffer(e2) {
          e2 && this._bufferSource.updateOptions(e2), this._bufferSource.startProcessAudioBuffer();
        }
        pauseProcessAudioBuffer() {
          this._bufferSource.pauseProcessAudioBuffer();
        }
        seekAudioBuffer(e2) {
          this._bufferSource.seekAudioBuffer(e2);
        }
        resumeProcessAudioBuffer() {
          this._bufferSource.resumeProcessAudioBuffer();
        }
        stopProcessAudioBuffer() {
          this._bufferSource.stopProcessAudioBuffer();
        }
        close() {
          this.source = null, this._bufferSource.destroy(), super.close();
        }
        setAudioBufferPlaybackSpeed(e2) {
          jT(e2, "speed", 0), this._bufferSource.setAudioBufferPlaybackSpeed(e2);
        }
      }
      UI([sI({ argsMap: (e2, t2) => [e2.getTrackId(), t2, e2.duration] }), Jb(), xI("design:type", Function), xI("design:paramtypes", [Object]), xI("design:returntype", void 0)], lw.prototype, "startProcessAudioBuffer", null), UI([sI({ argsMap: (e2) => [e2.getTrackId()] }), Jb(), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", void 0)], lw.prototype, "pauseProcessAudioBuffer", null), UI([sI({ argsMap: (e2) => [e2.getTrackId()] }), Jb(), xI("design:type", Function), xI("design:paramtypes", [Number]), xI("design:returntype", void 0)], lw.prototype, "seekAudioBuffer", null), UI([sI({ argsMap: (e2) => [e2.getTrackId()] }), Jb(), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", void 0)], lw.prototype, "resumeProcessAudioBuffer", null), UI([sI({ argsMap: (e2) => [e2.getTrackId()] }), Jb(), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", void 0)], lw.prototype, "stopProcessAudioBuffer", null), UI([sI({ argsMap: (e2) => [e2.getTrackId()] }), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", void 0)], lw.prototype, "close", null), UI([sI({ argsMap: (e2) => [e2.getTrackId()] }), Jb(), xI("design:type", Function), xI("design:paramtypes", [Number]), xI("design:returntype", void 0)], lw.prototype, "setAudioBufferPlaybackSpeed", null);
      class uw extends cw {
        get __className__() {
          return "MixingAudioTrack";
        }
        get isActive() {
          for (const e2 of this.trackList)
            if (e2._enabled && !e2._isClosed && !e2.muted)
              return true;
          return false;
        }
        constructor() {
          const e2 = Sb().createMediaStreamDestination();
          super(e2.stream.getAudioTracks()[0], void 0, xg(8, "track-mix-")), nh(this, "trackList", void 0), nh(this, "destNode", void 0);
          try {
            this._mediaStreamTrack = this._source.createOutputTrack();
          } catch (e3) {
          }
          this.destNode = e2, this.trackList = [];
        }
        hasAudioTrack(e2) {
          return -1 !== this.trackList.indexOf(e2);
        }
        addAudioTrack(e2) {
          -1 === this.trackList.indexOf(e2) ? (YC.debug("add ".concat(e2.getTrackId(), " to mixing track")), e2._source.outputNode.connect(this.destNode), this.trackList.push(e2), this.updateEncoderConfig()) : YC.debug("track ".concat(e2.getTrackId(), " is already added"));
        }
        removeAudioTrack(e2) {
          if (-1 !== this.trackList.indexOf(e2)) {
            YC.debug("remove ".concat(e2.getTrackId(), " from mixing track"));
            try {
              e2._source.outputNode.disconnect(this.destNode);
            } catch (e3) {
            }
            vg(this.trackList, e2), this.updateEncoderConfig();
          }
        }
        updateEncoderConfig() {
          const e2 = {};
          this.trackList.forEach((t2) => {
            t2._encoderConfig && ((t2._encoderConfig.bitrate || 0) > (e2.bitrate || 0) && (e2.bitrate = t2._encoderConfig.bitrate), (t2._encoderConfig.sampleRate || 0) > (e2.sampleRate || 0) && (e2.sampleRate = t2._encoderConfig.sampleRate), (t2._encoderConfig.sampleSize || 0) > (e2.sampleSize || 0) && (e2.sampleSize = t2._encoderConfig.sampleSize), t2._encoderConfig.stereo && (e2.stereo = true));
          }), this._encoderConfig = e2;
        }
        _updateRtpTransceiver(e2) {
          this._rtpTransceiver !== e2 && (this._rtpTransceiver = e2, this.trackList.forEach((t2) => {
            t2 instanceof uw ? t2.emit(XA.TRANSCEIVER_UPDATED, e2) : t2._updateRtpTransceiver(e2);
          }));
        }
      }
      function hw(e2) {
        const t2 = {};
        e2.facingMode && (t2.facingMode = e2.facingMode), e2.cameraId && (t2.deviceId = { exact: e2.cameraId });
        const i2 = VA(e2.encoderConfig);
        return null != i2.width && (t2.width = i2.width), null != i2.height && (t2.height = i2.height), !LT() && i2.frameRate && (t2.frameRate = i2.frameRate), pT().name === cT.EDGE && "object" == typeof t2.frameRate && (t2.frameRate.max = 60), RT() && (t2.frameRate = { ideal: 30, max: 30 }), t2;
      }
      function pw(e2) {
        const t2 = {};
        if (LT() || (void 0 !== e2.AGC && (t2.autoGainControl = e2.AGC), void 0 !== e2.AEC && (t2.echoCancellation = e2.AEC), void 0 !== e2.ANS && (t2.noiseSuppression = e2.ANS, gT() && e2.ANS && (t2.googHighpassFilter = e2.ANS))), e2.encoderConfig) {
          const i2 = GA(e2.encoderConfig);
          t2.channelCount = i2.stereo ? 2 : 1, t2.sampleRate = i2.sampleRate, t2.sampleSize = i2.sampleSize;
        }
        return e2.microphoneId && (t2.deviceId = { exact: e2.microphoneId }), MT() && (t2.sampleRate = void 0), t2;
      }
      class _w extends Ab {
        set currentState(e2) {
          e2 !== this._currentState && (this._currentState = e2, this.safeEmit($A.AUDIO_SOURCE_STATE_CHANGE, this._currentState));
        }
        get currentState() {
          return this._currentState;
        }
        constructor(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
          super(), nh(this, "audioBuffer", void 0), nh(this, "sourceNode", void 0), nh(this, "startPlayTime", 0), nh(this, "startPlayOffset", 0), nh(this, "pausePlayTime", 0), nh(this, "options", void 0), nh(this, "currentLoopCount", 0), nh(this, "currentPlaybackSpeed", 100), nh(this, "_currentState", "stopped"), this.audioBuffer = e2, this.options = t2, this.startPlayOffset = this.options.startPlayTime || 0;
        }
        createWebAudioDiagram() {
          return this.context.createGain();
        }
        get duration() {
          return this.audioBuffer ? this.audioBuffer.duration : 0;
        }
        get playbackSpeed() {
          return this.currentPlaybackSpeed;
        }
        get currentTime() {
          return this.audioBuffer ? "stopped" === this.currentState ? 0 : "paused" === this.currentState ? this.pausePlayTime : ((this.context.currentTime - this.startPlayTime) * (this.playbackSpeed / 100) + this.startPlayOffset) % this.audioBuffer.duration : 0;
        }
        updateOptions(e2) {
          "stopped" === this.currentState ? (this.options = e2, this.startPlayOffset = this.options.startPlayTime || 0) : YC.warning("can not set audio source options");
        }
        startProcessAudioBuffer() {
          this.sourceNode && this.stopProcessAudioBuffer(), this.sourceNode = this.createSourceNode(), this.startSourceNode(), this.currentState = "playing";
        }
        pauseProcessAudioBuffer() {
          this.sourceNode && "playing" === this.currentState && (this.pausePlayTime = this.currentTime, this.sourceNode.onended = null, this.sourceNode.stop(), this.sourceNode.buffer = null, this.sourceNode = this.createSourceNode(), this.currentState = "paused");
        }
        seekAudioBuffer(e2) {
          this.sourceNode && (this.sourceNode.onended = null, "playing" === this.currentState && this.sourceNode.stop(), this.sourceNode = this.createSourceNode(), "playing" === this.currentState ? (this.startPlayOffset = e2, this.startSourceNode()) : "paused" === this.currentState && (this.pausePlayTime = e2));
        }
        resumeProcessAudioBuffer() {
          "paused" === this.currentState && this.sourceNode && (this.startPlayOffset = this.pausePlayTime, this.pausePlayTime = 0, this.startSourceNode(), this.currentState = "playing");
        }
        stopProcessAudioBuffer() {
          if (this.sourceNode) {
            this.sourceNode.onended = null;
            try {
              this.sourceNode.stop();
            } catch (e2) {
            }
            this.reset();
          }
        }
        destroy() {
          this.audioBuffer = null, super.destroy();
        }
        setAudioBufferPlaybackSpeed(e2) {
          this.sourceNode && ("playing" === this.currentState && (this.startPlayOffset = this.currentTime, this.startPlayTime = this.context.currentTime), this.sourceNode.playbackRate.value = e2 / 100), this.currentPlaybackSpeed = e2;
        }
        startSourceNode() {
          this.sourceNode && this.sourceNode.buffer && (this.sourceNode.start(0, this.startPlayOffset), this.startPlayTime = this.context.currentTime, this.sourceNode.onended = this.handleSourceNodeEnded.bind(this));
        }
        createSourceNode() {
          const e2 = this.context.createBufferSource();
          return e2.buffer = this.audioBuffer, e2.loop = !!this.options.loop, e2.connect(this.outputNode), e2.playbackRate.value = this.currentPlaybackSpeed / 100, e2;
        }
        handleSourceNodeEnded() {
          if (this.currentLoopCount += 1, this.options.cycle && this.options.cycle > this.currentLoopCount)
            return this.startPlayOffset = 0, this.sourceNode = void 0, void this.startProcessAudioBuffer();
          this.reset();
        }
        reset() {
          this.startPlayOffset = this.options.startPlayTime || 0, this.currentState = "stopped", this.sourceNode && (this.sourceNode.disconnect(), this.sourceNode = void 0), this.currentLoopCount = 0;
        }
      }
      const Ew = /* @__PURE__ */ new Map();
      async function mw(e2, t2) {
        let i2 = null;
        if ("string" == typeof e2) {
          const t3 = Ew.get(e2);
          if (t3)
            return YC.debug("use cached audio resource: ", e2), t3;
          try {
            i2 = (await Xg(() => EC.get(e2, { responseType: "arraybuffer" }), void 0, void 0, { maxRetryCount: 3 })).data;
          } catch (e3) {
            throw new VT(xT.FETCH_AUDIO_FILE_FAILED, e3.toString());
          }
        } else {
          const t3 = new tT((t4, i3) => {
            const n3 = new FileReader();
            n3.onload = (e3) => {
              e3.target ? t4(e3.target.result) : i3(new VT(xT.READ_LOCAL_AUDIO_FILE_ERROR));
            }, n3.onerror = () => {
              i3(new VT(xT.READ_LOCAL_AUDIO_FILE_ERROR));
            }, n3.readAsArrayBuffer(e2);
          });
          i2 = await t3;
        }
        const n2 = await function(e3) {
          const t3 = Sb();
          return new tT((i3, n3) => {
            t3.decodeAudioData(e3, (e4) => {
              i3(e4);
            }, (e4) => {
              n3(new VT(xT.DECODE_AUDIO_FILE_FAILED, e4.toString()));
            });
          });
        }(i2);
        return "string" == typeof e2 && t2 && Ew.set(e2, n2), n2;
      }
      const fw = (e2) => {
        const t2 = document.createElement("canvas");
        return t2.width = 2, t2.height = 2, new tT((i2, n2) => {
          t2.toBlob(async (e3) => {
            if (t2.remove(), e3) {
              const n3 = await Tw(e3);
              i2({ buffer: n3, width: t2.width, height: t2.height });
            } else
              n2(new VT(xT.CONVERTING_VIDEO_FRAME_TO_BLOB_FAILED));
          }, e2, 1);
        });
      }, Tw = async (e2) => {
        const t2 = await e2.arrayBuffer();
        return new Uint8Array(t2);
      };
      const gw = new class extends ig {
        get visibility() {
          return document.visibilityState;
        }
        get lastHiddenTime() {
          return this._lastHiddenTime;
        }
        get lastVisibleTime() {
          return this._lastVisibleTime;
        }
        constructor() {
          super(), nh(this, "_lastHiddenTime", 0), nh(this, "_lastVisibleTime", 0), document.addEventListener("visibilitychange", () => {
            "hidden" === document.visibilityState ? this._lastHiddenTime = performance.now() : this._lastVisibleTime = performance.now(), YC.debug("document visibility went ".concat(document.visibilityState)), this.emit("VISIBILITY_CHANGE", document.visibilityState);
          });
        }
      }();
      function Sw(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function Rw(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? Sw(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : Sw(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      class Cw {
        get videoElementStatus() {
          return this._videoElementStatus;
        }
        set videoElementStatus(e2) {
          e2 !== this._videoElementStatus && (YC.debug("[".concat(this.trackId, "] video-element-status change ").concat(this._videoElementStatus, " => ").concat(e2)), this._videoElementStatus = e2);
        }
        constructor(e2) {
          nh(this, "trackId", void 0), nh(this, "config", void 0), nh(this, "onFirstVideoFrameDecoded", void 0), nh(this, "freezeTimeCounterList", []), nh(this, "renderFreezeAccTime", 0), nh(this, "isKeepLastFrame", false), nh(this, "timeUpdatedCount", 0), nh(this, "freezeTime", 0), nh(this, "playbackTime", 0), nh(this, "lastTimeUpdatedTime", 0), nh(this, "autoplayFailed", false), nh(this, "videoTrack", void 0), nh(this, "videoElement", void 0), nh(this, "cacheVideoElement", void 0), nh(this, "videoElementCheckInterval", void 0), nh(this, "_videoElementStatus", lb.NONE), nh(this, "isGettingVideoDimensions", false), nh(this, "startGetVideoDimensions", () => {
            const e3 = () => {
              if (this.isGettingVideoDimensions = true, this.videoElement.videoWidth * this.videoElement.videoHeight > 4)
                return YC.debug("[".concat(this.trackId, "] current video dimensions:"), this.videoElement.videoWidth, this.videoElement.videoHeight), void (this.isGettingVideoDimensions = false);
              setTimeout(e3, 500);
            };
            !this.isGettingVideoDimensions && e3();
          }), nh(this, "autoResumeAfterInterruption", () => {
            this.videoTrack && "live" === this.videoTrack.readyState && "running" === Tb.curState && (YC.debug("[track-".concat(this.trackId, "] video element paused, auto resume for ").concat(ET())), NT() ? (this.videoElement.srcObject = null, this.videoElement.srcObject = new MediaStream([this.videoTrack]), this.videoElement.play()) : (this.videoElement.pause(), this.videoElement.play()));
          }), nh(this, "handleVideoEvents", (e3) => {
            switch (e3.type) {
              case "play":
              case "playing":
                this.startGetVideoDimensions(), this.videoElementStatus = lb.PLAYING;
                break;
              case "loadeddata":
                if (this.onFirstVideoFrameDecoded && this.onFirstVideoFrameDecoded(), this.cacheVideoElement) {
                  try {
                    this.cacheVideoElement.srcObject = null, this.cacheVideoElement.remove();
                  } catch (e4) {
                  }
                  this.cacheVideoElement = void 0;
                }
                break;
              case "canplay":
                this.videoElementStatus = lb.CANPLAY;
                break;
              case "stalled":
                this.videoElementStatus = lb.STALLED;
                break;
              case "suspend":
                this.videoElementStatus = lb.SUSPEND;
                break;
              case "pause":
                this.videoElementStatus = lb.PAUSED, CT() || DT() || ST() && this.autoplayFailed || !this.videoTrack || "live" !== this.videoTrack.readyState || (YC.debug("[track-".concat(this.trackId, "] video element paused, auto resume")), this.videoElement.play());
                break;
              case "waiting":
                this.videoElementStatus = lb.WAITING;
                break;
              case "abort":
                this.videoElementStatus = lb.ABORT;
                break;
              case "ended":
                this.videoElementStatus = lb.ENDED;
                break;
              case "emptied":
                this.videoElementStatus = lb.EMPTIED;
                break;
              case "error": {
                this.videoElementStatus = lb.ERROR;
                const e4 = this.videoElement.error;
                e4 && YC.error("[".concat(this.trackId, "] media error, code: ").concat(e4.code, ", message: ").concat(e4.message));
                break;
              }
              case "timeupdate": {
                const e4 = performance.now();
                if (this.timeUpdatedCount += 1, this.timeUpdatedCount < 10)
                  return void (this.lastTimeUpdatedTime = e4);
                const t2 = e4 - this.lastTimeUpdatedTime, i2 = this.lastTimeUpdatedTime;
                if (this.lastTimeUpdatedTime = e4, gw.lastVisibleTime < gw.lastHiddenTime || i2 < gw.lastHiddenTime || i2 < gw.lastVisibleTime)
                  return;
                for (t2 > DC("VIDEO_FREEZE_DURATION") && (this.freezeTime += t2), this.playbackTime += t2; this.playbackTime >= 6e3; ) {
                  this.playbackTime -= 6e3;
                  const e5 = Math.min(6e3, this.freezeTime);
                  this.freezeTimeCounterList.push(e5), this.freezeTime = Math.max(0, this.freezeTime - 6e3);
                }
                break;
              }
            }
          }), nh(this, "autoResumeAfterInterruptionOnIOS15_16", () => {
            this.videoTrack && "live" === this.videoTrack.readyState && (YC.debug("[track-".concat(this.trackId, "] video element paused, auto resume for ").concat(ET())), NT() ? (this.videoElement.srcObject = null, this.videoElement.srcObject = new MediaStream([this.videoTrack]), this.videoElement.play()) : (this.videoElement.pause(), this.videoElement.play()));
          }), this.trackId = e2.trackId, this.config = e2, e2.element instanceof HTMLVideoElement ? this.videoElement = e2.element : this.videoElement = document.createElement("video"), Tb.on(OA.IOS_INTERRUPTION_END, this.autoResumeAfterInterruption), Tb.on(OA.IOS_15_16_INTERRUPTION_END, this.autoResumeAfterInterruptionOnIOS15_16);
        }
        getVideoElement() {
          return this.videoElement;
        }
        getContainerElement() {
          var e2;
          return null !== (e2 = this.videoElement.parentElement) && void 0 !== e2 ? e2 : void 0;
        }
        updateConfig(e2) {
          this.config = e2, this.trackId = e2.trackId, e2.element !== this.videoElement && (this.destroy(), this.videoElement = e2.element), this.videoTrack && this.initVideoElement();
        }
        updateVideoTrack(e2) {
          this.videoTrack !== e2 && (this.videoTrack = e2, this.initVideoElement());
        }
        play(e2) {
          const t2 = this.videoElement.play();
          t2 && t2.catch && t2.catch((t3) => {
            e2 && Kb(e2, "video", t3.message, this.trackId), "NotAllowedError" === t3.name ? (YC.warning("detected video element autoplay failed", t3), this.autoplayFailed = true, this.handleAutoPlayFailed()) : YC.warning("[".concat(this.trackId, "] play warning: "), t3);
          });
          const i2 = pT();
          if (("Safari" === i2.name && 15 === Number(i2.version) || wT()) && t2 && t2.then) {
            const e3 = () => {
              this.config.mirror && (this.videoElement.style.transform = "rotateY(180deg)");
            };
            t2.then(e3).catch(e3);
          }
        }
        getCurrentFrame() {
          const e2 = document.createElement("canvas");
          e2.width = this.videoElement.videoWidth, e2.height = this.videoElement.videoHeight;
          const t2 = e2.getContext("2d");
          if (!t2)
            return YC.error("create canvas context failed!"), new ImageData(2, 2);
          t2.drawImage(this.videoElement, 0, 0, e2.width, e2.height);
          const i2 = t2.getImageData(0, 0, e2.width, e2.height);
          return e2.remove(), i2;
        }
        async getCurrentFrameToUint8Array(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
          const i2 = document.createElement("canvas");
          i2.width = this.videoElement.videoWidth, i2.height = this.videoElement.videoHeight;
          const n2 = i2.getContext("2d");
          return n2 ? (n2.drawImage(this.videoElement, 0, 0, i2.width, i2.height), new tT((n3, s2) => {
            i2.toBlob(async (e3) => {
              if (i2.remove(), e3) {
                const t3 = await Tw(e3);
                n3({ buffer: t3, width: i2.width, height: i2.height });
              } else
                s2(new VT(xT.CONVERTING_VIDEO_FRAME_TO_BLOB_FAILED));
            }, e2, t2 < 0 ? 0.1 : t2 > 1 ? 1 : t2);
          })) : await fw(e2);
        }
        destroy() {
          Tb.off(OA.IOS_INTERRUPTION_END, this.autoResumeAfterInterruption), Tb.off(OA.IOS_15_16_INTERRUPTION_END, this.autoResumeAfterInterruptionOnIOS15_16), this.videoElement.srcObject = null, this.resetVideoElement(), this.freezeTimeCounterList = [];
        }
        initVideoElement() {
          if (this.videoElementStatus = lb.INIT, !this.videoElementCheckInterval && (Iw.forEach((e3) => {
            this.videoElement.addEventListener(e3, this.handleVideoEvents);
          }), this.videoElementCheckInterval = window.setInterval(() => {
            (function(e3) {
              return e3 !== document.body && document.body.contains(e3);
            })(this.videoElement) || (this.videoElementStatus = lb.DESTROYED);
          }, 1e3), DC("ENABLE_VIDEO_FRAME_CALLBACK"))) {
            var e2, t2;
            let i3;
            const n3 = (e3, t3) => {
              if (this.videoElementStatus === lb.PLAYING) {
                if (i3) {
                  const e4 = t3.presentationTime - i3.presentationTime;
                  e4 > DC("VIDEO_FREEZE_DURATION") && gw.lastVisibleTime >= gw.lastHiddenTime && i3.timestamp > gw.lastVisibleTime && i3.timestamp > gw.lastHiddenTime && (this.renderFreezeAccTime += e4);
                }
                i3 = Rw(Rw({}, t3), {}, { timestamp: e3 });
              }
              var s2, r2;
              DC("ENABLE_VIDEO_FRAME_CALLBACK") && (null === (s2 = (r2 = this.videoElement).requestVideoFrameCallback) || void 0 === s2 || s2.call(r2, n3));
            };
            null === (e2 = (t2 = this.videoElement).requestVideoFrameCallback) || void 0 === e2 || e2.call(t2, n3);
          }
          this.videoElement.controls = false, this.videoElement.setAttribute("playsinline", ""), MT() && (this.videoElement.poster = "noposter");
          const i2 = pT();
          if ("Safari" === i2.name && 15 === Number(i2.version) || wT() || !this.config.mirror || (this.videoElement.style.transform = "rotateY(180deg)"), this.config.fit ? this.videoElement.style.objectFit = this.config.fit : this.videoElement.style.objectFit = "cover", this.videoElement.setAttribute("muted", ""), this.videoElement.muted = true, this.videoElement.srcObject && this.videoElement.srcObject instanceof MediaStream) {
            this.videoElement.srcObject.getVideoTracks()[0] !== this.videoTrack && (this.videoElement.srcObject = this.videoTrack ? new MediaStream([this.videoTrack]) : null, RT() && this.videoElement.load());
          } else
            this.videoElement.srcObject = this.videoTrack ? new MediaStream([this.videoTrack]) : null, RT() && this.videoElement.load();
          const n2 = this.videoElement.play();
          void 0 !== n2 && n2.catch((e3) => {
            YC.debug("[".concat(this.trackId, "] playback interrupted"), e3.toString());
          });
        }
        resetVideoElement() {
          Iw.forEach((e2) => {
            this.videoElement && this.videoElement.removeEventListener(e2, this.handleVideoEvents);
          }), this.videoElementCheckInterval && (window.clearInterval(this.videoElementCheckInterval), this.videoElementCheckInterval = void 0), this.videoElementStatus = lb.NONE;
        }
        handleAutoPlayFailed() {
          const e2 = (t2) => {
            t2.preventDefault(), this.videoElement.play().then(() => {
              YC.debug("[".concat(this.trackId, "] Video element for trackId:").concat(this.trackId, " autoplay resumed."));
            }).catch((e3) => {
              YC.error(e3);
            }), this.autoplayFailed = false, UT() ? document.body.removeEventListener("click", e2, true) : (document.body.removeEventListener("touchstart", e2, true), document.body.removeEventListener("mousedown", e2, true));
          };
          UT() ? document.body.addEventListener("click", e2, true) : (document.body.addEventListener("touchstart", e2, true), document.body.addEventListener("mousedown", e2, true)), Gb();
        }
      }
      const Iw = ["play", "playing", "loadeddata", "canplay", "pause", "stalled", "suspend", "waiting", "abort", "emptied", "ended", "timeupdate", "error"];
      class vw extends Cw {
        constructor(e2) {
          super(e2), nh(this, "container", void 0), nh(this, "slot", void 0), this.slot = e2.element, this.updateConfig(e2);
        }
        updateConfig(e2) {
          this.config = e2, this.trackId = e2.trackId;
          const t2 = e2.element;
          t2 !== this.slot && (this.destroy(), this.slot = t2), this.createElements();
        }
        updateVideoTrack(e2) {
          this.videoTrack !== e2 && (this.videoTrack = e2, this.createElements());
        }
        play(e2) {
          var t2;
          null !== (t2 = this.container) && void 0 !== t2 && t2.contains(this.videoElement) && super.play(e2);
        }
        getCurrentFrame() {
          var e2;
          return null !== (e2 = this.container) && void 0 !== e2 && e2.contains(this.videoElement) ? super.getCurrentFrame() : new ImageData(2, 2);
        }
        async getCurrentFrameToUint8Array(e2) {
          var t2;
          let i2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
          return null !== (t2 = this.container) && void 0 !== t2 && t2.contains(this.videoElement) ? await super.getCurrentFrameToUint8Array(e2, i2) : await fw(e2);
        }
        destroy() {
          if (super.destroy(), this.videoElement.remove(), this.videoElement = document.createElement("video"), this.container) {
            try {
              this.container.remove(), this.slot.removeChild(this.container);
            } catch (e2) {
            }
            this.container = void 0;
          }
        }
        createElements() {
          this.container || (this.container = document.createElement("div")), this.container.id = "agora-video-player-".concat(this.trackId), this.container.style.width = "100%", this.container.style.height = "100%", this.container.style.position = "relative", this.container.style.overflow = "hidden", this.videoTrack ? (this.container.style.backgroundColor = "black", DC("KEEP_LAST_FRAME") && this.isKeepLastFrame && this.videoElement.paused && this.resetVideoElement(), this.mountedVideoElement()) : this.unmountedVideoElement(), this.slot.appendChild(this.container);
        }
        mountedVideoElement() {
          var e2;
          !this.container || null !== (e2 = this.container) && void 0 !== e2 && e2.contains(this.videoElement) || this.container.appendChild(this.videoElement), super.initVideoElement(), this.videoElement.id = "video_".concat(this.trackId), this.videoElement.className = "agora_video_player", this.videoElement.style.width = "100%", this.videoElement.style.height = "100%", this.videoElement.style.position = "absolute", this.videoElement.style.left = "0", this.videoElement.style.top = "0";
        }
        unmountedVideoElement() {
          var e2;
          if (null !== (e2 = this.container) && void 0 !== e2 && e2.contains(this.videoElement)) {
            super.resetVideoElement();
            try {
              this.container && this.container.removeChild(this.videoElement);
            } catch (e3) {
            }
            this.videoElement = document.createElement("video");
          }
        }
        resetVideoElement() {
          var e2;
          null !== (e2 = this.container) && void 0 !== e2 && e2.contains(this.videoElement) && (super.resetVideoElement(), this.cacheVideoElement = this.videoElement, this.videoElement = document.createElement("video"));
        }
        getContainerElement() {
          return this.container;
        }
      }
      function yw(e2) {
        return new tT((t2, i2) => {
          let n2 = false;
          const s2 = document.createElement("video");
          s2.setAttribute("autoplay", ""), s2.setAttribute("muted", ""), s2.muted = true, s2.autoplay = true, s2.setAttribute("playsinline", ""), s2.setAttribute("style", "position: fixed; top: 0; left: 0; width: 1px; height: 1px"), document.body.appendChild(s2);
          const r2 = CT() ? "canplay" : "playing";
          s2.addEventListener(r2, () => {
            const e3 = s2.videoWidth, i3 = s2.videoHeight;
            !e3 && RT() || (n2 = true, s2.srcObject = null, s2.remove(), t2([e3, i3]));
          }), s2.srcObject = new MediaStream([e2]), s2.play().catch(Fg), setTimeout(() => {
            n2 || (s2.srcObject = null, s2.remove(), t2([s2.videoWidth, s2.videoHeight]));
          }, 4e3);
        });
      }
      const Aw = async (e2, t2, i2) => {
        const n2 = function(e3) {
          const t3 = [];
          for (let i3 = 0; i3 < e3.length; i3 += 2)
            t3.push(parseInt(e3.slice(i3, i3 + 2), 16));
          return Uint8Array.from(t3);
        }(function(e3) {
          const t3 = "0123456789abcdef";
          function i3(e4) {
            let i4, n4 = "";
            for (i4 = 0; i4 <= 3; i4++)
              n4 += t3.charAt(e4 >> 8 * i4 + 4 & 15) + t3.charAt(e4 >> 8 * i4 & 15);
            return n4;
          }
          function n3(e4, t4) {
            const i4 = (65535 & e4) + (65535 & t4);
            return (e4 >> 16) + (t4 >> 16) + (i4 >> 16) << 16 | 65535 & i4;
          }
          function s3(e4, t4, i4, s4, r4, o3) {
            return n3(function(e5, t5) {
              return e5 << t5 | e5 >>> 32 - t5;
            }(n3(n3(t4, e4), n3(s4, o3)), r4), i4);
          }
          function r3(e4, t4, i4, n4, r4, o3, a3) {
            return s3(t4 & i4 | ~t4 & n4, e4, t4, r4, o3, a3);
          }
          function o2(e4, t4, i4, n4, r4, o3, a3) {
            return s3(t4 & n4 | i4 & ~n4, e4, t4, r4, o3, a3);
          }
          function a2(e4, t4, i4, n4, r4, o3, a3) {
            return s3(t4 ^ i4 ^ n4, e4, t4, r4, o3, a3);
          }
          function c2(e4, t4, i4, n4, r4, o3, a3) {
            return s3(i4 ^ (t4 | ~n4), e4, t4, r4, o3, a3);
          }
          const d2 = function(e4) {
            let t4;
            const i4 = 1 + (e4.length + 8 >> 6), n4 = new Array(16 * i4);
            for (t4 = 0; t4 < 16 * i4; t4++)
              n4[t4] = 0;
            for (t4 = 0; t4 < e4.length; t4++)
              n4[t4 >> 2] |= e4.charCodeAt(t4) << t4 % 4 * 8;
            return n4[t4 >> 2] |= 128 << t4 % 4 * 8, n4[16 * i4 - 2] = 8 * e4.length, n4;
          }(e3);
          let l2, u2, h2, p2, _2, E2 = 1732584193, m2 = -271733879, f2 = -1732584194, T2 = 271733878;
          for (l2 = 0; l2 < d2.length; l2 += 16)
            u2 = E2, h2 = m2, p2 = f2, _2 = T2, E2 = r3(E2, m2, f2, T2, d2[l2 + 0], 7, -680876936), T2 = r3(T2, E2, m2, f2, d2[l2 + 1], 12, -389564586), f2 = r3(f2, T2, E2, m2, d2[l2 + 2], 17, 606105819), m2 = r3(m2, f2, T2, E2, d2[l2 + 3], 22, -1044525330), E2 = r3(E2, m2, f2, T2, d2[l2 + 4], 7, -176418897), T2 = r3(T2, E2, m2, f2, d2[l2 + 5], 12, 1200080426), f2 = r3(f2, T2, E2, m2, d2[l2 + 6], 17, -1473231341), m2 = r3(m2, f2, T2, E2, d2[l2 + 7], 22, -45705983), E2 = r3(E2, m2, f2, T2, d2[l2 + 8], 7, 1770035416), T2 = r3(T2, E2, m2, f2, d2[l2 + 9], 12, -1958414417), f2 = r3(f2, T2, E2, m2, d2[l2 + 10], 17, -42063), m2 = r3(m2, f2, T2, E2, d2[l2 + 11], 22, -1990404162), E2 = r3(E2, m2, f2, T2, d2[l2 + 12], 7, 1804603682), T2 = r3(T2, E2, m2, f2, d2[l2 + 13], 12, -40341101), f2 = r3(f2, T2, E2, m2, d2[l2 + 14], 17, -1502002290), m2 = r3(m2, f2, T2, E2, d2[l2 + 15], 22, 1236535329), E2 = o2(E2, m2, f2, T2, d2[l2 + 1], 5, -165796510), T2 = o2(T2, E2, m2, f2, d2[l2 + 6], 9, -1069501632), f2 = o2(f2, T2, E2, m2, d2[l2 + 11], 14, 643717713), m2 = o2(m2, f2, T2, E2, d2[l2 + 0], 20, -373897302), E2 = o2(E2, m2, f2, T2, d2[l2 + 5], 5, -701558691), T2 = o2(T2, E2, m2, f2, d2[l2 + 10], 9, 38016083), f2 = o2(f2, T2, E2, m2, d2[l2 + 15], 14, -660478335), m2 = o2(m2, f2, T2, E2, d2[l2 + 4], 20, -405537848), E2 = o2(E2, m2, f2, T2, d2[l2 + 9], 5, 568446438), T2 = o2(T2, E2, m2, f2, d2[l2 + 14], 9, -1019803690), f2 = o2(f2, T2, E2, m2, d2[l2 + 3], 14, -187363961), m2 = o2(m2, f2, T2, E2, d2[l2 + 8], 20, 1163531501), E2 = o2(E2, m2, f2, T2, d2[l2 + 13], 5, -1444681467), T2 = o2(T2, E2, m2, f2, d2[l2 + 2], 9, -51403784), f2 = o2(f2, T2, E2, m2, d2[l2 + 7], 14, 1735328473), m2 = o2(m2, f2, T2, E2, d2[l2 + 12], 20, -1926607734), E2 = a2(E2, m2, f2, T2, d2[l2 + 5], 4, -378558), T2 = a2(T2, E2, m2, f2, d2[l2 + 8], 11, -2022574463), f2 = a2(f2, T2, E2, m2, d2[l2 + 11], 16, 1839030562), m2 = a2(m2, f2, T2, E2, d2[l2 + 14], 23, -35309556), E2 = a2(E2, m2, f2, T2, d2[l2 + 1], 4, -1530992060), T2 = a2(T2, E2, m2, f2, d2[l2 + 4], 11, 1272893353), f2 = a2(f2, T2, E2, m2, d2[l2 + 7], 16, -155497632), m2 = a2(m2, f2, T2, E2, d2[l2 + 10], 23, -1094730640), E2 = a2(E2, m2, f2, T2, d2[l2 + 13], 4, 681279174), T2 = a2(T2, E2, m2, f2, d2[l2 + 0], 11, -358537222), f2 = a2(f2, T2, E2, m2, d2[l2 + 3], 16, -722521979), m2 = a2(m2, f2, T2, E2, d2[l2 + 6], 23, 76029189), E2 = a2(E2, m2, f2, T2, d2[l2 + 9], 4, -640364487), T2 = a2(T2, E2, m2, f2, d2[l2 + 12], 11, -421815835), f2 = a2(f2, T2, E2, m2, d2[l2 + 15], 16, 530742520), m2 = a2(m2, f2, T2, E2, d2[l2 + 2], 23, -995338651), E2 = c2(E2, m2, f2, T2, d2[l2 + 0], 6, -198630844), T2 = c2(T2, E2, m2, f2, d2[l2 + 7], 10, 1126891415), f2 = c2(f2, T2, E2, m2, d2[l2 + 14], 15, -1416354905), m2 = c2(m2, f2, T2, E2, d2[l2 + 5], 21, -57434055), E2 = c2(E2, m2, f2, T2, d2[l2 + 12], 6, 1700485571), T2 = c2(T2, E2, m2, f2, d2[l2 + 3], 10, -1894986606), f2 = c2(f2, T2, E2, m2, d2[l2 + 10], 15, -1051523), m2 = c2(m2, f2, T2, E2, d2[l2 + 1], 21, -2054922799), E2 = c2(E2, m2, f2, T2, d2[l2 + 8], 6, 1873313359), T2 = c2(T2, E2, m2, f2, d2[l2 + 15], 10, -30611744), f2 = c2(f2, T2, E2, m2, d2[l2 + 6], 15, -1560198380), m2 = c2(m2, f2, T2, E2, d2[l2 + 13], 21, 1309151649), E2 = c2(E2, m2, f2, T2, d2[l2 + 4], 6, -145523070), T2 = c2(T2, E2, m2, f2, d2[l2 + 11], 10, -1120210379), f2 = c2(f2, T2, E2, m2, d2[l2 + 2], 15, 718787259), m2 = c2(m2, f2, T2, E2, d2[l2 + 9], 21, -343485551), E2 = n3(E2, u2), m2 = n3(m2, h2), f2 = n3(f2, p2), T2 = n3(T2, _2);
          return i3(E2) + i3(m2) + i3(f2) + i3(T2);
        }("" + t2 + i2)).slice(0, 16), s2 = n2.slice(0, 12), r2 = await window.crypto.subtle.importKey("raw", n2, "AES-GCM", true, ["encrypt"]);
        return new Uint8Array(await window.crypto.subtle.encrypt({ name: "AES-GCM", iv: s2 }, r2, e2));
      }, bw = async (e2, t2, i2) => await Aw(e2.buffer, t2, i2);
      function ww(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function Ow(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? ww(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : ww(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      class Nw extends _b {
        get isPlaying() {
          return !(!this._player || this._player.videoElementStatus !== lb.PLAYING);
        }
        get processorContext() {
          return this._processorContext;
        }
        set processorContext(e2) {
          this._processorContext = e2;
        }
        get __className__() {
          return "LocalVideoTrack";
        }
        constructor(e2, t2, i2, n2, s2, r2) {
          if (super(e2, s2), nh(this, "trackMediaType", "video"), nh(this, "_player", void 0), nh(this, "isUseScaleResolutionDownBy", false), nh(this, "_videoVisibleTimer", null), nh(this, "_statsTimer", null), nh(this, "_previousVideoVisibleStatus", void 0), nh(this, "_clearPreviousVideoVisibleStatus", () => this._previousVideoVisibleStatus = void 0), nh(this, "_encoderConfig", void 0), nh(this, "_scalabilityMode", { numSpatialLayers: 1, numTemporalLayers: 1 }), nh(this, "_optimizationMode", void 0), nh(this, "_videoHeight", void 0), nh(this, "_videoWidth", void 0), nh(this, "_forceBitrateLimit", void 0), nh(this, "_enabled", true), nh(this, "processorDestination", void 0), nh(this, "_processorContext", void 0), ST()) {
            const { width: t3, height: i3 } = e2.getSettings();
            this._videoWidth = t3, this._videoHeight = i3;
          } else
            this.updateMediaStreamTrackResolution();
          if (this._encoderConfig = t2, this._scalabilityMode = i2, this._optimizationMode = n2, this._hints = r2 || [], -1 === this._hints.indexOf(YA.SCREEN_TRACK))
            this.updateBitrateFromProfile();
          else if (function(e3, t3, i3) {
            const n3 = pT();
            return !(n3.name !== e3 || !n3.osVersion) && (i3 ? Number(n3.version) >= t3 && Number(n3.version) <= i3 : Number(n3.version) === t3);
          }(cT.CHROME, 115) && -1 !== _T().indexOf("Windows")) {
            const t3 = function(e3, t4) {
              if ("VideoFrame" in window && "TransformStream" in window && wA().supportWebRTCInsertableStream) {
                const i3 = new MediaStreamTrackProcessor(e3), n3 = new MediaStreamTrackGenerator({ kind: "video" });
                let s3, r3, o2 = Date.now();
                const a2 = () => {
                  c2 && (clearInterval(c2), c2 = void 0), s3 && (s3.close(), s3 = void 0), e3.stop(), r3 = void 0, n3.removeEventListener("ended", a2);
                };
                let c2 = window.setInterval(() => {
                  if (r3 && s3 && Date.now() - o2 > (null != t4 ? t4 : 1e3))
                    try {
                      "live" === n3.readyState ? r3.enqueue(s3.clone()) : a2();
                    } catch (e4) {
                      a2();
                    }
                }, null != t4 ? t4 : 1e3);
                const d2 = new TransformStream({ transform: (e4, t5) => {
                  "live" === n3.readyState ? (r3 = t5, o2 = Date.now(), void 0 === s3 ? (s3 = e4, t5.enqueue(e4.clone())) : (t5.enqueue(s3), s3 = e4)) : e4.close();
                } });
                return n3.addEventListener("ended", a2), i3.readable.pipeThrough(d2).pipeTo(n3.writable), n3;
              }
            }(e2);
            t3 && (YC.info("local screen video track begin to inject frame"), this._mediaStreamTrack = t3);
          }
          t2 && -1 !== this._hints.indexOf(YA.CUSTOM_TRACK) && this.setEncoderConfiguration(t2), this.processorContext = new Zb(this.getTrackId(), "local"), this.processorDestination = new Qb(this.processorContext), this.bindProcessorDestinationEvents();
        }
        play(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
          if ("string" == typeof e2) {
            const t3 = document.getElementById(e2);
            t3 ? e2 = t3 : (YC.warning("[".concat(this.getTrackId(), '] can not find "#').concat(e2, '" element, use document.body')), e2 = document.body);
          }
          YC.debug("[".concat(this.getTrackId(), "] start video playback in ").concat(e2 instanceof HTMLVideoElement ? "HTMLVideoElement" : "HTMLElement"), JSON.stringify(t2));
          const i2 = Ow(Ow(Ow({}, this._getDefaultPlayerConfig()), t2), {}, { trackId: this.getTrackId(), element: e2 });
          this._player ? this._player.updateConfig(i2) : (e2 instanceof HTMLVideoElement ? this._player = new Cw(i2) : this._player = new vw(i2), this._player.updateVideoTrack(this._mediaStreamTrack)), this._player.play(), this._videoVisibleTimer && window.clearInterval(this._videoVisibleTimer), this._clearPreviousVideoVisibleStatus(), this._videoVisibleTimer = window.setInterval(() => {
            try {
              const e3 = this.getVideoElementVisibleStatus();
              this.safeEmit(QA.VIDEO_ELEMENT_VISIBLE_STATUS, e3);
            } catch (e3) {
            }
          }, DC("CHECK_VIDEO_VISIBLE_INTERVAL"));
        }
        stop() {
          this._player && (this._videoVisibleTimer && (window.clearInterval(this._videoVisibleTimer), this._videoVisibleTimer = null), this._statsTimer && (this.isUseScaleResolutionDownBy = false, window.clearInterval(this._statsTimer), this._statsTimer = null), this._clearPreviousVideoVisibleStatus(), this._player.destroy(), this._player = void 0, YC.debug("[".concat(this.getTrackId(), "] stop video playback")));
        }
        async setEnabled(e2, t2) {
          if (!t2) {
            if (e2 === this._enabled)
              return;
            this.stateCheck("enabled", e2);
          }
          if (YC.info("[".concat(this.getTrackId(), "] start setEnabled"), e2), !e2) {
            this._originMediaStreamTrack.enabled = false;
            try {
              await Tg(this, KA.NEED_DISABLE_TRACK, this);
            } catch (e3) {
              throw YC.error("[".concat(this.getTrackId(), "] setEnabled to false error"), e3.toString()), e3;
            }
            return t2 || (this._enabled = false), void YC.info("[".concat(this.getTrackId(), "] setEnabled to false success"));
          }
          this._originMediaStreamTrack.enabled = true;
          try {
            await Tg(this, KA.NEED_ENABLE_TRACK, this);
          } catch (e3) {
            throw YC.error("[".concat(this.getTrackId(), "] setEnabled to true error"), e3.toString()), e3;
          }
          YC.info("[".concat(this.getTrackId(), "] setEnabled to true success")), t2 || (this._enabled = true);
        }
        async setMuted(e2) {
          e2 !== this._muted && (this.stateCheck("muted", e2), this._muted = e2, this._originMediaStreamTrack.enabled = !e2, YC.debug("[".concat(this.getTrackId(), "] start set muted: ").concat(e2)), e2 ? await Tg(this, KA.NEED_MUTE_TRACK, this) : await Tg(this, KA.NEED_UNMUTE_TRACK, this));
        }
        async setEncoderConfiguration(e2, t2) {
          if (!this._enabled)
            throw new VT(xT.TRACK_IS_DISABLED, "can not set encoder configuration when track is disabled");
          if ("720p_auto" === e2 ? this.startMonitorStats() : this._statsTimer && (window.clearInterval(this._statsTimer), this._statsTimer = null), e2 = VA(e2), this._forceBitrateLimit && (e2.bitrateMax = this._forceBitrateLimit.max_bitrate ? this._forceBitrateLimit.max_bitrate : e2.bitrateMax, e2.bitrateMin = this._forceBitrateLimit.min_bitrate ? this._forceBitrateLimit.min_bitrate : e2.bitrateMin), e2.width || e2.height || e2.frameRate) {
            const t3 = hw({ encoderConfig: e2 });
            (ST() || CT() || DT()) && (t3.deviceId = void 0), YC.debug("[".concat(this.getTrackId(), "] setEncoderConfiguration applyConstraints"), JSON.stringify(e2), JSON.stringify(t3));
            try {
              await this._originMediaStreamTrack.applyConstraints(t3), this.updateMediaStreamTrackResolution();
            } catch (e3) {
              const t4 = new VT(xT.UNEXPECTED_ERROR, e3.toString());
              throw YC.error("[".concat(this.getTrackId(), "] applyConstraints error"), t4.toString()), t4;
            }
          }
          this._encoderConfig = e2, -1 === this._hints.indexOf(YA.SCREEN_TRACK) && this.updateBitrateFromProfile();
          try {
            await Tg(this, KA.NEED_UPDATE_VIDEO_ENCODER, this);
          } catch (e3) {
            return e3.throw(YC);
          }
        }
        getStats() {
          Ng(() => {
            YC.warning("[deprecated] LocalVideoTrack.getStats will be removed in the future, use AgoraRTCClient.getLocalVideoStats instead");
          }, "localVideoTrackGetStatsWarning");
          const e2 = gg(this, KA.GET_STATS);
          return e2 || Ow({}, ib);
        }
        async setBeautyEffect(e2) {
          YC.error("LocalVideoTrack.setBeautyEffect was deprecated, please migrate to agora-extension-beauty-effect");
        }
        getCurrentFrameData() {
          return this._player ? this._player.getCurrentFrame() : new ImageData(2, 2);
        }
        async getCurrentFrameImage(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
          return this._player ? this._player.getCurrentFrameToUint8Array(e2, t2) : await fw(e2);
        }
        async setBitrateLimit(e2) {
          if (YC.debug("[".concat(this.getTrackId(), "] set bitrate limit, ").concat(JSON.stringify(e2))), e2) {
            this._forceBitrateLimit = e2, this._encoderConfig && (this._encoderConfig.bitrateMax ? this._encoderConfig.bitrateMax = this._encoderConfig.bitrateMax < e2.max_bitrate ? this._encoderConfig.bitrateMax : e2.max_bitrate : this._encoderConfig.bitrateMax = e2.max_bitrate, this._encoderConfig.bitrateMin, this._encoderConfig.bitrateMin = e2.min_bitrate);
            try {
              await Tg(this, KA.NEED_UPDATE_VIDEO_ENCODER, this);
            } catch (e3) {
              return e3.throw(YC);
            }
          }
        }
        async setOptimizationMode(e2) {
          if ("motion" !== e2 && "detail" !== e2 && "balanced" !== e2)
            return void YC.error(xT.INVALID_PARAMS, "optimization mode must be motion, detail or balanced");
          const t2 = this._optimizationMode;
          try {
            this._optimizationMode = e2, await Tg(this, KA.SET_OPTIMIZATION_MODE, this);
          } catch (e3) {
            throw this._optimizationMode = t2, YC.error("[".concat(this.getTrackId(), "] set optimization mode failed"), e3.toString()), e3;
          }
          YC.info("[".concat(this.getTrackId(), "] set optimization mode success (").concat(e2, ")"));
        }
        setScalabiltyMode(e2) {
          if (1 === e2.numSpatialLayers && 1 !== e2.numTemporalLayers)
            return YC.error(xT.INVALID_PARAMS, "scalability mode currently not supported, no SVC."), void (this._scalabilityMode = { numSpatialLayers: 1, numTemporalLayers: 1 });
          this._scalabilityMode = e2, YC.info("[".concat(this.getTrackId(), "] set scalability mode success (").concat(e2, ")"));
        }
        updateMediaStreamTrackResolution() {
          yw(this._originMediaStreamTrack).then((e2) => {
            let [t2, i2] = e2;
            this._videoHeight = i2, this._videoWidth = t2;
          }).catch(Fg);
        }
        _updatePlayerSource() {
          this._player && this._player.updateVideoTrack(this._mediaStreamTrack);
        }
        _getDefaultPlayerConfig() {
          return { fit: "contain" };
        }
        async setSenderConfiguration(e2) {
          if (!this._enabled)
            throw new VT(xT.TRACK_IS_DISABLED, "can not set encoder configuration when track is disabled");
          YC.debug("[".concat(this.getTrackId(), "] setSenderConfiguration applyConstraints"), JSON.stringify(e2)), e2 = VA(e2), this._forceBitrateLimit && (e2.bitrateMax = this._forceBitrateLimit.max_bitrate ? this._forceBitrateLimit.max_bitrate : e2.bitrateMax, e2.bitrateMin = this._forceBitrateLimit.min_bitrate ? this._forceBitrateLimit.min_bitrate : e2.bitrateMin), this._encoderConfig = e2, -1 === this._hints.indexOf(YA.SCREEN_TRACK) && this.updateBitrateFromProfile();
          try {
            await Tg(this, KA.NEED_UPDATE_VIDEO_ENCODER, this);
          } catch (e3) {
            return e3.throw(YC);
          }
        }
        updateBitrateFromProfile() {
          if (!this._encoderConfig)
            return;
          const { width: e2, height: t2, frameRate: i2 } = this.getMediaStreamTrackSettings();
          if (!e2 || !t2 || !i2)
            return;
          const [n2, s2] = function(e3, t3, i3, n3) {
            let s3;
            const r2 = 200 * Math.pow(i3 / 15, 0.6) * Math.pow(e3 * t3 / 640 / 360, 0.75), o2 = r2;
            if ("STANDARD_BITRATE" === n3)
              s3 = 4 * r2;
            else {
              if ("COMPATIABLE_BITRATE" !== n3)
                return;
              s3 = 2 * r2;
            }
            return [Math.floor(s3), Math.floor(o2)];
          }(e2, t2, i2, DC("BITRATE_ADAPTER_TYPE")) || [void 0, void 0];
          this._encoderConfig.bitrateMin || this._encoderConfig.bitrateMax || (this._encoderConfig.bitrateMin = s2, this._encoderConfig.bitrateMax = n2, YC.debug("[".concat(this.getTrackId(), "] update bitrate from profile, [w: ").concat(e2, ", h: ").concat(t2, ", fps: ").concat(i2, "] => [brMax: ").concat(n2, ", brMin: ").concat(s2, "]")));
        }
        getVideoElementVisibleStatus() {
          try {
            var e2, t2;
            const i2 = null == this || null === (e2 = this._player) || void 0 === e2 ? void 0 : e2.getContainerElement(), n2 = { track: this, element: null == this || null === (t2 = this._player) || void 0 === t2 ? void 0 : t2.getVideoElement(), slot: null == i2 ? void 0 : i2.parentElement }, { element: s2, slot: r2 } = n2;
            if (this.isPlaying && s2 instanceof HTMLVideoElement && r2 instanceof HTMLElement) {
              const e3 = QT.checkOneElementVisible(s2), t3 = Object.assign({}, e3);
              if (t3.visible !== this._previousVideoVisibleStatus) {
                this._previousVideoVisibleStatus = t3.visible;
                const e4 = rI.reportApiInvoke(null, { tag: og.TRACER, name: rg.LOCAL_VIDEO_TRACK_GET_VIDEO_VISIBLE, options: [this.getTrackId()] });
                t3.visible ? e4.onSuccess("Video is visible") : e4.onSuccess("Invisible because of ".concat(t3.reason));
              }
              return t3;
            }
            return;
          } catch (e3) {
            throw new VT(xT.GET_VIDEO_ELEMENT_VISIBLE_ERROR, e3.message);
          }
        }
        async renewMediaStreamTrack(e2) {
        }
        pipe(e2) {
          if (this.processor === e2)
            return e2;
          if (e2._source)
            throw new VT(xT.INVALID_OPERATION, "Processor ".concat(e2.name, " already piped, please call unpipe beforehand."));
          return this.unpipe(), this.processor = e2, this.processor._source = this, e2.updateInput({ track: this._originMediaStreamTrack, context: this.processorContext }), e2;
        }
        unpipe() {
          if (!this.processor)
            return;
          const e2 = this.processor;
          this.processor._source = void 0, this.processor = void 0, e2.reset();
        }
        close() {
          super.close(), this.unbindProcessorDestinationEvents(), this.unbindProcessorContextEvents(), this.unpipe(), this.processorDestination._source && this.processorDestination._source.unpipe();
        }
        clone(e2) {
          let t2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i2 = this._encoderConfig;
          e2 && (i2 = Ow(Ow({}, i2), VA(e2))), i2 = wg(i2);
          const n2 = xg(8, "track-video-cloned-"), s2 = new Nw(t2 ? this._mediaStreamTrack.clone() : this._mediaStreamTrack, i2, wg(this._scalabilityMode), this._optimizationMode, n2, wg(this._hints));
          return e2 && i2 && s2.setEncoderConfiguration(i2), YC.debug("clone video track from ".concat(this.getTrackId(), " to ").concat(n2, ", clone ").concat(t2)), s2;
        }
        async replaceTrack(e2, t2) {
          if (!(e2 instanceof MediaStreamTrack))
            throw new VT(xT.INVALID_PARAMS, "track should be an instance of MediaStreamTrack");
          if ("video" !== e2.kind)
            throw new VT(xT.INVALID_PARAMS, "track should be a video MediaStreamTrack");
          await this._updateOriginMediaStreamTrack(e2, t2, true), this.updateMediaStreamTrackResolution();
        }
        startMonitorStats() {
          if (!ST() && !CT())
            return;
          this._statsTimer && window.clearInterval(this._statsTimer);
          let e2 = 2, t2 = MA[e2];
          let i2 = -1;
          let n2 = Date.now();
          const s2 = (e3) => {
            e3 > 2 || e3 < 0 || (n2 = Date.now(), t2 = MA[e3], this.setSenderConfiguration(t2));
          };
          this.isUseScaleResolutionDownBy = true, this._statsTimer = window.setInterval(() => {
            const r2 = this.getStats(), o2 = gg(this, KA.GET_RTC_STATS);
            if (r2.sendPackets > 0 && o2) {
              -1 === i2 && (i2 = Date.now());
              const a2 = Date.now();
              if (a2 - i2 < 1e3 || a2 - n2 < DC("PROFILE_SWITCH_INTERVAL"))
                return;
              const c2 = r2.sendFrameRate, d2 = 0.6 * t2.frameRate, l2 = 0.9 * t2.frameRate;
              "number" == typeof c2 && c2 > 0 && c2 < d2 ? e2 > 0 && (e2--, s2(e2), YC.debug("[".concat(this.getTrackId(), "] step down for fps ").concat(c2, ", switchProfile to ").concat(e2))) : o2.OutgoingAvailableBandwidth < t2.bitrateMin ? e2 > 0 && (e2--, s2(e2), YC.debug("[".concat(this.getTrackId(), "] step down for OutgoingAvailableBandwidth ").concat(o2.OutgoingAvailableBandwidth, ", bitrateMin ").concat(t2.bitrateMin, ", switchProfile to ").concat(e2))) : "number" == typeof c2 && c2 > l2 && e2 < MA.length - 1 && o2.OutgoingAvailableBandwidth > 1.2 * MA[e2 + 1].bitrateMin && (e2++, s2(e2), YC.debug("[".concat(this.getTrackId(), "] step up for fps ").concat(c2, ", OutgoingAvailableBandwidth ").concat(o2.OutgoingAvailableBandwidth, ", switchProfile to ").concat(e2)));
            }
          }, DC("CHECK_LOCAL_STATS_INTERVAL"));
        }
        bindProcessorDestinationEvents() {
          this.processorDestination.on(ob.ON_TRACK, async (e2) => {
            e2 ? e2 !== this._mediaStreamTrack && (this._mediaStreamTrack = e2, this._updatePlayerSource(), await Tg(this, KA.NEED_REPLACE_TRACK, this)) : this._mediaStreamTrack !== this._originMediaStreamTrack && (this._mediaStreamTrack = this._originMediaStreamTrack, this._updatePlayerSource(), await Tg(this, KA.NEED_REPLACE_TRACK, this));
          });
        }
        unbindProcessorDestinationEvents() {
          this.processorDestination.removeAllListeners(ob.ON_TRACK);
        }
        unbindProcessorContextEvents() {
          this.processorContext.removeAllListeners(ab.REQUEST_UPDATE_CONSTRAINTS), this.processorContext.removeAllListeners(ab.REQUEST_CONSTRAINTS);
        }
      }
      UI([sI({ argsMap: (e2, t2, i2) => [e2.getTrackId(), "string" == typeof t2 ? t2 : t2 instanceof HTMLVideoElement ? "HTMLVideoElement" : "HTMLElement", i2] }), Jb(), xI("design:type", Function), xI("design:paramtypes", [Object, Object]), xI("design:returntype", void 0)], Nw.prototype, "play", null), UI([sI({ argsMap: (e2) => [e2.getTrackId()] }), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", void 0)], Nw.prototype, "stop", null), UI([qg("LocalVideoTrack", "_enabledMutex"), sI({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), Jb(), xI("design:type", Function), xI("design:paramtypes", [Boolean, Boolean]), xI("design:returntype", tT)], Nw.prototype, "setEnabled", null), UI([qg("LocalVideoTrack", "_enabledMutex"), sI({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), Jb(), xI("design:type", Function), xI("design:paramtypes", [Boolean]), xI("design:returntype", tT)], Nw.prototype, "setMuted", null), UI([sI({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), Jb(), xI("design:type", Function), xI("design:paramtypes", [Object, Boolean]), xI("design:returntype", tT)], Nw.prototype, "setEncoderConfiguration", null), UI([Jb(), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", Object)], Nw.prototype, "getStats", null), UI([sI({ argsMap: (e2, t2, i2) => [e2.getTrackId(), t2, i2] }), Jb(), xI("design:type", Function), xI("design:paramtypes", [Boolean, Object]), xI("design:returntype", tT)], Nw.prototype, "setBeautyEffect", null), UI([Jb(), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", ImageData)], Nw.prototype, "getCurrentFrameData", null), UI([Jb(), xI("design:type", Function), xI("design:paramtypes", [String, Number]), xI("design:returntype", tT)], Nw.prototype, "getCurrentFrameImage", null), UI([Jb(), xI("design:type", Function), xI("design:paramtypes", [Object]), xI("design:returntype", tT)], Nw.prototype, "setBitrateLimit", null), UI([Jb(), xI("design:type", Function), xI("design:paramtypes", [String]), xI("design:returntype", tT)], Nw.prototype, "setOptimizationMode", null), UI([Jb(), xI("design:type", Function), xI("design:paramtypes", [Object]), xI("design:returntype", void 0)], Nw.prototype, "setScalabiltyMode", null), UI([Jb(), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", void 0)], Nw.prototype, "updateMediaStreamTrackResolution", null), UI([sI({ argsMap: (e2, t2) => [e2.getTrackId(), t2.name] }), xI("design:type", Function), xI("design:paramtypes", [Object]), xI("design:returntype", Object)], Nw.prototype, "pipe", null), UI([sI({ argsMap: (e2) => [e2.getTrackId()] }), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", void 0)], Nw.prototype, "unpipe", null), UI([sI({ argsMap: (e2) => [e2.getTrackId()] }), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", void 0)], Nw.prototype, "close", null), UI([sI({ argsMap: (e2, t2, i2) => [e2.getTrackId(), t2.label, i2] }), xI("design:type", Function), xI("design:paramtypes", [MediaStreamTrack, Boolean]), xI("design:returntype", tT)], Nw.prototype, "replaceTrack", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", void 0)], Nw.prototype, "startMonitorStats", null);
      class Dw extends Nw {
        get __className__() {
          return "CameraVideoTrack";
        }
        constructor(e2, t2, i2, n2, s2, r2) {
          super(e2, VA(t2.encoderConfig), n2, s2, r2), nh(this, "_config", void 0), nh(this, "_originalConstraints", void 0), nh(this, "_constraints", void 0), nh(this, "_enabled", true), nh(this, "_deviceName", "default"), nh(this, "tryResumeVideoForIOS15_16WeChat", async () => {
            (wT() || OT()) && !function() {
              const e3 = pT();
              if (e3.os !== aT.IOS || !e3.osVersion)
                return false;
              const t3 = e3.osVersion.split(".");
              return 15 === Number(t3[0]) && Number(t3[1]) >= 2;
            }() && PT() && this._enabled && !this._isClosed && (YC.debug("[".concat(this.getTrackId(), "] try capture camera media device for interrupted iOS 15 device on WeChat.")), await this.renewMediaStreamTrack());
          }), this._config = t2, this._originalConstraints = i2, this._constraints = i2, this._deviceName = e2.label, this._encoderConfig = VA(this._config.encoderConfig), Tb.on(OA.IOS_15_16_INTERRUPTION_END, this.tryResumeVideoForIOS15_16WeChat), Tb.on(OA.IOS_INTERRUPTION_END, this.tryResumeVideoForIOS15_16WeChat), this.bindProcessorContextEvents();
        }
        async setDevice(e2) {
          return "string" == typeof e2 ? this._setDeviceById(e2) : e2.deviceId ? this._setDeviceById(e2.deviceId) : e2.facingMode ? this._setDeviceByFacingModel(e2.facingMode) : void 0;
        }
        async _setDeviceById(e2) {
          if (YC.info("[".concat(this.getTrackId(), "] set device to ").concat(e2)), this._enabled)
            try {
              const t2 = await Fb.getDeviceById(e2), i2 = {};
              i2.video = Ow({}, this._constraints), i2.video.deviceId = { exact: e2 }, i2.video.facingMode = void 0, this._originMediaStreamTrack.stop();
              let n2 = null;
              try {
                n2 = await Mb(i2, this.getTrackId());
              } catch (e3) {
                throw YC.error("[".concat(this.getTrackId(), "] setDevice failed"), e3.toString()), n2 = await Mb({ video: this._constraints }, this.getTrackId()), await this._updateOriginMediaStreamTrack(n2.getVideoTracks()[0], false), e3;
              }
              await this._updateOriginMediaStreamTrack(n2.getVideoTracks()[0], false), this.updateMediaStreamTrackResolution(), this._deviceName = t2.label, this._config.cameraId = e2, this._constraints.deviceId = { exact: e2 };
            } catch (e3) {
              throw YC.error("[".concat(this.getTrackId(), "] setDevice error"), e3.toString()), e3;
            }
          else
            try {
              const t2 = await Fb.getDeviceById(e2);
              this._deviceName = t2.label, this._config.cameraId = e2, this._constraints.deviceId = { exact: e2 };
            } catch (e3) {
              throw YC.error("[".concat(this.getTrackId(), "] setDevice error"), e3.toString()), e3;
            }
          YC.info("[".concat(this.getTrackId(), "] setDevice success"));
        }
        async _setDeviceByFacingModel(e2) {
          YC.info("[".concat(this.getTrackId(), "] set facingMode ").concat(e2));
          const t2 = { video: Ow(Ow({}, this._constraints), {}, { deviceId: void 0, facingMode: { exact: e2 } }) };
          if (this._enabled) {
            this._originMediaStreamTrack.stop();
            let e3 = null;
            try {
              e3 = await Mb(t2, this.getTrackId());
            } catch (t3) {
              throw YC.error("[".concat(this.getTrackId(), "] setDeviceByFacingModel failed"), t3.toString()), e3 = await Mb({ video: this._constraints }, this.getTrackId()), await this._updateOriginMediaStreamTrack(e3.getVideoTracks()[0], false), t3;
            }
            await this._updateOriginMediaStreamTrack(e3.getVideoTracks()[0], false), this.updateMediaStreamTrackResolution();
          }
          this._deviceName = "", this._config.facingMode = e2, this._config.cameraId = void 0, this._constraints = Ow({}, t2.video), YC.info("[".concat(this.getTrackId(), "] setDeviceByFacingModel success"));
        }
        async setEnabled(e2, t2) {
          if (!t2) {
            if (e2 === this._enabled)
              return;
            this.stateCheck("enabled", e2);
          }
          if (YC.info("[".concat(this.getTrackId(), "] start setEnabled"), e2), e2) {
            try {
              if (this.isExternalTrack)
                this._originMediaStreamTrack.enabled = true;
              else {
                const e3 = await Mb({ video: this._constraints }, this.getTrackId());
                await this._updateOriginMediaStreamTrack(e3.getVideoTracks()[0], false);
              }
              await Tg(this, KA.NEED_ENABLE_TRACK, this);
            } catch (e3) {
              throw YC.error("[".concat(this.getTrackId(), "] setEnabled true error"), e3.toString()), e3;
            }
            this.updateMediaStreamTrackResolution(), YC.info("[".concat(this.getTrackId(), "] setEnabled to true success")), t2 || (this._enabled = true);
          } else {
            this.isExternalTrack ? this._originMediaStreamTrack.enabled = false : (this._originMediaStreamTrack.onended = null, this._originMediaStreamTrack.stop()), t2 || (this._enabled = false);
            try {
              await Tg(this, KA.NEED_DISABLE_TRACK, this);
            } catch (e3) {
              throw YC.error("[".concat(this.getTrackId(), "] setEnabled to false error"), e3.toString()), e3;
            }
            YC.info("[".concat(this.getTrackId(), "] setEnabled to false success"));
          }
        }
        async setEncoderConfiguration(e2, t2) {
          if (!this._enabled)
            throw new VT(xT.TRACK_IS_DISABLED, "can not set encoder configuration when track is disabled");
          "720p_auto" === e2 ? this.startMonitorStats() : this._statsTimer && (window.clearInterval(this._statsTimer), this._statsTimer = null), e2 = VA(e2), this._forceBitrateLimit && (e2.bitrateMax = this._forceBitrateLimit.max_bitrate ? this._forceBitrateLimit.max_bitrate : e2.bitrateMax, e2.bitrateMin = this._forceBitrateLimit.min_bitrate ? this._forceBitrateLimit.min_bitrate : e2.bitrateMin);
          const i2 = bg(this._config);
          i2.encoderConfig = e2;
          const n2 = hw(i2);
          (ST() || CT() || DT()) && (n2.deviceId = void 0), YC.debug("[".concat(this.getTrackId(), "] setEncoderConfiguration applyConstraints"), JSON.stringify(e2), JSON.stringify(n2));
          try {
            await this._originMediaStreamTrack.applyConstraints(n2), this.updateMediaStreamTrackResolution();
          } catch (e3) {
            const t3 = new VT(xT.UNEXPECTED_ERROR, e3.toString());
            throw YC.error("[".concat(this.getTrackId(), "] applyConstraints error"), t3.toString()), t3;
          }
          this._config = i2, this._constraints = n2, this._originalConstraints = n2, this._encoderConfig = e2, -1 === this._hints.indexOf(YA.SCREEN_TRACK) && this.updateBitrateFromProfile();
          try {
            await Tg(this, KA.NEED_UPDATE_VIDEO_ENCODER, this);
          } catch (e3) {
            return e3.throw(YC);
          }
        }
        _getDefaultPlayerConfig() {
          return { mirror: true, fit: "cover" };
        }
        onTrackEnded() {
          if ((CT() || DT()) && this._enabled && !this._isClosed && Tb.duringInterruption) {
            const e2 = async () => {
              Tb.off(OA.IOS_INTERRUPTION_END, e2), this._enabled && !this._isClosed && (YC.debug("[".concat(this.getTrackId(), "] try capture camera media device for interrupted iOS device.")), await this.setEnabled(false), await this.setEnabled(true));
            };
            Tb.on(OA.IOS_INTERRUPTION_END, e2);
          } else
            YC.debug("[".concat(this.getTrackId(), "] track ended")), this.safeEmit(QA.TRACK_ENDED);
        }
        async renewMediaStreamTrack(e2) {
          const t2 = e2 || this._constraints, i2 = Fb.searchDeviceIdByName(this._deviceName);
          if (i2 && !t2.deviceId && (t2.deviceId = { exact: i2 }), this._enabled) {
            const e3 = await Mb({ video: t2 }, this.getTrackId());
            this._constraints = t2, await this._updateOriginMediaStreamTrack(e3.getVideoTracks()[0], true), this.updateMediaStreamTrackResolution();
          }
        }
        close() {
          super.close(), Tb.off(OA.IOS_15_16_INTERRUPTION_END, this.tryResumeVideoForIOS15_16WeChat), Tb.off(OA.IOS_INTERRUPTION_END, this.tryResumeVideoForIOS15_16WeChat);
        }
        clone(e2) {
          let t2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i2 = this._encoderConfig;
          e2 && (i2 = Ow(Ow({}, i2), VA(e2))), i2 = wg(i2);
          const n2 = xg(8, "track-cam-cloned-"), s2 = new Dw(t2 ? this._mediaStreamTrack.clone() : this._mediaStreamTrack, wg(Ow(Ow({}, this._config), {}, { encoderConfig: i2 })), wg(this._constraints), wg(this._scalabilityMode), this._optimizationMode, n2);
          return e2 && i2 && s2.setEncoderConfiguration(i2), YC.debug("clone track from ".concat(this.getTrackId(), " to ").concat(n2, ", clone ").concat(t2)), s2;
        }
        bindProcessorContextEvents() {
          this.processorContext.on(ab.REQUEST_UPDATE_CONSTRAINTS, async (e2, t2, i2) => {
            try {
              const i3 = Object.assign({}, this._originalConstraints, ...e2);
              await this.renewMediaStreamTrack(i3), t2();
            } catch (e3) {
              i2(e3);
            }
          }), this.processorContext.on(ab.REQUEST_CONSTRAINTS, async (e2) => {
            e2(this._originMediaStreamTrack.getSettings());
          });
        }
      }
      function Pw(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function Lw(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? Pw(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : Pw(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      function kw(e2, t2, i2, n2) {
        i2.optimizationMode && (n2 && n2.width && n2.height ? (i2.encoderConfig = Lw(Lw({}, n2), {}, { bitrateMin: n2.bitrateMin, bitrateMax: n2.bitrateMax }), "motion" !== i2.optimizationMode && "detail" !== i2.optimizationMode || (t2.contentHint = i2.optimizationMode, t2.contentHint === i2.optimizationMode ? YC.debug("[".concat(e2, "] set content hint to"), i2.optimizationMode) : YC.debug("[".concat(e2, "] set content hint failed")))) : YC.warning("[".concat(e2, "] can not apply optimization mode bitrate config, no encoderConfig")));
      }
      function Mw(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function Uw(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? Mw(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : Mw(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      UI([sI({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), Jb(), xI("design:type", Function), xI("design:paramtypes", [Object]), xI("design:returntype", tT)], Dw.prototype, "setDevice", null), UI([qg("CameraVideoTrack", "_enabledMutex"), sI({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), Jb(), xI("design:type", Function), xI("design:paramtypes", [Boolean, Boolean]), xI("design:returntype", tT)], Dw.prototype, "setEnabled", null), UI([sI({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), Jb(), xI("design:type", Function), xI("design:paramtypes", [Object, Boolean]), xI("design:returntype", tT)], Dw.prototype, "setEncoderConfiguration", null), UI([sI({ argsMap: (e2) => [e2.getTrackId()] }), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", void 0)], Dw.prototype, "close", null);
      class xw extends pb {
        getUserId() {
          return this._userId;
        }
        constructor(e2, t2, i2, n2) {
          super(e2, "track-".concat(e2.kind, "-").concat(t2, "-").concat(n2.clientId, "_").concat(xg(5, ""))), nh(this, "_userId", void 0), nh(this, "_uintId", void 0), nh(this, "_isDestroyed", false), nh(this, "store", void 0), nh(this, "processor", void 0), this._userId = t2, this._uintId = i2, this.store = n2;
        }
        _updateOriginMediaStreamTrack(e2) {
          this._originMediaStreamTrack = e2, this._mediaStreamTrack = e2, this._updatePlayerSource(), this.processor && this.processor.updateInput({ track: this._originMediaStreamTrack, context: this.processorContext });
        }
        _destroy() {
          this._isDestroyed = true, YC.info("[".concat(this.getTrackId(), "] is destroyed")), this.stop(), super.close();
        }
        getProcessorStats() {
          return this.processorContext.gatherStats();
        }
        getProcessorUsage() {
          return this.processorContext.gatherUsage();
        }
      }
      class Vw extends xw {
        get isPlaying() {
          return !(!this._player || this._player.videoElementStatus !== lb.PLAYING);
        }
        get __className__() {
          return "RemoteVideoTrack";
        }
        constructor(e2, t2, i2, n2) {
          super(e2, t2, i2, n2), nh(this, "_videoVisibleTimer", null), nh(this, "_previousVideoVisibleStatus", void 0), nh(this, "_clearPreviousVideoVisibleStatus", () => this._previousVideoVisibleStatus = void 0), nh(this, "trackMediaType", "video"), nh(this, "_videoWidth", void 0), nh(this, "_videoHeight", void 0), nh(this, "_player", void 0), nh(this, "processorDestination", void 0), nh(this, "processorContext", void 0), this.updateMediaStreamTrackResolution(), this.processorContext = new Zb(this.getTrackId(), "remote"), this.processorDestination = new Qb(this.processorContext), this.bindProcessorDestinationEvents();
        }
        getStats() {
          Ng(() => {
            YC.warning("[deprecated] RemoteVideoTrack.getStats will be removed in the future, use AgoraRTCClient.getRemoteVideoStats instead");
          }, "remoteVideoTrackGetStatsWarning");
          return gg(this, KA.GET_STATS) || Uw({}, rb);
        }
        play(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
          if ("string" == typeof e2) {
            const t3 = document.getElementById(e2);
            t3 ? e2 = t3 : (YC.warning("[".concat(this.getTrackId(), '] can not find "#').concat(e2, '" element, use document.body')), e2 = document.body);
          }
          YC.debug("[".concat(this.getTrackId(), "] start video playback in ").concat(e2 instanceof HTMLVideoElement ? "HTMLVideoElement" : "HTMLElement"), JSON.stringify(t2));
          const i2 = Uw(Uw({ fit: "cover" }, t2), {}, { trackId: this.getTrackId(), element: e2 });
          this._player ? this._player.updateConfig(i2) : (e2 instanceof HTMLVideoElement ? this._player = new Cw(i2) : this._player = new vw(i2), this._player.updateVideoTrack(this._mediaStreamTrack), this._player.onFirstVideoFrameDecoded = () => {
            this.store.subscribe(this.getUserId(), "video", void 0, void 0, Date.now()), this.safeEmit(ZA.FIRST_FRAME_DECODED);
          }), this._player.play(this.store.sessionId || void 0), this._videoVisibleTimer && window.clearInterval(this._videoVisibleTimer), this._clearPreviousVideoVisibleStatus(), this._videoVisibleTimer = window.setInterval(() => {
            try {
              const e3 = this.getVideoElementVisibleStatus();
              this.safeEmit(ZA.VIDEO_ELEMENT_VISIBLE_STATUS, e3);
            } catch (e3) {
            }
          }, DC("CHECK_VIDEO_VISIBLE_INTERVAL"));
        }
        stop() {
          this._player && (this._videoVisibleTimer && (window.clearInterval(this._videoVisibleTimer), this._videoVisibleTimer = null), this._clearPreviousVideoVisibleStatus(), this._player.destroy(), this._player = void 0, YC.debug("[".concat(this.getTrackId(), "] stop video playback")));
        }
        getCurrentFrameData() {
          return this._player ? this._player.getCurrentFrame() : new ImageData(2, 2);
        }
        updateMediaStreamTrackResolution() {
          yw(this._originMediaStreamTrack).then((e2) => {
            let [t2, i2] = e2;
            this._videoHeight = i2, this._videoWidth = t2;
          }).catch(Fg);
        }
        _updatePlayerSource() {
          YC.debug("[".concat(this.getTrackId(), "] update player source track")), this._player && this._player.updateVideoTrack(this._mediaStreamTrack);
        }
        getVideoElementVisibleStatus() {
          try {
            var e2, t2;
            const i2 = null == this || null === (e2 = this._player) || void 0 === e2 ? void 0 : e2.getContainerElement(), n2 = { track: this, element: null == this || null === (t2 = this._player) || void 0 === t2 ? void 0 : t2.getVideoElement(), slot: null == i2 ? void 0 : i2.parentElement }, { element: s2, slot: r2 } = n2;
            if (this.isPlaying && s2 instanceof HTMLVideoElement && r2 instanceof HTMLElement) {
              const e3 = QT.checkOneElementVisible(s2), t3 = Object.assign({}, e3);
              if (t3.visible !== this._previousVideoVisibleStatus) {
                this._previousVideoVisibleStatus = t3.visible;
                const e4 = rI.reportApiInvoke(null, { tag: og.TRACER, name: rg.REMOTE_VIDEO_TRACK_GET_VIDEO_VISIBLE, options: [this.getTrackId()] });
                t3.visible ? e4.onSuccess("Video is visible") : e4.onSuccess("Invisible because of ".concat(t3.reason));
              }
              return t3;
            }
            return;
          } catch (e3) {
            throw new VT(xT.GET_VIDEO_ELEMENT_VISIBLE_ERROR, e3.message);
          }
        }
        pipe(e2) {
          if (this.processor === e2)
            return e2;
          if (e2._source)
            throw new VT(xT.INVALID_OPERATION, "Processor ".concat(e2.name, " already piped, please call unpipe beforehand."));
          return this.unpipe(), this.processor = e2, this.processor._source = this, e2.updateInput({ track: this._originMediaStreamTrack, context: this.processorContext }), e2;
        }
        unpipe() {
          if (!this.processor)
            return;
          const e2 = this.processor;
          this.processor._source = void 0, this.processor = void 0, e2.reset();
        }
        bindProcessorDestinationEvents() {
          this.processorDestination.on(ob.ON_TRACK, async (e2) => {
            e2 ? e2 !== this._mediaStreamTrack && (this._mediaStreamTrack = e2, this._updatePlayerSource()) : this._mediaStreamTrack !== this._originMediaStreamTrack && (this._mediaStreamTrack = this._originMediaStreamTrack, this._updatePlayerSource());
          });
        }
        unbindProcessorDestinationEvents() {
          this.processorDestination.removeAllListeners(ob.ON_TRACK);
        }
        _destroy() {
          super._destroy(), this.unbindProcessorDestinationEvents();
        }
      }
      UI([sI({ argsMap: (e2, t2, i2) => [e2.getTrackId(), "string" == typeof t2 ? t2 : t2 instanceof HTMLVideoElement ? "HTMLVideoElement" : "HTMLElement", i2] }), xI("design:type", Function), xI("design:paramtypes", [Object, Object]), xI("design:returntype", void 0)], Vw.prototype, "play", null), UI([sI({ argsMap: (e2) => [e2.getTrackId()] }), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", void 0)], Vw.prototype, "stop", null), UI([sI({ argsMap: (e2, t2) => [e2.getTrackId(), t2.name] }), xI("design:type", Function), xI("design:paramtypes", [Object]), xI("design:returntype", Object)], Vw.prototype, "pipe", null), UI([sI({ argsMap: (e2) => [e2.getTrackId()] }), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", void 0)], Vw.prototype, "unpipe", null);
      class Fw extends xw {
        get isPlaying() {
          return this._useAudioElement ? qb.isPlaying(this.getTrackId()) : this._source.isPlayed;
        }
        get __className__() {
          return "RemoteAudioTrack";
        }
        constructor(e2, t2, i2, n2) {
          super(e2, t2, i2, n2), nh(this, "trackMediaType", "audio"), nh(this, "_source", void 0), nh(this, "_useAudioElement", true), nh(this, "_volume", 100), nh(this, "processorContext", void 0), nh(this, "processorDestination", void 0), nh(this, "_played", false), nh(this, "_bypassWebAudio", false), DC("DISABLE_WEBAUDIO") ? (this._source = new tw(), this._bypassWebAudio = true, this._useAudioElement = true) : (this._source = new bb(e2, true), DC("REMOTE_AUDIO_TRACK_USES_WEB_AUDIO") && (this._useAudioElement = false)), this._source.once($A.RECEIVE_TRACK_BUFFER, () => {
            this.safeEmit(ZA.FIRST_FRAME_DECODED);
          }), this.processorContext = new ew(this._source.context, this.getTrackId(), "remote"), this.processorDestination = new $b(this.processorContext), this.bindProcessorDestinationEvents(), this._source.on($A.UPDATE_SOURCE, () => {
            this.processor && this.processor.updateInput({ node: this._source.processSourceNode, context: this.processorContext });
          });
        }
        setAudioFrameCallback(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 4096;
          if (!e2)
            return this._source.removeAllListeners($A.ON_AUDIO_BUFFER), void this._source.stopGetAudioBuffer();
          this._source.startGetAudioBuffer(t2), this._source.removeAllListeners($A.ON_AUDIO_BUFFER), this._source.on($A.ON_AUDIO_BUFFER, (t3) => e2(t3));
        }
        setVolume(e2) {
          this._volume = e2, this._useAudioElement ? qb.setVolume(this.getTrackId(), e2) : this._source.setVolume(e2 / 100);
        }
        async setPlaybackDevice(e2) {
          if (!this._useAudioElement || !gT() && DC("RESTRICTION_SET_PLAYBACK_DEVICE"))
            throw new VT(xT.NOT_SUPPORTED, "your browser does not support setting the audio output device");
          await qb.setSinkID(this.getTrackId(), e2);
        }
        getVolumeLevel() {
          return this._source.getAccurateVolumeLevel();
        }
        getStats() {
          Ng(() => {
            YC.warning("[deprecated] RemoteAudioTrack.getStats will be removed in the future, use AgoraRTCClient.getRemoteAudioStats instead");
          }, "remoteAudioTrackGetStatsWarning");
          return gg(this, KA.GET_STATS) || Uw({}, nb);
        }
        play() {
          YC.debug("[".concat(this.getTrackId(), "] start audio playback")), this._played = true, this._useAudioElement ? (YC.debug("[".concat(this.getTrackId(), "] use audio element to play")), qb.play(this._mediaStreamTrack, this.getTrackId(), this._volume, this.store.sessionId || void 0)) : this._source.play();
        }
        stop() {
          YC.debug("[".concat(this.getTrackId(), "] stop audio playback")), this._played = false, this._useAudioElement ? qb.stop(this.getTrackId()) : this._source.stop();
        }
        _destroy() {
          super._destroy(), this._played = false, this.unbindProcessorDestinationEvents(), this._source.destroy();
        }
        _isFreeze() {
          return this._source.isFreeze;
        }
        _updatePlayerSource() {
          let e2 = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
          YC.debug("[".concat(this.getTrackId(), "] update player source track")), e2 && this._source.updateTrack(this._mediaStreamTrack), this._useAudioElement && qb.updateTrack(this.getTrackId(), this._mediaStreamTrack);
        }
        pipe(e2) {
          if (this._bypassWebAudio)
            throw new VT(xT.NOT_SUPPORTED, "can not pipe extension when WebAudio disabled");
          if (this.processor === e2)
            return e2;
          if (e2._source)
            throw new VT(xT.INVALID_OPERATION, "Processor ".concat(e2.name, " already piped, please call unpipe beforehand."));
          return this.unpipe(), this.processor = e2, this.processor._source = this, e2.updateInput({ track: this._originMediaStreamTrack, node: this._source.processSourceNode, context: this.processorContext }), e2;
        }
        unpipe() {
          var e2;
          if (this._bypassWebAudio)
            throw new VT(xT.NOT_SUPPORTED, "can not unpipe extension when WebAudio disabled");
          if (!this.processor)
            return;
          const t2 = this.processor;
          null === (e2 = this._source.processSourceNode) || void 0 === e2 || e2.disconnect(), this.processor._source = false, this.processor = void 0, t2.reset();
        }
        bindProcessorDestinationEvents() {
          this.processorDestination.on(ob.ON_TRACK, async (e2) => {
            e2 ? e2 !== this._mediaStreamTrack && (this._mediaStreamTrack = e2, this._updatePlayerSource(false), this._source.processedNode = this._source.createMediaStreamSourceNode(e2)) : this._mediaStreamTrack !== this._originMediaStreamTrack && (this._mediaStreamTrack = this._originMediaStreamTrack, this._updatePlayerSource());
          }), this.processorDestination.on(ob.ON_NODE, (e2) => {
            this._source.processedNode = e2;
            const t2 = !e2;
            this._useAudioElement !== t2 && (this._played ? (this.stop(), this._useAudioElement = t2, this.play()) : this._useAudioElement = t2);
          });
        }
        unbindProcessorDestinationEvents() {
          this.processorDestination.removeAllListeners(ob.ON_TRACK), this.processorDestination.removeAllListeners(ob.ON_NODE);
        }
      }
      UI([sI({ argsMap: (e2, t2) => [e2.getTrackId(), t2], throttleTime: 300 }), xI("design:type", Function), xI("design:paramtypes", [Number]), xI("design:returntype", void 0)], Fw.prototype, "setVolume", null), UI([sI({ argsMap: (e2, t2) => [e2.getTrackId(), t2] }), xI("design:type", Function), xI("design:paramtypes", [String]), xI("design:returntype", tT)], Fw.prototype, "setPlaybackDevice", null), UI([sI({ argsMap: (e2) => [e2.getTrackId()] }), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", void 0)], Fw.prototype, "play", null), UI([sI({ argsMap: (e2) => [e2.getTrackId()] }), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", void 0)], Fw.prototype, "stop", null), UI([sI({ argsMap: (e2, t2) => [e2.getTrackId(), t2.name] }), xI("design:type", Function), xI("design:paramtypes", [Object]), xI("design:returntype", Object)], Fw.prototype, "pipe", null), UI([sI({ argsMap: (e2) => [e2.getTrackId()] }), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", void 0)], Fw.prototype, "unpipe", null);
      function Bw(e2) {
        let t2 = e2.length;
        for (; --t2 >= 0; )
          e2[t2] = 0;
      }
      const jw = 256, Gw = 286, Ww = 30, Hw = 15, Kw = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0]), Yw = new Uint8Array([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]), qw = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7]), Jw = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), zw = new Array(576);
      Bw(zw);
      const Xw = new Array(60);
      Bw(Xw);
      const Qw = new Array(512);
      Bw(Qw);
      const Zw = new Array(256);
      Bw(Zw);
      const $w = new Array(29);
      Bw($w);
      const eO = new Array(Ww);
      function tO(e2, t2, i2, n2, s2) {
        this.static_tree = e2, this.extra_bits = t2, this.extra_base = i2, this.elems = n2, this.max_length = s2, this.has_stree = e2 && e2.length;
      }
      let iO, nO, sO;
      function rO(e2, t2) {
        this.dyn_tree = e2, this.max_code = 0, this.stat_desc = t2;
      }
      Bw(eO);
      const oO = (e2) => e2 < 256 ? Qw[e2] : Qw[256 + (e2 >>> 7)], aO = (e2, t2) => {
        e2.pending_buf[e2.pending++] = 255 & t2, e2.pending_buf[e2.pending++] = t2 >>> 8 & 255;
      }, cO = (e2, t2, i2) => {
        e2.bi_valid > 16 - i2 ? (e2.bi_buf |= t2 << e2.bi_valid & 65535, aO(e2, e2.bi_buf), e2.bi_buf = t2 >> 16 - e2.bi_valid, e2.bi_valid += i2 - 16) : (e2.bi_buf |= t2 << e2.bi_valid & 65535, e2.bi_valid += i2);
      }, dO = (e2, t2, i2) => {
        cO(e2, i2[2 * t2], i2[2 * t2 + 1]);
      }, lO = (e2, t2) => {
        let i2 = 0;
        do {
          i2 |= 1 & e2, e2 >>>= 1, i2 <<= 1;
        } while (--t2 > 0);
        return i2 >>> 1;
      }, uO = (e2, t2, i2) => {
        const n2 = new Array(16);
        let s2, r2, o2 = 0;
        for (s2 = 1; s2 <= Hw; s2++)
          o2 = o2 + i2[s2 - 1] << 1, n2[s2] = o2;
        for (r2 = 0; r2 <= t2; r2++) {
          let t3 = e2[2 * r2 + 1];
          0 !== t3 && (e2[2 * r2] = lO(n2[t3]++, t3));
        }
      }, hO = (e2) => {
        let t2;
        for (t2 = 0; t2 < Gw; t2++)
          e2.dyn_ltree[2 * t2] = 0;
        for (t2 = 0; t2 < Ww; t2++)
          e2.dyn_dtree[2 * t2] = 0;
        for (t2 = 0; t2 < 19; t2++)
          e2.bl_tree[2 * t2] = 0;
        e2.dyn_ltree[512] = 1, e2.opt_len = e2.static_len = 0, e2.sym_next = e2.matches = 0;
      }, pO = (e2) => {
        e2.bi_valid > 8 ? aO(e2, e2.bi_buf) : e2.bi_valid > 0 && (e2.pending_buf[e2.pending++] = e2.bi_buf), e2.bi_buf = 0, e2.bi_valid = 0;
      }, _O = (e2, t2, i2, n2) => {
        const s2 = 2 * t2, r2 = 2 * i2;
        return e2[s2] < e2[r2] || e2[s2] === e2[r2] && n2[t2] <= n2[i2];
      }, EO = (e2, t2, i2) => {
        const n2 = e2.heap[i2];
        let s2 = i2 << 1;
        for (; s2 <= e2.heap_len && (s2 < e2.heap_len && _O(t2, e2.heap[s2 + 1], e2.heap[s2], e2.depth) && s2++, !_O(t2, n2, e2.heap[s2], e2.depth)); )
          e2.heap[i2] = e2.heap[s2], i2 = s2, s2 <<= 1;
        e2.heap[i2] = n2;
      }, mO = (e2, t2, i2) => {
        let n2, s2, r2, o2, a2 = 0;
        if (0 !== e2.sym_next)
          do {
            n2 = 255 & e2.pending_buf[e2.sym_buf + a2++], n2 += (255 & e2.pending_buf[e2.sym_buf + a2++]) << 8, s2 = e2.pending_buf[e2.sym_buf + a2++], 0 === n2 ? dO(e2, s2, t2) : (r2 = Zw[s2], dO(e2, r2 + jw + 1, t2), o2 = Kw[r2], 0 !== o2 && (s2 -= $w[r2], cO(e2, s2, o2)), n2--, r2 = oO(n2), dO(e2, r2, i2), o2 = Yw[r2], 0 !== o2 && (n2 -= eO[r2], cO(e2, n2, o2)));
          } while (a2 < e2.sym_next);
        dO(e2, 256, t2);
      }, fO = (e2, t2) => {
        const i2 = t2.dyn_tree, n2 = t2.stat_desc.static_tree, s2 = t2.stat_desc.has_stree, r2 = t2.stat_desc.elems;
        let o2, a2, c2, d2 = -1;
        for (e2.heap_len = 0, e2.heap_max = 573, o2 = 0; o2 < r2; o2++)
          0 !== i2[2 * o2] ? (e2.heap[++e2.heap_len] = d2 = o2, e2.depth[o2] = 0) : i2[2 * o2 + 1] = 0;
        for (; e2.heap_len < 2; )
          c2 = e2.heap[++e2.heap_len] = d2 < 2 ? ++d2 : 0, i2[2 * c2] = 1, e2.depth[c2] = 0, e2.opt_len--, s2 && (e2.static_len -= n2[2 * c2 + 1]);
        for (t2.max_code = d2, o2 = e2.heap_len >> 1; o2 >= 1; o2--)
          EO(e2, i2, o2);
        c2 = r2;
        do {
          o2 = e2.heap[1], e2.heap[1] = e2.heap[e2.heap_len--], EO(e2, i2, 1), a2 = e2.heap[1], e2.heap[--e2.heap_max] = o2, e2.heap[--e2.heap_max] = a2, i2[2 * c2] = i2[2 * o2] + i2[2 * a2], e2.depth[c2] = (e2.depth[o2] >= e2.depth[a2] ? e2.depth[o2] : e2.depth[a2]) + 1, i2[2 * o2 + 1] = i2[2 * a2 + 1] = c2, e2.heap[1] = c2++, EO(e2, i2, 1);
        } while (e2.heap_len >= 2);
        e2.heap[--e2.heap_max] = e2.heap[1], ((e3, t3) => {
          const i3 = t3.dyn_tree, n3 = t3.max_code, s3 = t3.stat_desc.static_tree, r3 = t3.stat_desc.has_stree, o3 = t3.stat_desc.extra_bits, a3 = t3.stat_desc.extra_base, c3 = t3.stat_desc.max_length;
          let d3, l2, u2, h2, p2, _2, E2 = 0;
          for (h2 = 0; h2 <= Hw; h2++)
            e3.bl_count[h2] = 0;
          for (i3[2 * e3.heap[e3.heap_max] + 1] = 0, d3 = e3.heap_max + 1; d3 < 573; d3++)
            l2 = e3.heap[d3], h2 = i3[2 * i3[2 * l2 + 1] + 1] + 1, h2 > c3 && (h2 = c3, E2++), i3[2 * l2 + 1] = h2, l2 > n3 || (e3.bl_count[h2]++, p2 = 0, l2 >= a3 && (p2 = o3[l2 - a3]), _2 = i3[2 * l2], e3.opt_len += _2 * (h2 + p2), r3 && (e3.static_len += _2 * (s3[2 * l2 + 1] + p2)));
          if (0 !== E2) {
            do {
              for (h2 = c3 - 1; 0 === e3.bl_count[h2]; )
                h2--;
              e3.bl_count[h2]--, e3.bl_count[h2 + 1] += 2, e3.bl_count[c3]--, E2 -= 2;
            } while (E2 > 0);
            for (h2 = c3; 0 !== h2; h2--)
              for (l2 = e3.bl_count[h2]; 0 !== l2; )
                u2 = e3.heap[--d3], u2 > n3 || (i3[2 * u2 + 1] !== h2 && (e3.opt_len += (h2 - i3[2 * u2 + 1]) * i3[2 * u2], i3[2 * u2 + 1] = h2), l2--);
          }
        })(e2, t2), uO(i2, d2, e2.bl_count);
      }, TO = (e2, t2, i2) => {
        let n2, s2, r2 = -1, o2 = t2[1], a2 = 0, c2 = 7, d2 = 4;
        for (0 === o2 && (c2 = 138, d2 = 3), t2[2 * (i2 + 1) + 1] = 65535, n2 = 0; n2 <= i2; n2++)
          s2 = o2, o2 = t2[2 * (n2 + 1) + 1], ++a2 < c2 && s2 === o2 || (a2 < d2 ? e2.bl_tree[2 * s2] += a2 : 0 !== s2 ? (s2 !== r2 && e2.bl_tree[2 * s2]++, e2.bl_tree[32]++) : a2 <= 10 ? e2.bl_tree[34]++ : e2.bl_tree[36]++, a2 = 0, r2 = s2, 0 === o2 ? (c2 = 138, d2 = 3) : s2 === o2 ? (c2 = 6, d2 = 3) : (c2 = 7, d2 = 4));
      }, gO = (e2, t2, i2) => {
        let n2, s2, r2 = -1, o2 = t2[1], a2 = 0, c2 = 7, d2 = 4;
        for (0 === o2 && (c2 = 138, d2 = 3), n2 = 0; n2 <= i2; n2++)
          if (s2 = o2, o2 = t2[2 * (n2 + 1) + 1], !(++a2 < c2 && s2 === o2)) {
            if (a2 < d2)
              do {
                dO(e2, s2, e2.bl_tree);
              } while (0 != --a2);
            else
              0 !== s2 ? (s2 !== r2 && (dO(e2, s2, e2.bl_tree), a2--), dO(e2, 16, e2.bl_tree), cO(e2, a2 - 3, 2)) : a2 <= 10 ? (dO(e2, 17, e2.bl_tree), cO(e2, a2 - 3, 3)) : (dO(e2, 18, e2.bl_tree), cO(e2, a2 - 11, 7));
            a2 = 0, r2 = s2, 0 === o2 ? (c2 = 138, d2 = 3) : s2 === o2 ? (c2 = 6, d2 = 3) : (c2 = 7, d2 = 4);
          }
      };
      let SO = false;
      const RO = (e2, t2, i2, n2) => {
        cO(e2, 0 + (n2 ? 1 : 0), 3), pO(e2), aO(e2, i2), aO(e2, ~i2), i2 && e2.pending_buf.set(e2.window.subarray(t2, t2 + i2), e2.pending), e2.pending += i2;
      };
      var CO = (e2) => {
        SO || ((() => {
          let e3, t2, i2, n2, s2;
          const r2 = new Array(16);
          for (i2 = 0, n2 = 0; n2 < 28; n2++)
            for ($w[n2] = i2, e3 = 0; e3 < 1 << Kw[n2]; e3++)
              Zw[i2++] = n2;
          for (Zw[i2 - 1] = n2, s2 = 0, n2 = 0; n2 < 16; n2++)
            for (eO[n2] = s2, e3 = 0; e3 < 1 << Yw[n2]; e3++)
              Qw[s2++] = n2;
          for (s2 >>= 7; n2 < Ww; n2++)
            for (eO[n2] = s2 << 7, e3 = 0; e3 < 1 << Yw[n2] - 7; e3++)
              Qw[256 + s2++] = n2;
          for (t2 = 0; t2 <= Hw; t2++)
            r2[t2] = 0;
          for (e3 = 0; e3 <= 143; )
            zw[2 * e3 + 1] = 8, e3++, r2[8]++;
          for (; e3 <= 255; )
            zw[2 * e3 + 1] = 9, e3++, r2[9]++;
          for (; e3 <= 279; )
            zw[2 * e3 + 1] = 7, e3++, r2[7]++;
          for (; e3 <= 287; )
            zw[2 * e3 + 1] = 8, e3++, r2[8]++;
          for (uO(zw, 287, r2), e3 = 0; e3 < Ww; e3++)
            Xw[2 * e3 + 1] = 5, Xw[2 * e3] = lO(e3, 5);
          iO = new tO(zw, Kw, 257, Gw, Hw), nO = new tO(Xw, Yw, 0, Ww, Hw), sO = new tO(new Array(0), qw, 0, 19, 7);
        })(), SO = true), e2.l_desc = new rO(e2.dyn_ltree, iO), e2.d_desc = new rO(e2.dyn_dtree, nO), e2.bl_desc = new rO(e2.bl_tree, sO), e2.bi_buf = 0, e2.bi_valid = 0, hO(e2);
      }, IO = (e2, t2, i2, n2) => {
        let s2, r2, o2 = 0;
        e2.level > 0 ? (2 === e2.strm.data_type && (e2.strm.data_type = ((e3) => {
          let t3, i3 = 4093624447;
          for (t3 = 0; t3 <= 31; t3++, i3 >>>= 1)
            if (1 & i3 && 0 !== e3.dyn_ltree[2 * t3])
              return 0;
          if (0 !== e3.dyn_ltree[18] || 0 !== e3.dyn_ltree[20] || 0 !== e3.dyn_ltree[26])
            return 1;
          for (t3 = 32; t3 < jw; t3++)
            if (0 !== e3.dyn_ltree[2 * t3])
              return 1;
          return 0;
        })(e2)), fO(e2, e2.l_desc), fO(e2, e2.d_desc), o2 = ((e3) => {
          let t3;
          for (TO(e3, e3.dyn_ltree, e3.l_desc.max_code), TO(e3, e3.dyn_dtree, e3.d_desc.max_code), fO(e3, e3.bl_desc), t3 = 18; t3 >= 3 && 0 === e3.bl_tree[2 * Jw[t3] + 1]; t3--)
            ;
          return e3.opt_len += 3 * (t3 + 1) + 5 + 5 + 4, t3;
        })(e2), s2 = e2.opt_len + 3 + 7 >>> 3, r2 = e2.static_len + 3 + 7 >>> 3, r2 <= s2 && (s2 = r2)) : s2 = r2 = i2 + 5, i2 + 4 <= s2 && -1 !== t2 ? RO(e2, t2, i2, n2) : 4 === e2.strategy || r2 === s2 ? (cO(e2, 2 + (n2 ? 1 : 0), 3), mO(e2, zw, Xw)) : (cO(e2, 4 + (n2 ? 1 : 0), 3), ((e3, t3, i3, n3) => {
          let s3;
          for (cO(e3, t3 - 257, 5), cO(e3, i3 - 1, 5), cO(e3, n3 - 4, 4), s3 = 0; s3 < n3; s3++)
            cO(e3, e3.bl_tree[2 * Jw[s3] + 1], 3);
          gO(e3, e3.dyn_ltree, t3 - 1), gO(e3, e3.dyn_dtree, i3 - 1);
        })(e2, e2.l_desc.max_code + 1, e2.d_desc.max_code + 1, o2 + 1), mO(e2, e2.dyn_ltree, e2.dyn_dtree)), hO(e2), n2 && pO(e2);
      }, vO = (e2, t2, i2) => (e2.pending_buf[e2.sym_buf + e2.sym_next++] = t2, e2.pending_buf[e2.sym_buf + e2.sym_next++] = t2 >> 8, e2.pending_buf[e2.sym_buf + e2.sym_next++] = i2, 0 === t2 ? e2.dyn_ltree[2 * i2]++ : (e2.matches++, t2--, e2.dyn_ltree[2 * (Zw[i2] + jw + 1)]++, e2.dyn_dtree[2 * oO(t2)]++), e2.sym_next === e2.sym_end), yO = { _tr_init: CO, _tr_stored_block: RO, _tr_flush_block: IO, _tr_tally: vO, _tr_align: (e2) => {
        cO(e2, 2, 3), dO(e2, 256, zw), ((e3) => {
          16 === e3.bi_valid ? (aO(e3, e3.bi_buf), e3.bi_buf = 0, e3.bi_valid = 0) : e3.bi_valid >= 8 && (e3.pending_buf[e3.pending++] = 255 & e3.bi_buf, e3.bi_buf >>= 8, e3.bi_valid -= 8);
        })(e2);
      } };
      var AO = (e2, t2, i2, n2) => {
        let s2 = 65535 & e2 | 0, r2 = e2 >>> 16 & 65535 | 0, o2 = 0;
        for (; 0 !== i2; ) {
          o2 = i2 > 2e3 ? 2e3 : i2, i2 -= o2;
          do {
            s2 = s2 + t2[n2++] | 0, r2 = r2 + s2 | 0;
          } while (--o2);
          s2 %= 65521, r2 %= 65521;
        }
        return s2 | r2 << 16 | 0;
      };
      const bO = new Uint32Array((() => {
        let e2, t2 = [];
        for (var i2 = 0; i2 < 256; i2++) {
          e2 = i2;
          for (var n2 = 0; n2 < 8; n2++)
            e2 = 1 & e2 ? 3988292384 ^ e2 >>> 1 : e2 >>> 1;
          t2[i2] = e2;
        }
        return t2;
      })());
      var wO = (e2, t2, i2, n2) => {
        const s2 = bO, r2 = n2 + i2;
        e2 ^= -1;
        for (let i3 = n2; i3 < r2; i3++)
          e2 = e2 >>> 8 ^ s2[255 & (e2 ^ t2[i3])];
        return -1 ^ e2;
      }, OO = { 2: "need dictionary", 1: "stream end", 0: "", "-1": "file error", "-2": "stream error", "-3": "data error", "-4": "insufficient memory", "-5": "buffer error", "-6": "incompatible version" }, NO = { Z_NO_FLUSH: 0, Z_PARTIAL_FLUSH: 1, Z_SYNC_FLUSH: 2, Z_FULL_FLUSH: 3, Z_FINISH: 4, Z_BLOCK: 5, Z_TREES: 6, Z_OK: 0, Z_STREAM_END: 1, Z_NEED_DICT: 2, Z_ERRNO: -1, Z_STREAM_ERROR: -2, Z_DATA_ERROR: -3, Z_MEM_ERROR: -4, Z_BUF_ERROR: -5, Z_NO_COMPRESSION: 0, Z_BEST_SPEED: 1, Z_BEST_COMPRESSION: 9, Z_DEFAULT_COMPRESSION: -1, Z_FILTERED: 1, Z_HUFFMAN_ONLY: 2, Z_RLE: 3, Z_FIXED: 4, Z_DEFAULT_STRATEGY: 0, Z_BINARY: 0, Z_TEXT: 1, Z_UNKNOWN: 2, Z_DEFLATED: 8 };
      const { _tr_init: DO, _tr_stored_block: PO, _tr_flush_block: LO, _tr_tally: kO, _tr_align: MO } = yO, { Z_NO_FLUSH: UO, Z_PARTIAL_FLUSH: xO, Z_FULL_FLUSH: VO, Z_FINISH: FO, Z_BLOCK: BO, Z_OK: jO, Z_STREAM_END: GO, Z_STREAM_ERROR: WO, Z_DATA_ERROR: HO, Z_BUF_ERROR: KO, Z_DEFAULT_COMPRESSION: YO, Z_FILTERED: qO, Z_HUFFMAN_ONLY: JO, Z_RLE: zO, Z_FIXED: XO, Z_DEFAULT_STRATEGY: QO, Z_UNKNOWN: ZO, Z_DEFLATED: $O } = NO, eN = 286, tN = 30, iN = 19, nN = 2 * eN + 1, sN = 15, rN = 258, oN = 262, aN = 42, cN = 113, dN = 666, lN = (e2, t2) => (e2.msg = OO[t2], t2), uN = (e2) => 2 * e2 - (e2 > 4 ? 9 : 0), hN = (e2) => {
        let t2 = e2.length;
        for (; --t2 >= 0; )
          e2[t2] = 0;
      }, pN = (e2) => {
        let t2, i2, n2, s2 = e2.w_size;
        t2 = e2.hash_size, n2 = t2;
        do {
          i2 = e2.head[--n2], e2.head[n2] = i2 >= s2 ? i2 - s2 : 0;
        } while (--t2);
        t2 = s2, n2 = t2;
        do {
          i2 = e2.prev[--n2], e2.prev[n2] = i2 >= s2 ? i2 - s2 : 0;
        } while (--t2);
      };
      let _N = (e2, t2, i2) => (t2 << e2.hash_shift ^ i2) & e2.hash_mask;
      const EN = (e2) => {
        const t2 = e2.state;
        let i2 = t2.pending;
        i2 > e2.avail_out && (i2 = e2.avail_out), 0 !== i2 && (e2.output.set(t2.pending_buf.subarray(t2.pending_out, t2.pending_out + i2), e2.next_out), e2.next_out += i2, t2.pending_out += i2, e2.total_out += i2, e2.avail_out -= i2, t2.pending -= i2, 0 === t2.pending && (t2.pending_out = 0));
      }, mN = (e2, t2) => {
        LO(e2, e2.block_start >= 0 ? e2.block_start : -1, e2.strstart - e2.block_start, t2), e2.block_start = e2.strstart, EN(e2.strm);
      }, fN = (e2, t2) => {
        e2.pending_buf[e2.pending++] = t2;
      }, TN = (e2, t2) => {
        e2.pending_buf[e2.pending++] = t2 >>> 8 & 255, e2.pending_buf[e2.pending++] = 255 & t2;
      }, gN = (e2, t2, i2, n2) => {
        let s2 = e2.avail_in;
        return s2 > n2 && (s2 = n2), 0 === s2 ? 0 : (e2.avail_in -= s2, t2.set(e2.input.subarray(e2.next_in, e2.next_in + s2), i2), 1 === e2.state.wrap ? e2.adler = AO(e2.adler, t2, s2, i2) : 2 === e2.state.wrap && (e2.adler = wO(e2.adler, t2, s2, i2)), e2.next_in += s2, e2.total_in += s2, s2);
      }, SN = (e2, t2) => {
        let i2, n2, s2 = e2.max_chain_length, r2 = e2.strstart, o2 = e2.prev_length, a2 = e2.nice_match;
        const c2 = e2.strstart > e2.w_size - oN ? e2.strstart - (e2.w_size - oN) : 0, d2 = e2.window, l2 = e2.w_mask, u2 = e2.prev, h2 = e2.strstart + rN;
        let p2 = d2[r2 + o2 - 1], _2 = d2[r2 + o2];
        e2.prev_length >= e2.good_match && (s2 >>= 2), a2 > e2.lookahead && (a2 = e2.lookahead);
        do {
          if (i2 = t2, d2[i2 + o2] === _2 && d2[i2 + o2 - 1] === p2 && d2[i2] === d2[r2] && d2[++i2] === d2[r2 + 1]) {
            r2 += 2, i2++;
            do {
            } while (d2[++r2] === d2[++i2] && d2[++r2] === d2[++i2] && d2[++r2] === d2[++i2] && d2[++r2] === d2[++i2] && d2[++r2] === d2[++i2] && d2[++r2] === d2[++i2] && d2[++r2] === d2[++i2] && d2[++r2] === d2[++i2] && r2 < h2);
            if (n2 = rN - (h2 - r2), r2 = h2 - rN, n2 > o2) {
              if (e2.match_start = t2, o2 = n2, n2 >= a2)
                break;
              p2 = d2[r2 + o2 - 1], _2 = d2[r2 + o2];
            }
          }
        } while ((t2 = u2[t2 & l2]) > c2 && 0 != --s2);
        return o2 <= e2.lookahead ? o2 : e2.lookahead;
      }, RN = (e2) => {
        const t2 = e2.w_size;
        let i2, n2, s2;
        do {
          if (n2 = e2.window_size - e2.lookahead - e2.strstart, e2.strstart >= t2 + (t2 - oN) && (e2.window.set(e2.window.subarray(t2, t2 + t2 - n2), 0), e2.match_start -= t2, e2.strstart -= t2, e2.block_start -= t2, e2.insert > e2.strstart && (e2.insert = e2.strstart), pN(e2), n2 += t2), 0 === e2.strm.avail_in)
            break;
          if (i2 = gN(e2.strm, e2.window, e2.strstart + e2.lookahead, n2), e2.lookahead += i2, e2.lookahead + e2.insert >= 3)
            for (s2 = e2.strstart - e2.insert, e2.ins_h = e2.window[s2], e2.ins_h = _N(e2, e2.ins_h, e2.window[s2 + 1]); e2.insert && (e2.ins_h = _N(e2, e2.ins_h, e2.window[s2 + 3 - 1]), e2.prev[s2 & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = s2, s2++, e2.insert--, !(e2.lookahead + e2.insert < 3)); )
              ;
        } while (e2.lookahead < oN && 0 !== e2.strm.avail_in);
      }, CN = (e2, t2) => {
        let i2, n2, s2, r2 = e2.pending_buf_size - 5 > e2.w_size ? e2.w_size : e2.pending_buf_size - 5, o2 = 0, a2 = e2.strm.avail_in;
        do {
          if (i2 = 65535, s2 = e2.bi_valid + 42 >> 3, e2.strm.avail_out < s2)
            break;
          if (s2 = e2.strm.avail_out - s2, n2 = e2.strstart - e2.block_start, i2 > n2 + e2.strm.avail_in && (i2 = n2 + e2.strm.avail_in), i2 > s2 && (i2 = s2), i2 < r2 && (0 === i2 && t2 !== FO || t2 === UO || i2 !== n2 + e2.strm.avail_in))
            break;
          o2 = t2 === FO && i2 === n2 + e2.strm.avail_in ? 1 : 0, PO(e2, 0, 0, o2), e2.pending_buf[e2.pending - 4] = i2, e2.pending_buf[e2.pending - 3] = i2 >> 8, e2.pending_buf[e2.pending - 2] = ~i2, e2.pending_buf[e2.pending - 1] = ~i2 >> 8, EN(e2.strm), n2 && (n2 > i2 && (n2 = i2), e2.strm.output.set(e2.window.subarray(e2.block_start, e2.block_start + n2), e2.strm.next_out), e2.strm.next_out += n2, e2.strm.avail_out -= n2, e2.strm.total_out += n2, e2.block_start += n2, i2 -= n2), i2 && (gN(e2.strm, e2.strm.output, e2.strm.next_out, i2), e2.strm.next_out += i2, e2.strm.avail_out -= i2, e2.strm.total_out += i2);
        } while (0 === o2);
        return a2 -= e2.strm.avail_in, a2 && (a2 >= e2.w_size ? (e2.matches = 2, e2.window.set(e2.strm.input.subarray(e2.strm.next_in - e2.w_size, e2.strm.next_in), 0), e2.strstart = e2.w_size, e2.insert = e2.strstart) : (e2.window_size - e2.strstart <= a2 && (e2.strstart -= e2.w_size, e2.window.set(e2.window.subarray(e2.w_size, e2.w_size + e2.strstart), 0), e2.matches < 2 && e2.matches++, e2.insert > e2.strstart && (e2.insert = e2.strstart)), e2.window.set(e2.strm.input.subarray(e2.strm.next_in - a2, e2.strm.next_in), e2.strstart), e2.strstart += a2, e2.insert += a2 > e2.w_size - e2.insert ? e2.w_size - e2.insert : a2), e2.block_start = e2.strstart), e2.high_water < e2.strstart && (e2.high_water = e2.strstart), o2 ? 4 : t2 !== UO && t2 !== FO && 0 === e2.strm.avail_in && e2.strstart === e2.block_start ? 2 : (s2 = e2.window_size - e2.strstart, e2.strm.avail_in > s2 && e2.block_start >= e2.w_size && (e2.block_start -= e2.w_size, e2.strstart -= e2.w_size, e2.window.set(e2.window.subarray(e2.w_size, e2.w_size + e2.strstart), 0), e2.matches < 2 && e2.matches++, s2 += e2.w_size, e2.insert > e2.strstart && (e2.insert = e2.strstart)), s2 > e2.strm.avail_in && (s2 = e2.strm.avail_in), s2 && (gN(e2.strm, e2.window, e2.strstart, s2), e2.strstart += s2, e2.insert += s2 > e2.w_size - e2.insert ? e2.w_size - e2.insert : s2), e2.high_water < e2.strstart && (e2.high_water = e2.strstart), s2 = e2.bi_valid + 42 >> 3, s2 = e2.pending_buf_size - s2 > 65535 ? 65535 : e2.pending_buf_size - s2, r2 = s2 > e2.w_size ? e2.w_size : s2, n2 = e2.strstart - e2.block_start, (n2 >= r2 || (n2 || t2 === FO) && t2 !== UO && 0 === e2.strm.avail_in && n2 <= s2) && (i2 = n2 > s2 ? s2 : n2, o2 = t2 === FO && 0 === e2.strm.avail_in && i2 === n2 ? 1 : 0, PO(e2, e2.block_start, i2, o2), e2.block_start += i2, EN(e2.strm)), o2 ? 3 : 1);
      }, IN = (e2, t2) => {
        let i2, n2;
        for (; ; ) {
          if (e2.lookahead < oN) {
            if (RN(e2), e2.lookahead < oN && t2 === UO)
              return 1;
            if (0 === e2.lookahead)
              break;
          }
          if (i2 = 0, e2.lookahead >= 3 && (e2.ins_h = _N(e2, e2.ins_h, e2.window[e2.strstart + 3 - 1]), i2 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart), 0 !== i2 && e2.strstart - i2 <= e2.w_size - oN && (e2.match_length = SN(e2, i2)), e2.match_length >= 3)
            if (n2 = kO(e2, e2.strstart - e2.match_start, e2.match_length - 3), e2.lookahead -= e2.match_length, e2.match_length <= e2.max_lazy_match && e2.lookahead >= 3) {
              e2.match_length--;
              do {
                e2.strstart++, e2.ins_h = _N(e2, e2.ins_h, e2.window[e2.strstart + 3 - 1]), i2 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart;
              } while (0 != --e2.match_length);
              e2.strstart++;
            } else
              e2.strstart += e2.match_length, e2.match_length = 0, e2.ins_h = e2.window[e2.strstart], e2.ins_h = _N(e2, e2.ins_h, e2.window[e2.strstart + 1]);
          else
            n2 = kO(e2, 0, e2.window[e2.strstart]), e2.lookahead--, e2.strstart++;
          if (n2 && (mN(e2, false), 0 === e2.strm.avail_out))
            return 1;
        }
        return e2.insert = e2.strstart < 2 ? e2.strstart : 2, t2 === FO ? (mN(e2, true), 0 === e2.strm.avail_out ? 3 : 4) : e2.sym_next && (mN(e2, false), 0 === e2.strm.avail_out) ? 1 : 2;
      }, vN = (e2, t2) => {
        let i2, n2, s2;
        for (; ; ) {
          if (e2.lookahead < oN) {
            if (RN(e2), e2.lookahead < oN && t2 === UO)
              return 1;
            if (0 === e2.lookahead)
              break;
          }
          if (i2 = 0, e2.lookahead >= 3 && (e2.ins_h = _N(e2, e2.ins_h, e2.window[e2.strstart + 3 - 1]), i2 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart), e2.prev_length = e2.match_length, e2.prev_match = e2.match_start, e2.match_length = 2, 0 !== i2 && e2.prev_length < e2.max_lazy_match && e2.strstart - i2 <= e2.w_size - oN && (e2.match_length = SN(e2, i2), e2.match_length <= 5 && (e2.strategy === qO || 3 === e2.match_length && e2.strstart - e2.match_start > 4096) && (e2.match_length = 2)), e2.prev_length >= 3 && e2.match_length <= e2.prev_length) {
            s2 = e2.strstart + e2.lookahead - 3, n2 = kO(e2, e2.strstart - 1 - e2.prev_match, e2.prev_length - 3), e2.lookahead -= e2.prev_length - 1, e2.prev_length -= 2;
            do {
              ++e2.strstart <= s2 && (e2.ins_h = _N(e2, e2.ins_h, e2.window[e2.strstart + 3 - 1]), i2 = e2.prev[e2.strstart & e2.w_mask] = e2.head[e2.ins_h], e2.head[e2.ins_h] = e2.strstart);
            } while (0 != --e2.prev_length);
            if (e2.match_available = 0, e2.match_length = 2, e2.strstart++, n2 && (mN(e2, false), 0 === e2.strm.avail_out))
              return 1;
          } else if (e2.match_available) {
            if (n2 = kO(e2, 0, e2.window[e2.strstart - 1]), n2 && mN(e2, false), e2.strstart++, e2.lookahead--, 0 === e2.strm.avail_out)
              return 1;
          } else
            e2.match_available = 1, e2.strstart++, e2.lookahead--;
        }
        return e2.match_available && (n2 = kO(e2, 0, e2.window[e2.strstart - 1]), e2.match_available = 0), e2.insert = e2.strstart < 2 ? e2.strstart : 2, t2 === FO ? (mN(e2, true), 0 === e2.strm.avail_out ? 3 : 4) : e2.sym_next && (mN(e2, false), 0 === e2.strm.avail_out) ? 1 : 2;
      };
      function yN(e2, t2, i2, n2, s2) {
        this.good_length = e2, this.max_lazy = t2, this.nice_length = i2, this.max_chain = n2, this.func = s2;
      }
      const AN = [new yN(0, 0, 0, 0, CN), new yN(4, 4, 8, 4, IN), new yN(4, 5, 16, 8, IN), new yN(4, 6, 32, 32, IN), new yN(4, 4, 16, 16, vN), new yN(8, 16, 32, 32, vN), new yN(8, 16, 128, 128, vN), new yN(8, 32, 128, 256, vN), new yN(32, 128, 258, 1024, vN), new yN(32, 258, 258, 4096, vN)];
      function bN() {
        this.strm = null, this.status = 0, this.pending_buf = null, this.pending_buf_size = 0, this.pending_out = 0, this.pending = 0, this.wrap = 0, this.gzhead = null, this.gzindex = 0, this.method = $O, this.last_flush = -1, this.w_size = 0, this.w_bits = 0, this.w_mask = 0, this.window = null, this.window_size = 0, this.prev = null, this.head = null, this.ins_h = 0, this.hash_size = 0, this.hash_bits = 0, this.hash_mask = 0, this.hash_shift = 0, this.block_start = 0, this.match_length = 0, this.prev_match = 0, this.match_available = 0, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = 0, this.max_chain_length = 0, this.max_lazy_match = 0, this.level = 0, this.strategy = 0, this.good_match = 0, this.nice_match = 0, this.dyn_ltree = new Uint16Array(2 * nN), this.dyn_dtree = new Uint16Array(2 * (2 * tN + 1)), this.bl_tree = new Uint16Array(2 * (2 * iN + 1)), hN(this.dyn_ltree), hN(this.dyn_dtree), hN(this.bl_tree), this.l_desc = null, this.d_desc = null, this.bl_desc = null, this.bl_count = new Uint16Array(sN + 1), this.heap = new Uint16Array(2 * eN + 1), hN(this.heap), this.heap_len = 0, this.heap_max = 0, this.depth = new Uint16Array(2 * eN + 1), hN(this.depth), this.sym_buf = 0, this.lit_bufsize = 0, this.sym_next = 0, this.sym_end = 0, this.opt_len = 0, this.static_len = 0, this.matches = 0, this.insert = 0, this.bi_buf = 0, this.bi_valid = 0;
      }
      const wN = (e2) => {
        if (!e2)
          return 1;
        const t2 = e2.state;
        return !t2 || t2.strm !== e2 || t2.status !== aN && 57 !== t2.status && 69 !== t2.status && 73 !== t2.status && 91 !== t2.status && 103 !== t2.status && t2.status !== cN && t2.status !== dN ? 1 : 0;
      }, ON = (e2) => {
        if (wN(e2))
          return lN(e2, WO);
        e2.total_in = e2.total_out = 0, e2.data_type = ZO;
        const t2 = e2.state;
        return t2.pending = 0, t2.pending_out = 0, t2.wrap < 0 && (t2.wrap = -t2.wrap), t2.status = 2 === t2.wrap ? 57 : t2.wrap ? aN : cN, e2.adler = 2 === t2.wrap ? 0 : 1, t2.last_flush = -2, DO(t2), jO;
      }, NN = (e2) => {
        const t2 = ON(e2);
        var i2;
        return t2 === jO && ((i2 = e2.state).window_size = 2 * i2.w_size, hN(i2.head), i2.max_lazy_match = AN[i2.level].max_lazy, i2.good_match = AN[i2.level].good_length, i2.nice_match = AN[i2.level].nice_length, i2.max_chain_length = AN[i2.level].max_chain, i2.strstart = 0, i2.block_start = 0, i2.lookahead = 0, i2.insert = 0, i2.match_length = i2.prev_length = 2, i2.match_available = 0, i2.ins_h = 0), t2;
      }, DN = (e2, t2, i2, n2, s2, r2) => {
        if (!e2)
          return WO;
        let o2 = 1;
        if (t2 === YO && (t2 = 6), n2 < 0 ? (o2 = 0, n2 = -n2) : n2 > 15 && (o2 = 2, n2 -= 16), s2 < 1 || s2 > 9 || i2 !== $O || n2 < 8 || n2 > 15 || t2 < 0 || t2 > 9 || r2 < 0 || r2 > XO || 8 === n2 && 1 !== o2)
          return lN(e2, WO);
        8 === n2 && (n2 = 9);
        const a2 = new bN();
        return e2.state = a2, a2.strm = e2, a2.status = aN, a2.wrap = o2, a2.gzhead = null, a2.w_bits = n2, a2.w_size = 1 << a2.w_bits, a2.w_mask = a2.w_size - 1, a2.hash_bits = s2 + 7, a2.hash_size = 1 << a2.hash_bits, a2.hash_mask = a2.hash_size - 1, a2.hash_shift = ~~((a2.hash_bits + 3 - 1) / 3), a2.window = new Uint8Array(2 * a2.w_size), a2.head = new Uint16Array(a2.hash_size), a2.prev = new Uint16Array(a2.w_size), a2.lit_bufsize = 1 << s2 + 6, a2.pending_buf_size = 4 * a2.lit_bufsize, a2.pending_buf = new Uint8Array(a2.pending_buf_size), a2.sym_buf = a2.lit_bufsize, a2.sym_end = 3 * (a2.lit_bufsize - 1), a2.level = t2, a2.strategy = r2, a2.method = i2, NN(e2);
      };
      var PN = (e2, t2) => {
        if (wN(e2) || t2 > BO || t2 < 0)
          return e2 ? lN(e2, WO) : WO;
        const i2 = e2.state;
        if (!e2.output || 0 !== e2.avail_in && !e2.input || i2.status === dN && t2 !== FO)
          return lN(e2, 0 === e2.avail_out ? KO : WO);
        const n2 = i2.last_flush;
        if (i2.last_flush = t2, 0 !== i2.pending) {
          if (EN(e2), 0 === e2.avail_out)
            return i2.last_flush = -1, jO;
        } else if (0 === e2.avail_in && uN(t2) <= uN(n2) && t2 !== FO)
          return lN(e2, KO);
        if (i2.status === dN && 0 !== e2.avail_in)
          return lN(e2, KO);
        if (i2.status === aN && 0 === i2.wrap && (i2.status = cN), i2.status === aN) {
          let t3 = $O + (i2.w_bits - 8 << 4) << 8, n3 = -1;
          if (n3 = i2.strategy >= JO || i2.level < 2 ? 0 : i2.level < 6 ? 1 : 6 === i2.level ? 2 : 3, t3 |= n3 << 6, 0 !== i2.strstart && (t3 |= 32), t3 += 31 - t3 % 31, TN(i2, t3), 0 !== i2.strstart && (TN(i2, e2.adler >>> 16), TN(i2, 65535 & e2.adler)), e2.adler = 1, i2.status = cN, EN(e2), 0 !== i2.pending)
            return i2.last_flush = -1, jO;
        }
        if (57 === i2.status) {
          if (e2.adler = 0, fN(i2, 31), fN(i2, 139), fN(i2, 8), i2.gzhead)
            fN(i2, (i2.gzhead.text ? 1 : 0) + (i2.gzhead.hcrc ? 2 : 0) + (i2.gzhead.extra ? 4 : 0) + (i2.gzhead.name ? 8 : 0) + (i2.gzhead.comment ? 16 : 0)), fN(i2, 255 & i2.gzhead.time), fN(i2, i2.gzhead.time >> 8 & 255), fN(i2, i2.gzhead.time >> 16 & 255), fN(i2, i2.gzhead.time >> 24 & 255), fN(i2, 9 === i2.level ? 2 : i2.strategy >= JO || i2.level < 2 ? 4 : 0), fN(i2, 255 & i2.gzhead.os), i2.gzhead.extra && i2.gzhead.extra.length && (fN(i2, 255 & i2.gzhead.extra.length), fN(i2, i2.gzhead.extra.length >> 8 & 255)), i2.gzhead.hcrc && (e2.adler = wO(e2.adler, i2.pending_buf, i2.pending, 0)), i2.gzindex = 0, i2.status = 69;
          else if (fN(i2, 0), fN(i2, 0), fN(i2, 0), fN(i2, 0), fN(i2, 0), fN(i2, 9 === i2.level ? 2 : i2.strategy >= JO || i2.level < 2 ? 4 : 0), fN(i2, 3), i2.status = cN, EN(e2), 0 !== i2.pending)
            return i2.last_flush = -1, jO;
        }
        if (69 === i2.status) {
          if (i2.gzhead.extra) {
            let t3 = i2.pending, n3 = (65535 & i2.gzhead.extra.length) - i2.gzindex;
            for (; i2.pending + n3 > i2.pending_buf_size; ) {
              let s3 = i2.pending_buf_size - i2.pending;
              if (i2.pending_buf.set(i2.gzhead.extra.subarray(i2.gzindex, i2.gzindex + s3), i2.pending), i2.pending = i2.pending_buf_size, i2.gzhead.hcrc && i2.pending > t3 && (e2.adler = wO(e2.adler, i2.pending_buf, i2.pending - t3, t3)), i2.gzindex += s3, EN(e2), 0 !== i2.pending)
                return i2.last_flush = -1, jO;
              t3 = 0, n3 -= s3;
            }
            let s2 = new Uint8Array(i2.gzhead.extra);
            i2.pending_buf.set(s2.subarray(i2.gzindex, i2.gzindex + n3), i2.pending), i2.pending += n3, i2.gzhead.hcrc && i2.pending > t3 && (e2.adler = wO(e2.adler, i2.pending_buf, i2.pending - t3, t3)), i2.gzindex = 0;
          }
          i2.status = 73;
        }
        if (73 === i2.status) {
          if (i2.gzhead.name) {
            let t3, n3 = i2.pending;
            do {
              if (i2.pending === i2.pending_buf_size) {
                if (i2.gzhead.hcrc && i2.pending > n3 && (e2.adler = wO(e2.adler, i2.pending_buf, i2.pending - n3, n3)), EN(e2), 0 !== i2.pending)
                  return i2.last_flush = -1, jO;
                n3 = 0;
              }
              t3 = i2.gzindex < i2.gzhead.name.length ? 255 & i2.gzhead.name.charCodeAt(i2.gzindex++) : 0, fN(i2, t3);
            } while (0 !== t3);
            i2.gzhead.hcrc && i2.pending > n3 && (e2.adler = wO(e2.adler, i2.pending_buf, i2.pending - n3, n3)), i2.gzindex = 0;
          }
          i2.status = 91;
        }
        if (91 === i2.status) {
          if (i2.gzhead.comment) {
            let t3, n3 = i2.pending;
            do {
              if (i2.pending === i2.pending_buf_size) {
                if (i2.gzhead.hcrc && i2.pending > n3 && (e2.adler = wO(e2.adler, i2.pending_buf, i2.pending - n3, n3)), EN(e2), 0 !== i2.pending)
                  return i2.last_flush = -1, jO;
                n3 = 0;
              }
              t3 = i2.gzindex < i2.gzhead.comment.length ? 255 & i2.gzhead.comment.charCodeAt(i2.gzindex++) : 0, fN(i2, t3);
            } while (0 !== t3);
            i2.gzhead.hcrc && i2.pending > n3 && (e2.adler = wO(e2.adler, i2.pending_buf, i2.pending - n3, n3));
          }
          i2.status = 103;
        }
        if (103 === i2.status) {
          if (i2.gzhead.hcrc) {
            if (i2.pending + 2 > i2.pending_buf_size && (EN(e2), 0 !== i2.pending))
              return i2.last_flush = -1, jO;
            fN(i2, 255 & e2.adler), fN(i2, e2.adler >> 8 & 255), e2.adler = 0;
          }
          if (i2.status = cN, EN(e2), 0 !== i2.pending)
            return i2.last_flush = -1, jO;
        }
        if (0 !== e2.avail_in || 0 !== i2.lookahead || t2 !== UO && i2.status !== dN) {
          let n3 = 0 === i2.level ? CN(i2, t2) : i2.strategy === JO ? ((e3, t3) => {
            let i3;
            for (; ; ) {
              if (0 === e3.lookahead && (RN(e3), 0 === e3.lookahead)) {
                if (t3 === UO)
                  return 1;
                break;
              }
              if (e3.match_length = 0, i3 = kO(e3, 0, e3.window[e3.strstart]), e3.lookahead--, e3.strstart++, i3 && (mN(e3, false), 0 === e3.strm.avail_out))
                return 1;
            }
            return e3.insert = 0, t3 === FO ? (mN(e3, true), 0 === e3.strm.avail_out ? 3 : 4) : e3.sym_next && (mN(e3, false), 0 === e3.strm.avail_out) ? 1 : 2;
          })(i2, t2) : i2.strategy === zO ? ((e3, t3) => {
            let i3, n4, s2, r2;
            const o2 = e3.window;
            for (; ; ) {
              if (e3.lookahead <= rN) {
                if (RN(e3), e3.lookahead <= rN && t3 === UO)
                  return 1;
                if (0 === e3.lookahead)
                  break;
              }
              if (e3.match_length = 0, e3.lookahead >= 3 && e3.strstart > 0 && (s2 = e3.strstart - 1, n4 = o2[s2], n4 === o2[++s2] && n4 === o2[++s2] && n4 === o2[++s2])) {
                r2 = e3.strstart + rN;
                do {
                } while (n4 === o2[++s2] && n4 === o2[++s2] && n4 === o2[++s2] && n4 === o2[++s2] && n4 === o2[++s2] && n4 === o2[++s2] && n4 === o2[++s2] && n4 === o2[++s2] && s2 < r2);
                e3.match_length = rN - (r2 - s2), e3.match_length > e3.lookahead && (e3.match_length = e3.lookahead);
              }
              if (e3.match_length >= 3 ? (i3 = kO(e3, 1, e3.match_length - 3), e3.lookahead -= e3.match_length, e3.strstart += e3.match_length, e3.match_length = 0) : (i3 = kO(e3, 0, e3.window[e3.strstart]), e3.lookahead--, e3.strstart++), i3 && (mN(e3, false), 0 === e3.strm.avail_out))
                return 1;
            }
            return e3.insert = 0, t3 === FO ? (mN(e3, true), 0 === e3.strm.avail_out ? 3 : 4) : e3.sym_next && (mN(e3, false), 0 === e3.strm.avail_out) ? 1 : 2;
          })(i2, t2) : AN[i2.level].func(i2, t2);
          if (3 !== n3 && 4 !== n3 || (i2.status = dN), 1 === n3 || 3 === n3)
            return 0 === e2.avail_out && (i2.last_flush = -1), jO;
          if (2 === n3 && (t2 === xO ? MO(i2) : t2 !== BO && (PO(i2, 0, 0, false), t2 === VO && (hN(i2.head), 0 === i2.lookahead && (i2.strstart = 0, i2.block_start = 0, i2.insert = 0))), EN(e2), 0 === e2.avail_out))
            return i2.last_flush = -1, jO;
        }
        return t2 !== FO ? jO : i2.wrap <= 0 ? GO : (2 === i2.wrap ? (fN(i2, 255 & e2.adler), fN(i2, e2.adler >> 8 & 255), fN(i2, e2.adler >> 16 & 255), fN(i2, e2.adler >> 24 & 255), fN(i2, 255 & e2.total_in), fN(i2, e2.total_in >> 8 & 255), fN(i2, e2.total_in >> 16 & 255), fN(i2, e2.total_in >> 24 & 255)) : (TN(i2, e2.adler >>> 16), TN(i2, 65535 & e2.adler)), EN(e2), i2.wrap > 0 && (i2.wrap = -i2.wrap), 0 !== i2.pending ? jO : GO);
      }, LN = (e2, t2) => {
        let i2 = t2.length;
        if (wN(e2))
          return WO;
        const n2 = e2.state, s2 = n2.wrap;
        if (2 === s2 || 1 === s2 && n2.status !== aN || n2.lookahead)
          return WO;
        if (1 === s2 && (e2.adler = AO(e2.adler, t2, i2, 0)), n2.wrap = 0, i2 >= n2.w_size) {
          0 === s2 && (hN(n2.head), n2.strstart = 0, n2.block_start = 0, n2.insert = 0);
          let e3 = new Uint8Array(n2.w_size);
          e3.set(t2.subarray(i2 - n2.w_size, i2), 0), t2 = e3, i2 = n2.w_size;
        }
        const r2 = e2.avail_in, o2 = e2.next_in, a2 = e2.input;
        for (e2.avail_in = i2, e2.next_in = 0, e2.input = t2, RN(n2); n2.lookahead >= 3; ) {
          let e3 = n2.strstart, t3 = n2.lookahead - 2;
          do {
            n2.ins_h = _N(n2, n2.ins_h, n2.window[e3 + 3 - 1]), n2.prev[e3 & n2.w_mask] = n2.head[n2.ins_h], n2.head[n2.ins_h] = e3, e3++;
          } while (--t3);
          n2.strstart = e3, n2.lookahead = 2, RN(n2);
        }
        return n2.strstart += n2.lookahead, n2.block_start = n2.strstart, n2.insert = n2.lookahead, n2.lookahead = 0, n2.match_length = n2.prev_length = 2, n2.match_available = 0, e2.next_in = o2, e2.input = a2, e2.avail_in = r2, n2.wrap = s2, jO;
      }, kN = { deflateInit: (e2, t2) => DN(e2, t2, $O, 15, 8, QO), deflateInit2: DN, deflateReset: NN, deflateResetKeep: ON, deflateSetHeader: (e2, t2) => wN(e2) || 2 !== e2.state.wrap ? WO : (e2.state.gzhead = t2, jO), deflate: PN, deflateEnd: (e2) => {
        if (wN(e2))
          return WO;
        const t2 = e2.state.status;
        return e2.state = null, t2 === cN ? lN(e2, HO) : jO;
      }, deflateSetDictionary: LN, deflateInfo: "pako deflate (from Nodeca project)" };
      const MN = (e2, t2) => Object.prototype.hasOwnProperty.call(e2, t2);
      var UN = { assign: function(e2) {
        const t2 = Array.prototype.slice.call(arguments, 1);
        for (; t2.length; ) {
          const i2 = t2.shift();
          if (i2) {
            if ("object" != typeof i2)
              throw new TypeError(i2 + "must be non-object");
            for (const t3 in i2)
              MN(i2, t3) && (e2[t3] = i2[t3]);
          }
        }
        return e2;
      }, flattenChunks: (e2) => {
        let t2 = 0;
        for (let i3 = 0, n2 = e2.length; i3 < n2; i3++)
          t2 += e2[i3].length;
        const i2 = new Uint8Array(t2);
        for (let t3 = 0, n2 = 0, s2 = e2.length; t3 < s2; t3++) {
          let s3 = e2[t3];
          i2.set(s3, n2), n2 += s3.length;
        }
        return i2;
      } };
      let xN = true;
      try {
        String.fromCharCode.apply(null, new Uint8Array(1));
      } catch (e2) {
        xN = false;
      }
      const VN = new Uint8Array(256);
      for (let e2 = 0; e2 < 256; e2++)
        VN[e2] = e2 >= 252 ? 6 : e2 >= 248 ? 5 : e2 >= 240 ? 4 : e2 >= 224 ? 3 : e2 >= 192 ? 2 : 1;
      VN[254] = VN[254] = 1;
      var FN = { string2buf: (e2) => {
        if ("function" == typeof TextEncoder && TextEncoder.prototype.encode)
          return new TextEncoder().encode(e2);
        let t2, i2, n2, s2, r2, o2 = e2.length, a2 = 0;
        for (s2 = 0; s2 < o2; s2++)
          i2 = e2.charCodeAt(s2), 55296 == (64512 & i2) && s2 + 1 < o2 && (n2 = e2.charCodeAt(s2 + 1), 56320 == (64512 & n2) && (i2 = 65536 + (i2 - 55296 << 10) + (n2 - 56320), s2++)), a2 += i2 < 128 ? 1 : i2 < 2048 ? 2 : i2 < 65536 ? 3 : 4;
        for (t2 = new Uint8Array(a2), r2 = 0, s2 = 0; r2 < a2; s2++)
          i2 = e2.charCodeAt(s2), 55296 == (64512 & i2) && s2 + 1 < o2 && (n2 = e2.charCodeAt(s2 + 1), 56320 == (64512 & n2) && (i2 = 65536 + (i2 - 55296 << 10) + (n2 - 56320), s2++)), i2 < 128 ? t2[r2++] = i2 : i2 < 2048 ? (t2[r2++] = 192 | i2 >>> 6, t2[r2++] = 128 | 63 & i2) : i2 < 65536 ? (t2[r2++] = 224 | i2 >>> 12, t2[r2++] = 128 | i2 >>> 6 & 63, t2[r2++] = 128 | 63 & i2) : (t2[r2++] = 240 | i2 >>> 18, t2[r2++] = 128 | i2 >>> 12 & 63, t2[r2++] = 128 | i2 >>> 6 & 63, t2[r2++] = 128 | 63 & i2);
        return t2;
      }, buf2string: (e2, t2) => {
        const i2 = t2 || e2.length;
        if ("function" == typeof TextDecoder && TextDecoder.prototype.decode)
          return new TextDecoder().decode(e2.subarray(0, t2));
        let n2, s2;
        const r2 = new Array(2 * i2);
        for (s2 = 0, n2 = 0; n2 < i2; ) {
          let t3 = e2[n2++];
          if (t3 < 128) {
            r2[s2++] = t3;
            continue;
          }
          let o2 = VN[t3];
          if (o2 > 4)
            r2[s2++] = 65533, n2 += o2 - 1;
          else {
            for (t3 &= 2 === o2 ? 31 : 3 === o2 ? 15 : 7; o2 > 1 && n2 < i2; )
              t3 = t3 << 6 | 63 & e2[n2++], o2--;
            o2 > 1 ? r2[s2++] = 65533 : t3 < 65536 ? r2[s2++] = t3 : (t3 -= 65536, r2[s2++] = 55296 | t3 >> 10 & 1023, r2[s2++] = 56320 | 1023 & t3);
          }
        }
        return ((e3, t3) => {
          if (t3 < 65534 && e3.subarray && xN)
            return String.fromCharCode.apply(null, e3.length === t3 ? e3 : e3.subarray(0, t3));
          let i3 = "";
          for (let n3 = 0; n3 < t3; n3++)
            i3 += String.fromCharCode(e3[n3]);
          return i3;
        })(r2, s2);
      }, utf8border: (e2, t2) => {
        (t2 = t2 || e2.length) > e2.length && (t2 = e2.length);
        let i2 = t2 - 1;
        for (; i2 >= 0 && 128 == (192 & e2[i2]); )
          i2--;
        return i2 < 0 || 0 === i2 ? t2 : i2 + VN[e2[i2]] > t2 ? i2 : t2;
      } };
      var BN = function() {
        this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = "", this.state = null, this.data_type = 2, this.adler = 0;
      };
      const jN = Object.prototype.toString, { Z_NO_FLUSH: GN, Z_SYNC_FLUSH: WN, Z_FULL_FLUSH: HN, Z_FINISH: KN, Z_OK: YN, Z_STREAM_END: qN, Z_DEFAULT_COMPRESSION: JN, Z_DEFAULT_STRATEGY: zN, Z_DEFLATED: XN } = NO;
      function QN(e2) {
        this.options = UN.assign({ level: JN, method: XN, chunkSize: 16384, windowBits: 15, memLevel: 8, strategy: zN }, e2 || {});
        let t2 = this.options;
        t2.raw && t2.windowBits > 0 ? t2.windowBits = -t2.windowBits : t2.gzip && t2.windowBits > 0 && t2.windowBits < 16 && (t2.windowBits += 16), this.err = 0, this.msg = "", this.ended = false, this.chunks = [], this.strm = new BN(), this.strm.avail_out = 0;
        let i2 = kN.deflateInit2(this.strm, t2.level, t2.method, t2.windowBits, t2.memLevel, t2.strategy);
        if (i2 !== YN)
          throw new Error(OO[i2]);
        if (t2.header && kN.deflateSetHeader(this.strm, t2.header), t2.dictionary) {
          let e3;
          if (e3 = "string" == typeof t2.dictionary ? FN.string2buf(t2.dictionary) : "[object ArrayBuffer]" === jN.call(t2.dictionary) ? new Uint8Array(t2.dictionary) : t2.dictionary, i2 = kN.deflateSetDictionary(this.strm, e3), i2 !== YN)
            throw new Error(OO[i2]);
          this._dict_set = true;
        }
      }
      function ZN(e2, t2) {
        const i2 = new QN(t2);
        if (i2.push(e2, true), i2.err)
          throw i2.msg || OO[i2.err];
        return i2.result;
      }
      QN.prototype.push = function(e2, t2) {
        const i2 = this.strm, n2 = this.options.chunkSize;
        let s2, r2;
        if (this.ended)
          return false;
        for (r2 = t2 === ~~t2 ? t2 : true === t2 ? KN : GN, "string" == typeof e2 ? i2.input = FN.string2buf(e2) : "[object ArrayBuffer]" === jN.call(e2) ? i2.input = new Uint8Array(e2) : i2.input = e2, i2.next_in = 0, i2.avail_in = i2.input.length; ; )
          if (0 === i2.avail_out && (i2.output = new Uint8Array(n2), i2.next_out = 0, i2.avail_out = n2), (r2 === WN || r2 === HN) && i2.avail_out <= 6)
            this.onData(i2.output.subarray(0, i2.next_out)), i2.avail_out = 0;
          else {
            if (s2 = kN.deflate(i2, r2), s2 === qN)
              return i2.next_out > 0 && this.onData(i2.output.subarray(0, i2.next_out)), s2 = kN.deflateEnd(this.strm), this.onEnd(s2), this.ended = true, s2 === YN;
            if (0 !== i2.avail_out) {
              if (r2 > 0 && i2.next_out > 0)
                this.onData(i2.output.subarray(0, i2.next_out)), i2.avail_out = 0;
              else if (0 === i2.avail_in)
                break;
            } else
              this.onData(i2.output);
          }
        return true;
      }, QN.prototype.onData = function(e2) {
        this.chunks.push(e2);
      }, QN.prototype.onEnd = function(e2) {
        e2 === YN && (this.result = UN.flattenChunks(this.chunks)), this.chunks = [], this.err = e2, this.msg = this.strm.msg;
      };
      var $N = { Deflate: QN, deflate: ZN, deflateRaw: function(e2, t2) {
        return (t2 = t2 || {}).raw = true, ZN(e2, t2);
      }, gzip: function(e2, t2) {
        return (t2 = t2 || {}).gzip = true, ZN(e2, t2);
      }, constants: NO };
      const eD = 16209;
      var tD = function(e2, t2) {
        let i2, n2, s2, r2, o2, a2, c2, d2, l2, u2, h2, p2, _2, E2, m2, f2, T2, g2, S2, R2, C2, I2, v2, y2;
        const A2 = e2.state;
        i2 = e2.next_in, v2 = e2.input, n2 = i2 + (e2.avail_in - 5), s2 = e2.next_out, y2 = e2.output, r2 = s2 - (t2 - e2.avail_out), o2 = s2 + (e2.avail_out - 257), a2 = A2.dmax, c2 = A2.wsize, d2 = A2.whave, l2 = A2.wnext, u2 = A2.window, h2 = A2.hold, p2 = A2.bits, _2 = A2.lencode, E2 = A2.distcode, m2 = (1 << A2.lenbits) - 1, f2 = (1 << A2.distbits) - 1;
        e:
          do {
            p2 < 15 && (h2 += v2[i2++] << p2, p2 += 8, h2 += v2[i2++] << p2, p2 += 8), T2 = _2[h2 & m2];
            t:
              for (; ; ) {
                if (g2 = T2 >>> 24, h2 >>>= g2, p2 -= g2, g2 = T2 >>> 16 & 255, 0 === g2)
                  y2[s2++] = 65535 & T2;
                else {
                  if (!(16 & g2)) {
                    if (0 == (64 & g2)) {
                      T2 = _2[(65535 & T2) + (h2 & (1 << g2) - 1)];
                      continue t;
                    }
                    if (32 & g2) {
                      A2.mode = 16191;
                      break e;
                    }
                    e2.msg = "invalid literal/length code", A2.mode = eD;
                    break e;
                  }
                  S2 = 65535 & T2, g2 &= 15, g2 && (p2 < g2 && (h2 += v2[i2++] << p2, p2 += 8), S2 += h2 & (1 << g2) - 1, h2 >>>= g2, p2 -= g2), p2 < 15 && (h2 += v2[i2++] << p2, p2 += 8, h2 += v2[i2++] << p2, p2 += 8), T2 = E2[h2 & f2];
                  i:
                    for (; ; ) {
                      if (g2 = T2 >>> 24, h2 >>>= g2, p2 -= g2, g2 = T2 >>> 16 & 255, !(16 & g2)) {
                        if (0 == (64 & g2)) {
                          T2 = E2[(65535 & T2) + (h2 & (1 << g2) - 1)];
                          continue i;
                        }
                        e2.msg = "invalid distance code", A2.mode = eD;
                        break e;
                      }
                      if (R2 = 65535 & T2, g2 &= 15, p2 < g2 && (h2 += v2[i2++] << p2, p2 += 8, p2 < g2 && (h2 += v2[i2++] << p2, p2 += 8)), R2 += h2 & (1 << g2) - 1, R2 > a2) {
                        e2.msg = "invalid distance too far back", A2.mode = eD;
                        break e;
                      }
                      if (h2 >>>= g2, p2 -= g2, g2 = s2 - r2, R2 > g2) {
                        if (g2 = R2 - g2, g2 > d2 && A2.sane) {
                          e2.msg = "invalid distance too far back", A2.mode = eD;
                          break e;
                        }
                        if (C2 = 0, I2 = u2, 0 === l2) {
                          if (C2 += c2 - g2, g2 < S2) {
                            S2 -= g2;
                            do {
                              y2[s2++] = u2[C2++];
                            } while (--g2);
                            C2 = s2 - R2, I2 = y2;
                          }
                        } else if (l2 < g2) {
                          if (C2 += c2 + l2 - g2, g2 -= l2, g2 < S2) {
                            S2 -= g2;
                            do {
                              y2[s2++] = u2[C2++];
                            } while (--g2);
                            if (C2 = 0, l2 < S2) {
                              g2 = l2, S2 -= g2;
                              do {
                                y2[s2++] = u2[C2++];
                              } while (--g2);
                              C2 = s2 - R2, I2 = y2;
                            }
                          }
                        } else if (C2 += l2 - g2, g2 < S2) {
                          S2 -= g2;
                          do {
                            y2[s2++] = u2[C2++];
                          } while (--g2);
                          C2 = s2 - R2, I2 = y2;
                        }
                        for (; S2 > 2; )
                          y2[s2++] = I2[C2++], y2[s2++] = I2[C2++], y2[s2++] = I2[C2++], S2 -= 3;
                        S2 && (y2[s2++] = I2[C2++], S2 > 1 && (y2[s2++] = I2[C2++]));
                      } else {
                        C2 = s2 - R2;
                        do {
                          y2[s2++] = y2[C2++], y2[s2++] = y2[C2++], y2[s2++] = y2[C2++], S2 -= 3;
                        } while (S2 > 2);
                        S2 && (y2[s2++] = y2[C2++], S2 > 1 && (y2[s2++] = y2[C2++]));
                      }
                      break;
                    }
                }
                break;
              }
          } while (i2 < n2 && s2 < o2);
        S2 = p2 >> 3, i2 -= S2, p2 -= S2 << 3, h2 &= (1 << p2) - 1, e2.next_in = i2, e2.next_out = s2, e2.avail_in = i2 < n2 ? n2 - i2 + 5 : 5 - (i2 - n2), e2.avail_out = s2 < o2 ? o2 - s2 + 257 : 257 - (s2 - o2), A2.hold = h2, A2.bits = p2;
      };
      const iD = 15, nD = new Uint16Array([3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0]), sD = new Uint8Array([16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78]), rD = new Uint16Array([1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0]), oD = new Uint8Array([16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64]);
      var aD = (e2, t2, i2, n2, s2, r2, o2, a2) => {
        const c2 = a2.bits;
        let d2, l2, u2, h2, p2, _2, E2 = 0, m2 = 0, f2 = 0, T2 = 0, g2 = 0, S2 = 0, R2 = 0, C2 = 0, I2 = 0, v2 = 0, y2 = null;
        const A2 = new Uint16Array(16), b2 = new Uint16Array(16);
        let w2, O2, N2, D2 = null;
        for (E2 = 0; E2 <= iD; E2++)
          A2[E2] = 0;
        for (m2 = 0; m2 < n2; m2++)
          A2[t2[i2 + m2]]++;
        for (g2 = c2, T2 = iD; T2 >= 1 && 0 === A2[T2]; T2--)
          ;
        if (g2 > T2 && (g2 = T2), 0 === T2)
          return s2[r2++] = 20971520, s2[r2++] = 20971520, a2.bits = 1, 0;
        for (f2 = 1; f2 < T2 && 0 === A2[f2]; f2++)
          ;
        for (g2 < f2 && (g2 = f2), C2 = 1, E2 = 1; E2 <= iD; E2++)
          if (C2 <<= 1, C2 -= A2[E2], C2 < 0)
            return -1;
        if (C2 > 0 && (0 === e2 || 1 !== T2))
          return -1;
        for (b2[1] = 0, E2 = 1; E2 < iD; E2++)
          b2[E2 + 1] = b2[E2] + A2[E2];
        for (m2 = 0; m2 < n2; m2++)
          0 !== t2[i2 + m2] && (o2[b2[t2[i2 + m2]]++] = m2);
        if (0 === e2 ? (y2 = D2 = o2, _2 = 20) : 1 === e2 ? (y2 = nD, D2 = sD, _2 = 257) : (y2 = rD, D2 = oD, _2 = 0), v2 = 0, m2 = 0, E2 = f2, p2 = r2, S2 = g2, R2 = 0, u2 = -1, I2 = 1 << g2, h2 = I2 - 1, 1 === e2 && I2 > 852 || 2 === e2 && I2 > 592)
          return 1;
        for (; ; ) {
          w2 = E2 - R2, o2[m2] + 1 < _2 ? (O2 = 0, N2 = o2[m2]) : o2[m2] >= _2 ? (O2 = D2[o2[m2] - _2], N2 = y2[o2[m2] - _2]) : (O2 = 96, N2 = 0), d2 = 1 << E2 - R2, l2 = 1 << S2, f2 = l2;
          do {
            l2 -= d2, s2[p2 + (v2 >> R2) + l2] = w2 << 24 | O2 << 16 | N2 | 0;
          } while (0 !== l2);
          for (d2 = 1 << E2 - 1; v2 & d2; )
            d2 >>= 1;
          if (0 !== d2 ? (v2 &= d2 - 1, v2 += d2) : v2 = 0, m2++, 0 == --A2[E2]) {
            if (E2 === T2)
              break;
            E2 = t2[i2 + o2[m2]];
          }
          if (E2 > g2 && (v2 & h2) !== u2) {
            for (0 === R2 && (R2 = g2), p2 += f2, S2 = E2 - R2, C2 = 1 << S2; S2 + R2 < T2 && (C2 -= A2[S2 + R2], !(C2 <= 0)); )
              S2++, C2 <<= 1;
            if (I2 += 1 << S2, 1 === e2 && I2 > 852 || 2 === e2 && I2 > 592)
              return 1;
            u2 = v2 & h2, s2[u2] = g2 << 24 | S2 << 16 | p2 - r2 | 0;
          }
        }
        return 0 !== v2 && (s2[p2 + v2] = E2 - R2 << 24 | 64 << 16 | 0), a2.bits = g2, 0;
      };
      const { Z_FINISH: cD, Z_BLOCK: dD, Z_TREES: lD, Z_OK: uD, Z_STREAM_END: hD, Z_NEED_DICT: pD, Z_STREAM_ERROR: _D, Z_DATA_ERROR: ED, Z_MEM_ERROR: mD, Z_BUF_ERROR: fD, Z_DEFLATED: TD } = NO, gD = 16180, SD = 16190, RD = 16191, CD = 16192, ID = 16194, vD = 16199, yD = 16200, AD = 16206, bD = 16209, wD = (e2) => (e2 >>> 24 & 255) + (e2 >>> 8 & 65280) + ((65280 & e2) << 8) + ((255 & e2) << 24);
      function OD() {
        this.strm = null, this.mode = 0, this.last = false, this.wrap = 0, this.havedict = false, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new Uint16Array(320), this.work = new Uint16Array(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;
      }
      const ND = (e2) => {
        if (!e2)
          return 1;
        const t2 = e2.state;
        return !t2 || t2.strm !== e2 || t2.mode < gD || t2.mode > 16211 ? 1 : 0;
      }, DD = (e2) => {
        if (ND(e2))
          return _D;
        const t2 = e2.state;
        return e2.total_in = e2.total_out = t2.total = 0, e2.msg = "", t2.wrap && (e2.adler = 1 & t2.wrap), t2.mode = gD, t2.last = 0, t2.havedict = 0, t2.flags = -1, t2.dmax = 32768, t2.head = null, t2.hold = 0, t2.bits = 0, t2.lencode = t2.lendyn = new Int32Array(852), t2.distcode = t2.distdyn = new Int32Array(592), t2.sane = 1, t2.back = -1, uD;
      }, PD = (e2) => {
        if (ND(e2))
          return _D;
        const t2 = e2.state;
        return t2.wsize = 0, t2.whave = 0, t2.wnext = 0, DD(e2);
      }, LD = (e2, t2) => {
        let i2;
        if (ND(e2))
          return _D;
        const n2 = e2.state;
        return t2 < 0 ? (i2 = 0, t2 = -t2) : (i2 = 5 + (t2 >> 4), t2 < 48 && (t2 &= 15)), t2 && (t2 < 8 || t2 > 15) ? _D : (null !== n2.window && n2.wbits !== t2 && (n2.window = null), n2.wrap = i2, n2.wbits = t2, PD(e2));
      }, kD = (e2, t2) => {
        if (!e2)
          return _D;
        const i2 = new OD();
        e2.state = i2, i2.strm = e2, i2.window = null, i2.mode = gD;
        const n2 = LD(e2, t2);
        return n2 !== uD && (e2.state = null), n2;
      };
      let MD, UD, xD = true;
      const VD = (e2) => {
        if (xD) {
          MD = new Int32Array(512), UD = new Int32Array(32);
          let t2 = 0;
          for (; t2 < 144; )
            e2.lens[t2++] = 8;
          for (; t2 < 256; )
            e2.lens[t2++] = 9;
          for (; t2 < 280; )
            e2.lens[t2++] = 7;
          for (; t2 < 288; )
            e2.lens[t2++] = 8;
          for (aD(1, e2.lens, 0, 288, MD, 0, e2.work, { bits: 9 }), t2 = 0; t2 < 32; )
            e2.lens[t2++] = 5;
          aD(2, e2.lens, 0, 32, UD, 0, e2.work, { bits: 5 }), xD = false;
        }
        e2.lencode = MD, e2.lenbits = 9, e2.distcode = UD, e2.distbits = 5;
      }, FD = (e2, t2, i2, n2) => {
        let s2;
        const r2 = e2.state;
        return null === r2.window && (r2.wsize = 1 << r2.wbits, r2.wnext = 0, r2.whave = 0, r2.window = new Uint8Array(r2.wsize)), n2 >= r2.wsize ? (r2.window.set(t2.subarray(i2 - r2.wsize, i2), 0), r2.wnext = 0, r2.whave = r2.wsize) : (s2 = r2.wsize - r2.wnext, s2 > n2 && (s2 = n2), r2.window.set(t2.subarray(i2 - n2, i2 - n2 + s2), r2.wnext), (n2 -= s2) ? (r2.window.set(t2.subarray(i2 - n2, i2), 0), r2.wnext = n2, r2.whave = r2.wsize) : (r2.wnext += s2, r2.wnext === r2.wsize && (r2.wnext = 0), r2.whave < r2.wsize && (r2.whave += s2))), 0;
      };
      var BD = (e2, t2) => {
        let i2, n2, s2, r2, o2, a2, c2, d2, l2, u2, h2, p2, _2, E2, m2, f2, T2, g2, S2, R2, C2, I2, v2 = 0;
        const y2 = new Uint8Array(4);
        let A2, b2;
        const w2 = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
        if (ND(e2) || !e2.output || !e2.input && 0 !== e2.avail_in)
          return _D;
        i2 = e2.state, i2.mode === RD && (i2.mode = CD), o2 = e2.next_out, s2 = e2.output, c2 = e2.avail_out, r2 = e2.next_in, n2 = e2.input, a2 = e2.avail_in, d2 = i2.hold, l2 = i2.bits, u2 = a2, h2 = c2, I2 = uD;
        e:
          for (; ; )
            switch (i2.mode) {
              case gD:
                if (0 === i2.wrap) {
                  i2.mode = CD;
                  break;
                }
                for (; l2 < 16; ) {
                  if (0 === a2)
                    break e;
                  a2--, d2 += n2[r2++] << l2, l2 += 8;
                }
                if (2 & i2.wrap && 35615 === d2) {
                  0 === i2.wbits && (i2.wbits = 15), i2.check = 0, y2[0] = 255 & d2, y2[1] = d2 >>> 8 & 255, i2.check = wO(i2.check, y2, 2, 0), d2 = 0, l2 = 0, i2.mode = 16181;
                  break;
                }
                if (i2.head && (i2.head.done = false), !(1 & i2.wrap) || (((255 & d2) << 8) + (d2 >> 8)) % 31) {
                  e2.msg = "incorrect header check", i2.mode = bD;
                  break;
                }
                if ((15 & d2) !== TD) {
                  e2.msg = "unknown compression method", i2.mode = bD;
                  break;
                }
                if (d2 >>>= 4, l2 -= 4, C2 = 8 + (15 & d2), 0 === i2.wbits && (i2.wbits = C2), C2 > 15 || C2 > i2.wbits) {
                  e2.msg = "invalid window size", i2.mode = bD;
                  break;
                }
                i2.dmax = 1 << i2.wbits, i2.flags = 0, e2.adler = i2.check = 1, i2.mode = 512 & d2 ? 16189 : RD, d2 = 0, l2 = 0;
                break;
              case 16181:
                for (; l2 < 16; ) {
                  if (0 === a2)
                    break e;
                  a2--, d2 += n2[r2++] << l2, l2 += 8;
                }
                if (i2.flags = d2, (255 & i2.flags) !== TD) {
                  e2.msg = "unknown compression method", i2.mode = bD;
                  break;
                }
                if (57344 & i2.flags) {
                  e2.msg = "unknown header flags set", i2.mode = bD;
                  break;
                }
                i2.head && (i2.head.text = d2 >> 8 & 1), 512 & i2.flags && 4 & i2.wrap && (y2[0] = 255 & d2, y2[1] = d2 >>> 8 & 255, i2.check = wO(i2.check, y2, 2, 0)), d2 = 0, l2 = 0, i2.mode = 16182;
              case 16182:
                for (; l2 < 32; ) {
                  if (0 === a2)
                    break e;
                  a2--, d2 += n2[r2++] << l2, l2 += 8;
                }
                i2.head && (i2.head.time = d2), 512 & i2.flags && 4 & i2.wrap && (y2[0] = 255 & d2, y2[1] = d2 >>> 8 & 255, y2[2] = d2 >>> 16 & 255, y2[3] = d2 >>> 24 & 255, i2.check = wO(i2.check, y2, 4, 0)), d2 = 0, l2 = 0, i2.mode = 16183;
              case 16183:
                for (; l2 < 16; ) {
                  if (0 === a2)
                    break e;
                  a2--, d2 += n2[r2++] << l2, l2 += 8;
                }
                i2.head && (i2.head.xflags = 255 & d2, i2.head.os = d2 >> 8), 512 & i2.flags && 4 & i2.wrap && (y2[0] = 255 & d2, y2[1] = d2 >>> 8 & 255, i2.check = wO(i2.check, y2, 2, 0)), d2 = 0, l2 = 0, i2.mode = 16184;
              case 16184:
                if (1024 & i2.flags) {
                  for (; l2 < 16; ) {
                    if (0 === a2)
                      break e;
                    a2--, d2 += n2[r2++] << l2, l2 += 8;
                  }
                  i2.length = d2, i2.head && (i2.head.extra_len = d2), 512 & i2.flags && 4 & i2.wrap && (y2[0] = 255 & d2, y2[1] = d2 >>> 8 & 255, i2.check = wO(i2.check, y2, 2, 0)), d2 = 0, l2 = 0;
                } else
                  i2.head && (i2.head.extra = null);
                i2.mode = 16185;
              case 16185:
                if (1024 & i2.flags && (p2 = i2.length, p2 > a2 && (p2 = a2), p2 && (i2.head && (C2 = i2.head.extra_len - i2.length, i2.head.extra || (i2.head.extra = new Uint8Array(i2.head.extra_len)), i2.head.extra.set(n2.subarray(r2, r2 + p2), C2)), 512 & i2.flags && 4 & i2.wrap && (i2.check = wO(i2.check, n2, p2, r2)), a2 -= p2, r2 += p2, i2.length -= p2), i2.length))
                  break e;
                i2.length = 0, i2.mode = 16186;
              case 16186:
                if (2048 & i2.flags) {
                  if (0 === a2)
                    break e;
                  p2 = 0;
                  do {
                    C2 = n2[r2 + p2++], i2.head && C2 && i2.length < 65536 && (i2.head.name += String.fromCharCode(C2));
                  } while (C2 && p2 < a2);
                  if (512 & i2.flags && 4 & i2.wrap && (i2.check = wO(i2.check, n2, p2, r2)), a2 -= p2, r2 += p2, C2)
                    break e;
                } else
                  i2.head && (i2.head.name = null);
                i2.length = 0, i2.mode = 16187;
              case 16187:
                if (4096 & i2.flags) {
                  if (0 === a2)
                    break e;
                  p2 = 0;
                  do {
                    C2 = n2[r2 + p2++], i2.head && C2 && i2.length < 65536 && (i2.head.comment += String.fromCharCode(C2));
                  } while (C2 && p2 < a2);
                  if (512 & i2.flags && 4 & i2.wrap && (i2.check = wO(i2.check, n2, p2, r2)), a2 -= p2, r2 += p2, C2)
                    break e;
                } else
                  i2.head && (i2.head.comment = null);
                i2.mode = 16188;
              case 16188:
                if (512 & i2.flags) {
                  for (; l2 < 16; ) {
                    if (0 === a2)
                      break e;
                    a2--, d2 += n2[r2++] << l2, l2 += 8;
                  }
                  if (4 & i2.wrap && d2 !== (65535 & i2.check)) {
                    e2.msg = "header crc mismatch", i2.mode = bD;
                    break;
                  }
                  d2 = 0, l2 = 0;
                }
                i2.head && (i2.head.hcrc = i2.flags >> 9 & 1, i2.head.done = true), e2.adler = i2.check = 0, i2.mode = RD;
                break;
              case 16189:
                for (; l2 < 32; ) {
                  if (0 === a2)
                    break e;
                  a2--, d2 += n2[r2++] << l2, l2 += 8;
                }
                e2.adler = i2.check = wD(d2), d2 = 0, l2 = 0, i2.mode = SD;
              case SD:
                if (0 === i2.havedict)
                  return e2.next_out = o2, e2.avail_out = c2, e2.next_in = r2, e2.avail_in = a2, i2.hold = d2, i2.bits = l2, pD;
                e2.adler = i2.check = 1, i2.mode = RD;
              case RD:
                if (t2 === dD || t2 === lD)
                  break e;
              case CD:
                if (i2.last) {
                  d2 >>>= 7 & l2, l2 -= 7 & l2, i2.mode = AD;
                  break;
                }
                for (; l2 < 3; ) {
                  if (0 === a2)
                    break e;
                  a2--, d2 += n2[r2++] << l2, l2 += 8;
                }
                switch (i2.last = 1 & d2, d2 >>>= 1, l2 -= 1, 3 & d2) {
                  case 0:
                    i2.mode = 16193;
                    break;
                  case 1:
                    if (VD(i2), i2.mode = vD, t2 === lD) {
                      d2 >>>= 2, l2 -= 2;
                      break e;
                    }
                    break;
                  case 2:
                    i2.mode = 16196;
                    break;
                  case 3:
                    e2.msg = "invalid block type", i2.mode = bD;
                }
                d2 >>>= 2, l2 -= 2;
                break;
              case 16193:
                for (d2 >>>= 7 & l2, l2 -= 7 & l2; l2 < 32; ) {
                  if (0 === a2)
                    break e;
                  a2--, d2 += n2[r2++] << l2, l2 += 8;
                }
                if ((65535 & d2) != (d2 >>> 16 ^ 65535)) {
                  e2.msg = "invalid stored block lengths", i2.mode = bD;
                  break;
                }
                if (i2.length = 65535 & d2, d2 = 0, l2 = 0, i2.mode = ID, t2 === lD)
                  break e;
              case ID:
                i2.mode = 16195;
              case 16195:
                if (p2 = i2.length, p2) {
                  if (p2 > a2 && (p2 = a2), p2 > c2 && (p2 = c2), 0 === p2)
                    break e;
                  s2.set(n2.subarray(r2, r2 + p2), o2), a2 -= p2, r2 += p2, c2 -= p2, o2 += p2, i2.length -= p2;
                  break;
                }
                i2.mode = RD;
                break;
              case 16196:
                for (; l2 < 14; ) {
                  if (0 === a2)
                    break e;
                  a2--, d2 += n2[r2++] << l2, l2 += 8;
                }
                if (i2.nlen = 257 + (31 & d2), d2 >>>= 5, l2 -= 5, i2.ndist = 1 + (31 & d2), d2 >>>= 5, l2 -= 5, i2.ncode = 4 + (15 & d2), d2 >>>= 4, l2 -= 4, i2.nlen > 286 || i2.ndist > 30) {
                  e2.msg = "too many length or distance symbols", i2.mode = bD;
                  break;
                }
                i2.have = 0, i2.mode = 16197;
              case 16197:
                for (; i2.have < i2.ncode; ) {
                  for (; l2 < 3; ) {
                    if (0 === a2)
                      break e;
                    a2--, d2 += n2[r2++] << l2, l2 += 8;
                  }
                  i2.lens[w2[i2.have++]] = 7 & d2, d2 >>>= 3, l2 -= 3;
                }
                for (; i2.have < 19; )
                  i2.lens[w2[i2.have++]] = 0;
                if (i2.lencode = i2.lendyn, i2.lenbits = 7, A2 = { bits: i2.lenbits }, I2 = aD(0, i2.lens, 0, 19, i2.lencode, 0, i2.work, A2), i2.lenbits = A2.bits, I2) {
                  e2.msg = "invalid code lengths set", i2.mode = bD;
                  break;
                }
                i2.have = 0, i2.mode = 16198;
              case 16198:
                for (; i2.have < i2.nlen + i2.ndist; ) {
                  for (; v2 = i2.lencode[d2 & (1 << i2.lenbits) - 1], m2 = v2 >>> 24, f2 = v2 >>> 16 & 255, T2 = 65535 & v2, !(m2 <= l2); ) {
                    if (0 === a2)
                      break e;
                    a2--, d2 += n2[r2++] << l2, l2 += 8;
                  }
                  if (T2 < 16)
                    d2 >>>= m2, l2 -= m2, i2.lens[i2.have++] = T2;
                  else {
                    if (16 === T2) {
                      for (b2 = m2 + 2; l2 < b2; ) {
                        if (0 === a2)
                          break e;
                        a2--, d2 += n2[r2++] << l2, l2 += 8;
                      }
                      if (d2 >>>= m2, l2 -= m2, 0 === i2.have) {
                        e2.msg = "invalid bit length repeat", i2.mode = bD;
                        break;
                      }
                      C2 = i2.lens[i2.have - 1], p2 = 3 + (3 & d2), d2 >>>= 2, l2 -= 2;
                    } else if (17 === T2) {
                      for (b2 = m2 + 3; l2 < b2; ) {
                        if (0 === a2)
                          break e;
                        a2--, d2 += n2[r2++] << l2, l2 += 8;
                      }
                      d2 >>>= m2, l2 -= m2, C2 = 0, p2 = 3 + (7 & d2), d2 >>>= 3, l2 -= 3;
                    } else {
                      for (b2 = m2 + 7; l2 < b2; ) {
                        if (0 === a2)
                          break e;
                        a2--, d2 += n2[r2++] << l2, l2 += 8;
                      }
                      d2 >>>= m2, l2 -= m2, C2 = 0, p2 = 11 + (127 & d2), d2 >>>= 7, l2 -= 7;
                    }
                    if (i2.have + p2 > i2.nlen + i2.ndist) {
                      e2.msg = "invalid bit length repeat", i2.mode = bD;
                      break;
                    }
                    for (; p2--; )
                      i2.lens[i2.have++] = C2;
                  }
                }
                if (i2.mode === bD)
                  break;
                if (0 === i2.lens[256]) {
                  e2.msg = "invalid code -- missing end-of-block", i2.mode = bD;
                  break;
                }
                if (i2.lenbits = 9, A2 = { bits: i2.lenbits }, I2 = aD(1, i2.lens, 0, i2.nlen, i2.lencode, 0, i2.work, A2), i2.lenbits = A2.bits, I2) {
                  e2.msg = "invalid literal/lengths set", i2.mode = bD;
                  break;
                }
                if (i2.distbits = 6, i2.distcode = i2.distdyn, A2 = { bits: i2.distbits }, I2 = aD(2, i2.lens, i2.nlen, i2.ndist, i2.distcode, 0, i2.work, A2), i2.distbits = A2.bits, I2) {
                  e2.msg = "invalid distances set", i2.mode = bD;
                  break;
                }
                if (i2.mode = vD, t2 === lD)
                  break e;
              case vD:
                i2.mode = yD;
              case yD:
                if (a2 >= 6 && c2 >= 258) {
                  e2.next_out = o2, e2.avail_out = c2, e2.next_in = r2, e2.avail_in = a2, i2.hold = d2, i2.bits = l2, tD(e2, h2), o2 = e2.next_out, s2 = e2.output, c2 = e2.avail_out, r2 = e2.next_in, n2 = e2.input, a2 = e2.avail_in, d2 = i2.hold, l2 = i2.bits, i2.mode === RD && (i2.back = -1);
                  break;
                }
                for (i2.back = 0; v2 = i2.lencode[d2 & (1 << i2.lenbits) - 1], m2 = v2 >>> 24, f2 = v2 >>> 16 & 255, T2 = 65535 & v2, !(m2 <= l2); ) {
                  if (0 === a2)
                    break e;
                  a2--, d2 += n2[r2++] << l2, l2 += 8;
                }
                if (f2 && 0 == (240 & f2)) {
                  for (g2 = m2, S2 = f2, R2 = T2; v2 = i2.lencode[R2 + ((d2 & (1 << g2 + S2) - 1) >> g2)], m2 = v2 >>> 24, f2 = v2 >>> 16 & 255, T2 = 65535 & v2, !(g2 + m2 <= l2); ) {
                    if (0 === a2)
                      break e;
                    a2--, d2 += n2[r2++] << l2, l2 += 8;
                  }
                  d2 >>>= g2, l2 -= g2, i2.back += g2;
                }
                if (d2 >>>= m2, l2 -= m2, i2.back += m2, i2.length = T2, 0 === f2) {
                  i2.mode = 16205;
                  break;
                }
                if (32 & f2) {
                  i2.back = -1, i2.mode = RD;
                  break;
                }
                if (64 & f2) {
                  e2.msg = "invalid literal/length code", i2.mode = bD;
                  break;
                }
                i2.extra = 15 & f2, i2.mode = 16201;
              case 16201:
                if (i2.extra) {
                  for (b2 = i2.extra; l2 < b2; ) {
                    if (0 === a2)
                      break e;
                    a2--, d2 += n2[r2++] << l2, l2 += 8;
                  }
                  i2.length += d2 & (1 << i2.extra) - 1, d2 >>>= i2.extra, l2 -= i2.extra, i2.back += i2.extra;
                }
                i2.was = i2.length, i2.mode = 16202;
              case 16202:
                for (; v2 = i2.distcode[d2 & (1 << i2.distbits) - 1], m2 = v2 >>> 24, f2 = v2 >>> 16 & 255, T2 = 65535 & v2, !(m2 <= l2); ) {
                  if (0 === a2)
                    break e;
                  a2--, d2 += n2[r2++] << l2, l2 += 8;
                }
                if (0 == (240 & f2)) {
                  for (g2 = m2, S2 = f2, R2 = T2; v2 = i2.distcode[R2 + ((d2 & (1 << g2 + S2) - 1) >> g2)], m2 = v2 >>> 24, f2 = v2 >>> 16 & 255, T2 = 65535 & v2, !(g2 + m2 <= l2); ) {
                    if (0 === a2)
                      break e;
                    a2--, d2 += n2[r2++] << l2, l2 += 8;
                  }
                  d2 >>>= g2, l2 -= g2, i2.back += g2;
                }
                if (d2 >>>= m2, l2 -= m2, i2.back += m2, 64 & f2) {
                  e2.msg = "invalid distance code", i2.mode = bD;
                  break;
                }
                i2.offset = T2, i2.extra = 15 & f2, i2.mode = 16203;
              case 16203:
                if (i2.extra) {
                  for (b2 = i2.extra; l2 < b2; ) {
                    if (0 === a2)
                      break e;
                    a2--, d2 += n2[r2++] << l2, l2 += 8;
                  }
                  i2.offset += d2 & (1 << i2.extra) - 1, d2 >>>= i2.extra, l2 -= i2.extra, i2.back += i2.extra;
                }
                if (i2.offset > i2.dmax) {
                  e2.msg = "invalid distance too far back", i2.mode = bD;
                  break;
                }
                i2.mode = 16204;
              case 16204:
                if (0 === c2)
                  break e;
                if (p2 = h2 - c2, i2.offset > p2) {
                  if (p2 = i2.offset - p2, p2 > i2.whave && i2.sane) {
                    e2.msg = "invalid distance too far back", i2.mode = bD;
                    break;
                  }
                  p2 > i2.wnext ? (p2 -= i2.wnext, _2 = i2.wsize - p2) : _2 = i2.wnext - p2, p2 > i2.length && (p2 = i2.length), E2 = i2.window;
                } else
                  E2 = s2, _2 = o2 - i2.offset, p2 = i2.length;
                p2 > c2 && (p2 = c2), c2 -= p2, i2.length -= p2;
                do {
                  s2[o2++] = E2[_2++];
                } while (--p2);
                0 === i2.length && (i2.mode = yD);
                break;
              case 16205:
                if (0 === c2)
                  break e;
                s2[o2++] = i2.length, c2--, i2.mode = yD;
                break;
              case AD:
                if (i2.wrap) {
                  for (; l2 < 32; ) {
                    if (0 === a2)
                      break e;
                    a2--, d2 |= n2[r2++] << l2, l2 += 8;
                  }
                  if (h2 -= c2, e2.total_out += h2, i2.total += h2, 4 & i2.wrap && h2 && (e2.adler = i2.check = i2.flags ? wO(i2.check, s2, h2, o2 - h2) : AO(i2.check, s2, h2, o2 - h2)), h2 = c2, 4 & i2.wrap && (i2.flags ? d2 : wD(d2)) !== i2.check) {
                    e2.msg = "incorrect data check", i2.mode = bD;
                    break;
                  }
                  d2 = 0, l2 = 0;
                }
                i2.mode = 16207;
              case 16207:
                if (i2.wrap && i2.flags) {
                  for (; l2 < 32; ) {
                    if (0 === a2)
                      break e;
                    a2--, d2 += n2[r2++] << l2, l2 += 8;
                  }
                  if (4 & i2.wrap && d2 !== (4294967295 & i2.total)) {
                    e2.msg = "incorrect length check", i2.mode = bD;
                    break;
                  }
                  d2 = 0, l2 = 0;
                }
                i2.mode = 16208;
              case 16208:
                I2 = hD;
                break e;
              case bD:
                I2 = ED;
                break e;
              case 16210:
                return mD;
              default:
                return _D;
            }
        return e2.next_out = o2, e2.avail_out = c2, e2.next_in = r2, e2.avail_in = a2, i2.hold = d2, i2.bits = l2, (i2.wsize || h2 !== e2.avail_out && i2.mode < bD && (i2.mode < AD || t2 !== cD)) && FD(e2, e2.output, e2.next_out, h2 - e2.avail_out), u2 -= e2.avail_in, h2 -= e2.avail_out, e2.total_in += u2, e2.total_out += h2, i2.total += h2, 4 & i2.wrap && h2 && (e2.adler = i2.check = i2.flags ? wO(i2.check, s2, h2, e2.next_out - h2) : AO(i2.check, s2, h2, e2.next_out - h2)), e2.data_type = i2.bits + (i2.last ? 64 : 0) + (i2.mode === RD ? 128 : 0) + (i2.mode === vD || i2.mode === ID ? 256 : 0), (0 === u2 && 0 === h2 || t2 === cD) && I2 === uD && (I2 = fD), I2;
      }, jD = { inflateReset: PD, inflateReset2: LD, inflateResetKeep: DD, inflateInit: (e2) => kD(e2, 15), inflateInit2: kD, inflate: BD, inflateEnd: (e2) => {
        if (ND(e2))
          return _D;
        let t2 = e2.state;
        return t2.window && (t2.window = null), e2.state = null, uD;
      }, inflateGetHeader: (e2, t2) => {
        if (ND(e2))
          return _D;
        const i2 = e2.state;
        return 0 == (2 & i2.wrap) ? _D : (i2.head = t2, t2.done = false, uD);
      }, inflateSetDictionary: (e2, t2) => {
        const i2 = t2.length;
        let n2, s2, r2;
        return ND(e2) ? _D : (n2 = e2.state, 0 !== n2.wrap && n2.mode !== SD ? _D : n2.mode === SD && (s2 = 1, s2 = AO(s2, t2, i2, 0), s2 !== n2.check) ? ED : (r2 = FD(e2, t2, i2, i2), r2 ? (n2.mode = 16210, mD) : (n2.havedict = 1, uD)));
      }, inflateInfo: "pako inflate (from Nodeca project)" };
      var GD = function() {
        this.text = 0, this.time = 0, this.xflags = 0, this.os = 0, this.extra = null, this.extra_len = 0, this.name = "", this.comment = "", this.hcrc = 0, this.done = false;
      };
      const WD = Object.prototype.toString, { Z_NO_FLUSH: HD, Z_FINISH: KD, Z_OK: YD, Z_STREAM_END: qD, Z_NEED_DICT: JD, Z_STREAM_ERROR: zD, Z_DATA_ERROR: XD, Z_MEM_ERROR: QD } = NO;
      function ZD(e2) {
        this.options = UN.assign({ chunkSize: 65536, windowBits: 15, to: "" }, e2 || {});
        const t2 = this.options;
        t2.raw && t2.windowBits >= 0 && t2.windowBits < 16 && (t2.windowBits = -t2.windowBits, 0 === t2.windowBits && (t2.windowBits = -15)), !(t2.windowBits >= 0 && t2.windowBits < 16) || e2 && e2.windowBits || (t2.windowBits += 32), t2.windowBits > 15 && t2.windowBits < 48 && 0 == (15 & t2.windowBits) && (t2.windowBits |= 15), this.err = 0, this.msg = "", this.ended = false, this.chunks = [], this.strm = new BN(), this.strm.avail_out = 0;
        let i2 = jD.inflateInit2(this.strm, t2.windowBits);
        if (i2 !== YD)
          throw new Error(OO[i2]);
        if (this.header = new GD(), jD.inflateGetHeader(this.strm, this.header), t2.dictionary && ("string" == typeof t2.dictionary ? t2.dictionary = FN.string2buf(t2.dictionary) : "[object ArrayBuffer]" === WD.call(t2.dictionary) && (t2.dictionary = new Uint8Array(t2.dictionary)), t2.raw && (i2 = jD.inflateSetDictionary(this.strm, t2.dictionary), i2 !== YD)))
          throw new Error(OO[i2]);
      }
      function $D(e2, t2) {
        const i2 = new ZD(t2);
        if (i2.push(e2), i2.err)
          throw i2.msg || OO[i2.err];
        return i2.result;
      }
      ZD.prototype.push = function(e2, t2) {
        const i2 = this.strm, n2 = this.options.chunkSize, s2 = this.options.dictionary;
        let r2, o2, a2;
        if (this.ended)
          return false;
        for (o2 = t2 === ~~t2 ? t2 : true === t2 ? KD : HD, "[object ArrayBuffer]" === WD.call(e2) ? i2.input = new Uint8Array(e2) : i2.input = e2, i2.next_in = 0, i2.avail_in = i2.input.length; ; ) {
          for (0 === i2.avail_out && (i2.output = new Uint8Array(n2), i2.next_out = 0, i2.avail_out = n2), r2 = jD.inflate(i2, o2), r2 === JD && s2 && (r2 = jD.inflateSetDictionary(i2, s2), r2 === YD ? r2 = jD.inflate(i2, o2) : r2 === XD && (r2 = JD)); i2.avail_in > 0 && r2 === qD && i2.state.wrap > 0 && 0 !== e2[i2.next_in]; )
            jD.inflateReset(i2), r2 = jD.inflate(i2, o2);
          switch (r2) {
            case zD:
            case XD:
            case JD:
            case QD:
              return this.onEnd(r2), this.ended = true, false;
          }
          if (a2 = i2.avail_out, i2.next_out && (0 === i2.avail_out || r2 === qD))
            if ("string" === this.options.to) {
              let e3 = FN.utf8border(i2.output, i2.next_out), t3 = i2.next_out - e3, s3 = FN.buf2string(i2.output, e3);
              i2.next_out = t3, i2.avail_out = n2 - t3, t3 && i2.output.set(i2.output.subarray(e3, e3 + t3), 0), this.onData(s3);
            } else
              this.onData(i2.output.length === i2.next_out ? i2.output : i2.output.subarray(0, i2.next_out));
          if (r2 !== YD || 0 !== a2) {
            if (r2 === qD)
              return r2 = jD.inflateEnd(this.strm), this.onEnd(r2), this.ended = true, true;
            if (0 === i2.avail_in)
              break;
          }
        }
        return true;
      }, ZD.prototype.onData = function(e2) {
        this.chunks.push(e2);
      }, ZD.prototype.onEnd = function(e2) {
        e2 === YD && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = UN.flattenChunks(this.chunks)), this.chunks = [], this.err = e2, this.msg = this.strm.msg;
      };
      var eP = { Inflate: ZD, inflate: $D, inflateRaw: function(e2, t2) {
        return (t2 = t2 || {}).raw = true, $D(e2, t2);
      }, ungzip: $D, constants: NO };
      const { Deflate: tP, deflate: iP, deflateRaw: nP, gzip: sP } = $N, { Inflate: rP, inflate: oP, inflateRaw: aP, ungzip: cP } = eP;
      var dP, lP = iP, uP = oP;
      !function(e2) {
        e2[e2.ONE_BYTE = 0] = "ONE_BYTE", e2[e2.TWO_BYTE = 1] = "TWO_BYTE";
      }(dP || (dP = {}));
      class hP {
        constructor() {
          nh(this, "_sequence", 0), nh(this, "_startTime", Date.now()), nh(this, "isUseOneByte", true);
        }
        get startTime() {
          const e2 = Date.now() - this._startTime;
          return e2 < Math.pow(2, 16) ? e2 : (this._startTime += Math.pow(2, 16), this.startTime);
        }
        get sequence() {
          return this._sequence < Math.pow(2, 32) ? this._sequence++ : (this._sequence -= Math.pow(2, 32), this.sequence);
        }
        serialize(e2) {
          const t2 = { commonPacketHeader: { length: 0, reserved: 0, extension: 0, sequence: this.sequence }, commonStreamHeader: this.startTime, extension: void 0, payload: e2 };
          if (e2.byteLength > 128) {
            const i3 = new Uint8Array(4);
            i3.set([1, 0, 0, 0]);
            const n3 = { id: 0, length: 4, data: i3.buffer }, s3 = { profile: this.isUseOneByte ? 0 : 1, length: this.isUseOneByte ? 5 : 6, datas: [n3] };
            t2.commonPacketHeader.extension = 1, t2.extension = s3, t2.payload = this.compress(e2), t2.commonPacketHeader.length = 8 + (t2.extension.length + 2) + t2.payload.byteLength;
          } else
            t2.commonPacketHeader.length = 8 + t2.payload.byteLength;
          DC("SHOW_DATASTREAM2_LOG") && YC.debug("send data header: ".concat(JSON.stringify(t2.commonPacketHeader)));
          const i2 = new ArrayBuffer(t2.commonPacketHeader.length), n2 = new Uint8Array(i2), s2 = new DataView(i2);
          let r2 = 0;
          if (s2.setUint16(r2, t2.commonPacketHeader.extension << 15 | t2.commonPacketHeader.reserved << 14 | t2.commonPacketHeader.length, true), r2 += 2, s2.setUint32(r2, t2.commonPacketHeader.sequence, true), r2 += 4, s2.setUint16(r2, t2.commonStreamHeader, true), r2 += 2, t2.extension) {
            const e3 = this.serializeExtension(t2.extension);
            n2.set(new Uint8Array(e3), r2), r2 += e3.byteLength;
          }
          if (n2.set(new Uint8Array(t2.payload), r2), r2 += t2.payload.byteLength, r2 !== t2.commonPacketHeader.length)
            throw Error("serialize error!");
          return i2;
        }
        deserialize(e2) {
          if (e2.byteLength < 4)
            return new ArrayBuffer(0);
          const t2 = new DataView(e2);
          let i2 = 0;
          const n2 = t2.getUint16(i2, true);
          i2 += 2;
          const s2 = { length: 16383 & n2, reserved: (16384 & n2) >> 14, extension: (32768 & n2) >> 15, sequence: t2.getUint16(i2 + 2, true) << 16 | t2.getUint16(i2, true) };
          let r2, o2;
          if (i2 += 4, DC("SHOW_DATASTREAM2_LOG") && YC.debug("receive data header: ".concat(JSON.stringify(s2))), t2.getUint16(i2, true), i2 += 2, s2.extension) {
            o2 = this.deserializeExtension(e2.slice(i2)), i2 += 2 + o2.length, r2 = e2.slice(i2);
            let t3 = false;
            if (o2.datas.length > 0) {
              const e3 = o2.datas.find((e4) => 0 === e4.id);
              if (e3) {
                t3 = 1 == (1 & new DataView(e3.data).getUint32(0, true));
              }
            }
            r2 = t3 ? this.decompress(r2) : r2;
          } else
            r2 = e2.slice(8);
          return r2;
        }
        serializeExtension(e2) {
          const { profile: t2, length: i2, datas: n2 } = e2, s2 = new ArrayBuffer(i2 + 2), r2 = new Uint8Array(s2), o2 = new DataView(s2);
          let a2 = 0;
          if (o2.setUint8(a2++, t2), o2.setUint8(a2++, i2), n2.forEach((e3) => {
            t2 ? (o2.setUint8(a2++, e3.id), o2.setUint8(a2++, e3.length), r2.set(new Uint8Array(e3.data), a2), a2 += e3.data.byteLength) : (o2.setUint8(a2++, e3.id | e3.length << 4), r2.set(new Uint8Array(e3.data), a2), a2 += e3.data.byteLength);
          }), a2 !== i2 + 2)
            throw Error("serialize extension error, is ".concat(a2, "!==").concat(i2 + 2));
          return s2;
        }
        deserializeExtension(e2) {
          const t2 = new DataView(e2);
          let i2 = 0;
          const n2 = t2.getUint8(i2);
          i2++;
          const s2 = t2.getUint8(i2);
          i2++;
          const r2 = n2 === dP.TWO_BYTE, o2 = [], a2 = new DataView(e2, 2);
          let c2 = 0;
          for (; c2 < s2; ) {
            let e3 = 0, t3 = 0, i3 = new ArrayBuffer(0);
            r2 ? (e3 = a2.getUint8(c2), c2++, t3 = a2.getUint8(c2), c2++) : (e3 = 15 & a2.getUint8(c2), t3 = a2.getUint8(c2) >> 4, c2++), t3 > 0 && (i3 = a2.buffer.slice(c2 + 2, c2 + 2 + t3), c2 += i3.byteLength), o2.push({ id: e3, length: t3, data: i3 });
          }
          if (c2 !== s2)
            throw Error("parse error");
          return { profile: n2, length: s2, datas: o2 };
        }
        decompress(e2) {
          return uP(new Uint8Array(e2));
        }
        compress(e2) {
          return lP(new Uint8Array(e2));
        }
      }
      class pP extends ig {
        constructor(e2, t2) {
          super(), nh(this, "_version", 1), nh(this, "_type", 3), nh(this, "_config", void 0), nh(this, "_originDataChannel", void 0), nh(this, "_dataStreamPacketHeader", new ArrayBuffer(4)), nh(this, "_dataStreamPacketHandler", void 0), nh(this, "_datachannelEventMap", /* @__PURE__ */ new Map()), this._config = e2, t2 && (this._originDataChannel = t2, this._bandDataChannelEvents(t2)), this._initPacketHeader(), this._dataStreamPacketHandler = new hP();
        }
        get id() {
          return this._config.id;
        }
        get ordered() {
          return this._config.ordered;
        }
        get maxRetransmits() {
          return DC("DATASTREAM_MAX_RETRANSMITS");
        }
        get metadata() {
          return this._config.metadata;
        }
        get readyState() {
          var e2, t2;
          return null !== (e2 = null === (t2 = this._originDataChannel) || void 0 === t2 ? void 0 : t2.readyState) && void 0 !== e2 ? e2 : "connecting";
        }
        get _originDataChannelId() {
          var e2, t2;
          return null !== (e2 = null === (t2 = this._originDataChannel) || void 0 === t2 ? void 0 : t2.id) && void 0 !== e2 ? e2 : null;
        }
        getChannelId() {
          return this.id;
        }
        getConfig() {
          return this._config;
        }
        _close() {
          this._originDataChannel && (this._unbindDataChannelEvents(this._originDataChannel), this._originDataChannel = void 0);
        }
        async _waitTillOpen() {
          return new tT((e2, t2) => {
            if (this._originDataChannel) {
              "open" === this._originDataChannel.readyState && e2();
              const i2 = setTimeout(() => {
                var e3;
                t2(new VT(xT.DATACHANNEL_CONNECTION_TIMEOUT, "Cannot create datachannel, id: ".concat(null === (e3 = this._originDataChannel) || void 0 === e3 ? void 0 : e3.id)));
              }, 1e4);
              this._originDataChannel.onopen = () => {
                clearTimeout(i2), this._originDataChannel && this._bandDataChannelEvents(this._originDataChannel), e2();
              }, this._originDataChannel.onerror = () => {
                throw clearTimeout(i2), new VT(xT.DATACHANNEL_CONNECTION_TIMEOUT);
              };
            } else
              t2(new VT(xT.DATACHANNEL_CONNECTION_TIMEOUT, "cannot find dataChannel"));
          });
        }
        _updateOriginDataChannel(e2) {
          this._originDataChannel = e2, this._bandDataChannelEvents(e2);
        }
        _initPacketHeader() {
          const e2 = new DataView(this._dataStreamPacketHeader);
          e2.setUint16(0, this._version), e2.setUint8(2, this._type), e2.setUint8(3, this._config.id);
        }
        _bandDataChannelEvents(e2) {
          this._unbindDataChannelEvents(e2), [hb.OPEN, hb.CLOSE, hb.ERROR].forEach((t2) => {
            const i2 = () => {
              this.emit(t2);
            };
            this._datachannelEventMap.set(t2, i2), e2.addEventListener(t2, i2);
          });
        }
        _unbindDataChannelEvents(e2) {
          Array.from(this._datachannelEventMap.entries()).forEach((t2) => {
            let [i2, n2] = t2;
            e2.removeEventListener(i2, n2);
          }), this._datachannelEventMap.clear();
        }
      }
      class _P extends pP {
        constructor(e2) {
          super(e2), nh(this, "_messageListener", void 0), this._messageListener = (e3) => {
            if (e3.data.byteLength < this._dataStreamPacketHeader.byteLength)
              throw Error("invalid byteLength: the byte length must exceed " + this._dataStreamPacketHeader.byteLength);
            const t2 = e3.data.slice(0, this._dataStreamPacketHeader.byteLength), i2 = new DataView(t2).getUint8(3);
            if (i2 !== this.id)
              return void (DC("SHOW_DATASTREAM2_LOG") && YC.debug("invalid datachannel id: ".concat(i2, " !== ").concat(this.id)));
            let n2 = e3.data.slice(this._dataStreamPacketHeader.byteLength);
            n2 = this._dataStreamPacketHandler.deserialize(n2), this.emit(hb.MESSAGE, n2);
          };
        }
        _updateOriginDataChannel(e2) {
          super._updateOriginDataChannel(e2), this._bandRemoteDataChannelEvents();
        }
        _close() {
          this._originDataChannel && (this._originDataChannel.removeEventListener("message", this._messageListener), super._close());
        }
        _bandRemoteDataChannelEvents() {
          this._originDataChannel && this._originDataChannel.addEventListener("message", this._messageListener);
        }
      }
      class EP extends pP {
        send(e2) {
          if (this._originDataChannel) {
            let t2 = e2;
            t2 = this._dataStreamPacketHandler.serialize(e2);
            const i2 = new Uint8Array(this._dataStreamPacketHeader.byteLength + t2.byteLength);
            i2.set(new Uint8Array(this._dataStreamPacketHeader), 0), i2.set(new Uint8Array(t2), this._dataStreamPacketHeader.byteLength), this._originDataChannel.send(i2.buffer);
          }
        }
      }
      !function() {
        const e2 = pT();
        bA.getDisplayMedia = function(e3) {
          if (navigator.mediaDevices && navigator.mediaDevices.getDisplayMedia)
            return true;
          return false;
        }(), bA.getStreamFromExtension = e2.name === cT.CHROME && Number(e2.version) > 34, bA.supportUnifiedPlan = function() {
          if (!window.RTCRtpTransceiver)
            return false;
          if (!("currentDirection" in RTCRtpTransceiver.prototype))
            return false;
          const e3 = new RTCPeerConnection();
          let t2 = false;
          try {
            e3.addTransceiver("audio"), t2 = true;
          } catch (e4) {
          }
          return e3.close(), t2;
        }(), bA.supportMinBitrate = e2.name === cT.CHROME || e2.name === cT.EDGE, bA.supportSetRtpSenderParameters = function() {
          const e3 = pT();
          if (!window.RTCRtpSender || !window.RTCRtpSender.prototype.setParameters || !window.RTCRtpSender.prototype.getParameters)
            return false;
          return !!kT() || (!(!ST() && !mT()) || e3.name === cT.FIREFOX && Number(e3.version) >= 64);
        }(), e2.name === cT.SAFARI && (Number(e2.version) >= 14 ? bA.supportDualStream = true : bA.supportDualStream = false), bA.webAudioMediaStreamDest = function() {
          const e3 = pT();
          if (e3.name === cT.SAFARI && Number(e3.version) < 12)
            return false;
          return true;
        }(), bA.supportReplaceTrack = function() {
          if (!window.RTCRtpSender)
            return false;
          if ("function" == typeof RTCRtpSender.prototype.replaceTrack)
            return true;
          return false;
        }(), bA.supportWebGL = "undefined" != typeof WebGLRenderingContext, bA.supportRequestFrame = !!window.CanvasCaptureMediaStreamTrack, kT() || (bA.webAudioWithAEC = true), bA.supportShareAudio = function() {
          const e3 = pT();
          if ((e3.os === aT.WIN_10 || e3.os === aT.WIN_81 || e3.os === aT.WIN_7 || e3.os === aT.LINUX || e3.os === aT.MAC_OS || e3.os === aT.CHROMIUM_OS) && e3.name === cT.CHROME && Number(e3.version) >= 74)
            return true;
          return false;
        }(), bA.supportDataChannel = function() {
          if (IT(76) || function(e3) {
            const t2 = pT();
            return !(t2.name !== cT.FIREFOX || !t2.osVersion) && Number(t2.version) >= e3;
          }(68) || function(e3) {
            const t2 = pT();
            return !(t2.name !== cT.SAFARI || !t2.osVersion) && Number(t2.version) >= e3;
          }(14))
            return true;
          return false;
        }(), bA.supportPCSetConfiguration = function() {
          const e3 = window.RTCPeerConnection;
          return !RT() && !!e3 && e3.prototype.setConfiguration instanceof Function;
        }(), bA.supportWebRTCEncodedTransform = function() {
          const e3 = pT();
          return "Chrome" === e3.name && Number(e3.version) >= 86;
        }(), bA.supportWebRTCInsertableStream = function() {
          const e3 = pT();
          return (e3.name === cT.CHROME || e3.name === cT.EDGE) && Number(e3.version) >= 94 && "MediaStreamTrackGenerator" in window && "MediaStreamTrackProcessor" in window;
        }(), Ag(() => {
          bA.supportDualStreamEncoding = function() {
            const e3 = pT();
            if (DC("DISABLE_WEBAUDIO"))
              return true;
            return "Safari" === e3.name && Number(e3.version) >= 14 || !!("Chrome" === e3.name && /Windows/i.test(e3.os || "") && Number(e3.version) >= 100 && DC("CHROME_DUAL_STREAM_USE_ENCODING"));
          }(), YC.info("browser compatibility", JSON.stringify(bA), JSON.stringify(e2));
        });
      }();
      class mP extends ig {
        constructor() {
          super(...arguments), nh(this, "resultStorage", /* @__PURE__ */ new Map());
        }
        setLocalAudioStats(e2, t2, i2) {
          this.record("AUDIO_INPUT_LEVEL_TOO_LOW", e2, this.checkAudioInputLevel(i2, t2)), this.record("SEND_AUDIO_BITRATE_TOO_LOW", e2, this.checkSendAudioBitrate(i2, t2));
        }
        setLocalVideoStats(e2, t2, i2) {
          this.record("SEND_VIDEO_BITRATE_TOO_LOW", e2, this.checkSendVideoBitrate(i2, t2)), this.record("FRAMERATE_INPUT_TOO_LOW", e2, this.checkFramerateInput(i2, t2)), this.record("FRAMERATE_SENT_TOO_LOW", e2, this.checkFramerateSent(i2));
        }
        setRemoteAudioStats(e2, t2) {
          const i2 = e2.getUserId();
          this.record("AUDIO_OUTPUT_LEVEL_TOO_LOW", i2, this.checkAudioOutputLevel(t2));
        }
        setRemoteVideoStats(e2, t2) {
          const i2 = e2.getUserId();
          this.record("RECV_VIDEO_DECODE_FAILED", i2, this.checkVideoDecode(t2));
        }
        record(e2, t2, i2) {
          if (DC("STATS_UPDATE_INTERVAL") > 500)
            return;
          this.resultStorage.has(e2) || this.resultStorage.set(e2, { result: [], isPrevNormal: true });
          const n2 = this.resultStorage.get(e2);
          if (n2 && (n2.result.push(i2), n2.result.length >= 5)) {
            var s2;
            const i3 = bn(s2 = n2.result).call(s2, true);
            n2.isPrevNormal && !i3 && this.emit("exception", fP[e2], e2, t2), !n2.isPrevNormal && i3 && this.emit("exception", fP[e2] + 2e3, e2 + "_RECOVER", t2), n2.isPrevNormal = i3, n2.result = [];
          }
        }
        checkAudioOutputLevel(e2) {
          return !(e2.receiveBitrate > 0 && 0 === e2.receiveLevel);
        }
        checkAudioInputLevel(e2, t2) {
          return t2 instanceof uw && !t2.isActive || (!!t2.muted || 0 !== e2.sendVolumeLevel);
        }
        checkFramerateInput(e2, t2) {
          let i2 = null;
          t2._encoderConfig && t2._encoderConfig.frameRate && (i2 = yy(t2._encoderConfig.frameRate));
          const n2 = e2.captureFrameRate;
          return !i2 || !n2 || !(i2 > 10 && n2 < 5 || i2 < 10 && i2 >= 5 && n2 <= 1);
        }
        checkFramerateSent(e2) {
          return !(e2.captureFrameRate && e2.sendFrameRate && e2.captureFrameRate > 5 && e2.sendFrameRate <= 1);
        }
        checkSendVideoBitrate(e2, t2) {
          return !!t2.muted || 0 !== e2.sendBitrate;
        }
        checkSendAudioBitrate(e2, t2) {
          return t2 instanceof uw && !t2.isActive || (!!t2.muted || 0 !== e2.sendBitrate);
        }
        checkVideoDecode(e2) {
          return 0 === e2.receiveBitrate || 0 !== e2.decodeFrameRate;
        }
      }
      const fP = { FRAMERATE_INPUT_TOO_LOW: 1001, FRAMERATE_SENT_TOO_LOW: 1002, SEND_VIDEO_BITRATE_TOO_LOW: 1003, RECV_VIDEO_DECODE_FAILED: 1005, AUDIO_INPUT_LEVEL_TOO_LOW: 2001, AUDIO_OUTPUT_LEVEL_TOO_LOW: 2002, SEND_AUDIO_BITRATE_TOO_LOW: 2003 };
      const TP = new class {
        markSubscribeStart(e2, t2) {
          performance.mark("agora-web-sdk/".concat(e2, "/subscribe-").concat(t2));
        }
        markPublishStart(e2, t2) {
          performance.mark("agora-web-sdk/".concat(e2, "/publish-").concat(t2));
        }
        measureFromSubscribeStart(e2, t2) {
          const i2 = performance.getEntriesByName("agora-web-sdk/".concat(e2, "/subscribe-").concat(t2));
          if (i2.length > 0) {
            const e3 = i2[i2.length - 1];
            return Math.round(performance.now() - e3.startTime);
          }
          return 0;
        }
        measureFromPublishStart(e2, t2) {
          const i2 = performance.getEntriesByName("agora-web-sdk/".concat(e2, "/publish-").concat(t2));
          if (i2.length > 0) {
            const e3 = i2[i2.length - 1];
            return Math.round(performance.now() - e3.startTime);
          }
          return 0;
        }
      }();
      function gP(e2, t2) {
        this.v = e2, this.k = t2;
      }
      function SP(e2) {
        return new gP(e2, 0);
      }
      var RP = eT, CP = sm;
      wi({ target: "Promise", stat: true, forced: true }, { withResolvers: function() {
        var e2 = CP.f(this);
        return { promise: e2.promise, resolve: e2.resolve, reject: e2.reject };
      } });
      var IP = sm, vP = FE;
      wi({ target: "Promise", stat: true, forced: true }, { try: function(e2) {
        var t2 = IP.f(this), i2 = vP(e2);
        return (i2.error ? t2.reject : t2.resolve)(i2.value), t2.promise;
      } });
      var yP = i(RP), AP = Fo.f("asyncIterator"), bP = i(AP);
      function wP(e2) {
        var t2, i2;
        function n2(t3, i3) {
          try {
            var r2 = e2[t3](i3), o2 = r2.value, a2 = o2 instanceof gP;
            yP.resolve(a2 ? o2.v : o2).then(function(i4) {
              if (a2) {
                var c2 = "return" === t3 ? "return" : "next";
                if (!o2.k || i4.done)
                  return n2(c2, i4);
                i4 = e2[c2](i4).value;
              }
              s2(r2.done ? "return" : "normal", i4);
            }, function(e3) {
              n2("throw", e3);
            });
          } catch (e3) {
            s2("throw", e3);
          }
        }
        function s2(e3, s3) {
          switch (e3) {
            case "return":
              t2.resolve({ value: s3, done: true });
              break;
            case "throw":
              t2.reject(s3);
              break;
            default:
              t2.resolve({ value: s3, done: false });
          }
          (t2 = t2.next) ? n2(t2.key, t2.arg) : i2 = null;
        }
        this._invoke = function(e3, s3) {
          return new yP(function(r2, o2) {
            var a2 = { key: e3, arg: s3, resolve: r2, reject: o2, next: null };
            i2 ? i2 = i2.next = a2 : (t2 = i2 = a2, n2(e3, s3));
          });
        }, "function" != typeof e2.return && (this.return = void 0);
      }
      function OP(e2) {
        return function() {
          return new wP(e2.apply(this, arguments));
        };
      }
      wP.prototype["function" == typeof Uu && bP || "@@asyncIterator"] = function() {
        return this;
      }, wP.prototype.next = function(e2) {
        return this._invoke("next", e2);
      }, wP.prototype.throw = function(e2) {
        return this._invoke("throw", e2);
      }, wP.prototype.return = function(e2) {
        return this._invoke("return", e2);
      };
      var NP = i(ie.Object.getOwnPropertySymbols), DP = wi, PP = Ki.indexOf, LP = Rh, kP = v([].indexOf), MP = !!kP && 1 / kP([1], 1, -0) < 0;
      DP({ target: "Array", proto: true, forced: MP || !LP("indexOf") }, { indexOf: function(e2) {
        var t2 = arguments.length > 1 ? arguments[1] : void 0;
        return MP ? kP(this, e2, t2) || 0 : PP(this, e2, t2);
      } });
      var UP = Ji("Array").indexOf, xP = l, VP = UP, FP = Array.prototype, BP = i(function(e2) {
        var t2 = e2.indexOf;
        return e2 === FP || xP(FP, e2) && t2 === FP.indexOf ? VP : t2;
      }), jP = ze, GP = Yr;
      wi({ target: "Object", stat: true, forced: n(function() {
        GP(1);
      }) }, { keys: function(e2) {
        return GP(jP(e2));
      } });
      var WP = i(ie.Object.keys);
      function HP(e2, t2) {
        if (null == e2)
          return {};
        var i2, n2, s2 = function(e3, t3) {
          if (null == e3)
            return {};
          var i3, n3, s3 = {}, r3 = WP(e3);
          for (n3 = 0; n3 < r3.length; n3++)
            i3 = r3[n3], BP(t3).call(t3, i3) >= 0 || (s3[i3] = e3[i3]);
          return s3;
        }(e2, t2);
        if (NP) {
          var r2 = NP(e2);
          for (n2 = 0; n2 < r2.length; n2++)
            i2 = r2[n2], BP(t2).call(t2, i2) >= 0 || Object.prototype.propertyIsEnumerable.call(e2, i2) && (s2[i2] = e2[i2]);
        }
        return s2;
      }
      var KP = { exports: {} };
      !function(e2, t2) {
        e2.exports = (() => {
          var e3 = { 8: (e4, t4, i3) => {
            i3.r(t4), i3.d(t4, { Parser: () => C2, Printer: () => b2, parse: () => D2, print: () => P2 });
            const n2 = "\n", s2 = "".concat("\r").concat(n2), r2 = " ";
            let o2;
            function a2(e5) {
              return e5 >= "0" && e5 <= "9";
            }
            function c2(e5) {
              return e5 >= "!" && e5 <= "~";
            }
            function d2(e5) {
              return c2(e5) || e5 >= "Â" && e5 <= "Ã¿";
            }
            function l2(e5) {
              return "!" === e5 || e5 >= "#" && e5 <= "'" || e5 >= "*" && e5 <= "+" || e5 >= "-" && e5 <= "." || e5 >= "0" && e5 <= "9" || e5 >= "A" && e5 <= "Z" || e5 >= "^" && e5 <= "~";
            }
            function u2(e5) {
              return e5 >= "1" && e5 <= "9";
            }
            function h2(e5) {
              return e5 >= "A" && e5 <= "Z" || e5 >= "a" && e5 <= "z";
            }
            function p2(e5) {
              return "d" === e5 || "h" === e5 || "m" === e5 || "s" === e5;
            }
            function _2(e5) {
              return e5 > "" && e5 < "	" || e5 > "\v" && e5 < "\f" || e5 > "" && e5 < "Ã¿";
            }
            function E2(e5) {
              return h2(e5) || a2(e5) || "+" === e5 || "/" === e5;
            }
            function m2(e5) {
              return a2(e5) || h2(e5) || "+" === e5 || "/" === e5 || "-" === e5 || "_" === e5;
            }
            function f2(e5) {
              return h2(e5) || a2(e5) || "+" === e5 || "/" === e5;
            }
            function T2(e5, t5) {
              var i4 = Object.keys(e5);
              if (Object.getOwnPropertySymbols) {
                var n3 = Object.getOwnPropertySymbols(e5);
                t5 && (n3 = n3.filter(function(t6) {
                  return Object.getOwnPropertyDescriptor(e5, t6).enumerable;
                })), i4.push.apply(i4, n3);
              }
              return i4;
            }
            function g2(e5) {
              for (var t5 = 1; t5 < arguments.length; t5++) {
                var i4 = null != arguments[t5] ? arguments[t5] : {};
                t5 % 2 ? T2(Object(i4), true).forEach(function(t6) {
                  S2(e5, t6, i4[t6]);
                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e5, Object.getOwnPropertyDescriptors(i4)) : T2(Object(i4)).forEach(function(t6) {
                  Object.defineProperty(e5, t6, Object.getOwnPropertyDescriptor(i4, t6));
                });
              }
              return e5;
            }
            function S2(e5, t5, i4) {
              return t5 in e5 ? Object.defineProperty(e5, t5, { value: i4, enumerable: true, configurable: true, writable: true }) : e5[t5] = i4, e5;
            }
            !function(e5) {
              e5.VERSION = "v", e5.ORIGIN = "o", e5.SESSION_NAME = "s", e5.INFORMATION = "i", e5.URI = "u", e5.EMAIL = "e", e5.PHONE = "p", e5.CONNECTION = "c", e5.BANDWIDTH = "b", e5.TIME = "t", e5.REPEAT = "r", e5.ZONE_ADJUSTMENTS = "z", e5.KEY = "k", e5.ATTRIBUTE = "a", e5.MEDIA = "m";
            }(o2 || (o2 = {}));
            class R2 {
              consumeText(e5, t5) {
                let i4 = t5;
                for (; i4 < e5.length; ) {
                  const t6 = e5[i4];
                  if ("\0" === t6 || "\r" === t6 || t6 === n2)
                    break;
                  i4 += 1;
                }
                if (i4 - t5 == 0)
                  throw new Error("Invalid text, at ".concat(e5));
                return i4;
              }
              consumeUnicastAddress(e5, t5, i4) {
                return this.consumeTill(e5, t5, r2);
              }
              consumeOneOrMore(e5, t5, i4) {
                let n3 = t5;
                for (; i4(e5[n3]); )
                  n3++;
                if (n3 - t5 == 0)
                  throw new Error("Invalid rule at ".concat(t5, "."));
                return n3;
              }
              consumeSpace(e5, t5) {
                if (e5[t5] === r2)
                  return t5 + 1;
                throw new Error("Invalid space at ".concat(t5, "."));
              }
              consumeIP4Address(e5, t5) {
                let i4 = t5;
                for (let t6 = 0; t6 < 4; t6++)
                  if (i4 = this.consumeDecimalUChar(e5, i4), 3 !== t6) {
                    if ("." !== e5[i4])
                      throw new Error("Invalid IP4 address.");
                    i4++;
                  }
                return i4;
              }
              consumeDecimalUChar(e5, t5) {
                let i4 = t5;
                for (let t6 = 0; t6 < 3 && a2(e5[i4]); t6++, i4++)
                  ;
                if (i4 - t5 == 0)
                  throw new Error("Invalid decimal uchar.");
                const n3 = parseInt(e5.slice(t5, i4));
                if (n3 >= 0 && n3 <= 255)
                  return i4;
                throw new Error("Invalid decimal uchar");
              }
              consumeIP6Address(e5, t5) {
                let i4 = this.consumeHexpart(e5, t5);
                return ":" === e5[i4] ? (i4 += 1, i4 = this.consumeIP4Address(e5, i4), i4) : i4;
              }
              consumeHexpart(e5, t5) {
                let i4 = t5;
                if (":" === e5[i4] && ":" === e5[i4 + 1]) {
                  i4 += 2;
                  try {
                    i4 = this.consumeHexseq(e5, i4);
                  } catch (e6) {
                  }
                  return i4;
                }
                if (i4 = this.consumeHexseq(e5, i4), ":" === e5[i4] && ":" === e5[i4 + 1]) {
                  i4 += 2;
                  try {
                    i4 = this.consumeHexseq(e5, i4);
                  } catch (e6) {
                  }
                  return i4;
                }
                return i4;
              }
              consumeHexseq(e5, t5) {
                let i4 = t5;
                for (; i4 = this.consumeHex4(e5, i4), ":" === e5[i4] && ":" !== e5[i4 + 1]; )
                  i4 += 1;
                return i4;
              }
              consumeHex4(e5, t5) {
                let i4 = 0;
                for (; i4 < 4; i4++)
                  if (!((n3 = e5[t5 + i4]) >= "0" && n3 <= "9" || n3 >= "a" && n3 <= "f" || n3 >= "A" && n3 <= "F")) {
                    if (0 === i4)
                      throw new Error("Invalid hex 4");
                    break;
                  }
                var n3;
                return t5 + i4;
              }
              consumeFQDN(e5, t5) {
                let i4 = t5;
                for (; a2(e5[i4]) || h2(e5[i4]) || "-" === e5[i4] || "." === e5[i4]; )
                  i4 += 1;
                if (i4 - t5 < 4)
                  throw new Error("Invalid FQDN");
                return i4;
              }
              consumeExtnAddr(e5, t5) {
                return this.consumeOneOrMore(e5, t5, d2);
              }
              consumeMulticastAddress(e5, t5, i4) {
                switch (i4) {
                  case "IP4":
                  case "ip4":
                    return this.consumeIP4MulticastAddress(e5, t5);
                  case "IP6":
                  case "ip6":
                    return this.consumeIP6MulticastAddress(e5, t5);
                  default:
                    try {
                      return this.consumeFQDN(e5, t5);
                    } catch (i5) {
                      return this.consumeExtnAddr(e5, t5);
                    }
                }
              }
              consumeIP6MulticastAddress(e5, t5) {
                const i4 = this.consumeHexpart(e5, t5);
                return "/" === e5[i4] ? this.consumeInteger(e5, i4 + 1) : i4;
              }
              consumeIP4MulticastAddress(e5, t5) {
                let i4 = t5 + 3;
                const n3 = e5.slice(t5, i4), s3 = parseInt(n3);
                if (s3 < 224 || s3 > 239)
                  throw new Error("Invalid IP4 multicast address, IPv4 multicast addresses may be in the range 224.0.0.0 to 239.255.255.255.");
                for (let t6 = 0; t6 < 3; t6++) {
                  if ("." !== e5[i4])
                    throw new Error("Invalid IP4 multicast address.");
                  i4 += 1, i4 = this.consumeDecimalUChar(e5, i4);
                }
                return "/" === e5[i4] && (i4 += 1), i4 = this.consumeTTL(e5, i4), "/" === e5[i4] && (i4 = this.consumeInteger(e5, i4)), i4;
              }
              consumeInteger(e5, t5) {
                if (!u2(e5[t5]))
                  throw new Error("Invalid integer.");
                for (t5 += 1; a2(e5[t5]); )
                  t5 += 1;
                return t5;
              }
              consumeTTL(e5, t5) {
                if ("0" === e5[t5])
                  return t5 + 1;
                if (!u2(e5[t5]))
                  throw new Error("Invalid TTL.");
                t5 += 1;
                for (let i4 = 0; i4 < 2 && a2(e5[t5]); i4++)
                  t5 += 1;
                return t5;
              }
              consumeToken(e5, t5) {
                return this.consumeOneOrMore(e5, t5, l2);
              }
              consumeTime(e5, t5) {
                let i4 = t5;
                if ("0" === e5[i4])
                  return i4 + 1;
                for (u2(e5[i4]) && (i4 += 1); a2(e5[i4]); )
                  i4++;
                if (i4 - t5 < 10)
                  throw new Error("Invalid time");
                return i4;
              }
              consumeAddress(e5, t5) {
                return this.consumeTill(e5, t5, r2);
              }
              consumeTypedTime(e5, t5) {
                let i4 = t5;
                return i4 = this.consumeOneOrMore(e5, i4, a2), p2(e5[i4]) ? i4 + 1 : i4;
              }
              consumeRepeatInterval(e5, t5) {
                if (!u2(e5[t5]))
                  throw new Error("Invalid repeat interval");
                for (t5 += 1; a2(e5[t5]); )
                  t5 += 1;
                return p2(e5[t5]) && (t5 += 1), t5;
              }
              consumePort(e5, t5) {
                return this.consumeOneOrMore(e5, t5, a2);
              }
              consume(e5, t5, i4) {
                for (let n3 = 0; n3 < i4.length; n3++) {
                  if (t5 + n3 >= e5.length)
                    throw new Error("consume exceeding value length");
                  if (e5[t5 + n3] !== i4[n3])
                    throw new Error("consume ".concat(i4, " failed at ").concat(n3));
                }
                return t5 + i4.length;
              }
              consumeTill(e5, t5, i4) {
                let n3 = t5;
                for (; n3 < e5.length && ("string" != typeof i4 || e5[n3] !== i4) && ("function" != typeof i4 || !i4(e5[n3])); )
                  n3++;
                return n3;
              }
            }
            class C2 extends R2 {
              constructor() {
                super(), S2(this, "records", []), S2(this, "currentLine", 0);
              }
              parse(e5) {
                const t5 = this.probeEOL(e5);
                this.records = e5.split(t5).filter((e6) => !!e6.trim()).map(this.parseLine), this.currentLine = 0;
                const i4 = this.parseVersion(), n3 = this.parseOrigin(), s3 = this.parseSessionName(), r3 = this.parseInformation(), o3 = this.parseUri(), a3 = this.parseEmail(), c3 = this.parsePhone(), d3 = this.parseConnection(), l3 = this.parseBandWidth(), u3 = this.parseTimeFields(), h3 = this.parseKey(), p3 = this.parseSessionAttribute(), _3 = this.parseMediaDescription();
                if (this.currentLine !== this.records.length)
                  throw new Error("parsing failed, non exhaustive sdp lines.");
                return { version: i4, origin: n3, sessionName: s3, information: r3, uri: o3, emails: a3, phones: c3, connection: d3, bandwidths: l3, timeFields: u3, key: h3, attributes: p3, mediaDescriptions: _3 };
              }
              getCurrentRecord() {
                const e5 = this.records[this.currentLine];
                if (!e5)
                  throw new Error("Record doesn't exit.");
                return e5;
              }
              probeEOL(e5) {
                for (let t5 = 0; t5 < e5.length; t5++)
                  if (e5[t5] === n2)
                    return "\r" === e5[t5 - 1] ? s2 : n2;
                throw new Error("Invalid newline character.");
              }
              parseLine(e5, t5) {
                if (e5.length < 2)
                  throw new Error("Invalid sdp line, sdp line should be of form <type>=<value>.");
                const i4 = e5[0];
                if ("=" !== e5[1])
                  throw new Error('Invalid sdp line, <type> should be a single character followed by an "=" sign.');
                return { type: i4, value: e5.slice(2), line: t5, cur: 0 };
              }
              parseSessionAttribute() {
                const e5 = new v2();
                for (; this.currentLine < this.records.length; ) {
                  const t5 = this.getCurrentRecord();
                  if (t5.type !== o2.ATTRIBUTE)
                    break;
                  const i4 = { attField: this.extractOneOrMore(t5, (e6) => l2(e6) && ":" !== e6), _cur: 0 };
                  ":" === t5.value[t5.cur] && (t5.cur += 1, i4.attValue = this.extractOneOrMore(t5, _2)), e5.parse(i4), this.currentLine++;
                }
                return e5.digest();
              }
              parseMediaAttributes(e5) {
                const t5 = new y2(e5);
                for (; this.currentLine < this.records.length; ) {
                  const e6 = this.getCurrentRecord();
                  if (e6.type !== o2.ATTRIBUTE)
                    break;
                  const i4 = { attField: this.extractOneOrMore(e6, (e7) => l2(e7) && ":" !== e7), _cur: 0 };
                  ":" === e6.value[e6.cur] && (e6.cur += 1, i4.attValue = this.extractOneOrMore(e6, _2)), t5.parse(i4), this.currentLine++;
                }
                return t5.digest();
              }
              parseKey() {
                const e5 = this.getCurrentRecord();
                if (e5.type === o2.KEY) {
                  if ("prompt" === e5.value || "clear:" === e5.value || "base64:" === e5.value || "uri:" === e5.value)
                    return e5.value;
                  throw this.currentLine++, new Error("Invalid key.");
                }
              }
              parseZone() {
                const e5 = this.getCurrentRecord();
                if (e5.type === o2.ZONE_ADJUSTMENTS) {
                  const t5 = [];
                  for (; ; )
                    try {
                      const i4 = this.extract(e5, this.consumeTime);
                      this.consumeSpaceForRecord(e5);
                      let n3 = false;
                      "-" === e5.value[e5.cur] && (n3 = true, e5.cur += 1);
                      const s3 = this.extract(e5, this.consumeTypedTime);
                      t5.push({ time: i4, typedTime: s3, back: n3 });
                    } catch (e6) {
                      break;
                    }
                  if (0 === t5.length)
                    throw new Error("Invalid zone adjustments");
                  return this.currentLine++, t5;
                }
                return [];
              }
              parseRepeat() {
                const e5 = [];
                for (; ; ) {
                  const t5 = this.getCurrentRecord();
                  if (t5.type !== o2.REPEAT)
                    break;
                  {
                    const i4 = this.extract(t5, this.consumeRepeatInterval), n3 = this.parseTypedTime(t5);
                    e5.push({ repeatInterval: i4, typedTimes: n3 }), this.currentLine++;
                  }
                }
                return e5;
              }
              parseTypedTime(e5) {
                const t5 = [];
                for (; ; )
                  try {
                    this.consumeSpaceForRecord(e5), t5.push(this.extract(e5, this.consumeTypedTime));
                  } catch (e6) {
                    break;
                  }
                if (0 === t5.length)
                  throw new Error("Invalid typed time.");
                return t5;
              }
              parseTime() {
                const e5 = this.getCurrentRecord(), t5 = this.extract(e5, this.consumeTime);
                this.consumeSpaceForRecord(e5);
                const i4 = this.extract(e5, this.consumeTime);
                return this.currentLine++, { startTime: t5, stopTime: i4 };
              }
              parseBandWidth() {
                const e5 = [];
                for (; this.currentLine < this.records.length; ) {
                  const t5 = this.getCurrentRecord();
                  if (t5.type !== o2.BANDWIDTH)
                    break;
                  {
                    const i4 = this.extractOneOrMore(t5, l2);
                    if (":" !== t5.value[t5.cur])
                      throw new Error("Invalid bandwidth field.");
                    t5.cur++;
                    const n3 = this.extractOneOrMore(t5, a2);
                    e5.push({ bwtype: i4, bandwidth: n3 }), this.currentLine++;
                  }
                }
                return e5;
              }
              parseVersion() {
                const e5 = this.getCurrentRecord();
                if (e5.type !== o2.VERSION)
                  throw new Error("first sdp record must be version");
                const t5 = e5.value.slice(0, this.consumeOneOrMore(e5.value, 0, a2));
                if (t5.length !== e5.value.length)
                  throw new Error('invalid proto version, "v='.concat(e5.value, '"'));
                return this.currentLine++, t5;
              }
              parseOrigin() {
                const e5 = this.getCurrentRecord();
                if (e5.type !== o2.ORIGIN)
                  throw new Error("second line of sdp must be origin");
                const t5 = this.extractOneOrMore(e5, d2);
                this.consumeSpaceForRecord(e5);
                const i4 = this.extractOneOrMore(e5, a2);
                this.consumeSpaceForRecord(e5);
                const n3 = this.extractOneOrMore(e5, a2);
                this.consumeSpaceForRecord(e5);
                const s3 = this.extractOneOrMore(e5, l2);
                this.consumeSpaceForRecord(e5);
                const r3 = this.extractOneOrMore(e5, l2);
                this.consumeSpaceForRecord(e5);
                const c3 = this.extract(e5, this.consumeUnicastAddress);
                return this.currentLine++, { username: t5, sessId: i4, sessVersion: n3, nettype: s3, addrtype: r3, unicastAddress: c3 };
              }
              parseSessionName() {
                const e5 = this.getCurrentRecord();
                if (e5.type === o2.SESSION_NAME) {
                  const t5 = this.extract(e5, this.consumeText);
                  return this.currentLine++, t5;
                }
              }
              parseInformation() {
                const e5 = this.getCurrentRecord();
                if (e5.type !== o2.INFORMATION)
                  return;
                const t5 = this.extract(e5, this.consumeText);
                return this.currentLine++, t5;
              }
              parseUri() {
                const e5 = this.getCurrentRecord();
                if (e5.type === o2.URI)
                  return this.currentLine++, e5.value;
              }
              parseEmail() {
                const e5 = [];
                for (; ; ) {
                  const t5 = this.getCurrentRecord();
                  if (t5.type !== o2.EMAIL)
                    break;
                  e5.push(t5.value), this.currentLine++;
                }
                return e5;
              }
              parsePhone() {
                const e5 = [];
                for (; ; ) {
                  const t5 = this.getCurrentRecord();
                  if (t5.type !== o2.PHONE)
                    break;
                  e5.push(t5.value), this.currentLine++;
                }
                return e5;
              }
              parseConnection() {
                const e5 = this.getCurrentRecord();
                if (e5.type === o2.CONNECTION) {
                  const t5 = this.extractOneOrMore(e5, l2);
                  this.consumeSpaceForRecord(e5);
                  const i4 = this.extractOneOrMore(e5, l2);
                  this.consumeSpaceForRecord(e5);
                  const n3 = this.extract(e5, this.consumeAddress);
                  return this.currentLine++, { nettype: t5, addrtype: i4, address: n3 };
                }
              }
              parseMedia() {
                const e5 = this.getCurrentRecord(), t5 = this.extract(e5, this.consumeToken);
                this.consumeSpaceForRecord(e5);
                let i4 = this.extract(e5, this.consumePort);
                "/" === e5.value[e5.cur] && (e5.cur += 1, i4 += this.extract(e5, this.consumeInteger)), this.consumeSpaceForRecord(e5);
                const n3 = [];
                for (n3.push(this.extract(e5, this.consumeToken)); "/" === e5.value[e5.cur]; )
                  e5.cur += 1, n3.push(this.extract(e5, this.consumeToken));
                if (0 === n3.length)
                  throw new Error("Invalid proto");
                const s3 = this.parseFmt(e5);
                return this.currentLine++, { mediaType: t5, port: i4, protos: n3, fmts: s3 };
              }
              parseTimeFields() {
                const e5 = [];
                for (; this.getCurrentRecord().type === o2.TIME; ) {
                  const t5 = this.parseTime(), i4 = this.parseRepeat(), n3 = this.parseZone();
                  e5.push({ time: t5, repeats: i4, zones: n3 });
                }
                return e5;
              }
              parseMediaDescription() {
                const e5 = [];
                for (; this.currentLine < this.records.length && this.getCurrentRecord().type === o2.MEDIA; ) {
                  const t5 = this.parseMedia(), i4 = this.parseInformation(), n3 = this.parseConnections(), s3 = this.parseBandWidth(), r3 = this.parseKey(), o3 = this.parseMediaAttributes(t5);
                  e5.push({ media: t5, information: i4, connections: n3, bandwidths: s3, key: r3, attributes: o3 });
                }
                return e5;
              }
              parseConnections() {
                const e5 = [];
                for (; this.currentLine < this.records.length && this.getCurrentRecord().type === o2.CONNECTION; )
                  e5.push(this.parseConnection());
                return e5;
              }
              parseFmt(e5) {
                const t5 = [];
                for (; ; )
                  try {
                    this.consumeSpaceForRecord(e5), t5.push(this.extract(e5, this.consumeToken));
                  } catch (e6) {
                    break;
                  }
                if (0 === t5.length)
                  throw new Error("Invalid fmts");
                return t5;
              }
              extract(e5, t5, ...i4) {
                const n3 = t5.call(this, e5.value, e5.cur, ...i4), s3 = e5.value.slice(e5.cur, n3);
                return e5.cur = n3, s3;
              }
              extractOneOrMore(e5, t5) {
                const i4 = this.consumeOneOrMore(e5.value, e5.cur, t5), n3 = e5.value.slice(e5.cur, i4);
                return e5.cur = i4, n3;
              }
              consumeSpaceForRecord(e5) {
                if (e5.value[e5.cur] !== r2)
                  throw new Error("Invalid space at ".concat(e5.cur, "."));
                e5.cur += 1;
              }
            }
            class I2 extends R2 {
              constructor(...e5) {
                super(...e5), S2(this, "attributes", void 0), S2(this, "digested", false);
              }
              extractOneOrMore(e5, t5, i4) {
                const n3 = this.consumeOneOrMore(e5.attValue, e5._cur, t5), s3 = e5.attValue.slice(e5._cur, n3), [r3, o3] = i4 || [];
                if ("number" == typeof r3 && s3.length < r3)
                  throw new Error("error in length, should be more or equal than ".concat(r3, " characters."));
                if ("number" == typeof o3 && s3.length > o3)
                  throw new Error("error in length, should be less or equal than ".concat(o3, " characters."));
                return e5._cur = n3, s3;
              }
              consumeAttributeSpace(e5) {
                if (e5.attValue[e5._cur] !== r2)
                  throw new Error("Invalid space at ".concat(e5._cur, "."));
                e5._cur += 1;
              }
              extract(e5, t5, ...i4) {
                if (!e5.attValue)
                  throw new Error("Nothing to extract from attValue.");
                const n3 = t5.call(this, e5.attValue, e5._cur, ...i4), s3 = e5.attValue.slice(e5._cur, n3);
                return e5._cur = n3, s3;
              }
              atEnd(e5) {
                if (!e5.attValue)
                  throw new Error();
                return e5._cur >= e5.attValue.length;
              }
              peekChar(e5) {
                if (!e5.attValue)
                  throw new Error();
                return e5.attValue[e5._cur];
              }
              peek(e5, t5) {
                if (!e5.attValue)
                  throw new Error();
                for (let i4 = 0; i4 < t5.length; i4++)
                  if (t5[i4] !== e5.attValue[e5._cur + i4])
                    return false;
                return true;
              }
              parseIceUfrag(e5) {
                if (this.attributes.iceUfrag)
                  throw new Error("Invalid ice-ufrag, should be only a single line if 'a=ice-ufrag'");
                this.attributes.iceUfrag = this.extractOneOrMore(e5, E2, [4, 256]);
              }
              parseIcePwd(e5) {
                if (this.attributes.icePwd)
                  throw new Error("Invalid ice-pwd, should be only a single line if 'a=ice-pwd'");
                this.attributes.icePwd = this.extractOneOrMore(e5, E2, [22, 256]);
              }
              parseIceOptions(e5) {
                if (this.attributes.iceOptions)
                  throw new Error("Invalid ice-options, should be only one 'ice-options' line");
                const t5 = [];
                for (; !this.atEnd(e5); ) {
                  t5.push(this.extractOneOrMore(e5, E2));
                  try {
                    this.consumeAttributeSpace(e5);
                  } catch (t6) {
                    if (this.atEnd(e5))
                      break;
                    throw t6;
                  }
                }
                this.attributes.iceOptions = t5;
              }
              parseFingerprint(e5) {
                const t5 = this.extract(e5, this.consumeToken);
                this.consumeAttributeSpace(e5);
                const i4 = this.extract(e5, this.consumeTill);
                this.attributes.fingerprints.push({ hashFunction: t5, fingerprint: i4 });
              }
              parseExtmap(e5) {
                const t5 = this.extractOneOrMore(e5, a2);
                let i4;
                "/" === this.peekChar(e5) && (this.extract(e5, this.consume, "/"), i4 = this.extract(e5, this.consumeToken)), this.consumeAttributeSpace(e5);
                const n3 = this.extract(e5, this.consumeTill, r2), s3 = g2(g2({ entry: parseInt(t5, 10) }, i4 && { direction: i4 }), {}, { extensionName: n3 });
                this.peekChar(e5) === r2 && (this.consumeAttributeSpace(e5), s3.extensionAttributes = this.extract(e5, this.consumeTill)), this.attributes.extmaps.push(s3);
              }
              parseSetup(e5) {
                if (this.attributes.setup)
                  throw new Error("must only be one single 'a=setup' line.");
                const t5 = this.extract(e5, this.consumeTill);
                if ("active" !== t5 && "passive" !== t5 && "actpass" !== t5 && "holdconn" !== t5)
                  throw new Error("role must be one of 'active', 'passive', 'actpass', 'holdconn'.");
                this.attributes.setup = t5;
              }
            }
            class v2 extends I2 {
              constructor(...e5) {
                super(...e5), S2(this, "attributes", { unrecognized: [], groups: [], extmaps: [], fingerprints: [], identities: [] });
              }
              parse(e5) {
                if (this.digested)
                  throw new Error("already digested");
                try {
                  switch (e5.attField) {
                    case "group":
                      this.parseGroup(e5);
                      break;
                    case "ice-lite":
                      this.parseIceLite();
                      break;
                    case "ice-ufrag":
                      this.parseIceUfrag(e5);
                      break;
                    case "ice-pwd":
                      this.parseIcePwd(e5);
                      break;
                    case "ice-options":
                      this.parseIceOptions(e5);
                      break;
                    case "fingerprint":
                      this.parseFingerprint(e5);
                      break;
                    case "setup":
                      this.parseSetup(e5);
                      break;
                    case "tls-id":
                      this.parseTlsId(e5);
                      break;
                    case "identity":
                      this.parseIdentity(e5);
                      break;
                    case "extmap":
                      this.parseExtmap(e5);
                      break;
                    case "msid-semantic":
                      this.parseMsidSemantic(e5);
                      break;
                    default:
                      e5.ignored = true, this.attributes.unrecognized.push(e5);
                  }
                } catch (t5) {
                  throw console.error("parsing session attribute ".concat(e5.attField, ' error, "a=').concat(e5.attField, ":").concat(e5.attValue, '"')), t5;
                }
                if (!e5.ignored && e5.attValue && !this.atEnd(e5))
                  throw new Error("attribute parsing error");
              }
              digest() {
                return this.digested = true, this.attributes;
              }
              parseGroup(e5) {
                const t5 = this.extract(e5, this.consumeToken), i4 = [];
                for (; !this.atEnd(e5) && this.peekChar(e5) === r2; )
                  this.consumeAttributeSpace(e5), i4.push(this.extract(e5, this.consumeToken));
                this.attributes.groups.push({ semantic: t5, identificationTag: i4 });
              }
              parseIceLite() {
                if (this.attributes.iceLite)
                  throw new Error("Invalid ice-lite, should be only a single line of 'a=ice-lite'");
                this.attributes.iceLite = true;
              }
              parseTlsId(e5) {
                if (this.attributes.tlsId)
                  throw new Error("must be only one tld-id line");
                this.attributes.tlsId = this.extractOneOrMore(e5, m2);
              }
              parseIdentity(e5) {
                const t5 = this.extractOneOrMore(e5, f2), i4 = [];
                for (; !this.atEnd(e5) && this.peekChar(e5) === r2; ) {
                  this.consumeAttributeSpace(e5);
                  const t6 = this.extract(e5, this.consumeToken);
                  this.extract(e5, this.consume, "=");
                  const n3 = this.extractOneOrMore(e5, (e6) => e6 !== r2 && _2(e6));
                  i4.push({ name: t6, value: n3 });
                }
                this.attributes.identities.push({ assertionValue: t5, extensions: i4 });
              }
              parseMsidSemantic(e5) {
                this.peekChar(e5) === r2 && this.consumeAttributeSpace(e5);
                const t5 = { semantic: this.extract(e5, this.consumeToken), identifierList: [] };
                for (; ; ) {
                  try {
                    this.consumeAttributeSpace(e5);
                  } catch (e6) {
                    break;
                  }
                  if ("*" === this.peekChar(e5)) {
                    this.extract(e5, this.consume, "*"), t5.applyForAll = true;
                    break;
                  }
                  {
                    const i4 = this.extract(e5, this.consumeTill, r2);
                    t5.identifierList.push(i4);
                  }
                }
                this.attributes.msidSemantic = t5;
              }
            }
            class y2 extends I2 {
              constructor(e5) {
                super(), S2(this, "attributes", void 0), -1 !== e5.protos.indexOf("RTP") || e5.protos.indexOf("rtp"), this.attributes = { unrecognized: [], candidates: [], extmaps: [], fingerprints: [], imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: [], ssrcGroups: [], rtcpFeedbackWildcards: [], payloads: [] };
              }
              parse(e5) {
                if (this.digested)
                  throw new Error("already digested");
                try {
                  switch (e5.attField) {
                    case "extmap":
                      this.parseExtmap(e5);
                      break;
                    case "setup":
                      this.parseSetup(e5);
                      break;
                    case "ice-ufrag":
                      this.parseIceUfrag(e5);
                      break;
                    case "ice-pwd":
                      this.parseIcePwd(e5);
                      break;
                    case "ice-options":
                      this.parseIceOptions(e5);
                      break;
                    case "candidate":
                      this.parseCandidate(e5);
                      break;
                    case "remote-candidate":
                      this.parseRemoteCandidate(e5);
                      break;
                    case "end-of-candidates":
                      this.parseEndOfCandidates();
                      break;
                    case "fingerprint":
                      this.parseFingerprint(e5);
                      break;
                    case "rtpmap":
                      this.parseRtpmap(e5);
                      break;
                    case "ptime":
                      this.parsePtime(e5);
                      break;
                    case "maxptime":
                      this.parseMaxPtime(e5);
                      break;
                    case "sendrecv":
                    case "recvonly":
                    case "sendonly":
                    case "inactive":
                      this.parseDirection(e5);
                      break;
                    case "ssrc":
                      this.parseSSRC(e5);
                      break;
                    case "fmtp":
                      this.parseFmtp(e5);
                      break;
                    case "rtcp-fb":
                      this.parseRtcpFb(e5);
                      break;
                    case "rtcp-mux":
                      this.parseRTCPMux();
                      break;
                    case "rtcp-mux-only":
                      this.parseRTCPMuxOnly();
                      break;
                    case "rtcp-rsize":
                      this.parseRTCPRsize();
                      break;
                    case "rtcp":
                      this.parseRTCP(e5);
                      break;
                    case "mid":
                      this.parseMid(e5);
                      break;
                    case "msid":
                      this.parseMsid(e5);
                      break;
                    case "imageattr":
                      this.parseImageAttr(e5);
                      break;
                    case "rid":
                      this.parseRid(e5);
                      break;
                    case "simulcast":
                      this.parseSimulcast(e5);
                      break;
                    case "sctp-port":
                      this.parseSctpPort(e5);
                      break;
                    case "max-message-size":
                      this.parseMaxMessageSize(e5);
                      break;
                    case "ssrc-group":
                      this.parseSSRCGroup(e5);
                      break;
                    default:
                      e5.ignored = true, this.attributes.unrecognized.push(e5);
                  }
                } catch (t5) {
                  throw console.error("parsing media attribute ".concat(e5.attField, ' error, "a=').concat(e5.attField, ":").concat(e5.attValue, '"')), t5;
                }
                if (!e5.ignored && e5.attValue && !this.atEnd(e5))
                  throw new Error("attribute parsing error");
              }
              parseCandidate(e5) {
                const t5 = this.extractOneOrMore(e5, E2, [1, 32]);
                this.consumeAttributeSpace(e5);
                const i4 = this.extractOneOrMore(e5, a2, [1, 5]);
                this.consumeAttributeSpace(e5);
                const n3 = this.extract(e5, this.consumeToken);
                this.consumeAttributeSpace(e5);
                const s3 = this.extractOneOrMore(e5, a2, [1, 10]);
                this.consumeAttributeSpace(e5);
                const o3 = this.extract(e5, this.consumeAddress);
                this.consumeAttributeSpace(e5);
                const d3 = this.extract(e5, this.consumePort);
                this.consumeAttributeSpace(e5), this.extract(e5, this.consume, "typ"), this.consumeAttributeSpace(e5);
                const l3 = { foundation: t5, componentId: i4, transport: n3, priority: s3, connectionAddress: o3, port: d3, type: this.extract(e5, this.consumeToken), extension: {} };
                for (this.peek(e5, " raddr") && (this.extract(e5, this.consume, " raddr"), this.consumeAttributeSpace(e5), l3.relAddr = this.extract(e5, this.consumeAddress)), this.peek(e5, " rport") && (this.extract(e5, this.consume, " rport"), this.consumeAttributeSpace(e5), l3.relPort = this.extract(e5, this.consumePort)); this.peekChar(e5) === r2; ) {
                  this.consumeAttributeSpace(e5);
                  const t6 = this.extract(e5, this.consumeToken);
                  this.consumeAttributeSpace(e5), l3.extension[t6] = this.extractOneOrMore(e5, c2);
                }
                this.attributes.candidates.push(l3);
              }
              parseRemoteCandidate(e5) {
                const t5 = [];
                for (; ; ) {
                  const i4 = this.extractOneOrMore(e5, a2, [1, 5]);
                  this.consumeAttributeSpace(e5);
                  const n3 = this.extract(e5, this.consumeAddress);
                  this.consumeAttributeSpace(e5);
                  const s3 = this.extract(e5, this.consumePort);
                  t5.push({ componentId: i4, connectionAddress: n3, port: s3 });
                  try {
                    this.consumeAttributeSpace(e5);
                  } catch (e6) {
                    break;
                  }
                }
                this.attributes.remoteCandidatesList.push(t5);
              }
              parseEndOfCandidates() {
                if (this.attributes.endOfCandidates)
                  throw new Error("must be only one line of end-of-candidates");
                this.attributes.endOfCandidates = true;
              }
              parseRtpmap(e5) {
                const t5 = this.extract(e5, this.consumeToken);
                this.consumeAttributeSpace(e5);
                const i4 = this.extract(e5, this.consumeTill, "/");
                this.extract(e5, this.consume, "/");
                const n3 = { encodingName: i4, clockRate: this.extractOneOrMore(e5, a2) };
                this.atEnd(e5) || "/" !== this.peekChar(e5) || (this.extract(e5, this.consume, "/"), n3.encodingParameters = parseInt(this.extract(e5, this.consumeTill), 10));
                const s3 = this.attributes.payloads.find((e6) => e6.payloadType === parseInt(t5, 10));
                s3 ? s3.rtpMap = n3 : this.attributes.payloads.push({ payloadType: parseInt(t5, 10), rtpMap: n3, rtcpFeedbacks: [] });
              }
              parsePtime(e5) {
                if (this.attributes.ptime)
                  throw new Error("must be only one line of ptime");
                this.attributes.ptime = this.extract(e5, this.consumeTill);
              }
              parseMaxPtime(e5) {
                if (this.attributes.maxPtime)
                  throw new Error("must be only one line of ptime");
                this.attributes.maxPtime = this.extract(e5, this.consumeTill);
              }
              parseDirection(e5) {
                if (this.attributes.direction)
                  throw new Error("must be only one line of direction info");
                this.attributes.direction = e5.attField;
              }
              parseSSRC(e5) {
                const t5 = this.extractOneOrMore(e5, a2);
                this.consumeAttributeSpace(e5);
                const i4 = this.extract(e5, this.consumeTill, ":");
                let n3;
                ":" === this.peekChar(e5) && (this.extract(e5, this.consume, ":"), n3 = this.extract(e5, this.consumeTill));
                const s3 = this.attributes.ssrcs.find((e6) => e6.ssrcId === parseInt(t5, 10));
                s3 ? s3.attributes[i4] = n3 : this.attributes.ssrcs.push({ ssrcId: parseInt(t5, 10), attributes: { [i4]: n3 } });
              }
              parseFmtp(e5) {
                const t5 = this.extract(e5, this.consumeTill, r2);
                this.consumeAttributeSpace(e5);
                const i4 = this.extract(e5, this.consumeTill), n3 = {};
                i4.split(";").forEach((e6) => {
                  let [t6, i5] = e6.split("=");
                  t6 = t6.trim();
                  const s4 = "string" == typeof i5 ? i5.trim() : null;
                  "string" == typeof t6 && t6.length > 0 && (n3[t6] = s4);
                });
                const s3 = this.attributes.payloads.find((e6) => e6.payloadType === parseInt(t5, 10));
                s3 ? s3.fmtp = { parameters: n3 } : this.attributes.payloads.push({ payloadType: parseInt(t5, 10), rtcpFeedbacks: [], fmtp: { parameters: n3 } });
              }
              parseFmtParameters(e5) {
                const t5 = {}, i4 = this.extract(e5, this.consumeTill, "=");
                e5._cur++;
                const n3 = this.extract(e5, this.consumeTill, ";");
                for (t5[i4] = n3; ";" === e5.attValue[e5._cur]; ) {
                  const i5 = this.extract(e5, this.consumeTill, "=");
                  e5._cur++;
                  const n4 = this.extract(e5, this.consumeTill, ";");
                  t5[i5] = n4;
                }
                return t5;
              }
              parseRtcpFb(e5) {
                let t5 = "";
                t5 = "*" === this.peekChar(e5) ? this.extract(e5, this.consume, "*") : this.extract(e5, this.consumeTill, r2), this.consumeAttributeSpace(e5);
                const i4 = this.extract(e5, this.consumeTill, r2);
                let n3;
                if ("trr-int" === i4)
                  n3 = { type: i4, interval: this.extract(e5, this.consumeTill) };
                else {
                  const t6 = { type: i4 };
                  this.peekChar(e5) === r2 && (this.consumeAttributeSpace(e5), t6.parameter = this.extract(e5, this.consumeToken), this.peekChar(e5) === r2 && (t6.additional = this.extract(e5, this.consumeTill))), n3 = t6;
                }
                if ("*" === t5)
                  this.attributes.rtcpFeedbackWildcards.push(n3);
                else {
                  const e6 = this.attributes.payloads.find((e7) => e7.payloadType === parseInt(t5, 10));
                  e6 ? e6.rtcpFeedbacks.push(n3) : this.attributes.payloads.push({ payloadType: parseInt(t5, 10), rtcpFeedbacks: [n3] });
                }
              }
              parseRTCPMux() {
                if (this.attributes.rtcpMux)
                  throw new Error("must be single line of rtcp-mux");
                this.attributes.rtcpMux = true;
              }
              parseRTCPMuxOnly() {
                if (this.attributes.rtcpMuxOnly)
                  throw new Error("must be single line of rtcp-only");
                this.attributes.rtcpMuxOnly = true;
              }
              parseRTCPRsize() {
                if (this.attributes.rtcpRsize)
                  throw new Error("must be single line of rtcp-rsize");
                this.attributes.rtcpRsize = true;
              }
              parseRTCP(e5) {
                if (this.attributes.rtcp)
                  throw new Error("must be single line of rtcp");
                const t5 = { port: this.extract(e5, this.consumePort) };
                this.peekChar(e5) === r2 && (this.consumeAttributeSpace(e5), t5.netType = this.extractOneOrMore(e5, l2), this.consumeAttributeSpace(e5), t5.addressType = this.extractOneOrMore(e5, l2), this.consumeAttributeSpace(e5), t5.address = this.extract(e5, this.consumeAddress)), this.attributes.rtcp = t5;
              }
              parseMsid(e5) {
                const t5 = { id: this.extractOneOrMore(e5, l2, [1, 64]) };
                this.peekChar(e5) === r2 && (this.consumeAttributeSpace(e5), t5.appdata = this.extractOneOrMore(e5, l2, [1, 64])), this.attributes.msids.push(t5);
              }
              parseImageAttr(e5) {
                this.attributes.imageattr.push(e5.attValue);
              }
              parseRid(e5) {
                const t5 = this.extractOneOrMore(e5, (e6) => h2(e6) || a2(e6) || "_" === e6 || "-" === e6);
                this.consumeAttributeSpace(e5);
                const i4 = { id: t5, direction: this.extract(e5, this.consumeToken), params: [] };
                if (this.peekChar(e5) === r2) {
                  if (this.consumeAttributeSpace(e5), this.peek(e5, "pt=")) {
                    this.extract(e5, this.consume, "pt=");
                    const t6 = [];
                    for (; ; ) {
                      const i5 = this.extract(e5, this.consumeToken);
                      t6.push(i5);
                      try {
                        this.extract(e5, this.consume, ",");
                      } catch (e6) {
                        break;
                      }
                    }
                    i4.payloads = t6, this.peekChar(e5) === r2 && this.extract(e5, this.consume, r2);
                  }
                  for (; ; ) {
                    const t6 = this.extract(e5, this.consumeToken);
                    switch (t6) {
                      case "depend": {
                        const n3 = { type: t6, rids: this.extract(e5, this.consume, "=").split(",") };
                        i4.params.push(n3);
                        break;
                      }
                      default: {
                        const n3 = { type: t6 };
                        "=" === this.peekChar(e5) && (this.extract(e5, this.consume, "="), n3.val = this.extract(e5, this.consumeTill, ";")), i4.params.push(n3);
                      }
                    }
                    try {
                      this.extract(e5, this.consume, ";");
                    } catch (e6) {
                      break;
                    }
                  }
                }
                this.attributes.rids.push(i4);
              }
              parseSimulcast(e5) {
                if (this.attributes.simulcast)
                  throw new Error("must be single line of simulcast");
                this.attributes.simulcast = e5.attValue, this.extract(e5, this.consumeTill);
              }
              parseSctpPort(e5) {
                this.attributes.sctpPort = this.extractOneOrMore(e5, a2, [1, 5]);
              }
              parseMaxMessageSize(e5) {
                this.attributes.maxMessageSize = this.extractOneOrMore(e5, a2, [1, void 0]);
              }
              digest() {
                return this.digested = true, this.attributes;
              }
              parseMid(e5) {
                this.attributes.mid = this.extract(e5, this.consumeToken);
              }
              parseSSRCGroup(e5) {
                const t5 = this.extract(e5, this.consumeToken), i4 = [];
                for (; ; )
                  try {
                    this.consumeAttributeSpace(e5);
                    const t6 = this.extract(e5, this.consumeInteger);
                    i4.push(parseInt(t6, 10));
                  } catch (e6) {
                    break;
                  }
                this.attributes.ssrcGroups.push({ semantic: t5, ssrcIds: i4 });
              }
            }
            function A2(e5, t5, i4) {
              return t5 in e5 ? Object.defineProperty(e5, t5, { value: i4, enumerable: true, configurable: true, writable: true }) : e5[t5] = i4, e5;
            }
            class b2 {
              constructor() {
                A2(this, "eol", s2);
              }
              print(e5, t5) {
                let i4 = "";
                return t5 && (this.eol = t5), i4 += this.printVersion(e5.version), i4 += this.printOrigin(e5.origin), i4 += this.printSessionName(e5.sessionName), i4 += this.printInformation(e5.information), i4 += this.printUri(e5.uri), i4 += this.printEmail(e5.emails), i4 += this.printPhone(e5.phones), i4 += this.printConnection(e5.connection), i4 += this.printBandwidth(e5.bandwidths), i4 += this.printTimeFields(e5.timeFields), i4 += this.printKey(e5.key), i4 += this.printSessionAttributes(e5.attributes), i4 += this.printMediaDescription(e5.mediaDescriptions), i4;
              }
              printVersion(e5) {
                return "v=".concat(e5).concat(this.eol);
              }
              printOrigin(e5) {
                return "o=".concat(e5.username, " ").concat(e5.sessId, " ").concat(e5.sessVersion, " ").concat(e5.nettype, " ").concat(e5.addrtype, " ").concat(e5.unicastAddress).concat(this.eol);
              }
              printSessionName(e5) {
                return e5 ? "s=".concat(e5).concat(this.eol) : "";
              }
              printInformation(e5) {
                return e5 ? "i=".concat(e5).concat(this.eol) : "";
              }
              printUri(e5) {
                return e5 ? "u=".concat(e5).concat(this.eol) : "";
              }
              printEmail(e5) {
                let t5 = "";
                for (const i4 of e5)
                  t5 += "e=".concat(i4).concat(this.eol);
                return t5;
              }
              printPhone(e5) {
                let t5 = "";
                for (const i4 of e5)
                  t5 += "e=".concat(i4).concat(this.eol);
                return t5;
              }
              printConnection(e5) {
                return e5 ? "c=".concat(e5.nettype, " ").concat(e5.addrtype, " ").concat(e5.address).concat(this.eol) : "";
              }
              printBandwidth(e5) {
                let t5 = "";
                for (const i4 of e5)
                  t5 += "b=".concat(i4.bwtype, ":").concat(i4.bandwidth).concat(this.eol);
                return t5;
              }
              printTimeFields(e5) {
                let t5 = "";
                for (const i4 of e5) {
                  t5 += "t=".concat(i4.time.startTime, " ").concat(i4.time.startTime).concat(this.eol);
                  for (const e6 of i4.repeats)
                    t5 += "r=".concat(e6.repeatInterval, " ").concat(e6.typedTimes.join(" ")).concat(this.eol);
                  i4.zoneAdjustments && (t5 += "z=", t5 += "z=".concat(i4.zoneAdjustments.map((e6) => "".concat(e6.time, " ").concat(e6.back ? "-" : "", " ").concat(e6.typedTime)).join(" ")).concat(this.eol), t5 += this.eol);
                }
                return t5;
              }
              printKey(e5) {
                return e5 ? "k=".concat(e5).concat(this.eol) : "";
              }
              printAttributes(e5) {
                let t5 = "";
                for (const i4 of e5)
                  t5 += "a=".concat(i4.attField).concat(i4.attValue ? ":".concat(i4.attValue) : "").concat(this.eol);
                return t5;
              }
              printMediaDescription(e5) {
                let t5 = "";
                for (const i4 of e5)
                  t5 += this.printMedia(i4.media), t5 += this.printInformation(i4.information), t5 += this.printConnections(i4.connections), t5 += this.printBandwidth(i4.bandwidths), t5 += this.printKey(i4.key), t5 += this.printMediaAttributes(i4);
                return t5;
              }
              printConnections(e5) {
                let t5 = "";
                for (const i4 of e5)
                  t5 += this.printConnection(i4);
                return t5;
              }
              printMedia(e5) {
                return "m=".concat(e5.mediaType, " ").concat(e5.port, " ").concat(e5.protos.join("/"), " ").concat(e5.fmts.join(" ")).concat(this.eol);
              }
              printSessionAttributes(e5) {
                return new O2(this.eol).print(e5);
              }
              printMediaAttributes(e5) {
                return new N2(this.eol).print(e5);
              }
            }
            class w2 {
              constructor(e5) {
                A2(this, "eol", void 0), this.eol = e5;
              }
              printIceUfrag(e5) {
                return void 0 === e5 ? "" : "a=ice-ufrag:".concat(e5).concat(this.eol);
              }
              printIcePwd(e5) {
                return void 0 === e5 ? "" : "a=ice-pwd:".concat(e5).concat(this.eol);
              }
              printIceOptions(e5) {
                return void 0 === e5 ? "" : "a=ice-options:".concat(e5.join(r2)).concat(this.eol);
              }
              printFingerprints(e5) {
                return e5.length > 0 ? e5.map((e6) => "a=fingerprint:".concat(e6.hashFunction).concat(r2).concat(e6.fingerprint)).join(this.eol) + this.eol : "";
              }
              printExtmap(e5) {
                return e5.map((e6) => "a=extmap:".concat(e6.entry).concat(e6.direction ? "/".concat(e6.direction) : "").concat(r2).concat(e6.extensionName).concat(e6.extensionAttributes ? "".concat(r2).concat(e6.extensionAttributes) : "").concat(this.eol)).join("");
              }
              printSetup(e5) {
                return void 0 === e5 ? "" : "a=setup:".concat(e5).concat(this.eol);
              }
              printUnrecognized(e5) {
                return e5.map((e6) => "a=".concat(e6.attField).concat(e6.attValue ? ":".concat(e6.attValue) : "").concat(this.eol)).join("");
              }
            }
            class O2 extends w2 {
              print(e5) {
                let t5 = "";
                return t5 += this.printGroups(e5.groups), t5 += this.printMsidSemantic(e5.msidSemantic), t5 += this.printIceLite(e5.iceLite), t5 += this.printIceUfrag(e5.iceUfrag), t5 += this.printIcePwd(e5.icePwd), t5 += this.printIceOptions(e5.iceOptions), t5 += this.printFingerprints(e5.fingerprints), t5 += this.printSetup(e5.setup), t5 += this.printTlsId(e5.tlsId), t5 += this.printIdentity(e5.identities), t5 += this.printExtmap(e5.extmaps), t5 += this.printUnrecognized(e5.unrecognized), t5;
              }
              printGroups(e5) {
                let t5 = "";
                return e5.length > 0 && (t5 += e5.map((e6) => "a=group:".concat(e6.semantic).concat(e6.identificationTag.map((e7) => "".concat(r2).concat(e7)).join("")).concat(this.eol)).join("")), t5;
              }
              printIceLite(e5) {
                return void 0 === e5 ? "" : "a=ice-lite" + this.eol;
              }
              printTlsId(e5) {
                return e5 ? "a=tls-id:".concat(e5).concat(this.eol) : "";
              }
              printIdentity(e5) {
                return 0 === e5.length ? "" : e5.map((e6) => "a=identity:".concat(e6.assertionValue).concat(e6.extensions.map((e7) => "".concat(r2).concat(e7.name).concat(e7.value ? "=".concat(e7.value) : "")))).join(this.eol) + this.eol;
              }
              printMsidSemantic(e5) {
                if (!e5)
                  return "";
                let t5 = "a=msid-semantic:".concat(e5.semantic);
                return e5.applyForAll ? t5 += "".concat(r2, "*") : e5.identifierList.length > 0 && (t5 += e5.identifierList.map((e6) => "".concat(r2).concat(e6))), t5 + this.eol;
              }
            }
            class N2 extends w2 {
              print(e5) {
                const t5 = e5.attributes;
                let i4 = "";
                return i4 += this.printRTCP(t5.rtcp), i4 += this.printIceUfrag(t5.iceUfrag), i4 += this.printIcePwd(t5.icePwd), i4 += this.printIceOptions(t5.iceOptions), i4 += this.printCandidates(t5.candidates), i4 += this.printRemoteCandidatesList(t5.remoteCandidatesList), i4 += this.printEndOfCandidates(t5.endOfCandidates), i4 += this.printFingerprints(t5.fingerprints), i4 += this.printSetup(t5.setup), i4 += this.printMid(t5.mid), i4 += this.printExtmap(t5.extmaps), i4 += this.printRTPRelated(t5), i4 += this.printPtime(t5.ptime), i4 += this.printMaxPtime(t5.maxPtime), i4 += this.printDirection(t5.direction), i4 += this.printSSRCGroups(t5.ssrcGroups), i4 += this.printSSRC(t5.ssrcs), i4 += this.printRTCPMux(t5.rtcpMux), i4 += this.printRTCPMuxOnly(t5.rtcpMuxOnly), i4 += this.printRTCPRsize(t5.rtcpRsize), i4 += this.printMSId(t5.msids), i4 += this.printImageattr(t5.imageattr), i4 += this.printRid(t5.rids), i4 += this.printSimulcast(t5.simulcast), i4 += this.printSCTPPort(t5.sctpPort), i4 += this.printMaxMessageSize(t5.maxMessageSize), i4 += this.printUnrecognized(t5.unrecognized), i4;
              }
              printCandidates(e5) {
                return e5.map((e6) => "a=candidate:".concat(e6.foundation).concat(r2).concat(e6.componentId).concat(r2).concat(e6.transport).concat(r2).concat(e6.priority).concat(r2).concat(e6.connectionAddress).concat(r2).concat(e6.port).concat(r2, "typ").concat(r2).concat(e6.type).concat(e6.relAddr ? "".concat(r2, "raddr").concat(r2).concat(e6.relAddr) : "").concat(e6.relPort ? "".concat(r2, "rport").concat(r2).concat(e6.relPort) : "").concat(Object.keys(e6.extension).map((t5) => "".concat(r2).concat(t5).concat(r2).concat(e6.extension[t5])).join("")).concat(this.eol)).join("");
              }
              printRemoteCandidatesList(e5) {
                return e5.map((e6) => "a=remote-candidates:".concat(e6.join(r2)).concat(this.eol)).join("");
              }
              printEndOfCandidates(e5) {
                return void 0 === e5 ? "" : "a=end-of-candidates" + this.eol;
              }
              printRTPRelated(e5) {
                if (!e5.payloads)
                  return "";
                const t5 = e5.payloads;
                let i4 = "";
                i4 += e5.rtcpFeedbackWildcards.map((e6) => this.printRTCPFeedback("*", e6)).join("");
                for (const e6 of t5)
                  i4 += this.printRtpMap(e6.payloadType, e6.rtpMap), i4 += this.printFmtp(e6.payloadType, e6.fmtp), i4 += e6.rtcpFeedbacks.map((t6) => this.printRTCPFeedback(e6.payloadType, t6)).join("");
                return i4;
              }
              printFmtp(e5, t5) {
                if (!t5)
                  return "";
                const i4 = Object.keys(t5.parameters);
                return 1 === i4.length && null === t5.parameters[i4[0]] ? "a=fmtp:".concat(e5).concat(r2).concat(i4[0]).concat(this.eol) : "a=fmtp:".concat(e5).concat(r2).concat(Object.keys(t5.parameters).map((e6) => "".concat(e6, "=").concat(t5.parameters[e6])).join(";")).concat(this.eol);
              }
              printRtpMap(e5, t5) {
                return t5 ? "a=rtpmap:".concat(e5).concat(r2).concat(t5.encodingName, "/").concat(t5.clockRate).concat(t5.encodingParameters ? "/".concat(t5.encodingParameters) : "").concat(this.eol) : "";
              }
              printRTCPFeedback(e5, t5) {
                let i4 = "a=rtcp-fb:".concat(e5).concat(r2), n3 = t5;
                return "trr-int" === n3.type ? i4 += "ttr-int".concat(r2).concat(n3.interval) : (i4 += "".concat(n3.type), n3.parameter && (i4 += "".concat(r2).concat(n3.parameter), n3.additional && (i4 += "".concat(r2).concat(n3.additional)))), i4 + this.eol;
              }
              printPtime(e5) {
                return void 0 === e5 ? "" : "a=ptime:".concat(e5).concat(this.eol);
              }
              printMaxPtime(e5) {
                return void 0 === e5 ? "" : "a=maxptime:".concat(e5).concat(this.eol);
              }
              printDirection(e5) {
                return void 0 === e5 ? "" : "a=".concat(e5).concat(this.eol);
              }
              printSSRC(e5) {
                return e5.map((e6) => Object.keys(e6.attributes).map((t5) => "a=ssrc:".concat(e6.ssrcId.toString(10)).concat(r2).concat(t5).concat(e6.attributes[t5] ? ":".concat(e6.attributes[t5]) : "").concat(this.eol)).join("")).join("");
              }
              printRTCPMux(e5) {
                return void 0 === e5 ? "" : "a=rtcp-mux".concat(this.eol);
              }
              printRTCPMuxOnly(e5) {
                return void 0 === e5 ? "" : "a=rtcp-mux-only".concat(this.eol);
              }
              printRTCPRsize(e5) {
                return void 0 === e5 ? "" : "a=rtcp-rsize".concat(this.eol);
              }
              printRTCP(e5) {
                if (void 0 === e5)
                  return "";
                let t5 = "a=rtcp:".concat(e5.port);
                return e5.netType && (t5 += "".concat(r2).concat(e5.netType)), e5.addressType && (t5 += "".concat(r2).concat(e5.addressType)), e5.address && (t5 += "".concat(r2).concat(e5.address)), t5 + this.eol;
              }
              printMSId(e5) {
                return e5.map((e6) => "a=msid:".concat(e6.id).concat(e6.appdata ? "".concat(r2).concat(e6.appdata) : "").concat(this.eol)).join("");
              }
              printImageattr(e5) {
                return e5.map((e6) => "a=imageattr:".concat(e6).concat(this.eol)).join("");
              }
              printRid(e5) {
                return e5.map((e6) => {
                  let t5 = "a=rid:".concat(e6.id).concat(r2).concat(e6.direction);
                  return e6.payloads && (t5 += "".concat(r2, "pt=").concat(e6.payloads.join(","))), e6.params.length > 0 && (t5 += "".concat(r2).concat(e6.params.map((e7) => "depend" === e7.type ? "depend=".concat(e7.rids.join(",")) : "".concat(e7.type, "=").concat(e7.val)).join(";"))), t5 + this.eol;
                }).join("");
              }
              printSimulcast(e5) {
                return void 0 === e5 ? "" : "a=simulcast:".concat(e5).concat(this.eol);
              }
              printSCTPPort(e5) {
                return void 0 === e5 ? "" : "a=sctp-port:".concat(e5).concat(this.eol);
              }
              printMaxMessageSize(e5) {
                return void 0 === e5 ? "" : "a=max-message-size:".concat(e5).concat(this.eol);
              }
              printMid(e5) {
                return void 0 === e5 ? "" : "a=mid:".concat(e5).concat(this.eol);
              }
              printSSRCGroups(e5) {
                return e5.map((e6) => "a=ssrc-group:".concat(e6.semantic).concat(e6.ssrcIds.map((e7) => "".concat(r2).concat(e7.toString(10))).join("")).concat(this.eol)).join("");
              }
            }
            function D2(e5) {
              return new C2().parse(e5);
            }
            function P2(e5, t5) {
              return new b2().print(e5, t5);
            }
          } }, t3 = {};
          function i2(n2) {
            if (t3[n2])
              return t3[n2].exports;
            var s2 = t3[n2] = { exports: {} };
            return e3[n2](s2, s2.exports, i2), s2.exports;
          }
          return i2.d = (e4, t4) => {
            for (var n2 in t4)
              i2.o(t4, n2) && !i2.o(e4, n2) && Object.defineProperty(e4, n2, { enumerable: true, get: t4[n2] });
          }, i2.o = (e4, t4) => Object.prototype.hasOwnProperty.call(e4, t4), i2.r = (e4) => {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e4, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(e4, "__esModule", { value: true });
          }, i2(8);
        })();
      }(KP);
      var YP = KP.exports;
      function qP(e2) {
        if (Array.isArray(e2))
          return e2.map((e3) => e3);
        if (!JP(e2))
          return e2;
        const t2 = {};
        for (const i2 in e2) {
          const n2 = e2[i2];
          JP(n2) || Array.isArray(n2) ? t2[i2] = qP(n2) : t2[i2] = n2;
        }
        return t2;
      }
      function JP(e2) {
        return !("object" != typeof e2 || Array.isArray(e2) || !e2);
      }
      class zP {
        constructor(e2) {
          nh(this, "input", []), nh(this, "size", void 0), this.size = e2;
        }
        add(e2) {
          this.input.push(e2), this.input.length > this.size && this.input.splice(0, 1);
        }
        diffMean() {
          return 0 === this.input.length ? 0 : (this.input[this.input.length - 1] - this.input[0]) / this.input.length;
        }
      }
      const XP = { address: "unknown", candidateType: "unknown", id: "unknown", port: 0, priority: 0, protocol: "unknown", type: "unknown" }, QP = { timestamp: 0, bitrate: { actualEncoded: 0, transmit: 0 }, sendPacketLossRate: 0, recvPacketLossRate: 0, videoRecv: [], videoSend: [], audioRecv: [], audioSend: [], selectedCandidatePair: { id: "unknown", localCandidate: XP, remoteCandidate: XP } }, ZP = { firsCount: 0, nacksCount: 0, plisCount: 0, framesDecodeCount: 0, framesDecodeInterval: 0, framesDecodeFreezeTime: 0, decodeFrameRate: 0, bytes: 0, packetsLost: 0, packetLostRate: 0, packets: 0, ssrc: 0, qpSumPerFrame: 0 }, $P = { firsCount: 0, nacksCount: 0, plisCount: 0, frameCount: 0, bytes: 0, packets: 0, packetsLost: 0, packetLostRate: 0, ssrc: 0, rttMs: 0, jitterMs: 0, qpSumPerFrame: 0 }, eL = { bytes: 0, packets: 0, packetsLost: 0, packetLostRate: 0, ssrc: 0, rttMs: 0, jitterMs: 0 }, tL = { jitterBufferMs: 0, jitterMs: 0, bytes: 0, packetsLost: 0, packetLostRate: 0, packets: 0, ssrc: 0, receivedFrames: 0, droppedFrames: 0, concealedSamples: 0 };
      function iL(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function nL(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? iL(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : iL(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      class sL {
        constructor(e2, t2) {
          nh(this, "onFirstVideoReceived", void 0), nh(this, "onFirstVideoDecoded", void 0), nh(this, "onFirstAudioReceived", void 0), nh(this, "onFirstVideoDecodedTimeout", void 0), nh(this, "onFirstAudioDecoded", void 0), nh(this, "onSelectedLocalCandidateChanged", void 0), nh(this, "onSelectedRemoteCandidateChanged", void 0), nh(this, "videoIsReady", false), nh(this, "videoIsReady2", {}), nh(this, "pc", void 0), nh(this, "options", void 0), nh(this, "intervalTimer", void 0), nh(this, "stats", qP(QP)), nh(this, "isFirstVideoReceived", {}), nh(this, "isFirstVideoDecoded", {}), nh(this, "isFirstAudioReceived", {}), nh(this, "isFirstAudioDecoded", {}), nh(this, "isFirstVideoDecodedTimeout", {}), nh(this, "lossRateWindowStats", []), this.pc = e2, this.options = t2, this.intervalTimer = window.setInterval(async () => {
            this.updateStats();
          }, this.options.updateInterval);
        }
        getStats() {
          return this.stats;
        }
        getSelectedCandidatePair() {
          return new tT((e2) => {
            e2({ local: nL({}, XP), remote: nL({}, XP) });
          });
        }
        setVideoIsReady(e2) {
          this.videoIsReady = e2;
        }
        setVideoIsReady2(e2, t2) {
          this.videoIsReady2[e2] = t2;
        }
        getVideoIsReady(e2) {
          return this.videoIsReady2[e2] || false;
        }
        setIsFirstAudioDecoded(e2) {
        }
        destroy() {
          window.clearInterval(this.intervalTimer), this.pc = void 0;
        }
        calcLossRate(e2) {
          this.lossRateWindowStats.push(e2), this.lossRateWindowStats.length > this.options.lossRateInterval && this.lossRateWindowStats.splice(0, 1);
          const t2 = this.lossRateWindowStats.length, i2 = ["videoSend", "audioSend", "videoRecv", "audioRecv"];
          let n2 = 0, s2 = 0, r2 = 0, o2 = 0;
          for (const a2 of i2)
            e2[a2].forEach((e3, i3) => {
              if (!this.lossRateWindowStats[t2 - 1][a2][i3] || !this.lossRateWindowStats[0][a2][i3])
                return;
              const c2 = this.lossRateWindowStats[t2 - 1][a2][i3].packets - this.lossRateWindowStats[0][a2][i3].packets, d2 = this.lossRateWindowStats[t2 - 1][a2][i3].packetsLost - this.lossRateWindowStats[0][a2][i3].packetsLost;
              "videoSend" === a2 || "audioSend" === a2 ? (n2 += c2, r2 += d2) : (s2 += c2, o2 += d2), Number.isNaN(c2) || Number.isNaN(c2) ? e3.packetLostRate = 0 : e3.packetLostRate = c2 <= 0 || d2 <= 0 ? 0 : d2 / (c2 + d2);
            });
          e2.sendPacketLossRate = n2 <= 0 || r2 <= 0 ? 0 : r2 / (n2 + r2), e2.recvPacketLossRate = s2 <= 0 || o2 <= 0 ? 0 : o2 / (s2 + o2);
        }
      }
      function rL(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function oL(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? rL(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : rL(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      class aL extends sL {
        constructor() {
          super(...arguments), nh(this, "_stats", QP), nh(this, "lastDecodeVideoReceiverStats", /* @__PURE__ */ new Map());
        }
        async updateStats() {
          const e2 = await this._getStats(), t2 = this.statsResponsesToObjects(e2);
          this._stats = qP(QP);
          const i2 = t2.filter((e3) => "ssrc" === e3.type);
          this.processSSRCStats(i2);
          const n2 = t2.find((e3) => "VideoBwe" === e3.type);
          n2 && this.processBandwidthStats(n2), this._stats.timestamp = Date.now(), this.calcLossRate(this._stats), this.stats = this._stats;
        }
        processBandwidthStats(e2) {
          this._stats.bitrate = { actualEncoded: Number(e2.googActualEncBitrate), targetEncoded: Number(e2.googTargetEncBitrate), retransmit: Number(e2.googRetransmitBitrate), transmit: Number(e2.googTransmitBitrate) }, this._stats.sendBandwidth = Number(e2.googAvailableSendBandwidth);
        }
        processSSRCStats(e2) {
          e2.forEach((e3) => {
            var t2;
            const i2 = bn(t2 = e3.id).call(t2, "send");
            switch ("".concat(e3.mediaType, "_").concat(i2 ? "send" : "recv")) {
              case "video_send": {
                const t3 = qP($P);
                t3.codec = e3.googCodecName, t3.adaptionChangeReason = "none", e3.googCpuLimitedResolution && (t3.adaptionChangeReason = "cpu"), e3.googBandwidthLimitedResolution && (t3.adaptionChangeReason = "bandwidth"), t3.avgEncodeMs = Number(e3.googAvgEncodeMs), t3.inputFrame = { width: Number(e3.googFrameWidthInput) || Number(e3.googFrameWidthSent), height: Number(e3.googFrameHeightInput) || Number(e3.googFrameHeightSent), frameRate: Number(e3.googFrameRateInput) }, t3.sentFrame = { width: Number(e3.googFrameWidthSent), height: Number(e3.googFrameHeightSent), frameRate: Number(e3.googFrameRateInput) }, t3.firsCount = Number(e3.googFirReceived), t3.nacksCount = Number(e3.googNacksReceived), t3.plisCount = Number(e3.googPlisReceived), t3.frameCount = Number(e3.framesEncoded), t3.bytes = Number(e3.bytesSent), t3.packets = Number(e3.packetsSent), t3.packetsLost = Number(e3.packetsLost), t3.ssrc = Number(e3.ssrc), t3.rttMs = Number(e3.googRtt || 0), this._stats.videoSend.push(t3), this._stats.rtt = t3.rttMs;
                break;
              }
              case "video_recv": {
                const t3 = qP(ZP), i3 = this.lastDecodeVideoReceiverStats.get(Number(e3.ssrc));
                if (t3.codec = e3.googCodecName, t3.targetDelayMs = Number(e3.googTargetDelayMs), t3.renderDelayMs = Number(e3.googRenderDelayMs), t3.currentDelayMs = Number(e3.googCurrentDelayMs), t3.minPlayoutDelayMs = Number(e3.googMinPlayoutDelayMs), t3.decodeMs = Number(e3.googDecodeMs), t3.maxDecodeMs = Number(e3.googMaxDecodeMs), t3.receivedFrame = { width: Number(e3.googFrameWidthReceived), height: Number(e3.googFrameHeightReceived), frameRate: Number(e3.googFrameRateReceived) }, t3.decodedFrame = { width: Number(e3.googFrameWidthReceived), height: Number(e3.googFrameHeightReceived), frameRate: Number(e3.googFrameRateDecoded) }, t3.decodeFrameRate = Number(e3.googFrameRateDecoded), t3.outputFrame = { width: Number(e3.googFrameWidthReceived), height: Number(e3.googFrameHeightReceived), frameRate: Number(e3.googFrameRateOutput) }, t3.jitterBufferMs = Number(e3.googJitterBufferMs), t3.firsCount = Number(e3.googFirsSent), t3.nacksCount = Number(e3.googNacksSent), t3.plisCount = Number(e3.googPlisSent), t3.framesDecodeCount = Number(e3.framesDecoded), t3.bytes = Number(e3.bytesReceived), t3.packets = Number(e3.packetsReceived), t3.packetsLost = Number(e3.packetsLost), t3.ssrc = Number(e3.ssrc), t3.packets > 0 && !this.isFirstVideoReceived[t3.ssrc] && (this.onFirstVideoReceived && this.onFirstVideoReceived(t3.ssrc), this.isFirstVideoReceived[t3.ssrc] = true), t3.framesDecodeCount > 0 && !this.isFirstVideoDecoded[t3.ssrc] && (this.onFirstVideoDecoded && this.onFirstVideoDecoded(t3.ssrc, t3.decodedFrame.width, t3.decodedFrame.height), this.isFirstVideoDecoded[t3.ssrc] = true), i3) {
                  const n2 = i3.stats, s2 = Date.now() - i3.lts;
                  t3.framesDecodeFreezeTime = n2.framesDecodeFreezeTime, t3.framesDecodeInterval = n2.framesDecodeInterval, t3.framesDecodeCount > n2.framesDecodeCount && this.isFirstVideoDecoded[t3.ssrc] ? (i3.lts = Date.now(), t3.framesDecodeInterval = s2, t3.framesDecodeInterval >= this.options.freezeRateLimit && (this.getVideoIsReady(parseInt(e3.ssrc, 10)) ? t3.framesDecodeFreezeTime += t3.framesDecodeInterval : this.setVideoIsReady2(parseInt(e3.ssrc, 10), true))) : t3.framesDecodeCount < i3.stats.framesDecodeCount && (t3.framesDecodeInterval = 0);
                }
                this.lastDecodeVideoReceiverStats.set(t3.ssrc, { stats: oL({}, t3), lts: Date.now() }), this._stats.videoRecv.push(t3);
                break;
              }
              case "audio_recv": {
                const t3 = qP(tL);
                t3.codec = e3.googCodecName, t3.outputLevel = Math.abs(Number(e3.audioOutputLevel)) / 32767, t3.decodingCNG = Number(e3.googDecodingCNG), t3.decodingCTN = Number(e3.googDecodingCTN), t3.decodingCTSG = Number(e3.googDecodingCTSG), t3.decodingNormal = Number(e3.googDecodingNormal), t3.decodingPLC = Number(e3.googDecodingPLC), t3.decodingPLCCNG = Number(e3.googDecodingPLCCNG), t3.expandRate = Number(e3.googExpandRate), t3.accelerateRate = Number(e3.googAccelerateRate), t3.preemptiveExpandRate = Number(e3.googPreemptiveExpandRate), t3.secondaryDecodedRate = Number(e3.googSecondaryDecodedRate), t3.speechExpandRate = Number(e3.googSpeechExpandRate), t3.preferredJitterBufferMs = Number(e3.googPreferredJitterBufferMs), t3.jitterBufferMs = Number(e3.googJitterBufferMs), t3.jitterMs = Number(e3.googJitterReceived), t3.bytes = Number(e3.bytesReceived), t3.packets = Number(e3.packetsReceived), t3.packetsLost = Number(e3.packetsLost), t3.ssrc = Number(e3.ssrc), t3.receivedFrames = Number(e3.googDecodingCTN) || Number(e3.packetsReceived), t3.droppedFrames = Number(e3.googDecodingPLC) + Number(e3.googDecodingPLCCNG) || Number(e3.packetsLost), t3.receivedFrames > 0 && !this.isFirstAudioReceived[t3.ssrc] && (this.onFirstAudioReceived && this.onFirstAudioReceived(t3.ssrc), this.isFirstAudioReceived[t3.ssrc] = true), t3.decodingNormal > 0 && !this.isFirstAudioDecoded[t3.ssrc] && (this.onFirstAudioDecoded && this.onFirstAudioDecoded(t3.ssrc), this.isFirstAudioDecoded[t3.ssrc] = true), this._stats.audioRecv.push(t3);
                break;
              }
              case "audio_send": {
                const t3 = qP(eL);
                t3.codec = e3.googCodecName, t3.inputLevel = Math.abs(Number(e3.audioInputLevel)) / 32767, t3.aecReturnLoss = Number(e3.googEchoCancellationReturnLoss || 0), t3.aecReturnLossEnhancement = Number(e3.googEchoCancellationReturnLossEnhancement || 0), t3.residualEchoLikelihood = Number(e3.googResidualEchoLikelihood || 0), t3.residualEchoLikelihoodRecentMax = Number(e3.googResidualEchoLikelihoodRecentMax || 0), t3.bytes = Number(e3.bytesSent), t3.packets = Number(e3.packetsSent), t3.packetsLost = Number(e3.packetsLost), t3.ssrc = Number(e3.ssrc), t3.rttMs = Number(e3.googRtt || 0), this._stats.rtt = t3.rttMs, this._stats.audioSend.push(t3);
                break;
              }
            }
          });
        }
        _getStats() {
          return new tT((e2, t2) => {
            this.pc.getStats(e2, t2);
          });
        }
        statsResponsesToObjects(e2) {
          const t2 = [];
          return e2.result().forEach((e3) => {
            const i2 = { id: e3.id, timestamp: e3.timestamp.valueOf().toString(), type: e3.type };
            e3.names().forEach((t3) => {
              i2[t3] = e3.stat(t3);
            }), t2.push(i2);
          }), t2;
        }
      }
      function cL(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function dL(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? cL(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : cL(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      class lL extends sL {
        constructor() {
          super(...arguments), nh(this, "_stats", QP), nh(this, "report", void 0), nh(this, "lastDecodeVideoReceiverStats", /* @__PURE__ */ new Map()), nh(this, "lastVideoFramesRecv", /* @__PURE__ */ new Map()), nh(this, "lastVideoFramesSent", /* @__PURE__ */ new Map()), nh(this, "lastVideoFramesDecode", /* @__PURE__ */ new Map()), nh(this, "lastVideoJBDelay", /* @__PURE__ */ new Map()), nh(this, "lastAudioJBDelay", /* @__PURE__ */ new Map()), nh(this, "mediaBytesSent", /* @__PURE__ */ new Map()), nh(this, "mediaBytesRetransmit", /* @__PURE__ */ new Map()), nh(this, "mediaBytesTargetEncode", /* @__PURE__ */ new Map()), nh(this, "lastEncoderMs", /* @__PURE__ */ new Map());
        }
        async updateStats() {
          this.report = await this.pc.getStats(), this._stats = qP(QP), this.report.forEach((e2) => {
            switch (e2.type) {
              case hI.OUTBOUND:
              case hI.INBOUND: {
                const t2 = e2.mediaType || e2.kind, i2 = !t2 && "frameWidth" in e2, n2 = !t2 && !("frameWidth" in e2);
                e2.type === hI.OUTBOUND ? "audio" === t2 || n2 ? this.processAudioOutboundStats(e2) : ("video" === t2 || i2) && this.processVideoOutboundStats(e2) : e2.type === hI.INBOUND && ("audio" === t2 || n2 ? this.processAudioInboundStats(e2) : ("video" === t2 || i2) && this.processVideoInboundStats(e2));
                break;
              }
              case hI.TRANSPORT: {
                const t2 = this.report.get(e2.selectedCandidatePairId);
                t2 && this.processCandidatePairStats(t2);
                break;
              }
              case hI.CANDIDATE_PAIR:
                e2.selected && this.processCandidatePairStats(e2);
            }
          }), this.updateSendBitrate(), this._stats.timestamp = Date.now(), this.calcLossRate(this._stats), this.stats = this._stats;
        }
        async getSelectedCandidatePair() {
          const e2 = await this.pc.getStats(), t2 = { local: dL({}, XP), remote: dL({}, XP) };
          return e2.forEach((i2) => {
            let n2;
            if (i2.type === hI.TRANSPORT && (n2 = e2.get(i2.selectedCandidatePairId)), i2.type === hI.CANDIDATE_PAIR && i2.selected && (n2 = i2), n2) {
              const i3 = (e3, t3) => {
                e3.type = t3.type, e3.id = t3.id, t3.address && (e3.address = t3.address), t3.candidateType && (e3.candidateType = t3.candidateType), t3.port && (e3.port = t3.port), t3.priority && (e3.priority = t3.priority), t3.protocol && (e3.protocol = t3.protocol), t3.relayProtocol && (e3.relayProtocol = t3.relayProtocol);
              };
              if (n2.localCandidateId) {
                const s2 = e2.get(n2.localCandidateId);
                s2 && i3(t2.local, s2);
              }
              if (n2.remoteCandidateId) {
                const s2 = e2.get(n2.remoteCandidateId);
                s2 && i3(t2.remote, s2);
              }
            }
          }), t2;
        }
        processCandidatePairStats(e2) {
          if (this._stats.sendBandwidth = e2.availableOutgoingBitrate || 0, e2.currentRoundTripTime && (this._stats.rtt = 1e3 * e2.currentRoundTripTime), this._stats.videoSend.forEach((t2) => {
            e2.currentRoundTripTime && (t2.rttMs = 1e3 * e2.currentRoundTripTime);
          }), this._stats.audioSend.forEach((t2) => {
            e2.currentRoundTripTime && (t2.rttMs = 1e3 * e2.currentRoundTripTime);
          }), this._stats.selectedCandidatePair.id = e2.id, e2.localCandidateId) {
            const t2 = this.report.get(e2.localCandidateId);
            t2 && this.processCandidateStats(t2);
          }
          if (e2.remoteCandidateId) {
            const t2 = this.report.get(e2.remoteCandidateId);
            t2 && this.processCandidateStats(t2);
          }
        }
        processCandidateStats(e2) {
          let t2;
          e2.type === hI.LOCAL_CANDIDATE && (t2 = this._stats.selectedCandidatePair.localCandidate), e2.type === hI.REMOTE_CANDIDATE && (t2 = this._stats.selectedCandidatePair.remoteCandidate), t2 && (t2.type = e2.type, t2.id = e2.id, e2.address && (t2.address = e2.address), e2.candidateType && (t2.candidateType = e2.candidateType), e2.port && (t2.port = e2.port), e2.priority && (t2.priority = e2.priority), e2.protocol && (t2.protocol = e2.protocol), e2.relayProtocol && (t2.relayProtocol = e2.relayProtocol), e2.type === hI.LOCAL_CANDIDATE && this.stats.selectedCandidatePair.localCandidate.id !== t2.id && this.onSelectedLocalCandidateChanged && this.onSelectedLocalCandidateChanged(dL({}, t2), dL({}, this.stats.selectedCandidatePair.localCandidate)), e2.type === hI.REMOTE_CANDIDATE && this.stats.selectedCandidatePair.remoteCandidate.id !== t2.id && this.onSelectedRemoteCandidateChanged && this.onSelectedRemoteCandidateChanged(dL({}, t2), dL({}, this.stats.selectedCandidatePair.remoteCandidate)));
        }
        processAudioInboundStats(e2) {
          let t2 = this._stats.audioRecv.find((t3) => t3.ssrc === e2.ssrc);
          t2 || (t2 = qP(tL), this._stats.audioRecv.push(t2)), t2.ssrc = e2.ssrc, t2.packets = e2.packetsReceived, t2.packetsLost = e2.packetsLost, t2.bytes = e2.bytesReceived, t2.jitterMs = 1e3 * e2.jitter, this.processAudioTrackReceiverStats(e2, e2.trackId, t2), e2.codecId && (t2.codec = this.getCodecFromCodecStats(e2.codecId)), t2.receivedFrames || (t2.receivedFrames = e2.packetsReceived), t2.droppedFrames || (t2.droppedFrames = e2.packetsLost), t2.receivedFrames > 0 && !this.isFirstAudioReceived[t2.ssrc] && (this.onFirstAudioReceived && this.onFirstAudioReceived(t2.ssrc), this.isFirstAudioReceived[t2.ssrc] = true), t2.outputLevel && t2.outputLevel > 0 && !this.isFirstAudioDecoded[t2.ssrc] && (this.onFirstAudioDecoded && this.onFirstAudioDecoded(t2.ssrc), this.isFirstAudioDecoded[t2.ssrc] = true), "number" == typeof e2.concealedSamples && (t2.concealedSamples = e2.concealedSamples);
        }
        processVideoInboundStats(e2) {
          let t2 = this._stats.videoRecv.find((t3) => t3.ssrc === e2.ssrc);
          t2 || (t2 = qP(ZP), this._stats.videoRecv.push(t2)), t2.ssrc = e2.ssrc, t2.packets = e2.packetsReceived, t2.packetsLost = e2.packetsLost, t2.bytes = e2.bytesReceived, t2.firsCount = e2.firCount, t2.nacksCount = e2.nackCount, t2.plisCount = e2.pliCount, t2.framesDecodeCount = e2.framesDecoded, t2.totalInterFrameDelay = e2.totalInterFrameDelay, t2.totalSquaredInterFrameDelay = e2.totalSquaredInterFrameDelay;
          const i2 = this.lastDecodeVideoReceiverStats.get(t2.ssrc), n2 = this.lastVideoFramesDecode.get(t2.ssrc), s2 = Date.now();
          if (t2.framesDecodeCount > 0 && !this.isFirstVideoDecoded[t2.ssrc]) {
            const e3 = t2.decodedFrame ? t2.decodedFrame.width : 0, i3 = t2.decodedFrame ? t2.decodedFrame.height : 0;
            this.onFirstVideoDecoded && this.onFirstVideoDecoded(t2.ssrc, e3, i3), this.isFirstVideoDecoded[t2.ssrc] = true;
          }
          if (i2) {
            const n3 = i2.stats, r2 = s2 - i2.lts;
            t2.framesDecodeFreezeTime = n3.framesDecodeFreezeTime, t2.framesDecodeInterval = n3.framesDecodeInterval, !this.isFirstVideoDecoded[t2.ssrc] && r2 > this.options.firstVideoDecodedTimeout && !this.isFirstVideoDecodedTimeout[t2.ssrc] && (this.onFirstVideoDecodedTimeout && this.onFirstVideoDecodedTimeout(t2.ssrc), this.isFirstVideoDecodedTimeout[t2.ssrc] = true), t2.framesDecodeCount > n3.framesDecodeCount && this.isFirstVideoDecoded[t2.ssrc] ? (i2.lts = Date.now(), t2.framesDecodeInterval = r2, t2.framesDecodeInterval >= this.options.freezeRateLimit && (this.getVideoIsReady(parseInt(e2.ssrc)) ? t2.framesDecodeFreezeTime += t2.framesDecodeInterval : this.setVideoIsReady2(parseInt(e2.ssrc, 10), true))) : t2.framesDecodeCount < n3.framesDecodeCount && (t2.framesDecodeInterval = 0), e2.framesDecoded && e2.qpSum && (i2.stats.framesDecodeCount > e2.framesDecoded ? t2.qpSumPerFrame = e2.qpSum / e2.framesDecoded : t2.qpSumPerFrame = (e2.qpSum - i2.qpSum) / (e2.framesDecoded - i2.stats.framesDecodeCount));
          }
          n2 && s2 - n2.lts >= 800 ? (t2.decodeFrameRate = Math.round((t2.framesDecodeCount - n2.count) / ((s2 - n2.lts) / 1e3)), this.lastVideoFramesDecode.set(t2.ssrc, { count: t2.framesDecodeCount, lts: s2, rate: t2.decodeFrameRate })) : n2 ? t2.decodeFrameRate = n2.rate : this.lastVideoFramesDecode.set(t2.ssrc, { count: t2.framesDecodeCount, lts: s2, rate: 0 }), e2.totalDecodeTime && (t2.decodeMs = 1e3 * e2.totalDecodeTime), this.processVideoTrackReceiverStats(e2, e2.trackId, t2), e2.codecId && (t2.codec = this.getCodecFromCodecStats(e2.codecId)), e2.framerateMean && (t2.framesRateFirefox = e2.framerateMean), t2.packets > 0 && !this.isFirstVideoReceived[t2.ssrc] && (this.onFirstVideoReceived && this.onFirstVideoReceived(t2.ssrc), this.isFirstVideoReceived[t2.ssrc] = true), this.lastDecodeVideoReceiverStats.set(t2.ssrc, { stats: dL({}, t2), lts: i2 ? i2.lts : Date.now(), qpSum: e2.qpSum });
        }
        processVideoOutboundStats(e2) {
          let t2 = this._stats.videoSend.find((t3) => t3.ssrc === e2.ssrc);
          t2 || (t2 = qP($P), this._stats.videoSend.push(t2));
          const i2 = this.mediaBytesSent.get(e2.ssrc);
          if (i2)
            i2.add(e2.bytesSent);
          else {
            const t3 = new zP(10);
            t3.add(e2.bytesSent), this.mediaBytesSent.set(e2.ssrc, t3);
          }
          if (void 0 !== e2.retransmittedBytesSent) {
            const t3 = this.mediaBytesRetransmit.get(e2.ssrc);
            if (t3)
              t3.add(e2.retransmittedBytesSent);
            else {
              const t4 = new zP(10);
              t4.add(e2.retransmittedBytesSent), this.mediaBytesRetransmit.set(e2.ssrc, t4);
            }
          }
          if (e2.totalEncodedBytesTarget) {
            const t3 = this.mediaBytesTargetEncode.get(e2.ssrc);
            if (t3)
              t3.add(e2.totalEncodedBytesTarget);
            else {
              const t4 = new zP(10);
              t4.add(e2.totalEncodedBytesTarget), this.mediaBytesTargetEncode.set(e2.ssrc, t4);
            }
          }
          if (t2.ssrc = e2.ssrc, t2.bytes = e2.bytesSent, t2.packets = e2.packetsSent, t2.firsCount = e2.firCount, t2.nacksCount = e2.nackCount, t2.plisCount = e2.pliCount, t2.frameCount = e2.framesEncoded, t2.adaptionChangeReason = e2.qualityLimitationReason, t2.scalabilityMode = e2.scalabilityMode, e2.totalEncodeTime && e2.framesEncoded) {
            const i3 = this.lastEncoderMs.get(e2.ssrc);
            if (!i3 || i3.lastFrameCount > e2.framesEncoded)
              t2.avgEncodeMs = 1e3 * e2.totalEncodeTime / e2.framesEncoded;
            else {
              const n2 = e2.framesEncoded - i3.lastFrameCount, s2 = e2.totalEncodeTime - i3.lastEncoderTime;
              t2.avgEncodeMs = 1e3 * s2 / n2;
            }
          }
          if (e2.framesEncoded && e2.qpSum) {
            const i3 = this.lastEncoderMs.get(e2.ssrc);
            !i3 || i3.lastFrameCount > e2.framesEncoded ? t2.qpSumPerFrame = e2.qpSum / e2.framesEncoded : t2.qpSumPerFrame = (e2.qpSum - i3.lastQpSum) / (e2.framesEncoded - i3.lastFrameCount);
          }
          if (this.lastEncoderMs.set(e2.ssrc, { lastFrameCount: e2.framesEncoded, lastEncoderTime: e2.totalEncodeTime, lastQpSum: e2.qpSum, lts: Date.now() }), e2.codecId && (t2.codec = this.getCodecFromCodecStats(e2.codecId)), e2.mediaSourceId && this.processVideoMediaSource(e2.mediaSourceId, t2), this.processVideoTrackSenderStats(e2, e2.trackId, t2), e2.remoteId)
            this.processRemoteInboundStats(e2.remoteId, t2);
          else {
            const i3 = this.findRemoteStatsId(e2.ssrc, hI.REMOTE_INBOUND);
            i3 && this.processRemoteInboundStats(i3, t2);
          }
        }
        processAudioOutboundStats(e2) {
          let t2 = this._stats.audioSend.find((t3) => t3.ssrc === e2.ssrc);
          if (t2 || (t2 = qP(eL), this._stats.audioSend.push(t2)), t2.ssrc = e2.ssrc, t2.packets = e2.packetsSent, t2.bytes = e2.bytesSent, e2.mediaSourceId && this.processAudioMediaSource(e2.mediaSourceId, t2), e2.codecId && (t2.codec = this.getCodecFromCodecStats(e2.codecId)), this.processAudioTrackSenderStats(e2, e2.trackId, t2), e2.remoteId)
            this.processRemoteInboundStats(e2.remoteId, t2);
          else {
            const i2 = this.findRemoteStatsId(e2.ssrc, hI.REMOTE_INBOUND);
            i2 && this.processRemoteInboundStats(i2, t2);
          }
        }
        findRemoteStatsId(e2, t2) {
          var i2;
          const n2 = Array.from(MI(i2 = this.report).call(i2)).find((i3) => i3.type === t2 && i3.ssrc === e2);
          return n2 ? n2.id : null;
        }
        processVideoMediaSource(e2, t2) {
          const i2 = this.report.get(e2);
          i2 && i2.width && i2.height && i2.framesPerSecond && (t2.inputFrame = { width: i2.width, height: i2.height, frameRate: i2.framesPerSecond });
        }
        processAudioMediaSource(e2, t2) {
          const i2 = this.report.get(e2);
          i2 && (t2.inputLevel = i2.audioLevel);
        }
        processVideoTrackSenderStats(e2, t2, i2) {
          var n2, s2, r2, o2;
          const a2 = t2 ? this.report.get(t2) : void 0, c2 = null !== (n2 = null == a2 ? void 0 : a2.framesSent) && void 0 !== n2 ? n2 : e2.framesSent;
          if ("number" != typeof c2)
            return;
          let d2 = null !== (s2 = null == a2 ? void 0 : a2.frameWidth) && void 0 !== s2 ? s2 : e2.frameWidth, l2 = null !== (r2 = null == a2 ? void 0 : a2.frameHeight) && void 0 !== r2 ? r2 : e2.frameHeight, u2 = null !== (o2 = null == a2 ? void 0 : a2.framesPerSecond) && void 0 !== o2 ? o2 : e2.framesPerSecond;
          if ("number" == typeof d2 && "number" == typeof l2 || (d2 = 0, l2 = 0), null == u2) {
            const e3 = Date.now(), t3 = this.lastVideoFramesSent.get(i2.ssrc);
            t3 && e3 - t3.lts >= 800 ? (u2 = Math.round((c2 - t3.count) / ((e3 - t3.lts) / 1e3)), this.lastVideoFramesSent.set(i2.ssrc, { count: c2, lts: e3, rate: u2 })) : t3 ? u2 = t3.rate : this.lastVideoFramesSent.set(i2.ssrc, { count: c2, lts: e3, rate: 0 });
          }
          i2.sentFrame = { width: d2, height: l2, frameRate: Math.max(0, u2) };
        }
        processVideoTrackReceiverStats(e2, t2, i2) {
          var n2, s2, r2, o2, a2;
          const c2 = t2 ? this.report.get(t2) : void 0, d2 = null !== (n2 = null == c2 ? void 0 : c2.framesReceived) && void 0 !== n2 ? n2 : e2.framesReceived, l2 = null !== (s2 = null == c2 ? void 0 : c2.frameWidth) && void 0 !== s2 ? s2 : e2.frameWidth, u2 = null !== (r2 = null == c2 ? void 0 : c2.frameHeight) && void 0 !== r2 ? r2 : e2.frameHeight, h2 = null !== (o2 = null == c2 ? void 0 : c2.jitterBufferDelay) && void 0 !== o2 ? o2 : e2.jitterBufferDelay, p2 = null !== (a2 = null == c2 ? void 0 : c2.jitterBufferEmittedCount) && void 0 !== a2 ? a2 : e2.jitterBufferEmittedCount;
          if ("number" == typeof d2) {
            const e3 = this.lastVideoFramesRecv.get(i2.ssrc), t3 = Date.now();
            i2.framesReceivedCount = d2;
            let n3 = 0;
            e3 && t3 - e3.lts >= 800 ? (n3 = Math.round((d2 - e3.count) / ((t3 - e3.lts) / 1e3)), this.lastVideoFramesRecv.set(i2.ssrc, { count: d2, lts: t3, rate: n3 })) : e3 ? n3 = e3.rate : this.lastVideoFramesRecv.set(i2.ssrc, { count: d2, lts: t3, rate: 0 }), i2.receivedFrame = { width: l2 || 0, height: u2 || 0, frameRate: n3 || 0 }, i2.decodedFrame = { width: l2 || 0, height: u2 || 0, frameRate: i2.decodeFrameRate || 0 }, i2.outputFrame = { width: l2 || 0, height: u2 || 0, frameRate: i2.decodeFrameRate || 0 };
          }
          if (h2 && p2) {
            const e3 = this.lastVideoJBDelay.get(i2.ssrc) || { jitterBufferDelay: 0, jitterBufferEmittedCount: 0, jitterBufferMs: 0 };
            let t3 = e3.jitterBufferMs;
            const n3 = p2 - e3.jitterBufferEmittedCount;
            n3 > 0 && (t3 = 1e3 * (h2 - e3.jitterBufferDelay) / n3), i2.jitterBufferMs = t3, i2.currentDelayMs = Math.round(t3), this.lastVideoJBDelay.set(i2.ssrc, { jitterBufferDelay: h2, jitterBufferEmittedCount: p2, jitterBufferMs: i2.currentDelayMs });
          }
        }
        processAudioTrackSenderStats(e2, t2, i2) {
          var n2, s2, r2, o2;
          const a2 = t2 ? this.report.get(t2) : void 0, c2 = null !== (n2 = null !== (s2 = null == a2 ? void 0 : a2.echoReturnLoss) && void 0 !== s2 ? s2 : e2.echoReturnLoss) && void 0 !== n2 ? n2 : 0, d2 = null !== (r2 = null !== (o2 = null == a2 ? void 0 : a2.echoReturnLossEnhancement) && void 0 !== o2 ? o2 : e2.echoReturnLossEnhancement) && void 0 !== r2 ? r2 : 0;
          i2.aecReturnLoss = c2, i2.aecReturnLossEnhancement = d2;
        }
        processAudioTrackReceiverStats(e2, t2, i2) {
          var n2, s2, r2, o2, a2, c2, d2;
          const l2 = t2 ? this.report.get(t2) : void 0, u2 = null !== (n2 = null == l2 ? void 0 : l2.removedSamplesForAcceleration) && void 0 !== n2 ? n2 : e2.removedSamplesForAcceleration, h2 = null !== (s2 = null == l2 ? void 0 : l2.totalSamplesReceived) && void 0 !== s2 ? s2 : e2.totalSamplesReceived, p2 = null !== (r2 = null == l2 ? void 0 : l2.jitterBufferDelay) && void 0 !== r2 ? r2 : e2.jitterBufferDelay, _2 = null !== (o2 = null == l2 ? void 0 : l2.jitterBufferEmittedCount) && void 0 !== o2 ? o2 : e2.jitterBufferEmittedCount, E2 = null !== (a2 = null == l2 ? void 0 : l2.audioLevel) && void 0 !== a2 ? a2 : null == e2 ? void 0 : e2.audioLevel, m2 = null !== (c2 = null == l2 ? void 0 : l2.totalSamplesDuration) && void 0 !== c2 ? c2 : null == e2 ? void 0 : e2.totalSamplesDuration, f2 = null !== (d2 = null == l2 ? void 0 : l2.concealedSamples) && void 0 !== d2 ? d2 : e2.concealedSamples;
          if (u2 && h2 && (i2.accelerateRate = u2 / h2), p2 && _2) {
            const e3 = this.lastAudioJBDelay.get(i2.ssrc) || { jitterBufferDelay: 0, jitterBufferEmittedCount: 0, jitterBufferMs: 0 };
            let t3 = e3.jitterBufferMs;
            const n3 = _2 - e3.jitterBufferEmittedCount;
            n3 > 0 && (t3 = 1e3 * (p2 - e3.jitterBufferDelay) / n3), i2.jitterBufferMs = Math.round(t3), this.lastAudioJBDelay.set(i2.ssrc, { jitterBufferDelay: p2, jitterBufferEmittedCount: _2, jitterBufferMs: i2.jitterBufferMs });
          }
          i2.outputLevel = E2;
          let T2 = 1920;
          m2 && h2 && (T2 = h2 / m2 / 50, i2.receivedFrames = Math.round(h2 / T2)), f2 && (i2.droppedFrames = Math.round(f2 / T2));
        }
        processRemoteInboundStats(e2, t2) {
          const i2 = this.report.get(e2);
          i2 && (t2.packetsLost = i2.packetsLost, i2.roundTripTime && (t2.rttMs = 1e3 * i2.roundTripTime), i2.jitter && (t2.jitterMs = 1e3 * i2.jitter), i2.timestamp && (t2.timestamp = i2.timestamp));
        }
        getCodecFromCodecStats(e2) {
          const t2 = this.report.get(e2);
          if (!t2)
            return "";
          const i2 = t2.mimeType.match(/\/(.*)$/);
          return i2 && i2[1] ? i2[1] : "";
        }
        updateSendBitrate() {
          let e2 = 0, t2 = null, i2 = null;
          this.mediaBytesSent.forEach((t3) => {
            e2 += t3.diffMean();
          }), this.mediaBytesRetransmit.forEach((e3) => {
            t2 = null === t2 ? e3.diffMean() : t2 + e3.diffMean();
          }), this.mediaBytesTargetEncode.forEach((e3) => {
            i2 = null === i2 ? e3.diffMean() : i2 + e3.diffMean();
          });
          const n2 = null !== t2 ? e2 - t2 : e2;
          this._stats.bitrate = { actualEncoded: 8 * n2 / (this.options.updateInterval / 1e3), transmit: 8 * e2 / (this.options.updateInterval / 1e3) }, null !== t2 && (this._stats.bitrate.retransmit = 8 * t2 / (this.options.updateInterval / 1e3)), null !== i2 && (this._stats.bitrate.targetEncoded = 8 * i2 / (this.options.updateInterval / 1e3));
        }
      }
      class uL extends sL {
        updateStats() {
          return tT.resolve();
        }
      }
      function hL(e2) {
        let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 250, i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 8, n2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 500, s2 = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 1e4;
        const r2 = function() {
          const e3 = navigator.userAgent.toLocaleLowerCase().match(/chrome\/[\d]*/i);
          return e3 && e3[0] ? Number(e3[0].split("/")[1]) : null;
        }();
        return r2 ? r2 < 76 ? new aL(e2, { updateInterval: t2, lossRateInterval: i2, freezeRateLimit: n2, firstVideoDecodedTimeout: s2 }) : new lL(e2, { updateInterval: t2, lossRateInterval: i2, freezeRateLimit: n2, firstVideoDecodedTimeout: s2 }) : function(e3) {
          return !!window.RTCStatsReport && e3.getStats() instanceof tT;
        }(e2) ? new lL(e2, { updateInterval: t2, lossRateInterval: i2, freezeRateLimit: n2, firstVideoDecodedTimeout: s2 }) : new uL(e2, { updateInterval: t2, lossRateInterval: i2, freezeRateLimit: n2, firstVideoDecodedTimeout: s2 });
      }
      function pL(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function _L(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? pL(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : pL(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      function EL(e2) {
        let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, n2 = arguments.length > 3 ? arguments[3] : void 0;
        const { filterRTX: s2, filterVideoFec: r2, filterAudioFec: o2, filterAudioCodec: a2, filterVideoCodec: c2 } = t2, { useXR: d2 } = i2;
        let l2 = [], u2 = [], h2 = [], p2 = [], _2 = false, E2 = false;
        if (YP.parse(e2).mediaDescriptions.forEach((e3) => {
          n2 && n2 !== e3.attributes.direction || ("video" !== e3.media.mediaType || _2 || (u2 = e3.attributes.payloads, p2 = e3.attributes.extmaps, _2 = true), "audio" !== e3.media.mediaType || E2 || (l2 = e3.attributes.payloads, h2 = e3.attributes.extmaps, E2 = true));
        }), !p2 || 0 === u2.length)
          throw new Error("Cannot get video capabilities from SDP.");
        if (!h2 || 0 === l2.length)
          throw new Error("Cannot get audio capabilities from SDP.");
        u2.forEach((e3) => {
          var t3;
          null !== (t3 = e3.rtpMap) && void 0 !== t3 && t3.clockRate && (e3.rtpMap.clockRate = parseInt(e3.rtpMap.clockRate)), d2 && e3.rtcpFeedbacks.push({ type: "rrtr" });
        }), l2.forEach((e3) => {
          var t3;
          null !== (t3 = e3.rtpMap) && void 0 !== t3 && t3.clockRate && (e3.rtpMap.clockRate = parseInt(e3.rtpMap.clockRate)), d2 && e3.rtcpFeedbacks.push({ type: "rrtr" });
        }), s2 && (l2 = l2.filter((e3) => {
          var t3;
          return "rtx" !== (null === (t3 = e3.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName.toLowerCase());
        }), u2 = u2.filter((e3) => {
          var t3;
          return "rtx" !== (null === (t3 = e3.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName.toLowerCase());
        })), r2 && (u2 = u2.filter((e3) => {
          var t3;
          return !/(red)|(ulpfec)|(flexfec)/i.test((null === (t3 = e3.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName) || "");
        })), o2 && (l2 = l2.filter((e3) => {
          var t3;
          return !/(red)|(ulpfec)|(flexfec)/i.test((null === (t3 = e3.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName) || "");
        })), a2 && (null == a2 ? void 0 : a2.length) > 0 && (l2 = l2.filter((e3) => {
          var t3;
          return bn(a2).call(a2, (null === (t3 = e3.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName.toLowerCase()) || "");
        })), c2 && (null == c2 ? void 0 : c2.length) > 0 && (u2 = u2.filter((e3) => {
          var t3;
          return bn(c2).call(c2, (null === (t3 = e3.rtpMap) || void 0 === t3 ? void 0 : t3.encodingName.toLowerCase()) || "");
        }));
        const m2 = DC("UNSUPPORTED_VIDEO_CODEC");
        return m2 && m2.length > 0 && (u2 = u2.filter((e3) => !(e3.rtpMap && bn(m2).call(m2, e3.rtpMap.encodingName.toLowerCase())))), { audioCodecs: l2, videoCodecs: u2, audioExtensions: h2, videoExtensions: p2 };
      }
      function mL(e2) {
        const t2 = YP.parse(e2);
        let i2, n2;
        for (const e3 of t2.mediaDescriptions) {
          if (!i2) {
            const t3 = e3.attributes.iceUfrag, n3 = e3.attributes.icePwd;
            if (!t3 || !n3)
              throw new Error("Cannot get iceUfrag or icePwd from SDP.");
            i2 = { iceUfrag: t3, icePwd: n3 };
          }
          if (!n2) {
            const t3 = e3.attributes.fingerprints;
            t3.length > 0 && (n2 = { fingerprints: t3 });
          }
        }
        if (!n2 && t2.attributes.fingerprints.length > 0 && (n2 = { fingerprints: t2.attributes.fingerprints }), !n2 || !i2)
          throw new Error("Cannot get iceParameters or dtlsParameters from SDP.");
        return { iceParameters: i2, dtlsParameters: n2 };
      }
      function fL(e2, t2) {
        const i2 = [], n2 = e2.attributes.ssrcGroups.filter((e3) => "FID" === e3.semantic), s2 = e2.attributes.ssrcGroups.find((e3) => "SIM" === e3.semantic), r2 = e2.attributes.ssrcs;
        if (s2)
          s2.ssrcIds.forEach((e3) => {
            var s3;
            const r3 = null === (s3 = n2.find((t3) => t3.ssrcIds[0] === e3)) || void 0 === s3 ? void 0 : s3.ssrcIds[1];
            i2.push({ ssrcId: e3, rtx: t2 ? r3 : void 0 });
          });
        else if (n2.length > 0) {
          const e3 = n2[0].ssrcIds[0], s3 = n2[0].ssrcIds[1];
          i2.push({ ssrcId: e3, rtx: t2 ? s3 : void 0 });
        } else {
          if (0 === r2.length)
            throw new Error("No ssrcs found on local media description.");
          i2.push({ ssrcId: r2[0].ssrcId });
        }
        return i2;
      }
      function TL(e2, t2) {
        const { cname: i2 } = e2;
        let n2;
        t2 && t2.ip && "number" == typeof t2.port ? (n2 = [{ foundation: "udpcandidate", componentId: "1", transport: "udp", priority: "2103266323", connectionAddress: t2.ip, port: t2.port.toString(), type: "host", extension: {} }], YC.debug("Using remote candidate from AP ".concat(t2.ip, ":").concat(t2.port)), t2.ip6 && (n2.push({ foundation: "udpcandidate", componentId: "1", transport: "udp", priority: "2103266323", connectionAddress: t2.ip6, port: t2.port.toString(), type: "host", extension: {} }), YC.debug("Using IPV6 remote candidate from AP ".concat(t2.ip6, ":").concat(t2.port)))) : n2 = e2.iceParameters.candidates.map((e3) => ({ foundation: e3.foundation, componentId: "1", transport: e3.protocol, priority: e3.priority.toString(), connectionAddress: e3.ip, port: e3.port.toString(), type: e3.type, extension: {} }));
        const s2 = { fingerprints: e2.dtlsParameters.fingerprints.map((e3) => ({ hashFunction: e3.algorithm, fingerprint: e3.fingerprint })) }, r2 = { iceUfrag: e2.iceParameters.iceUfrag, icePwd: e2.iceParameters.icePwd };
        let o2;
        switch (e2.dtlsParameters.role) {
          case "server":
            o2 = "passive";
            break;
          case "client":
            o2 = "active";
            break;
          case "auto":
            o2 = "actpass";
        }
        return { dtlsParameters: s2, iceParameters: r2, candidates: n2, rtpCapabilities: OL(e2.rtpCapabilities), setup: o2, cname: i2 };
      }
      function gL(e2, t2, i2) {
        const n2 = [], s2 = [];
        return e2.forEach((e3) => {
          let { ssrcId: r2, rtx: o2 } = e3;
          const a2 = xg(8, "track-"), c2 = { ssrcId: r2, attributes: _L({ label: a2, mslabel: i2 = i2 || xg(10, ""), msid: "".concat(i2, " ").concat(a2) }, t2 && { cname: t2 }) };
          if (n2.push(c2), void 0 !== o2) {
            const e4 = { ssrcId: o2, attributes: _L({ label: a2, mslabel: i2, msid: "".concat(i2, " ").concat(a2) }, t2 && { cname: t2 }) };
            n2.push(e4), s2.push({ semantic: "FID", ssrcIds: [r2, o2] });
          }
        }), e2.length > 1 && s2.push({ semantic: "SIM", ssrcIds: e2.map((e3) => {
          let { ssrcId: t3 } = e3;
          return t3;
        }) }), { ssrcs: n2, ssrcGroups: s2 };
      }
      function SL(e2, t2) {
        t2 instanceof cw && e2.attributes.payloads.forEach((e3) => {
          var i2;
          const n2 = null === (i2 = e3.rtpMap) || void 0 === i2 ? void 0 : i2.encodingName.toLowerCase();
          if (!n2 || -1 === ["opus", "pcmu", "pcma", "g722"].indexOf(n2))
            return;
          e3.fmtp || (e3.fmtp = { parameters: {} }), e3.fmtp.parameters.minptime = "10", e3.fmtp.parameters.useinbandfec = "1";
          const s2 = t2._encoderConfig;
          s2 && "pcmu" !== n2 && "pcma" !== n2 && "g722" !== n2 && (s2.bitrate && !RT() && (e3.fmtp.parameters.maxaveragebitrate = "".concat(Math.floor(1e3 * s2.bitrate))), s2.sampleRate && (e3.fmtp.parameters.maxplaybackrate = "".concat(s2.sampleRate), e3.fmtp.parameters["sprop-maxcapturerate"] = "".concat(s2.sampleRate)), s2.stereo && (e3.fmtp.parameters.stereo = "1", e3.fmtp.parameters["sprop-stereo"] = "1"));
        });
      }
      function RL(e2) {
        const t2 = e2.attributes.unrecognized.findIndex((e3) => "x-google-flag" === e3.attField && "conference" === e3.attValue);
        -1 !== t2 && e2.attributes.unrecognized.splice(t2, 1);
      }
      function CL(e2, t2) {
        var i2;
        if (!(t2 instanceof Nw && t2._encoderConfig && -1 === t2._hints.indexOf(YA.SCREEN_TRACK)))
          return;
        const n2 = t2._encoderConfig;
        wA().supportMinBitrate && n2.bitrateMin && e2.attributes.payloads.forEach((e3) => {
          var t3, i3;
          bn(t3 = ["h264", "h265", "vp8", "vp9", "av1"]).call(t3, (null === (i3 = e3.rtpMap) || void 0 === i3 ? void 0 : i3.encodingName.toLowerCase()) || "") && (e3.fmtp || (e3.fmtp = { parameters: {} }), e3.fmtp.parameters["x-google-min-bitrate"] = "".concat(n2.bitrateMin));
        }), wA().supportMinBitrate && !bn(i2 = t2._hints).call(i2, YA.LOW_STREAM) && n2.bitrateMax && e2.attributes.payloads.forEach((e3) => {
          var t3, i3;
          bn(t3 = ["h264", "h265", "vp8", "vp9", "av1"]).call(t3, (null === (i3 = e3.rtpMap) || void 0 === i3 ? void 0 : i3.encodingName.toLowerCase()) || "") && (e3.fmtp || (e3.fmtp = { parameters: {} }), e3.fmtp.parameters["x-google-start-bitrate"] = "".concat(DC("X_GOOGLE_START_BITRATE") || Math.floor(n2.bitrateMax)));
        });
      }
      function IL(e2) {
        if ("video" !== e2.media.mediaType)
          return;
        const t2 = pT();
        if (t2.name !== cT.SAFARI && t2.os !== aT.IOS)
          return;
        const i2 = e2.attributes.extmaps.findIndex((e3) => /video-orientation/g.test(e3.extensionName));
        -1 !== i2 && e2.attributes.extmaps.splice(i2, 1);
      }
      function vL(e2, t2, i2) {
        if (!t2)
          return;
        let n2, s2;
        if ("video" === e2.media.mediaType ? (n2 = i2.videoExtensions, s2 = i2.videoCodecs) : (n2 = i2.audioExtensions, s2 = i2.audioCodecs), true === t2.twcc) {
          const t3 = n2.find((e3) => "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01" === e3.extensionName);
          if (t3) {
            e2.attributes.extmaps.find((e3) => "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01" === e3.extensionName) || e2.attributes.extmaps.push({ entry: t3.entry, extensionName: "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01" });
            const i3 = function(e3, t4) {
              return t4.filter((t5) => !!e3.find((e4) => e4.payloadType === t5.payloadType && !!e4.rtcpFeedbacks.find((e5) => "transport-cc" === e5.type)));
            }(s2, e2.attributes.payloads);
            i3.forEach((e3) => {
              e3.rtcpFeedbacks.find((e4) => "transport-cc" === e4.type) || e3.rtcpFeedbacks.push({ type: "transport-cc" });
            });
          }
        } else if (false === t2.twcc) {
          const t3 = e2.attributes.extmaps.findIndex((e3) => "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01" === e3.extensionName);
          -1 !== t3 && e2.attributes.extmaps.splice(t3, 1), e2.attributes.payloads.forEach((e3) => {
            const t4 = e3.rtcpFeedbacks.findIndex((e4) => "transport-cc" === e4.type);
            -1 !== t4 && e3.rtcpFeedbacks.splice(t4, 1);
          });
        }
        if (true === t2.remb) {
          const t3 = n2.find((e3) => "http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time" === e3.extensionName);
          if (t3) {
            e2.attributes.extmaps.find((e3) => "http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time" === e3.extensionName) || e2.attributes.extmaps.push({ entry: t3.entry, extensionName: "http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time" });
            const i3 = function(e3, t4) {
              return t4.filter((t5) => !!e3.find((e4) => e4.payloadType === t5.payloadType && !!e4.rtcpFeedbacks.find((e5) => "goog-remb" === e5.type)));
            }(s2, e2.attributes.payloads);
            i3.forEach((e3) => {
              e3.rtcpFeedbacks.find((e4) => "goog-remb" === e4.type) || e3.rtcpFeedbacks.push({ type: "goog-remb" });
            });
          }
        } else if (false === t2.remb) {
          const t3 = e2.attributes.extmaps.findIndex((e3) => "http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time" === e3.extensionName);
          -1 !== t3 && e2.attributes.extmaps.splice(t3, 1), e2.attributes.payloads.forEach((e3) => {
            const t4 = e3.rtcpFeedbacks.findIndex((e4) => "goog-remb" === e4.type);
            -1 !== t4 && e3.rtcpFeedbacks.splice(t4, 1);
          });
        }
      }
      function yL(e2, t2, i2) {
        if (RT())
          return;
        if ("video" !== e2.media.mediaType)
          return;
        if (!(t2 instanceof Nw))
          return;
        if ("vp9" !== i2 && "vp8" !== i2)
          return;
        if ("vp8" === i2 && !DC("SIMULCAST"))
          return;
        if (void 0 === t2._scalabilityMode || t2._scalabilityMode.numSpatialLayers <= 1)
          return;
        const n2 = "vp8" === i2 ? 2 : t2._scalabilityMode.numSpatialLayers, s2 = e2.attributes.ssrcs[0], r2 = e2.attributes.ssrcGroups.find((e3) => "FID" === e3.semantic && e3.ssrcIds[0] === s2.ssrcId), o2 = { semantic: "SIM", ssrcIds: [s2.ssrcId] };
        for (let t3 = 1; t3 < n2; t3++)
          e2.attributes.ssrcs.push({ ssrcId: s2.ssrcId + t3, attributes: bg(s2.attributes) }), o2.ssrcIds.push(s2.ssrcId + t3), r2 && (e2.attributes.ssrcs.push({ ssrcId: r2.ssrcIds[1] + t3, attributes: bg(s2.attributes) }), e2.attributes.ssrcGroups.push({ semantic: "FID", ssrcIds: [s2.ssrcId + t3, r2.ssrcIds[1] + t3] }));
        e2.attributes.ssrcGroups.unshift(o2);
      }
      async function AL() {
        let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        const i2 = new RTCPeerConnection();
        i2.addTransceiver("video", { direction: "sendonly" }), i2.addTransceiver("audio", { direction: "sendonly" }), i2.addTransceiver("video", { direction: "recvonly" }), i2.addTransceiver("audio", { direction: "recvonly" });
        const n2 = (await i2.createOffer()).sdp, { send: s2, recv: r2, sendrecv: o2 } = function() {
          let e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, i3 = arguments.length > 2 ? arguments[2] : void 0;
          const n3 = EL(i3, e3, t3, "sendonly"), s3 = EL(i3, e3, t3, "recvonly"), r3 = { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] }, o3 = { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] }, a2 = { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] };
          if (wL(n3, s3, "videoExtensions", r3, o3, a2), wL(n3, s3, "videoCodecs", r3, o3, a2), wL(n3, s3, "audioExtensions", r3, o3, a2), wL(n3, s3, "audioCodecs", r3, o3, a2), DC("RAISE_H264_BASELINE_PRIORITY")) {
            const e4 = a2.videoCodecs.findIndex((e5) => {
              var t4, i4;
              return "h264" === (null === (t4 = e5.rtpMap) || void 0 === t4 ? void 0 : t4.encodingName.toLocaleLowerCase()) && "42001f" === (null === (i4 = e5.fmtp) || void 0 === i4 ? void 0 : i4.parameters["profile-level-id"]);
            });
            if (-1 !== e4) {
              const t4 = a2.videoCodecs.findIndex((e5) => {
                var t5;
                return "h264" === (null === (t5 = e5.rtpMap) || void 0 === t5 ? void 0 : t5.encodingName.toLocaleLowerCase());
              });
              if (t4 < e4) {
                YC.debug("raising H264 baseline profile priority");
                const i4 = a2.videoCodecs[e4];
                a2.videoCodecs.splice(e4, 1), a2.videoCodecs.splice(t4, 0, i4);
              }
              -1 !== t4 && (o3.videoCodecs = o3.videoCodecs.filter((e5) => {
                var t5, i4;
                return !("h264" === (null === (t5 = e5.rtpMap) || void 0 === t5 ? void 0 : t5.encodingName.toLocaleLowerCase()) && "42001f" !== (null === (i4 = e5.fmtp) || void 0 === i4 ? void 0 : i4.parameters["profile-level-id"]));
              })), -1 !== t4 && DC("FILTER_SEND_H264_BASELINE") && (r3.videoCodecs = r3.videoCodecs.filter((e5) => {
                var t5, i4;
                return !("h264" === (null === (t5 = e5.rtpMap) || void 0 === t5 ? void 0 : t5.encodingName.toLocaleLowerCase()) && "42001f" !== (null === (i4 = e5.fmtp) || void 0 === i4 ? void 0 : i4.parameters["profile-level-id"]));
              }));
            }
          }
          return { send: r3, recv: o3, sendrecv: a2 };
        }(e2, t2, n2);
        try {
          i2.close();
        } catch (e3) {
        }
        return { send: s2, recv: r2, sendrecv: o2 };
      }
      function bL() {
        const e2 = { audioCodecs: [], videoCodecs: [], audioExtensions: [], videoExtensions: [] }, t2 = EL(arguments.length > 2 ? arguments[2] : void 0, arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, "recvonly"), i2 = { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] }, n2 = { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] }, s2 = { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] };
        if (wL(e2, t2, "videoExtensions", i2, n2, s2), wL(e2, t2, "videoCodecs", i2, n2, s2), wL(e2, t2, "audioExtensions", i2, n2, s2), wL(e2, t2, "audioCodecs", i2, n2, s2), DC("RAISE_H264_BASELINE_PRIORITY")) {
          const e3 = s2.videoCodecs.findIndex((e4) => e4.rtpMap && "h264" === e4.rtpMap.encodingName.toLocaleLowerCase() && e4.fmtp && "42001f" === e4.fmtp.parameters["profile-level-id"]);
          if (-1 !== e3) {
            const t3 = s2.videoCodecs.findIndex((e4) => e4.rtpMap && "h264" === e4.rtpMap.encodingName.toLocaleLowerCase());
            if (t3 < e3) {
              YC.debug("raising H264 baseline profile priority");
              const i3 = s2.videoCodecs[e3];
              s2.videoCodecs.splice(e3, 1), s2.videoCodecs.splice(t3, 0, i3);
            }
            -1 !== t3 && (n2.videoCodecs = n2.videoCodecs.filter((e4) => !(e4.rtpMap && "h264" === e4.rtpMap.encodingName.toLocaleLowerCase() && e4.fmtp && "42001f" !== e4.fmtp.parameters["profile-level-id"])));
          }
        }
        return { send: i2, recv: n2, sendrecv: s2 };
      }
      function wL(e2, t2, i2, n2, s2, r2) {
        if ("videoExtensions" === i2 || "audioExtensions" === i2) {
          const o2 = [];
          return e2[i2].forEach((e3) => {
            t2[i2].some((t3, i3) => {
              if (e3.entry === t3.entry && e3.extensionName === t3.extensionName)
                return o2.push(i3), true;
            }) ? r2[i2].push(e3) : n2[i2].push(e3);
          }), void t2[i2].forEach((e3, t3) => {
            -1 === o2.indexOf(t3) && s2[i2].push(e3);
          });
        }
        if ("videoCodecs" === i2 || "audioCodecs" === i2) {
          const o2 = [];
          return e2[i2].forEach((e3) => {
            t2[i2].some((t3, i3) => {
              if (e3.payloadType === t3.payloadType && JSON.stringify(e3) === JSON.stringify(t3))
                return o2.push(i3), true;
            }) ? r2[i2].push(e3) : n2[i2].push(e3);
          }), void t2[i2].forEach((e3, t3) => {
            -1 === o2.indexOf(t3) && s2[i2].push(e3);
          });
        }
      }
      function OL(e2) {
        const { send: t2, recv: i2, sendrecv: n2 } = e2;
        if (!n2) {
          if (!t2 || !i2)
            throw new Error("cannot merge rtp capabilities because one of send or recv is empty!");
          return { send: t2, recv: i2 };
        }
        let s2, r2;
        return t2 ? (s2 = { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] }, s2.audioCodecs = [...t2.audioCodecs, ...n2.audioCodecs], s2.videoCodecs = [...t2.videoCodecs, ...n2.videoCodecs], s2.audioExtensions = [...t2.audioExtensions, ...n2.audioExtensions], s2.videoExtensions = [...t2.videoExtensions, ...n2.videoExtensions]) : s2 = n2, i2 ? (r2 = { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] }, r2.audioCodecs = [...i2.audioCodecs, ...n2.audioCodecs], r2.videoCodecs = [...i2.videoCodecs, ...n2.videoCodecs], r2.audioExtensions = [...i2.audioExtensions, ...n2.audioExtensions], r2.videoExtensions = [...i2.videoExtensions, ...n2.videoExtensions]) : r2 = n2, { send: s2, recv: r2 };
      }
      function NL(e2) {
        if ("audio" !== e2.media.mediaType)
          return;
        e2.attributes.payloads.filter((e3) => {
          var t2;
          return "opus" === (null === (t2 = e3.rtpMap) || void 0 === t2 ? void 0 : t2.encodingName.toLowerCase());
        }).forEach((e3) => {
          e3.fmtp || (e3.fmtp = { parameters: {} }), e3.fmtp.parameters.stereo = "1", e3.fmtp.parameters["sprop-stereo"] = "1";
        });
      }
      function DL(e2) {
        e2.mediaDescriptions.forEach((e3) => {
          "video" !== e3.media.mediaType && "audio" !== e3.media.mediaType || e3.attributes.payloads.forEach((e4) => {
            -1 === e4.rtcpFeedbacks.findIndex((e5) => "rrtr" === e5.type) && e4.rtcpFeedbacks.push({ type: "rrtr" });
          });
        });
      }
      function PL(e2, t2, i2, n2) {
        let s2 = [];
        if (e2 === hv.VIDEO) {
          if (DC("H264_PROFILE_LEVEL_ID") && "h264" === n2 && (s2 = t2.videoCodecs.filter((e3) => {
            var t3;
            return bn(t3 = e3.rtpMap && e3.rtpMap.encodingName.toLowerCase() || "").call(t3, n2) && e3 && e3.fmtp && e3.fmtp.parameters["profile-level-id"] === DC("H264_PROFILE_LEVEL_ID");
          })), !Array.isArray(s2) || 0 === s2.length) {
            let e3 = [];
            const r2 = [], o2 = [];
            i2.videoCodecs.forEach((t3) => {
              var i3, s3, a2;
              bn(i3 = t3.rtpMap && t3.rtpMap.encodingName.toLowerCase() || "").call(i3, n2) && e3.push(t3), bn(s3 = t3.rtpMap && t3.rtpMap.encodingName.toLowerCase() || "").call(s3, "vp8") && r2.push(t3), bn(a2 = t3.rtpMap && t3.rtpMap.encodingName.toLowerCase() || "").call(a2, "h264") && o2.push(t3);
            }), 0 === e3.length && (0 !== r2.length ? (e3 = r2, YC.warning("codec ".concat(n2, " not included in rtpCapabilities, fallback to default payloads: vp8"))) : 0 !== o2.length && (e3 = o2, YC.warning("codec ".concat(n2, " not included in rtpCapabilities, fallback to default payloads: h264")))), 0 !== e3.length && (s2 = t2.videoCodecs.filter((t3) => e3.some((e4) => e4.payloadType === t3.payloadType)));
          }
          if (DC("USE_PUB_RTX")) {
            const e3 = s2.map((e4) => e4.payloadType.toString()), i3 = t2.videoCodecs.filter((t3) => t3.rtpMap && "rtx" === t3.rtpMap.encodingName && bn(e3).call(e3, t3.fmtp && t3.fmtp.parameters.apt || ""));
            s2 = [...s2, ...i3];
          }
          0 === s2.length && (YC.warning("codec ".concat(n2, " not included in rtpCapabilities, fallback to default payloads: ").concat(t2.videoCodecs[0].rtpMap && t2.videoCodecs[0].rtpMap.encodingName)), s2 = t2.videoCodecs);
        } else
          s2 = t2.audioCodecs.filter((e3) => {
            var t3;
            return bn(t3 = e3.rtpMap && e3.rtpMap.encodingName.toLowerCase() || "").call(t3, n2);
          }), 0 === s2.length && (YC.warning("codec ".concat(n2, " not included in rtpCapabilities, fallback to opus")), s2 = t2.audioCodecs.filter((e3) => {
            var t3;
            return bn(t3 = e3.rtpMap && e3.rtpMap.encodingName.toLowerCase() || "").call(t3, "opus");
          }));
        return s2;
      }
      let LL = class {
        get localCapabilities() {
          return bg(this._localCapabilities);
        }
        get rtpCapabilities() {
          return bg(this._rtpCapabilities);
        }
        get candidates() {
          return bg(this._candidates);
        }
        get iceParameters() {
          return bg(this._iceParameters);
        }
        get dtlsParameters() {
          return bg(this._dtlsParameters);
        }
        constructor(e2) {
          nh(this, "sessionDesc", void 0), nh(this, "_localCapabilities", void 0), nh(this, "_rtpCapabilities", void 0), nh(this, "_candidates", void 0), nh(this, "_iceParameters", void 0), nh(this, "_dtlsParameters", void 0), nh(this, "setup", void 0), nh(this, "currentMidIndex", void 0), nh(this, "cname", "o/i14u9pJrxRKAsu"), nh(this, "firefoxSsrcMidMap", /* @__PURE__ */ new Map()), e2 = bg(e2);
          const { remoteIceParameters: t2, remoteDtlsParameters: i2, candidates: n2, remoteRTPCapabilities: s2, localCapabilities: r2, direction: o2, setup: a2, videoCodec: c2, audioCodec: d2 } = e2;
          let l2;
          this.setup = a2, l2 = o2 === vI.RECEIVE_ONLY ? YP.parse("v=0\no=- 0 0 IN IP4 127.0.0.1\ns=AgoraGateway\nt=0 0\na=group:BUNDLE 0 1\na=msid-semantic: WMS\na=extmap-allow-mixed\nm=video 9 UDP/TLS/RTP/SAVPF 0\nc=IN IP4 127.0.0.1\na=rtcp:9 IN IP4 0.0.0.0\na=sendonly\na=rtcp-mux\na=rtcp-rsize\na=mid:0\nm=audio 9 UDP/TLS/RTP/SAVPF 0\nc=IN IP4 127.0.0.1\na=rtcp:9 IN IP4 0.0.0.0\na=sendonly\na=rtcp-mux\na=rtcp-rsize\na=mid:1\n") : YP.parse("v=0\no=- 0 0 IN IP4 127.0.0.1\ns=AgoraGateway\nt=0 0\na=group:BUNDLE 0 1\na=msid-semantic: WMS\na=extmap-allow-mixed\nm=video 9 UDP/TLS/RTP/SAVPF 0\nc=IN IP4 127.0.0.1\na=rtcp:9 IN IP4 0.0.0.0\na=recvonly\na=rtcp-mux\na=rtcp-rsize\na=mid:0\nm=audio 9 UDP/TLS/RTP/SAVPF 0\nc=IN IP4 127.0.0.1\na=rtcp:9 IN IP4 0.0.0.0\na=recvonly\na=rtcp-mux\na=rtcp-rsize\na=mid:1\n"), this._rtpCapabilities = s2, this._candidates = n2, this._iceParameters = t2, this._dtlsParameters = i2, this._localCapabilities = r2;
          const u2 = o2 === vI.RECEIVE_ONLY ? this.rtpCapabilities.send : this.rtpCapabilities.recv, h2 = o2 === vI.RECEIVE_ONLY ? this._localCapabilities.recv : this._localCapabilities.send, p2 = o2 === vI.RECEIVE_ONLY ? s2.send.videoCodecs : PL(hv.VIDEO, u2, h2, c2), _2 = o2 === vI.RECEIVE_ONLY ? s2.send.audioCodecs : PL(hv.AUDIO, u2, h2, d2);
          for (const e3 of l2.mediaDescriptions) {
            if (e3.attributes.iceUfrag = t2.iceUfrag, e3.attributes.icePwd = t2.icePwd, e3.attributes.fingerprints = i2.fingerprints, e3.attributes.candidates = n2, e3.attributes.setup = this.setup, "application" === e3.media.mediaType && (e3.attributes.sctpPort = "5000"), "video" === e3.media.mediaType && (e3.media.fmts = p2.map((e4) => e4.payloadType.toString(10)), e3.attributes.payloads = p2, e3.attributes.extmaps = u2.videoExtensions, DC("PRELOAD_MEDIA_COUNT") > 0)) {
              const { ssrcs: t3, ssrcGroups: i3 } = gL([{ ssrcId: 4e4, rtx: DC("USE_SUB_RTX") ? 40001 : void 0 }], this.cname);
              e3.attributes.ssrcs = t3, e3.attributes.ssrcGroups = i3;
            }
            if ("audio" === e3.media.mediaType && (e3.media.fmts = _2.map((e4) => e4.payloadType.toString(10)), e3.attributes.payloads = _2, e3.attributes.extmaps = u2.audioExtensions, NL(e3), DC("PRELOAD_MEDIA_COUNT") > 0)) {
              const { ssrcs: t3, ssrcGroups: i3 } = gL([{ ssrcId: 2e4 }], this.cname);
              e3.attributes.ssrcs = t3, e3.attributes.ssrcGroups = i3;
            }
          }
          this.sessionDesc = l2, this.currentMidIndex = l2.mediaDescriptions.length - 1;
        }
        toString() {
          return YP.print(this.sessionDesc);
        }
        hasMid(e2) {
          return Array.isArray(e2) ? e2.every((e3) => this.hasMid(e3)) : this.sessionDesc.mediaDescriptions.some((t2) => t2.attributes.mid === e2);
        }
        send(e2, t2, i2, n2, s2) {
          i2 = i2.replace(/ /g, "-");
          const { ssrcs: r2, ssrcGroups: o2 } = gL(t2, this.cname, DC("SYNC_GROUP") ? i2 : void 0), a2 = this.findPreloadMediaDesc(r2);
          if (a2) {
            if (RT() && this.firefoxSsrcMidMap.set(r2[0].ssrcId, a2.attributes.mid), s2 && (s2.twcc || s2.remb)) {
              const e3 = this.sessionDesc.mediaDescriptions.indexOf(a2);
              return this.sessionDesc.mediaDescriptions[e3] = this.mungSendMediaDesc(a2, s2), { mid: a2.attributes.mid, needExchangeSDP: true };
            }
            return { mid: a2.attributes.mid, needExchangeSDP: false };
          }
          {
            const t3 = this.findAvailableMediaIndex(e2, r2, n2);
            let i3;
            return -1 === t3 ? (i3 = this.createOrRecycleSendMedia(e2, r2, o2, "sendonly", n2, s2), this.updateBundleMids()) : (i3 = bg(this.sessionDesc.mediaDescriptions[t3]), i3.attributes.direction = "sendonly", i3.attributes.ssrcs = r2, i3.attributes.ssrcGroups = o2, this.sessionDesc.mediaDescriptions[t3] = this.mungSendMediaDesc(i3, s2)), RT() && this.firefoxSsrcMidMap.set(r2[0].ssrcId, i3.attributes.mid), { needExchangeSDP: true, mid: i3.attributes.mid };
          }
        }
        stopSending(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.filter((t3) => t3.attributes.mid && -1 !== e2.indexOf(t3.attributes.mid));
          if (t2.length !== e2.length)
            throw new Error("mediaDescriptions' length doesn't match mids' length when calling RemoteSDP.stopSending.");
          t2.forEach((e3) => {
            e3.attributes.ssrcs = [];
          }), this.updateBundleMids();
        }
        receive(e2, t2, i2) {
          const n2 = [];
          return e2.forEach((e3) => {
            const s2 = e3._mediaStreamTrack.kind, r2 = this.findAvailableRecvMediaIndex(s2);
            let o2, a2 = false;
            -1 === r2 ? (a2 = true, o2 = this.createOrRecycleRecvMedia(e3, [], "recvonly", t2, i2), this.updateBundleMids()) : (o2 = bg(this.sessionDesc.mediaDescriptions[r2]), o2.attributes.direction = "recvonly"), n2.push({ mid: o2.attributes.mid, needCreateTransceiver: a2 });
          }), n2;
        }
        stopReceiving(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.filter((t3) => -1 !== e2.indexOf(t3.attributes.mid));
          if (t2.length !== e2.length)
            throw new Error("MediaDescriptions' length doesn't match mids's length when calling RemoteSDP.receive.");
          t2.forEach((e3) => {
            e3.media.port = "0", e3.attributes.direction = "inactive";
          }), this.updateBundleMids();
        }
        addRemoteCandidate(e2) {
          const { foundation: t2, protocol: i2, address: n2, port: s2, type: r2, relatedAddress: o2, relatedPort: a2, priority: c2 } = new RTCIceCandidate(e2), d2 = { foundation: null != t2 ? t2 : "", componentId: "1", transport: null != i2 ? i2 : "", priority: c2 ? c2 + "" : "", connectionAddress: null != n2 ? n2 : "", port: s2 ? s2 + "" : "", type: r2 ? r2 + "" : "", relAddr: null != o2 ? o2 : "", relPort: a2 ? a2 + "" : "", extension: {} };
          this.candidates.some((e3) => e3.priority === d2.priority && e3.connectionAddress === d2.connectionAddress && e3.port === d2.port) || (this._candidates.push(d2), this.sessionDesc.mediaDescriptions.forEach((e3) => {
            e3.attributes.candidates = this.candidates;
          }));
        }
        clearRemoteCandidate() {
          this._candidates = [], this.sessionDesc.mediaDescriptions[0].attributes.candidates = this._candidates;
        }
        createOrRecycleRecvMedia(e2, t2, i2, n2, s2) {
          const r2 = e2._mediaStreamTrack.kind, o2 = this.rtpCapabilities.recv, a2 = PL(r2, o2, this.localCapabilities.send, r2 === hv.AUDIO ? s2 : n2), c2 = r2 === hv.VIDEO ? o2.videoExtensions : o2.audioExtensions, d2 = "".concat(++this.currentMidIndex);
          let l2 = { media: { mediaType: r2, port: "9", protos: ["UDP", "TLS", "RTP", "SAVPF"], fmts: a2.map((e3) => e3.payloadType.toString(10)) }, connections: [{ nettype: "IN", addrtype: "IP4", address: "127.0.0.1" }], bandwidths: [], attributes: { iceUfrag: this.iceParameters.iceUfrag, icePwd: this.iceParameters.icePwd, unrecognized: [], candidates: [], extmaps: c2, fingerprints: this.dtlsParameters.fingerprints, imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: t2, ssrcGroups: [], rtcpFeedbackWildcards: [], payloads: a2, rtcp: { port: "9", netType: "IN", addressType: "IP4", address: "0.0.0.0" }, setup: this.setup, direction: i2, rtcpMux: true, rtcpRsize: true, mid: "".concat(d2) } };
          l2 = this.mungRecvMediaDsec(l2, e2);
          const u2 = this.findFirstClosedMedia(r2);
          if (u2) {
            const e3 = this.sessionDesc.mediaDescriptions.indexOf(u2);
            this.sessionDesc.mediaDescriptions[e3] = l2;
          } else
            this.sessionDesc.mediaDescriptions.push(l2);
          return l2;
        }
        muteRemote(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.filter((t3) => bn(e2).call(e2, t3.attributes.mid || ""));
          if (t2.length !== e2.length)
            throw new Error("mediaDescriptions' length doesn't match mids' length when calling RemoteSDP.muteRemote.");
          t2.forEach((e3) => {
            e3.attributes.direction = "inactive";
          });
        }
        unmuteRemote(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.filter((t3) => bn(e2).call(e2, t3.attributes.mid || ""));
          if (t2.length !== e2.length)
            throw new Error("mediaDescriptions' length doesn't match mids' length when calling RemoteSDP.muteRemote.");
          t2.forEach((e3) => {
            e3.attributes.direction = "recvonly";
          });
        }
        findAvailableMediaIndex(e2, t2, i2) {
          return this.sessionDesc.mediaDescriptions.findIndex((n2) => {
            const s2 = n2.media.mediaType === e2 && "0" !== n2.media.port && ("sendonly" === n2.attributes.direction || "sendrecv" === n2.attributes.direction) && 0 === n2.attributes.ssrcs.length;
            if (RT()) {
              if (s2) {
                const e3 = this.firefoxSsrcMidMap.get(t2[0].ssrcId);
                return !(e3 || "0" !== n2.attributes.mid && "1" !== n2.attributes.mid) || !(!e3 || e3 !== n2.attributes.mid);
              }
              return false;
            }
            return s2 && n2.attributes.mid === i2;
          });
        }
        findAvailableRecvMediaIndex(e2) {
          return this.sessionDesc.mediaDescriptions.findIndex((t2) => {
            const i2 = t2.media.mediaType === e2 && "0" !== t2.media.port && ("recvonly" === t2.attributes.direction || "sendrecv" === t2.attributes.direction);
            return "0" !== t2.attributes.mid && "1" !== t2.attributes.mid && i2;
          });
        }
        predictReceivingMids(e2) {
          const t2 = [];
          for (let i2 = 0; i2 < e2; i2++)
            t2.push((this.currentMidIndex + i2 + 1).toString(10));
          return t2;
        }
        restartICE(e2) {
          e2 = bg(e2), this._iceParameters = e2, this.sessionDesc.mediaDescriptions.forEach((t2) => {
            t2.attributes.iceUfrag = e2.iceUfrag, t2.attributes.icePwd = e2.icePwd;
          });
        }
        createOrRecycleSendMedia(e2, t2, i2, n2, s2, r2) {
          const o2 = this.rtpCapabilities.send, a2 = e2 === hv.VIDEO ? o2.videoCodecs : o2.audioCodecs, c2 = e2 === hv.VIDEO ? o2.videoExtensions : o2.audioExtensions;
          RT() && (s2 = "".concat(++this.currentMidIndex));
          let d2 = { media: { mediaType: e2, port: "9", protos: ["UDP", "TLS", "RTP", "SAVPF"], fmts: a2.map((e3) => e3.payloadType.toString(10)) }, connections: [{ nettype: "IN", addrtype: "IP4", address: "127.0.0.1" }], bandwidths: [], attributes: { iceUfrag: this.iceParameters.iceUfrag, icePwd: this.iceParameters.icePwd, unrecognized: [], candidates: [], extmaps: c2, fingerprints: this.dtlsParameters.fingerprints, imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: t2, ssrcGroups: i2, rtcpFeedbackWildcards: [], payloads: a2, rtcp: { port: "9", netType: "IN", addressType: "IP4", address: "0.0.0.0" }, setup: this.setup, direction: n2, rtcpMux: true, rtcpRsize: true, mid: s2 } };
          d2 = this.mungSendMediaDesc(d2, r2);
          const l2 = this.findFirstClosedMedia(e2);
          if (l2) {
            const e3 = this.sessionDesc.mediaDescriptions.indexOf(l2);
            this.sessionDesc.mediaDescriptions[e3] = d2;
          } else
            this.sessionDesc.mediaDescriptions.push(d2);
          return d2;
        }
        mungRecvMediaDsec(e2, t2, i2) {
          const n2 = bg(e2);
          return RL(n2), SL(n2, t2), CL(n2, t2), IL(n2), vL(n2, i2, this.localCapabilities.send), n2;
        }
        mungSendMediaDesc(e2, t2) {
          const i2 = bg(e2);
          return vL(i2, t2, this.localCapabilities.recv), NL(i2), i2;
        }
        updateRecvMedia(e2, t2) {
          const i2 = this.sessionDesc.mediaDescriptions.findIndex((t3) => t3.attributes.mid === e2);
          if (-1 !== i2) {
            const e3 = this.mungRecvMediaDsec(this.sessionDesc.mediaDescriptions[i2], t2);
            this.sessionDesc.mediaDescriptions[i2] = e3;
          }
        }
        updateBundleMids() {
          this.sessionDesc.attributes.groups[0].identificationTag = this.sessionDesc.mediaDescriptions.filter((e2) => "0" !== e2.media.port).map((e2) => e2.attributes.mid);
        }
        findPreloadMediaDesc(e2) {
          return this.sessionDesc.mediaDescriptions.find((t2) => {
            var i2;
            return (null === (i2 = t2.attributes) || void 0 === i2 || null === (i2 = i2.ssrcs[0]) || void 0 === i2 ? void 0 : i2.ssrcId) === e2[0].ssrcId;
          });
        }
        findFirstClosedMedia(e2) {
          return this.sessionDesc.mediaDescriptions.find((t2) => RT() ? "0" === t2.media.port && t2.media.mediaType === e2 : "0" === t2.media.port);
        }
      };
      const kL = ["sdp"];
      function ML(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function UL(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? ML(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : ML(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      let xL = class e2 extends kv {
        get currentLocalDescription() {
          return this.peerConnection.currentLocalDescription;
        }
        get currentRemoteDescription() {
          return this.peerConnection.currentRemoteDescription;
        }
        get peerConnectionState() {
          return this.peerConnection.connectionState;
        }
        get iceConnectionState() {
          return this.peerConnection.iceConnectionState;
        }
        get dtlsTransportState() {
          var e3, t2;
          return null !== (e3 = null === (t2 = this.peerConnection.getReceivers()[0]) || void 0 === t2 || null === (t2 = t2.transport) || void 0 === t2 ? void 0 : t2.state) && void 0 !== e3 ? e3 : null;
        }
        get localCodecs() {
          return [];
        }
        set isInRestartIce(e3) {
          this._isInRestartIce = e3;
        }
        get isInRestartIce() {
          return this._isInRestartIce;
        }
        constructor(t2, i2, n2) {
          super(t2, i2), nh(this, "direction", void 0), nh(this, "name", void 0), nh(this, "store", void 0), nh(this, "spec", void 0), nh(this, "peerConnection", void 0), nh(this, "initialOffer", void 0), nh(this, "transport", void 0), nh(this, "statsFilter", void 0), nh(this, "localCandidateCount", 0), nh(this, "allCandidatesReceived", false), nh(this, "localCandidateAddress", null), nh(this, "useXR", DC("USE_XR")), nh(this, "filter", { filterRTX: !DC("USE_PUB_RTX") && !DC("USE_SUB_RTX"), filterVideoFec: DC("FILTER_VIDEO_FEC"), filterAudioFec: DC("FILTER_AUDIO_FEC") }), nh(this, "extension", { useXR: this.useXR }), nh(this, "_isInRestartIce", false), nh(this, "mutex", new Yg("P2PConnection-mutex")), nh(this, "onLocalCandidate", void 0), nh(this, "remoteSDP", void 0), nh(this, "pendingCandidates", []), nh(this, "localCapabilities", void 0), nh(this, "isReady", false), nh(this, "restartCnt", 0), nh(this, "curTurnServerIndex", 0), this.store = i2, this.spec = t2, this.peerConnection = new RTCPeerConnection(e2.resolvePCConfiguration(t2, i2.p2pTransport), { optional: [{ googDscp: true }] }), this.direction = null != n2 ? n2 : vI.SEND_ONLY, this.name = this.direction === vI.SEND_ONLY ? "sendP2PConnection" : "recvP2PConnection", this.statsFilter = hL(this.peerConnection, DC("STATS_UPDATE_INTERVAL"), void 0, RT() ? 1200 : void 0), this.bindPCEvents(), this.bindStatsEvents(), this.store.p2pId = this.store.p2pId + 1;
        }
        async establish(e3) {
          try {
            const t2 = await AL(this.filter, this.extension);
            if (this.localCapabilities = OL(t2), e3) {
              const { sdp: t3 } = e3, i2 = HP(e3, kL), n2 = function() {
                const e4 = { audioCodecs: [], videoCodecs: [], audioExtensions: [], videoExtensions: [] }, t4 = EL(arguments.length > 2 ? arguments[2] : void 0, arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, "sendonly"), i3 = { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] }, n3 = { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] }, s3 = { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] };
                if (wL(t4, e4, "videoExtensions", i3, n3, s3), wL(t4, e4, "videoCodecs", i3, n3, s3), wL(t4, e4, "audioExtensions", i3, n3, s3), wL(t4, e4, "audioCodecs", i3, n3, s3), DC("RAISE_H264_BASELINE_PRIORITY")) {
                  const e5 = s3.videoCodecs.findIndex((e6) => e6.rtpMap && "h264" === e6.rtpMap.encodingName.toLocaleLowerCase() && e6.fmtp && "42001f" === e6.fmtp.parameters["profile-level-id"]);
                  if (-1 !== e5) {
                    const t5 = s3.videoCodecs.findIndex((e6) => e6.rtpMap && "h264" === e6.rtpMap.encodingName.toLocaleLowerCase());
                    if (t5 < e5) {
                      YC.debug("raising H264 baseline profile priority");
                      const i4 = s3.videoCodecs[e5];
                      s3.videoCodecs.splice(e5, 1), s3.videoCodecs.splice(t5, 0, i4);
                    }
                    -1 !== t5 && DC("FILTER_SEND_H264_BASELINE") && (i3.videoCodecs = i3.videoCodecs.filter((e6) => !(e6.rtpMap && "h264" === e6.rtpMap.encodingName.toLocaleLowerCase() && e6.fmtp && "42001f" !== e6.fmtp.parameters["profile-level-id"])));
                  }
                }
                return { send: i3, recv: n3, sendrecv: s3 };
              }(this.filter, this.extension, t3);
              this.remoteSDP = new LL({ remoteIceParameters: i2.iceParameters, remoteDtlsParameters: i2.dtlsParameters, candidates: [], remoteRTPCapabilities: n2, localCapabilities: this.localCapabilities, direction: this.direction, setup: "actpass", videoCodec: this.store.codec, audioCodec: this.store.audioCodec }), await this.setRemoteDescription({ type: "offer", sdp: this.remoteSDP.toString() }), this.isReady = true;
              const s2 = await this.peerConnection.createAnswer();
              if (!s2.sdp)
                throw new Error("Cannot get answer sdp when trying to establish PeerConnection.");
              const r2 = mL(s2.sdp);
              await this.peerConnection.setLocalDescription(s2);
              const o2 = await bL(this.filter, this.extension, s2.sdp);
              this.localCapabilities = OL(o2);
              const a2 = this.peerConnection.getTransceivers()[0];
              return null != a2 && a2.receiver && a2.receiver.transport && this.tryBindTransportEvents(a2.receiver.transport), UL(UL({}, r2), {}, { sdp: s2.sdp });
            }
            {
              this.peerConnection.addTransceiver("video", { direction: "sendonly" }), this.peerConnection.addTransceiver("audio", { direction: "sendonly" });
              const e4 = await this.peerConnection.createOffer();
              if (!e4.sdp)
                throw new Error("Cannot get initialOffer.sdp when trying to establish PeerConnection.");
              const t3 = mL(e4.sdp);
              return this.initialOffer = e4, UL(UL({}, t3), {}, { sdp: e4.sdp });
            }
          } catch (e4) {
            throw new VT(xT.GET_LOCAL_CONNECTION_PARAMS_FAILED, e4.toString());
          }
        }
        async connect(e3) {
          try {
            if (!this.initialOffer)
              throw new Error("Cannot establish P2PConnection without initial offer.");
            await this.peerConnection.setLocalDescription(this.initialOffer);
            const { sdp: t2, iceParameters: i2, dtlsParameters: n2 } = e3, s2 = await bL(this.filter, this.extension, t2);
            this.remoteSDP = new LL({ remoteIceParameters: i2, remoteDtlsParameters: n2, candidates: [], remoteRTPCapabilities: s2, localCapabilities: this.localCapabilities, direction: this.direction, setup: "active", videoCodec: this.store.codec, audioCodec: this.store.audioCodec }), await this.setRemoteDescription({ type: "answer", sdp: this.remoteSDP.toString() });
            const r2 = this.peerConnection.getTransceivers()[0];
            null != r2 && r2.sender && r2.sender.transport && this.tryBindTransportEvents(r2.sender.transport);
          } catch (e4) {
            throw new VT(xT.EXCHANGE_SDP_FAILED, "P2PConnection.connect failed; ".concat(e4.toString()));
          }
        }
        async addRemoteCandidate(e3) {
          try {
            e3 && this.pendingCandidates.push(e3), this.peerConnection.remoteDescription && this.isReady && (this.pendingCandidates.forEach((e4) => {
              this.peerConnection.addIceCandidate(e4);
            }), this.pendingCandidates = []);
          } catch (e4) {
            throw new VT(xT.ADD_CANDIDATE_FAILED, "P2PConnection.addRemoteCandidate failed; ".concat(e4.toString()));
          }
        }
        send(e3, t2, i2) {
          var n2 = this;
          return OP(function* () {
            const s2 = yield SP(n2.mutex.lock("From P2PConnection.send"));
            try {
              if (!n2.remoteSDP)
                throw new Error("Cannot call P2PConnection.send before remote SDP created");
              const r2 = [], o2 = n2.remoteSDP.receive(e3, t2, i2);
              e3.forEach((e4, t3) => {
                if (o2[t3].needCreateTransceiver) {
                  const t4 = n2.peerConnection.addTransceiver(e4._mediaStreamTrack, { direction: "sendonly" });
                  r2.push(t4), e4._updateRtpTransceiver(t4);
                } else {
                  const i3 = n2.peerConnection.getTransceivers().find((e5) => e5.mid === o2[t3].mid);
                  if (!i3)
                    throw new Error("cannot find transceiver when sendPeerconnection send, mid is ".concat(o2[t3].mid));
                  r2.push(i3), e4._updateRtpTransceiver(i3);
                }
              }), RT() && true === DC("SIMULCAST") && (yield SP(n2.applySimulcastForFirefox(r2, e3)));
              const a2 = o2.map((e4) => e4.mid), c2 = yield SP(n2.peerConnection.createOffer()), d2 = n2.mungSendOfferSDP(c2.sdp, e3, a2), l2 = YP.parse(d2), u2 = a2.map((e4) => {
                const t3 = l2.mediaDescriptions.find((t4) => t4.attributes.mid === e4);
                if (!t3)
                  throw new Error("Cannot extract ssrc from mediaDescription.");
                return fL(t3, DC("USE_PUB_RTX"));
              }), h2 = r2.map((e4, t3) => {
                const i3 = a2[t3];
                return { localSSRC: u2[t3], id: i3 };
              });
              yield SP(n2.peerConnection.setLocalDescription({ type: "offer", sdp: d2 }));
              try {
                yield h2;
              } catch (e4) {
                const t3 = n2.remoteSDP.toString();
                throw yield SP(n2.peerConnection.setLocalDescription({ type: "offer", sdp: d2 })), yield SP(n2.peerConnection.setRemoteDescription({ type: "answer", sdp: t3 })), yield SP(n2.stopSending(a2, true)), e4;
              }
              yield SP(n2.applySimulcastEncodings(r2, e3)), yield SP(n2.applySendEncodings(r2, e3));
              const p2 = n2.remoteSDP.toString(), _2 = n2.logSDPExchange(d2, "offer", "local", "send");
              return null == _2 || _2(p2), yield SP(n2.setRemoteDescription({ type: "answer", sdp: p2 })), r2.map((e4, t3) => {
                const i3 = a2[t3];
                return { localSSRC: u2[t3], id: i3 };
              });
            } catch (e4) {
              throw e4 instanceof VT ? e4 : new VT(xT.EXCHANGE_SDP_FAILED, "P2PConnection.send failed; ".concat(e4.toString()));
            } finally {
              s2();
            }
          })();
        }
        async stopSending(e3, t2) {
          const i2 = t2 ? void 0 : await this.mutex.lock("From P2PConnection.stopSending");
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.stopSending before remote SDP created");
            const t3 = this.peerConnection.getTransceivers().filter((t4) => -1 !== e3.indexOf(t4.mid));
            if (t3.length !== e3.length)
              throw new Error("Transceivers' length (".concat(t3.length, ") doesn't match mids' length (").concat(e3.length, ") when trying to call P2PConnection.stopSending."));
            t3.map((e4) => {
              var t4;
              e4.direction = "inactive", null === (t4 = e4.stop) || void 0 === t4 || t4.call(e4);
            });
            const n2 = await this.peerConnection.createOffer(), s2 = this.logSDPExchange(n2.sdp || "", "offer", "local", "stopSending");
            await this.peerConnection.setLocalDescription(n2), this.remoteSDP.stopReceiving(e3);
            const r2 = this.remoteSDP.toString();
            null == s2 || s2(r2), await this.setRemoteDescription({ type: "answer", sdp: r2 });
          } catch (e4) {
            throw new VT(xT.EXCHANGE_SDP_FAILED, "P2PConnection.stopSending failed; ".concat(e4.toString()));
          } finally {
            i2 && i2();
          }
        }
        async receive(e3, t2, i2, n2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.receive ".concat(e3, " before remoteSDP created."));
            const { mid: s2, needExchangeSDP: r2 } = this.remoteSDP.send(e3, t2, i2, n2);
            if (r2) {
              const t3 = this.remoteSDP.toString(), i3 = this.logSDPExchange(t3, "offer", "remote", "receive");
              await this.setRemoteDescription({ type: "offer", sdp: t3 });
              const n3 = await this.peerConnection.createAnswer(), r3 = this.mungReceiveAnswerSDP(n3.sdp, s2, e3);
              null == i3 || i3(r3 || ""), await this.peerConnection.setLocalDescription({ type: "answer", sdp: r3 }), YC.debug("[".concat(this.store.clientId, "] [P2PConnection] receive ").concat(e3, " by exchanging SDP."));
            } else
              YC.debug("[".concat(this.store.clientId, "] [P2PConnection] receive ").concat(e3, " no need to exchange SDP."));
            const o2 = this.peerConnection.getTransceivers().find((e4) => e4.mid === s2);
            if (!o2 || null === o2.mid)
              throw new Error("Cannot get transceiver after setLocalDescription.");
            return { track: o2.receiver.track, mid: o2.mid, transceiver: o2 };
          } catch (e4) {
            throw new VT(xT.EXCHANGE_SDP_FAILED, "P2PConnection.receive failed; ".concat(e4.toString()));
          }
        }
        async mockReceive(e3, t2, i2, n2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.receive ".concat(e3, " before remoteSDP created."));
            const { mid: s2, needExchangeSDP: r2 } = this.remoteSDP.send(e3, t2, i2, n2);
            if (r2) {
              const t3 = this.remoteSDP.toString(), i3 = this.logSDPExchange(t3, "offer", "remote", "receive");
              await this.setRemoteDescription({ type: "offer", sdp: t3 });
              const n3 = await this.peerConnection.createAnswer(), r3 = this.mungReceiveAnswerSDP(n3.sdp, s2, e3);
              null == i3 || i3(r3 || ""), await this.peerConnection.setLocalDescription({ type: "answer", sdp: r3 }), YC.debug("[".concat(this.store.clientId, "] [P2PConnection] receive ").concat(e3, " by exchanging SDP."));
            } else
              YC.debug("[".concat(this.store.clientId, "] [P2PConnection] receive ").concat(e3, " no need to exchange SDP."));
          } catch (e4) {
            throw new VT(xT.EXCHANGE_SDP_FAILED, "P2PConnection.receive failed; ".concat(e4.toString()));
          }
        }
        async stopReceiving(e3) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.stopReceiving before remote SDP created.");
            this.remoteSDP.stopSending(e3);
            const t2 = this.remoteSDP.toString(), i2 = this.logSDPExchange(t2, "offer", "remote", "stopReceiving");
            await this.setRemoteDescription({ type: "offer", sdp: t2 });
            const n2 = await this.peerConnection.createAnswer();
            null == i2 || i2(n2.sdp || ""), await this.peerConnection.setLocalDescription(n2);
          } catch (e4) {
            throw new VT(xT.EXCHANGE_SDP_FAILED, "P2PConnection stopReceiving failed; ".concat(e4.toString()));
          }
        }
        async restartICE(t2) {
          try {
            if (this.store.p2pTransport === bC.Auto && (this.store.p2pTransport = bC.SdRtn, wA().supportPCSetConfiguration && this.peerConnection.setConfiguration(e2.resolvePCConfiguration(this.spec, this.store.p2pTransport))), this.restartCnt > 3 && (this.restartCnt = 0, wA().supportPCSetConfiguration && this.peerConnection.setConfiguration(e2.resolvePCConfiguration(this.spec, this.store.p2pTransport, ++this.curTurnServerIndex))), !t2) {
              this.restartCnt++, this.isReady = false;
              const e3 = await this.peerConnection.createOffer({ iceRestart: true });
              if (!e3.sdp)
                throw new Error("Cannot restartICE because restart offer SDP does not exist.");
              const { iceParameters: t3 } = mL(e3.sdp);
              return this.store.descriptionStart(), this.direction === vI.SEND_ONLY && await this.peerConnection.setLocalDescription(e3), t3;
            }
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.stopReceiving before remote SDP created.");
            if (this.remoteSDP.restartICE(t2), this.store.descriptionStart(), this.direction === vI.RECEIVE_ONLY) {
              this.restartCnt++, await this.setRemoteDescription({ type: "offer", sdp: this.remoteSDP.toString() });
              const e3 = await this.peerConnection.createAnswer();
              if (!e3.sdp)
                throw new Error("Cannot get answer sdp when trying to iceRestart.");
              const { iceParameters: t3 } = mL(e3.sdp);
              return await this.peerConnection.setLocalDescription(e3), t3;
            }
            await this.setRemoteDescription({ type: "answer", sdp: this.remoteSDP.toString() }), this.isReady = true;
          } catch (e3) {
            throw new VT(xT.EXCHANGE_SDP_FAILED, "P2PConnection stopReceiving failed; ".concat(e3.toString()));
          }
        }
        close() {
          var e3;
          this.peerConnection.close(), this.peerConnection.onicecandidate = null, null === (e3 = this.onConnectionStateChange) || void 0 === e3 || e3.call(this, "closed"), this.tryUnbindTransportEvents(), this.unbindPCEvents(), this.unbindStatsEvents(), this.transport = void 0, this.statsFilter.destroy();
        }
        getStats() {
          return this.statsFilter.getStats();
        }
        getRemoteVideoIsReady(e3) {
          return this.statsFilter.getVideoIsReady(e3);
        }
        async updateEncoderConfig(e3, t2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.updateEncoderConfig before remote SDP created.");
            const i2 = await this.peerConnection.createOffer(), n2 = this.mungSendOfferSDP(i2.sdp, [t2], [e3]);
            this.remoteSDP.updateRecvMedia(e3, t2);
            const s2 = this.remoteSDP.toString(), r2 = this.logSDPExchange(n2, "offer", "local", "updateEncoderConfig");
            await this.peerConnection.setLocalDescription({ type: "offer", sdp: n2 }), null == r2 || r2(s2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: s2 });
          } catch (e4) {
            throw new VT(xT.EXCHANGE_SDP_FAILED, e4.toString());
          }
        }
        async updateSendParameters(e3, t2) {
          const i2 = this.peerConnection.getTransceivers().filter((t3) => t3.mid === e3);
          1 === i2.length && (this.isVP8Simulcast(t2) ? RT() || await this.applySimulcastEncodings(i2, [t2]) : await this.applySendEncodings(i2, [t2]));
        }
        setStatsRemoteVideoIsReady(e3, t2) {
          this.statsFilter.setVideoIsReady2(e3, t2);
        }
        async replaceTrack(e3, t2) {
          const i2 = this.peerConnection.getTransceivers().find((e4) => e4.mid === t2);
          i2 && await i2.sender.replaceTrack(e3._mediaStreamTrack);
        }
        async getSelectedCandidatePair() {
          const e3 = this.peerConnection.getReceivers();
          if (e3.length > 0 && e3[0].transport && e3[0].transport.iceTransport && e3[0].transport.iceTransport.getSelectedCandidatePair && e3[0].transport.iceTransport.getSelectedCandidatePair()) {
            const t2 = e3[0].transport.iceTransport, { local: i2, remote: n2 } = t2.getSelectedCandidatePair();
            return { local: UL(UL({}, XP), {}, { candidateType: i2.type, protocol: i2.protocol, address: i2.address, port: i2.port }), remote: UL(UL({}, XP), {}, { candidateType: n2.type, protocol: n2.protocol, address: n2.address, port: n2.port }) };
          }
          return this.statsFilter.getSelectedCandidatePair();
        }
        bindPCEvents() {
          this.peerConnection.oniceconnectionstatechange = () => {
            var e3, t2;
            bn(e3 = ["connected", "completed"]).call(e3, this.peerConnection.iceConnectionState) && (this.isReady = false), null === (t2 = this.onICEConnectionStateChange) || void 0 === t2 || t2.call(this, this.peerConnection.iceConnectionState);
          }, this.peerConnection.onconnectionstatechange = () => {
            var e3;
            "connected" === this.peerConnection.connectionState && (this.restartCnt = 0), null === (e3 = this.onConnectionStateChange) || void 0 === e3 || e3.call(this, this.peerConnection.connectionState);
          }, this.startICECandidate();
        }
        startICECandidate() {
          this.peerConnection.onicecandidate || (this.localCandidateCount = 0, this.peerConnection.onicecandidate = (e3) => {
            if (e3.candidate) {
              var t2;
              if (e3.candidate.candidate)
                this.localCandidateAddress = e3.candidate.address, null === (t2 = this.onLocalCandidate) || void 0 === t2 || t2.call(this, e3.candidate.toJSON());
              this.localCandidateCount += 1;
            } else
              this.allCandidatesReceived = true, YC.debug("[".concat(this.store.clientId, "] [pc-").concat(this.store.p2pId, "] local candidate count"), this.localCandidateCount);
          });
        }
        unbindPCEvents() {
          this.peerConnection.oniceconnectionstatechange = null, this.peerConnection.onconnectionstatechange = null, this.peerConnection.onsignalingstatechange = null, this.peerConnection.onicecandidateerror = null, this.peerConnection.onicecandidate = null, this.peerConnection.ontrack = null;
        }
        static resolvePCConfiguration(t2, i2) {
          let n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
          const s2 = { iceServers: [] };
          var r2;
          t2.iceServers ? s2.iceServers = t2.iceServers : t2.turnServer && "off" !== t2.turnServer.mode && (_g(t2.turnServer.servers) ? s2.iceServers = t2.turnServer.servers : (s2.iceServers && s2.iceServers.push(...e2.turnServerConfigToIceServers(t2.turnServer.servers, i2, n2)), DC("USE_TURN_SERVER_OF_GATEWAY") && s2.iceServers && t2.turnServer.serversFromGateway && s2.iceServers.push(...e2.turnServerConfigToIceServers(t2.turnServer.serversFromGateway, i2, n2)), bn(r2 = [bC.Relay, bC.SdRtn]).call(r2, i2) && (s2.iceTransportPolicy = "relay"), DC("FORCE_TURN_TCP") ? s2.iceTransportPolicy = "relay" : t2.turnServer.servers.concat(t2.turnServer.serversFromGateway || []).forEach((e3) => {
            e3.forceturn && (s2.iceTransportPolicy = "relay");
          })));
          return DC("ENABLE_ENCODED_TRANSFORM") && wA().supportWebRTCEncodedTransform && (s2.encodedInsertableStreams = true), YC.debug("P2PConnection p2pTransport is ".concat(i2)), s2;
        }
        static turnServerConfigToIceServers(e3, t2) {
          let i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0;
          const n2 = [], s2 = e3.filter((e4) => e4.tcpport);
          YC.debug("P2PConnection turnServers is ".concat(s2, ", current index is ").concat(i2));
          const r2 = s2.length > i2 ? s2[i2] : s2[0];
          switch (t2) {
            case bC.SdRtn:
              const t3 = e3.filter((e4) => {
                var t4;
                return bn(t4 = e4.username).call(t4, "glb:") && e4.turnServerURL == e4.turnServerURL;
              }), s3 = t3.length > i2 ? t3[i2] : t3[0];
              s3 && (n2.push({ username: s3.username, credential: s3.password, credentialType: "password", urls: "turn:".concat(Iy(s3.turnServerURL), ":").concat(s3.tcpport, "?transport=udp") }), n2.push({ username: s3.username, credential: s3.password, credentialType: "password", urls: "turns:".concat(Iy(s3.turnServerURL), ":").concat(s3.tcpport, "?transport=tcp") }));
              break;
            case bC.Relay:
              r2 && (n2.push({ username: r2.username, credential: r2.password, credentialType: "password", urls: "turn:".concat(r2.turnServerURL, ":").concat(r2.tcpport, "?transport=udp") }), n2.push({ username: r2.username, credential: r2.password, credentialType: "password", urls: "turns:".concat(Iy(r2.turnServerURL), ":").concat(r2.tcpport, "?transport=tcp") }));
              break;
            default:
              r2 && (n2.push({ username: r2.username, credential: r2.password, credentialType: "password", urls: "turn:".concat(r2.turnServerURL, ":").concat(r2.tcpport, "?transport=udp") }), n2.push({ username: r2.username, credential: r2.password, credentialType: "password", urls: "turns:".concat(Iy(r2.turnServerURL), ":").concat(r2.tcpport, "?transport=tcp") }), n2.push({ username: r2.username, credential: r2.password, credentialType: "password", urls: "stun:".concat(r2.turnServerURL, ":").concat(r2.tcpport) }));
          }
          return n2;
        }
        tryBindTransportEvents(e3) {
          if (e3) {
            this.transport = e3, e3.onstatechange = () => {
              var t3;
              null != e3 && e3.state && (null === (t3 = this.onDTLSTransportStateChange) || void 0 === t3 || t3.call(this, e3.state));
            }, e3.onerror = (e4) => {
              var t3;
              null === (t3 = this.onDTLSTransportError) || void 0 === t3 || t3.call(this, "error" in e4 ? e4.error : e4);
            };
            const t2 = e3.iceTransport;
            t2 && (t2.onstatechange = () => {
              const t3 = null == e3 ? void 0 : e3.iceTransport.state;
              var i2;
              t3 && (null === (i2 = this.onICETransportStateChange) || void 0 === i2 || i2.call(this, t3));
            }, t2.getSelectedCandidatePair && (t2.onselectedcandidatepairchange = () => {
              if (t2.getSelectedCandidatePair()) {
                const { local: e4, remote: i2 } = t2.getSelectedCandidatePair();
                YC.info("[".concat(this.store.clientId, "] [pc-").concat(this.store.p2pId, "] selectedcandidatepairchange: local ").concat(JSON.stringify({ candidateType: e4.type, protocol: e4.protocol }), ", remote ").concat(JSON.stringify({ candidateType: i2.type, protocol: i2.protocol, address: i2.address, port: i2.port }), " )"));
              }
            }));
          }
        }
        tryUnbindTransportEvents() {
          this.transport && (this.transport.onstatechange = null, this.transport.onerror = null, this.transport.iceTransport && (this.transport.iceTransport.onstatechange = null));
        }
        async updateRtpSenderEncodings(e3, t2) {
          var i2;
          if (!t2) {
            t2 = this.peerConnection.getSenders().find((t3) => t3.track === e3._mediaStreamTrack);
          }
          if (!t2)
            return YC.warn("[".concat(e3.getTrackId(), "] no rtpSender found}"));
          if (this.isVP8Simulcast(e3))
            return YC.warn("[updateRtpSenderEncodings] Track is VP8 simulcast, please apply simulcast encodings");
          if (!wA().supportSetRtpSenderParameters)
            return YC.warn("[updateRtpSenderEncodings] Browser not support set rtp-sender parameters");
          const n2 = {}, s2 = {};
          switch (e3._optimizationMode) {
            case "motion":
              n2.degradationPreference = "maintain-framerate";
              break;
            case "detail":
              n2.degradationPreference = "maintain-resolution";
              break;
            default:
              n2.degradationPreference = "balanced";
          }
          if (e3._encoderConfig) {
            var r2;
            const { bitrateMax: t3, frameRate: i3, scaleResolutionDownBy: n3 } = e3._encoderConfig;
            t3 && (s2.maxBitrate = 1e3 * t3), bn(r2 = e3._hints).call(r2, YA.LOW_STREAM) && (i3 && (s2.maxFramerate = yy(i3)), n3 && n3 >= 1 && (s2.scaleResolutionDownBy = n3));
          }
          if (DC("DSCP_TYPE") && kT()) {
            var o2;
            const e4 = DC("DSCP_TYPE");
            bn(o2 = ["very-low", "low", "medium", "high"]).call(o2, e4) && (s2.networkPriority = e4);
          }
          const a2 = t2.getParameters(), c2 = null === (i2 = a2.encodings) || void 0 === i2 ? void 0 : i2[0];
          RT() && !c2 && (n2.encodings = [s2]), c2 && Object.assign(c2, s2), Object.assign(a2, n2), YC.debug("[".concat(e3.getTrackId(), "] updateRtpSenderEncodings: ").concat(JSON.stringify(a2.encodings))), await t2.setParameters(a2);
        }
        async applySendEncodings(e3, t2) {
          try {
            if (!wA().supportSetRtpSenderParameters)
              return;
            if (e3.length !== t2.length)
              return;
            for (let i2 = 0; i2 < e3.length; i2++) {
              const n2 = e3[i2], s2 = t2[i2];
              s2 instanceof Nw && !this.isVP8Simulcast(s2) && await this.updateRtpSenderEncodings(s2, n2.sender);
            }
          } catch (e4) {
            YC.debug("[".concat(this.store.clientId, "] Apply RTPSendEncodings failed."));
          }
        }
        mungSendOfferSDP(e3, t2, i2) {
          const n2 = YP.parse(e3);
          return t2.forEach((e4, t3) => {
            const s2 = i2[t3], r2 = n2.mediaDescriptions.find((e5) => e5.attributes.mid === s2);
            r2 && (SL(r2, e4), yL(r2, e4, this.store.codec));
          }), YP.print(n2);
        }
        bindStatsEvents() {
          this.statsFilter.onFirstAudioReceived = (e3) => {
            var t2;
            null === (t2 = this.onFirstAudioReceived) || void 0 === t2 || t2.call(this, e3);
          }, this.statsFilter.onFirstVideoReceived = (e3) => {
            var t2;
            null === (t2 = this.onFirstVideoReceived) || void 0 === t2 || t2.call(this, e3);
          }, this.statsFilter.onFirstAudioDecoded = (e3) => {
            var t2;
            null === (t2 = this.onFirstAudioDecoded) || void 0 === t2 || t2.call(this, e3);
          }, this.statsFilter.onFirstVideoDecoded = (e3, t2, i2) => {
            var n2;
            null === (n2 = this.onFirstVideoDecoded) || void 0 === n2 || n2.call(this, e3, t2, i2);
          }, this.statsFilter.onSelectedLocalCandidateChanged = (e3, t2) => {
            var i2;
            null === (i2 = this.onSelectedLocalCandidateChanged) || void 0 === i2 || i2.call(this, e3, t2);
          }, this.statsFilter.onSelectedRemoteCandidateChanged = (e3, t2) => {
            var i2;
            null === (i2 = this.onSelectedRemoteCandidateChanged) || void 0 === i2 || i2.call(this, e3, t2);
          }, this.statsFilter.onFirstVideoDecodedTimeout = (e3) => {
            var t2;
            null === (t2 = this.onFirstVideoDecodedTimeout) || void 0 === t2 || t2.call(this, e3);
          };
        }
        unbindStatsEvents() {
          this.statsFilter.onFirstAudioReceived = void 0, this.statsFilter.onFirstVideoReceived = void 0, this.statsFilter.onFirstAudioDecoded = void 0, this.statsFilter.onFirstVideoDecoded = void 0, this.statsFilter.onSelectedLocalCandidateChanged = void 0, this.statsFilter.onSelectedRemoteCandidateChanged = void 0, this.statsFilter.onFirstVideoDecodedTimeout = void 0;
        }
        async applySimulcastForFirefox(e3, t2) {
          if (e3.length === t2.length)
            for (let a2 = 0; a2 < e3.length; a2++) {
              var i2, n2, s2, r2, o2;
              const c2 = e3[a2], d2 = t2[a2];
              if (d2 instanceof Nw && !bn(i2 = d2._hints).call(i2, YA.LOW_STREAM) && null !== (n2 = d2._encoderConfig) && void 0 !== n2 && n2.bitrateMax && (null === (s2 = d2._encoderConfig) || void 0 === s2 ? void 0 : s2.bitrateMax) > 200 && null !== (r2 = d2._scalabilityMode) && void 0 !== r2 && r2.numSpatialLayers && (null === (o2 = d2._scalabilityMode) || void 0 === o2 ? void 0 : o2.numSpatialLayers) > 1 && "vp8" === this.store.codec) {
                const e4 = {}, t3 = { high: 1e3 * (d2._encoderConfig.bitrateMax - 50), medium: 5e4 };
                e4.encodings = [{ rid: "m", active: true, maxBitrate: t3.medium, scaleResolutionDownBy: 4 }, { rid: "h", active: true, maxBitrate: t3.high }];
                const i3 = c2.sender.getParameters();
                await c2.sender.setParameters(Object.assign(i3, e4));
              }
            }
        }
        async applySimulcastEncodings(e3, t2) {
          if (!RT() && e3.length === t2.length)
            for (let i2 = 0; i2 < e3.length; i2++) {
              const n2 = t2[i2];
              if (n2 instanceof Nw && this.isVP8Simulcast(n2)) {
                const t3 = e3[i2], s2 = {}, r2 = { high: 1e3 * (n2._encoderConfig.bitrateMax - 50), medium: 5e4 };
                s2.encodings = [{ active: true, adaptivePtime: false, networkPriority: "high", priority: "high", maxBitrate: r2.high }, { active: true, adaptivePtime: false, networkPriority: "low", priority: "low", maxBitrate: r2.medium, scaleResolutionDownBy: 4 }];
                const o2 = t3.sender.getParameters();
                await t3.sender.setParameters(Object.assign(o2, s2));
              }
            }
        }
        isVP8Simulcast(e3) {
          var t2, i2, n2, s2, r2;
          return !!(e3 instanceof Nw && DC("SIMULCAST") && "vp8" === this.store.codec && !bn(t2 = e3._hints).call(t2, YA.LOW_STREAM) && null !== (i2 = e3._encoderConfig) && void 0 !== i2 && i2.bitrateMax && (null === (n2 = e3._encoderConfig) || void 0 === n2 ? void 0 : n2.bitrateMax) > 200 && null !== (s2 = e3._scalabilityMode) && void 0 !== s2 && s2.numSpatialLayers && (null === (r2 = e3._scalabilityMode) || void 0 === r2 ? void 0 : r2.numSpatialLayers) > 1);
        }
        logSDPExchange(e3, t2, i2, n2) {
          if (DC("SDP_LOGGING"))
            return YC.upload("[".concat(this.store.clientId, "] exchanging ").concat(i2, " ").concat(t2, " SDP during P2PConnection.").concat(n2, "\n"), e3), "offer" === t2 ? (e4) => {
              this.logSDPExchange(e4, "answer", "local" === i2 ? "remote" : "local", n2);
            } : void 0;
        }
        async muteLocal(e3) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.muteLocal before remote SDP created.");
            const t2 = this.peerConnection.getTransceivers().filter((t3) => t3.mid && -1 !== e3.indexOf(t3.mid));
            if (t2.length !== e3.length)
              throw new Error("Transceivers' length doesn't match mids' length.");
            t2.map((e4) => {
              e4.direction = "inactive";
            });
            const i2 = await this.peerConnection.createOffer(), n2 = this.logSDPExchange(i2.sdp || "", "offer", "local", "muteLocal");
            await this.peerConnection.setLocalDescription(i2), this.remoteSDP.muteRemote(e3);
            const s2 = this.remoteSDP.toString();
            null == n2 || n2(s2), await this.setRemoteDescription({ type: "answer", sdp: s2 });
          } catch (e4) {
            throw new VT(xT.EXCHANGE_SDP_FAILED, "P2PConnection.muteLocal failed; ".concat(e4.toString()));
          }
        }
        async unmuteLocal(e3) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.unmuteLocal before remote SDP created.");
            const t2 = this.peerConnection.getTransceivers().filter((t3) => t3.mid && -1 !== e3.indexOf(t3.mid));
            if (t2.length !== e3.length)
              throw new Error("Transceivers' length doesn't match mids' length.");
            t2.map(async (e4) => {
              e4.direction = "sendonly";
            });
            const i2 = await this.peerConnection.createOffer(), n2 = this.logSDPExchange(i2.sdp || "", "offer", "local", "unmuteLocal");
            await this.peerConnection.setLocalDescription(i2), this.remoteSDP.unmuteRemote(e3);
            const s2 = this.remoteSDP.toString();
            null == n2 || n2(s2), await this.setRemoteDescription({ type: "answer", sdp: s2 });
          } catch (e4) {
            throw new VT(xT.EXCHANGE_SDP_FAILED, "P2PConnection.unmuteLocal failed; ".concat(e4.toString()));
          }
        }
        async getRemoteSSRC(e3, t2) {
          var i2, n2;
          if (t2 = null !== (i2 = t2) && void 0 !== i2 ? i2 : null === (n2 = this.currentRemoteDescription) || void 0 === n2 ? void 0 : n2.sdp) {
            var s2;
            const i3 = null === (s2 = YP.parse(t2).mediaDescriptions.find((t3) => t3.attributes.mid === e3)) || void 0 === s2 ? void 0 : s2.attributes.ssrcs;
            return null == i3 ? void 0 : i3[0].ssrcId;
          }
        }
        async setRemoteDescription(e3) {
          var t2;
          await this.peerConnection.setRemoteDescription(e3), bn(t2 = ["connected", "completed"]).call(t2, this.peerConnection.iceConnectionState) || (this.isReady = true, this.addRemoteCandidate());
        }
        mungReceiveAnswerSDP(e3, t2, i2) {
          const n2 = YP.parse(e3), s2 = n2.mediaDescriptions.find((e4) => e4.attributes.mid === t2);
          return s2 && (i2 === hv.AUDIO && "audio" === s2.media.mediaType && NL(s2), this.useXR && DL(n2)), YP.print(n2);
        }
      };
      function VL(e2, t2, i2) {
        const n2 = e2[t2];
        if ("function" != typeof n2)
          throw new Error("Cannot use mutex on object property.");
        return i2.value = async function() {
          const e3 = this.mutex, i3 = await e3.lock("From P2PConnection.".concat(t2));
          try {
            for (var s2 = arguments.length, r2 = new Array(s2), o2 = 0; o2 < s2; o2++)
              r2[o2] = arguments[o2];
            return await n2.apply(this, r2);
          } finally {
            i3();
          }
        }, i2;
      }
      function FL(e2, t2) {
        let i2 = document.createElement("video"), n2 = document.createElement("canvas");
        i2.setAttribute("style", "display:none"), n2.setAttribute("style", "display:none"), i2.setAttribute("muted", ""), i2.muted = true, i2.setAttribute("autoplay", ""), i2.autoplay = true, i2.setAttribute("playsinline", ""), n2.width = yy(t2.width), n2.height = yy(t2.height);
        const s2 = yy(t2.framerate || 15);
        document.body.append(i2), document.body.append(n2);
        let r2 = e2._mediaStreamTrack;
        i2.srcObject = new MediaStream([r2]), i2.play();
        const o2 = n2.getContext("2d");
        if (!o2)
          throw new VI(xT.UNEXPECTED_ERROR, "can not get canvas context");
        const a2 = wA(), c2 = n2.captureStream(a2.supportRequestFrame ? 0 : s2).getVideoTracks()[0];
        c2.canvas || (c2.canvas = n2), n2.startCapture = () => {
          if (!i2)
            return n2.stopCapture && n2.stopCapture();
          if (i2.paused && i2.play(), i2.videoHeight > 2 && i2.videoWidth > 2) {
            const e3 = i2.videoWidth, t3 = i2.videoHeight / e3, s3 = n2.width * t3;
            Math.abs(s3 - n2.height) >= 2 && (YC.debug("adjust low stream resolution", "".concat(n2.width, "x").concat(n2.height, " -> ").concat(n2.width, "x").concat(s3)), n2.height = s3);
          }
          o2.drawImage(i2, 0, 0, n2.width, n2.height), c2.requestFrame && c2.requestFrame(), r2 !== e2._mediaStreamTrack && (r2 = e2._mediaStreamTrack, i2.srcObject = new MediaStream([r2]));
        }, n2.stopCapture = vb(() => n2.startCapture && n2.startCapture(), s2);
        const d2 = c2.stop;
        return c2.stop = () => {
          d2.call(c2), i2 && (i2.remove(), i2.srcObject = null, i2 = null), n2 && (n2.width = 0, n2.remove(), n2.stopCapture && n2.stopCapture(), n2.startCapture = void 0, n2.stopCapture = void 0, n2 = null), YC.debug("clean low stream renderer");
        }, c2;
      }
      var BL, jL, GL, WL, HL, KL, YL, qL, JL, zL, XL;
      UI([VL, xI("design:type", Function), xI("design:paramtypes", [Object]), xI("design:returntype", tT)], xL.prototype, "establish", null), UI([VL, xI("design:type", Function), xI("design:paramtypes", [Object]), xI("design:returntype", tT)], xL.prototype, "connect", null), UI([VL, xI("design:type", Function), xI("design:paramtypes", [String, Array, String, String]), xI("design:returntype", tT)], xL.prototype, "receive", null), UI([VL, xI("design:type", Function), xI("design:paramtypes", [String, Array, String, String]), xI("design:returntype", tT)], xL.prototype, "mockReceive", null), UI([VL, xI("design:type", Function), xI("design:paramtypes", [Array]), xI("design:returntype", tT)], xL.prototype, "stopReceiving", null), UI([VL, xI("design:type", Function), xI("design:paramtypes", [Object]), xI("design:returntype", tT)], xL.prototype, "restartICE", null), UI([VL, xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", void 0)], xL.prototype, "close", null), UI([VL, xI("design:type", Function), xI("design:paramtypes", [String, _b]), xI("design:returntype", tT)], xL.prototype, "updateEncoderConfig", null), UI([VL, xI("design:type", Function), xI("design:paramtypes", [String, _b]), xI("design:returntype", tT)], xL.prototype, "updateSendParameters", null), UI([VL, xI("design:type", Function), xI("design:paramtypes", [_b, String]), xI("design:returntype", tT)], xL.prototype, "replaceTrack", null), UI([VL, xI("design:type", Function), xI("design:paramtypes", [Array]), xI("design:returntype", tT)], xL.prototype, "muteLocal", null), UI([VL, xI("design:type", Function), xI("design:paramtypes", [Array]), xI("design:returntype", tT)], xL.prototype, "unmuteLocal", null), function(e2) {
        e2[e2.HEIGHT = 2033] = "HEIGHT", e2[e2.FRAME_RATE = 2034] = "FRAME_RATE", e2[e2.WIDTH = 2035] = "WIDTH";
      }(BL || (BL = {})), function(e2) {
        e2[e2.HEIGHT = 2072] = "HEIGHT", e2[e2.FRAME_RATE = 2074] = "FRAME_RATE", e2[e2.WIDTH = 2076] = "WIDTH";
      }(jL || (jL = {})), function(e2) {
        e2[e2.FRAME_RATE = 2002] = "FRAME_RATE", e2[e2.WIDTH = 2003] = "WIDTH", e2[e2.HEIGHT = 2004] = "HEIGHT", e2[e2.PACKAGE_LOST = 2005] = "PACKAGE_LOST", e2[e2.AVG_ENCODE = 2007] = "AVG_ENCODE", e2[e2.NACKS = 2009] = "NACKS", e2[e2.PLIS = 2010] = "PLIS", e2[e2.FIRS = 2011] = "FIRS", e2[e2.BITRATE = 2012] = "BITRATE", e2[e2.PACKAGE_RATE = 2031] = "PACKAGE_RATE", e2[e2.ADAPTATION = 2032] = "ADAPTATION", e2[e2.ACTUAL_ENCODED = 2060] = "ACTUAL_ENCODED", e2[e2.BANDWIDTH = 2061] = "BANDWIDTH", e2[e2.RETRANSMIT = 2062] = "RETRANSMIT", e2[e2.TARGET_ENCODED = 2064] = "TARGET_ENCODED", e2[e2.TRANSMIT = 2066] = "TRANSMIT", e2[e2.FREEZE = 2082] = "FREEZE", e2[e2.DISABLED = 2095] = "DISABLED", e2[e2.PLAYER_STATUS = 2128] = "PLAYER_STATUS", e2[e2.QP_SUM = 2143] = "QP_SUM";
      }(GL || (GL = {})), function(e2) {
        e2[e2.BITRATE = 2069] = "BITRATE", e2[e2.PACKAGE_LOST = 2070] = "PACKAGE_LOST", e2[e2.PACKAGE_RATE = 2071] = "PACKAGE_RATE", e2[e2.HEIGHT = 2073] = "HEIGHT", e2[e2.FRAME_RATE = 2075] = "FRAME_RATE", e2[e2.WIDTH = 2077] = "WIDTH";
      }(WL || (WL = {})), function(e2) {
        e2[e2.JITTER = -1] = "JITTER", e2[e2.PACKAGE_LOST = 2014] = "PACKAGE_LOST", e2[e2.WIDTH = 2018] = "WIDTH", e2[e2.HEIGHT = 2019] = "HEIGHT", e2[e2.FRAME_RATE = 2020] = "FRAME_RATE", e2[e2.JITTER_BUFFER = 2023] = "JITTER_BUFFER", e2[e2.CURRENT_DELAY = 2024] = "CURRENT_DELAY", e2[e2.NACKS = 2026] = "NACKS", e2[e2.PLIS = 2027] = "PLIS", e2[e2.FIRS = 2028] = "FIRS", e2[e2.BITRATE = 2029] = "BITRATE", e2[e2.PACKAGE_RATE = 2078] = "PACKAGE_RATE", e2[e2.FREEZE = 2084] = "FREEZE", e2[e2.DISABLED = 2101] = "DISABLED", e2[e2.PLAYER_STATUS = 2129] = "PLAYER_STATUS", e2[e2.QP_SUM = 2144] = "QP_SUM", e2[e2.I_FRAME_DELAY = 2149] = "I_FRAME_DELAY";
      }(HL || (HL = {})), function(e2) {
        e2[e2.FRAME_RATE_DECODE = 2021] = "FRAME_RATE_DECODE", e2[e2.FRAME_RATE_RENDER = 2022] = "FRAME_RATE_RENDER", e2[e2.FREEZE_TIME = 2109] = "FREEZE_TIME", e2[e2.FREEZE_TIME_RENDER = 2147] = "FREEZE_TIME_RENDER";
      }(KL || (KL = {})), function(e2) {
        e2[e2.PCM_LEVEL = 2104] = "PCM_LEVEL";
      }(YL || (YL = {})), function(e2) {
        e2[e2.PACKAGE_LOST = -1] = "PACKAGE_LOST", e2[e2.LEVEL = 2038] = "LEVEL", e2[e2.BITRATE = 2039] = "BITRATE", e2[e2.PACKAGE_RATE = 2040] = "PACKAGE_RATE", e2[e2.AEC_RETURN_LOSS = 2041] = "AEC_RETURN_LOSS", e2[e2.AEC_RETURN_LOSS_ENH = 2042] = "AEC_RETURN_LOSS_ENH", e2[e2.FREEZE = 2081] = "FREEZE", e2[e2.DISABLED = 2096] = "DISABLED";
      }(qL || (qL = {})), function(e2) {
        e2[e2.BITRATE = 2044] = "BITRATE", e2[e2.PACKAGE_LOST = 2045] = "PACKAGE_LOST", e2[e2.PACKAGE_RATE = 2046] = "PACKAGE_RATE", e2[e2.CURRENT_DELAY = 2047] = "CURRENT_DELAY", e2[e2.JITTER_BUFFER = 2054] = "JITTER_BUFFER", e2[e2.JITTER = 2055] = "JITTER", e2[e2.FREEZE = 2083] = "FREEZE", e2[e2.DISABLED = 2102] = "DISABLED", e2[e2.PCM_LEVEL = 2105] = "PCM_LEVEL", e2[e2.PLAYER_STATUS = 2130] = "PLAYER_STATUS", e2[e2.CONCEALED_SAMPLES = 2148] = "CONCEALED_SAMPLES";
      }(JL || (JL = {})), function(e2) {
        e2[e2.FREEZE_TIME = -1] = "FREEZE_TIME", e2[e2.LEVEL = 2043] = "LEVEL";
      }(zL || (zL = {})), function(e2) {
        e2[e2.RTT = 2006] = "RTT", e2[e2.CONN_TYPE = 801] = "CONN_TYPE";
      }(XL || (XL = {}));
      const QL = 1e3, ZL = 3;
      function $L(e2, t2, i2) {
        null != i2 && Number.isFinite(i2) && (e2[t2] = Math.round(Math.max(0, i2)));
      }
      function ek(e2) {
        const t2 = { [XL.CONN_TYPE]: 0, [XL.RTT]: e2.rtt };
        switch (e2.selectedCandidatePair.localCandidate.candidateType) {
          case "relay": {
            const i2 = e2.selectedCandidatePair.localCandidate.relayProtocol;
            "udp" === i2 && (t2[XL.CONN_TYPE] = 1), "tcp" === i2 && (t2[XL.CONN_TYPE] = 3), "tls" === i2 && (t2[XL.CONN_TYPE] = 4);
            break;
          }
          case "srflx":
            t2[XL.CONN_TYPE] = 2;
        }
        return t2;
      }
      class tk extends ig {
        constructor(e2) {
          super(), nh(this, "store", void 0), nh(this, "uploadWRTCStatsTimer", void 0), nh(this, "uploadOutboundDenoiserStatsTimer", void 0), nh(this, "uploadExtStatsTimer", void 0), nh(this, "uploadExtUsageStatsTimer", void 0), nh(this, "uploadInboundExtStatsTimer", void 0), nh(this, "requestStats", void 0), nh(this, "requestTransportStats", void 0), nh(this, "requestLocalMedia", void 0), nh(this, "requestRemoteMedia", void 0), nh(this, "requestAllTracks", void 0), nh(this, "requestVideoIsReady", void 0), nh(this, "requestUploadStats", void 0), nh(this, "requestUpload", void 0), nh(this, "uploadOutboundStarted", false), nh(this, "uploadInboundStarted", false), nh(this, "uploadTransportStarted", false), nh(this, "uploadExtensionUsageStarted", false), nh(this, "lastRecvStats", void 0), nh(this, "lastSendStats", void 0), nh(this, "lastFullRecvStats", void 0), nh(this, "lastFullSendStats", void 0), nh(this, "needUploadRenderFreezeTime", true), this.store = e2;
        }
        uploadWRTCStats(e2) {
          if (!this.requestStats || !this.requestUploadStats)
            return;
          let t2, i2;
          if (this.uploadTransportStarted && (t2 = this.requestStats(), this.store.useP2P && (i2 = this.requestStats(true))), !t2 && this.uploadOutboundStarted && (t2 = this.requestStats()), !i2 && this.uploadInboundStarted && (i2 = this.requestStats(true)), t2 || i2) {
            const n2 = {};
            if (this.uploadTransportStarted && t2) {
              const s2 = this.getTransportStats(t2, i2, e2);
              s2 && (n2.misc = [s2]);
            }
            if (this.uploadOutboundStarted && t2) {
              const i3 = this.getOutboundStats(t2, e2 ? this.lastSendStats : this.lastFullSendStats, e2);
              i3 && (n2.outbound = [i3]);
            }
            if (this.uploadInboundStarted && i2) {
              const t3 = this.getInboundStats(i2, e2 ? this.lastRecvStats : this.lastFullRecvStats, e2);
              t3 && (n2.inbound = t3);
            }
            this.requestUploadStats(n2);
          }
          this.lastRecvStats = i2, this.lastSendStats = t2, e2 || (this.lastFullRecvStats = i2, this.lastFullSendStats = t2);
        }
        startUploadWRTCStats() {
          if (this.uploadWRTCStatsTimer)
            return;
          let e2 = 1;
          this.uploadWRTCStatsTimer = window.setInterval(() => {
            if (!this.uploadTransportStarted && !this.uploadInboundStarted && !this.uploadOutboundStarted)
              return this.stopUploadWRTCStats();
            this.uploadWRTCStats(e2 !== ZL), ++e2 === ZL + 1 && (e2 = 1);
          }, QL);
        }
        stopUploadWRTCStats() {
          window.clearInterval(this.uploadWRTCStatsTimer), this.uploadWRTCStatsTimer = void 0, this.lastSendStats && (this.lastSendStats.videoSend = [], this.lastSendStats.audioSend = [], this.lastSendStats = void 0), this.lastRecvStats && (this.lastRecvStats.videoRecv = [], this.lastRecvStats.audioRecv = [], this.lastRecvStats = void 0);
        }
        getTransportStats(e2, t2, i2) {
          if (!this.requestStats)
            return;
          if (i2)
            return null == e2.rtt ? void 0 : { addition: { [XL.RTT]: e2.rtt, [XL.CONN_TYPE]: void 0 } };
          const n2 = ek(e2);
          if (this.store.useP2P) {
            if (t2) {
              const e3 = ek(t2);
              n2[XL.CONN_TYPE] += e3[XL.CONN_TYPE] << 3;
            }
            n2[XL.CONN_TYPE] += 110;
          } else
            n2[XL.CONN_TYPE] += 100;
          return { addition: n2 };
        }
        getOutboundStats(e2, t2, i2) {
          if (!this.requestUploadStats || !this.requestLocalMedia)
            return;
          const n2 = this.requestLocalMedia();
          if (!n2 || 0 === n2.length)
            return;
          let s2, r2, o2;
          return n2.forEach((n3) => {
            let [a2, { track: c2, ssrcs: d2 }] = n3;
            switch (a2) {
              case Ev.LocalVideoLowTrack:
              case Ev.LocalVideoTrack:
                if (a2 === Ev.LocalVideoTrack) {
                  const n4 = function(e3, t3, i3, n5, s4) {
                    const r3 = t3.videoSend.find((t4) => t4.ssrc === e3);
                    if (!r3)
                      return;
                    const o4 = {}, { sentFrame: a3, inputFrame: c3 } = r3;
                    if (c3 && a3) {
                      const e4 = c3.frameRate, t4 = a3.frameRate;
                      o4[GL.FREEZE] = function(e5, t5) {
                        let i4 = true;
                        return i4 = !(e5 <= 5) && (e5 <= 10 ? t5 < 3 : e5 <= 20 ? t5 < 4 : t5 < 5), i4;
                      }(e4, t4) ? 1 : 0;
                    }
                    if ($L(o4, GL.QP_SUM, r3.qpSumPerFrame), s4)
                      return o4;
                    switch (a3 && ($L(o4, GL.HEIGHT, a3.height), $L(o4, GL.WIDTH, a3.width), $L(o4, GL.FRAME_RATE, a3.frameRate)), o4[GL.DISABLED] = n5._originMediaStreamTrack && !n5._originMediaStreamTrack.enabled || n5._mediaStreamTrack && !n5._mediaStreamTrack.enabled ? 1 : 0, r3.adaptionChangeReason) {
                      case "none":
                        o4[GL.ADAPTATION] = 0;
                        break;
                      case "cpu":
                        o4[GL.ADAPTATION] = 1;
                        break;
                      case "bandwidth":
                        o4[GL.ADAPTATION] = 2;
                        break;
                      case "other":
                        o4[GL.ADAPTATION] = 3;
                    }
                    o4[GL.PLAYER_STATUS] = ub[n5._player ? n5._player.videoElementStatus : "uninit"], $L(o4, GL.NACKS, r3.nacksCount), $L(o4, GL.PLIS, r3.plisCount), $L(o4, GL.FIRS, r3.firsCount), $L(o4, GL.AVG_ENCODE, r3.avgEncodeMs);
                    const d3 = i3 && i3.videoSend.find((t4) => t4.ssrc === e3);
                    if (d3) {
                      let e4 = s4 ? QL : QL * ZL;
                      d3.timestamp && r3.timestamp && (e4 = r3.timestamp - d3.timestamp), null != d3.packets && null != r3.packets && $L(o4, GL.PACKAGE_RATE, 1e3 * (r3.packets - d3.packets) / e4), null != r3.packetsLost && null != d3.packetsLost && $L(o4, GL.PACKAGE_LOST, r3.packetsLost - d3.packetsLost), null != d3.bytes && null != r3.bytes && $L(o4, GL.BITRATE, 8 * (r3.bytes - d3.bytes) / e4);
                    }
                    return o4;
                  }(d2[0].ssrcId, e2, t2, c2, i2), s3 = i2 ? null : function(e3, t3, i3) {
                    const n5 = t3.videoSend.find((t4) => t4.ssrc === e3);
                    if (!n5)
                      return null;
                    const s4 = {}, r3 = n5.inputFrame, o4 = r3 && r3.height || i3 && i3._videoHeight || 0, a3 = r3 && r3.width || i3 && i3._videoWidth || 0, c3 = r3 && r3.frameRate || 0;
                    return $L(s4, BL.HEIGHT, o4), $L(s4, BL.WIDTH, a3), $L(s4, BL.FRAME_RATE, c3), s4;
                  }(d2[0].ssrcId, e2, c2), o3 = i2 ? null : function(e3) {
                    const t3 = {};
                    return $L(t3, GL.RETRANSMIT, e3.bitrate.retransmit), $L(t3, GL.TARGET_ENCODED, e3.bitrate.targetEncoded), $L(t3, GL.ACTUAL_ENCODED, e3.bitrate.actualEncoded), $L(t3, GL.TRANSMIT, e3.bitrate.transmit), $L(t3, GL.BANDWIDTH, e3.sendBandwidth), t3;
                  }(e2);
                  r2 = Object.assign({}, n4, s3, o3);
                } else
                  o2 = i2 ? void 0 : function(e3, t3, i3) {
                    const n4 = t3.videoSend.find((t4) => t4.ssrc === e3);
                    if (!n4)
                      return;
                    const s3 = {}, r3 = n4.sentFrame;
                    if (r3 && ($L(s3, WL.HEIGHT, r3.height), $L(s3, WL.WIDTH, r3.width), $L(s3, WL.FRAME_RATE, r3.frameRate)), i3) {
                      const t4 = i3.videoSend.find((t5) => t5.ssrc === e3);
                      if (t4) {
                        let e4 = QL * ZL;
                        t4.timestamp && n4.timestamp && (e4 = n4.timestamp - t4.timestamp), null != t4.packets && null != n4.packets && $L(s3, WL.PACKAGE_RATE, 1e3 * (n4.packets - t4.packets) / e4), null != n4.packetsLost && null != t4.packetsLost && $L(s3, WL.PACKAGE_LOST, n4.packetsLost - t4.packetsLost), null != t4.bytes && null != n4.bytes && $L(s3, WL.BITRATE, 8 * (n4.bytes - t4.bytes) / e4);
                      }
                    }
                    return s3;
                  }(d2[0].ssrcId, e2, t2);
                break;
              case Ev.LocalAudioTrack:
                s2 = i2 ? void 0 : function(e3, t3, i3, n4) {
                  const s3 = t3.audioSend.find((t4) => t4.ssrc === e3);
                  if (!s3)
                    return;
                  const r3 = {};
                  r3[qL.DISABLED] = n4._originMediaStreamTrack && !n4._originMediaStreamTrack.enabled || n4._mediaStreamTrack && !n4._mediaStreamTrack.enabled ? 1 : 0;
                  const o3 = n4._source.getAccurateVolumeLevel(), a3 = s3.inputLevel;
                  $L(r3, qL.LEVEL, 100 * (null == a3 ? o3 : a3)), $L(r3, YL.PCM_LEVEL, 100 * o3), $L(r3, qL.AEC_RETURN_LOSS, s3.aecReturnLoss), $L(r3, qL.AEC_RETURN_LOSS_ENH, s3.aecReturnLossEnhancement), r3[qL.FREEZE] = 0;
                  const c3 = i3 && i3.audioSend.find((t4) => t4.ssrc === e3);
                  if (c3) {
                    let e4 = QL * ZL;
                    c3.timestamp && s3.timestamp && (e4 = s3.timestamp - c3.timestamp), null != c3.bytes && null != s3.bytes && $L(r3, qL.BITRATE, 8 * (s3.bytes - c3.bytes) / e4), null != c3.packets && null != s3.packets && $L(r3, qL.PACKAGE_RATE, 1e3 * (s3.packets - c3.packets) / e4);
                  }
                  return r3;
                }(d2[0].ssrcId, e2, t2, c2);
            }
          }), { high: r2, low: o2, audio: s2 };
        }
        getInboundStats(e2, t2, i2) {
          if (!this.requestRemoteMedia)
            return;
          const n2 = this.requestRemoteMedia() || [], s2 = [];
          return n2.forEach((n3) => {
            let [r2, o2] = n3;
            const a2 = { peer: r2.uid };
            if (o2.has(hv.VIDEO) && r2.videoTrack) {
              const n4 = r2._videoSSRC && this.requestVideoIsReady && this.requestVideoIsReady(r2._videoSSRC) || false, s3 = r2.videoTrack ? function(e3, t3, i3, n5, s4, r3, o3) {
                const a3 = t3.videoRecv.find((t4) => t4.ssrc === e3);
                if (!a3)
                  return;
                const c2 = {}, { receivedFrame: d2, outputFrame: l2, decodeFrameRate: u2 } = a3, h2 = i3 && i3.videoRecv.find((t4) => t4.ssrc === e3);
                if (c2[HL.FREEZE] = s4 && uk.isRemoteVideoFreeze(n5, a3, h2) ? 1 : 0, $L(c2, KL.FRAME_RATE_DECODE, u2), $L(c2, HL.QP_SUM, a3.qpSumPerFrame), a3.framesRateFirefox && $L(c2, HL.FRAME_RATE, a3.framesRateFirefox), d2 && $L(c2, HL.FRAME_RATE, d2.frameRate), h2) {
                  const e4 = t3.timestamp - i3.timestamp || (o3 ? QL : ZL * QL);
                  null != a3.packetsLost && null != h2.packetsLost && $L(c2, HL.PACKAGE_LOST, a3.packetsLost - h2.packetsLost), null != h2.bytes && null != a3.bytes && $L(c2, HL.BITRATE, 8 * (a3.bytes - h2.bytes) / e4), null != h2.packets && null != a3.packets && $L(c2, HL.PACKAGE_RATE, 1e3 * (a3.packets - h2.packets) / e4);
                }
                if (o3)
                  return c2;
                if (d2 ? ($L(c2, HL.HEIGHT, d2.height), $L(c2, HL.WIDTH, d2.width)) : n5 && ($L(c2, HL.HEIGHT, n5._videoHeight || 0), $L(c2, HL.WIDTH, n5._videoWidth || 0)), l2 && $L(c2, KL.FRAME_RATE_RENDER, l2.frameRate), $L(c2, HL.JITTER_BUFFER, a3.jitterBufferMs), $L(c2, HL.CURRENT_DELAY, a3.currentDelayMs), $L(c2, HL.FIRS, a3.firsCount), $L(c2, HL.NACKS, a3.nacksCount), $L(c2, HL.PLIS, a3.plisCount), n5) {
                  c2[HL.DISABLED] = n5._originMediaStreamTrack.enabled && n5._mediaStreamTrack.enabled ? 0 : 1;
                  const e4 = n5._player;
                  if (e4) {
                    const { freezeTimeCounterList: t4, renderFreezeAccTime: i4 } = e4;
                    if (t4 && t4.length > 0 && $L(c2, KL.FREEZE_TIME, t4.splice(0, 1)[0]), r3 && "visible" === gw.visibility) {
                      const t5 = Math.min(6e3, i4);
                      e4.renderFreezeAccTime = Math.max(0, i4 - t5), $L(c2, KL.FREEZE_TIME_RENDER, t5);
                    }
                  }
                }
                if (c2[HL.PLAYER_STATUS] = ub[n5._player ? n5._player.videoElementStatus : "uninit"], h2 && void 0 !== a3.totalInterFrameDelay && void 0 !== a3.totalSquaredInterFrameDelay && void 0 !== h2.totalInterFrameDelay && void 0 !== h2.totalSquaredInterFrameDelay) {
                  const e4 = a3.totalInterFrameDelay - h2.totalInterFrameDelay, t4 = a3.totalSquaredInterFrameDelay - h2.totalSquaredInterFrameDelay, i4 = a3.framesDecodeCount - h2.framesDecodeCount, n6 = e4 / i4 * 1e3, s5 = Math.round(1e3 * Math.sqrt((t4 - Math.pow(e4, 2) / i4) / i4));
                  !isNaN(s5) && n6 + s5 > Math.max(3 * n6, n6 + 150) && (c2[HL.I_FRAME_DELAY] = s5);
                }
                return c2;
              }(r2._videoSSRC, e2, t2, r2.videoTrack, true === n4, this.needUploadRenderFreezeTime, i2) : void 0;
              s3 && (a2.video = s3);
            }
            if (o2.has(hv.AUDIO) && r2.audioTrack) {
              const n4 = r2.audioTrack ? function(e3, t3, i3, n5, s3) {
                const r3 = t3.audioRecv.find((t4) => t4.ssrc === e3);
                if (!r3)
                  return;
                const o3 = {}, a3 = i3 && i3.audioRecv.find((t4) => t4.ssrc === e3), { receivedFrames: c2, droppedFrames: d2 } = r3;
                var l2, u2;
                if ($L(o3, JL.JITTER, r3.jitterMs), null != c2 && null != d2 && (o3[JL.FREEZE] = (u2 = d2, 0 === (l2 = c2) || 100 * u2 / l2 > 20 ? 1 : 0)), a3) {
                  const e4 = t3.timestamp - i3.timestamp || (s3 ? QL : QL * ZL);
                  null != r3.packets && null != a3.packets && $L(o3, JL.PACKAGE_RATE, 1e3 * (r3.packets - a3.packets) / e4), null != a3.bytes && null != r3.bytes && $L(o3, JL.BITRATE, 8 * (r3.bytes - a3.bytes) / e4), null != r3.packetsLost && null != a3.packetsLost && $L(o3, JL.PACKAGE_LOST, r3.packetsLost - a3.packetsLost);
                }
                if (s3)
                  return o3;
                const h2 = n5._source.getAccurateVolumeLevel(), p2 = r3.outputLevel;
                if ($L(o3, zL.LEVEL, 100 * (null == p2 ? h2 : p2)), $L(o3, JL.PCM_LEVEL, 100 * h2), n5 && (o3[JL.DISABLED] = n5._originMediaStreamTrack.enabled && n5._mediaStreamTrack.enabled ? 0 : 1), $L(o3, JL.JITTER_BUFFER, r3.jitterBufferMs), $L(o3, JL.CURRENT_DELAY, r3.jitterBufferMs), o3[JL.PLAYER_STATUS] = ub[qb.getPlayerState(n5.getTrackId())], a3) {
                  const e4 = r3.concealedSamples - a3.concealedSamples;
                  e4 > 0 && $L(o3, JL.CONCEALED_SAMPLES, e4);
                }
                return o3;
              }(r2._audioSSRC, e2, t2, r2.audioTrack, i2) : void 0;
              n4 && (a2.audio = n4);
            }
            (a2.video || a2.audio) && s2.push(a2);
          }), this.needUploadRenderFreezeTime = !this.needUploadRenderFreezeTime, s2;
        }
        startUploadTransportStats() {
          this.uploadTransportStarted = true, this.uploadWRTCStatsTimer || this.startUploadWRTCStats();
        }
        stopUploadTransportStats() {
          this.uploadTransportStarted = false;
        }
        startUploadOutboundStats() {
          this.uploadOutboundStarted || (this.uploadOutboundStarted = true, this.uploadWRTCStatsTimer || this.startUploadWRTCStats(), this.uploadOutboundDenoiserStatsTimer && window.clearInterval(this.uploadOutboundDenoiserStatsTimer), this.uploadOutboundDenoiserStatsTimer = window.setInterval(() => {
            if (!this.requestAllTracks || !this.requestUpload)
              return;
            const e2 = (this.requestAllTracks() || []).find((e3) => e3 instanceof dw);
            if (e2 && e2._external.getDenoiserStats) {
              const t2 = e2._external.getDenoiserStats();
              t2 && this.requestUpload(RI.DENOISER_STATS, t2);
            }
          }, 2e3), this.uploadExtStatsTimer && window.clearInterval(this.uploadExtStatsTimer), this.uploadExtStatsTimer = window.setInterval(() => {
            if (!this.requestAllTracks || !this.requestUpload)
              return;
            this.requestAllTracks().forEach((e2) => {
              e2.getProcessorStats().forEach((e3) => {
                this.requestUpload && this.requestUpload(e3.type, e3.stats);
              });
            });
          }, 2e3));
        }
        stopUploadOutboundStats() {
          this.uploadOutboundStarted && (this.uploadOutboundStarted = false, this.lastSendStats && (this.lastSendStats.videoSend = [], this.lastSendStats.audioSend = [], this.lastSendStats = void 0), this.uploadOutboundDenoiserStatsTimer && window.clearInterval(this.uploadOutboundDenoiserStatsTimer), this.uploadOutboundDenoiserStatsTimer = void 0);
        }
        startUploadInboundStats() {
          this.uploadInboundStarted || (this.uploadInboundStarted = true, this.uploadWRTCStatsTimer || this.startUploadWRTCStats(), this.uploadInboundExtStatsTimer && window.clearInterval(this.uploadInboundExtStatsTimer), this.uploadInboundExtStatsTimer = window.setInterval(() => {
            if (!this.requestUpload || !this.requestRemoteMedia)
              return;
            (this.requestRemoteMedia() || []).forEach((e2) => {
              let [t2, i2] = e2;
              if (i2.has(hv.VIDEO) && t2.videoTrack) {
                t2.videoTrack.getProcessorStats().forEach((e3) => {
                  this.requestUpload && this.requestUpload(e3.type, e3.stats);
                });
              }
              if (i2.has(hv.AUDIO) && t2.audioTrack) {
                t2.audioTrack.getProcessorStats().forEach((e3) => {
                  this.requestUpload && this.requestUpload(e3.type, e3.stats);
                });
              }
            });
          }, 2e3));
        }
        stopUploadInboundStats() {
          this.uploadInboundStarted && (this.uploadInboundStarted = false, this.lastRecvStats && (this.lastRecvStats.videoRecv = [], this.lastRecvStats.audioRecv = [], this.lastRecvStats = void 0));
        }
        startUploadExtensionUsageStats() {
          if (this.uploadExtensionUsageStarted)
            return;
          this.uploadExtensionUsageStarted = true, this.uploadExtUsageStatsTimer && window.clearInterval(this.uploadExtUsageStatsTimer);
          const e2 = /* @__PURE__ */ new Map();
          this.uploadExtUsageStatsTimer = window.setInterval(async () => {
            const t2 = Date.now(), i2 = { connectionInterval: DC("EXTENSION_USAGE_UPLOAD_INTERVAL") / 1e3, details: [], lts: t2 };
            let n2 = [];
            const s2 = this.requestAllTracks && this.requestAllTracks() || [];
            for (const e3 of s2)
              !e3.muted && e3.enabled && (n2 = n2.concat(await e3.getProcessorUsage()));
            const r2 = this.requestRemoteMedia && this.requestRemoteMedia() || [];
            for (const [e3, t3] of r2)
              t3.has(hv.VIDEO) && e3.videoTrack && (n2 = n2.concat(await e3.videoTrack.getProcessorUsage())), t3.has(hv.AUDIO) && e3.audioTrack && (n2 = n2.concat(await e3.audioTrack.getProcessorUsage()));
            if (0 === n2.length)
              return;
            i2.details = function(e3, t3) {
              const i3 = {};
              for (const { id: o3, value: a3, level: c2, direction: d2 } of e3) {
                var n3;
                const e4 = null !== (n3 = t3.get(o3)) && void 0 !== n3 ? n3 : 0, l2 = 2 === a3 ? e4 + DC("EXTENSION_USAGE_UPLOAD_INTERVAL") / 1e3 : e4;
                var s3, r3;
                t3.set(o3, l2), i3[o3] ? (2 === a3 && (i3[o3].value = a3), c2 > i3[o3].level && (i3[o3].level = c2), "remote" === d2 && (i3[o3].remoteUidCount += 1), i3[o3].totalTs = null !== (s3 = t3.get(o3)) && void 0 !== s3 ? s3 : 0) : i3[o3] = { value: a3, level: c2, remoteUidCount: "local" === d2 ? 0 : 1, totalTs: null !== (r3 = t3.get(o3)) && void 0 !== r3 ? r3 : 0 };
              }
              return Object.keys(i3).map((e4) => {
                const { level: t4, value: n4, totalTs: s4 } = i3[e4];
                return { id: e4, level: t4, value: n4, totalTs: s4 };
              });
            }(n2, e2);
            const o2 = Date.now(), a2 = o2 > t2 ? o2 : t2 + 1;
            this.requestUpload && this.requestUpload(RI.EXTENSION_USAGE_STATS, { usageStats: i2, sendTs: a2 });
          }, DC("EXTENSION_USAGE_UPLOAD_INTERVAL"));
        }
        stopUploadExtensionUsageStats() {
          this.uploadExtensionUsageStarted && (this.uploadExtensionUsageStarted = false, this.uploadExtUsageStatsTimer && window.clearInterval(this.uploadExtUsageStatsTimer), this.uploadExtUsageStatsTimer = void 0);
        }
      }
      class ik {
        get hasVideo() {
          return this._video_enabled_ && !this._video_muted_ && this._video_added_;
        }
        get hasAudio() {
          return this._audio_enabled_ && !this._audio_muted_ && this._audio_added_;
        }
        get audioTrack() {
          if (this.hasAudio || this._audio_pre_subscribed)
            return this._audioTrack;
        }
        get videoTrack() {
          if (this.hasVideo || this._video_pre_subscribed)
            return this._videoTrack;
        }
        get dataChannels() {
          return this._dataChannels;
        }
        constructor(e2, t2) {
          nh(this, "uid", void 0), nh(this, "_uintid", void 0), nh(this, "_trust_in_room_", true), nh(this, "_trust_audio_enabled_state_", true), nh(this, "_trust_video_enabled_state_", true), nh(this, "_trust_audio_mute_state_", true), nh(this, "_trust_video_mute_state_", true), nh(this, "_audio_muted_", false), nh(this, "_video_muted_", false), nh(this, "_audio_enabled_", true), nh(this, "_video_enabled_", true), nh(this, "_audio_added_", false), nh(this, "_video_added_", false), nh(this, "_is_pre_created", false), nh(this, "_video_pre_subscribed", false), nh(this, "_audio_pre_subscribed", false), nh(this, "_trust_video_stream_added_state_", true), nh(this, "_trust_audio_stream_added_state_", true), nh(this, "_audioTrack", void 0), nh(this, "_videoTrack", void 0), nh(this, "_dataChannels", []), nh(this, "_audioSSRC", void 0), nh(this, "_videoSSRC", void 0), nh(this, "_audioOrtc", void 0), nh(this, "_videoOrtc", void 0), nh(this, "_cname", void 0), nh(this, "_rtxSsrcId", void 0), nh(this, "_videoMid", void 0), nh(this, "_audioMid", void 0), this.uid = e2, this._uintid = t2;
        }
      }
      var nk;
      function sk(e2, t2) {
        var i2;
        let n2;
        switch (t2) {
          case Ev.LocalAudioTrack:
            n2 = ev.Audio;
            break;
          case Ev.LocalVideoTrack:
            n2 = bn(i2 = e2._hints).call(i2, YA.SCREEN_TRACK) ? ev.Screen : ev.High;
            break;
          case Ev.LocalVideoLowTrack:
            n2 = ev.Low;
        }
        return n2;
      }
      function rk(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function ok(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? rk(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : rk(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      !function(e2) {
        e2.SEND_ONLY = "SEND_ONLY", e2.RECEIVE_ONLY = "RECEIVE_ONLY";
      }(nk || (nk = {}));
      class ak extends ig {
        get state() {
          return this._state;
        }
        set state(e2) {
          const t2 = this._state;
          this._state = e2, this.emit(fv.StateChange, t2, this._state);
        }
        constructor(e2, t2) {
          super(), nh(this, "store", void 0), nh(this, "statsUploader", void 0), nh(this, "sendConnection", void 0), nh(this, "recvConnection", void 0), nh(this, "localTrackMap", /* @__PURE__ */ new Map()), nh(this, "remoteUserMap", /* @__PURE__ */ new Map()), nh(this, "localDataChannels", []), nh(this, "pendingLocalTracks", []), nh(this, "pendingRemoteTracks", []), nh(this, "statsCollector", void 0), nh(this, "dtlsFailedCount", 0), nh(this, "sendMutex", new Yg("P2PChannel2-send-mutex")), nh(this, "recvMutex", new Yg("P2PChannel2-recv-mutex")), nh(this, "_state", mv.Disconnected), nh(this, "_restartStates", ["disconnected", "failed"]), nh(this, "reconnectInterval", void 0), nh(this, "uploadUnplinkStarted", false), nh(this, "uploadDownlinkStarted", false), nh(this, "uplinkStateUploadInterval", void 0), nh(this, "downlinkStatsUploadInterval", void 0), nh(this, "handleMuteLocalTrack", async (e3, t3, i2) => {
            const n2 = await this.sendMutex.lock("Locking from P2PChannel2.handleMuteLocalTrack");
            try {
              if (!this.sendConnection || this.state !== mv.Connected)
                return void i2(new VT(xT.INVALID_OPERATION, "Cannot call P2PChannel2.handleMuteLocalTrack before sendConnection established."));
              const o2 = this.filterTobeMutedTracks(e3);
              if (0 === o2.length)
                return void t3();
              const a2 = o2.find((e4) => "videoLowTrack" === e4[0]);
              if (a2) {
                a2[1].track._originMediaStreamTrack.stop();
              }
              await this.sendConnection.muteLocal(o2.map((e4) => {
                let [, { id: t4 }] = e4;
                return t4;
              }));
              let c2 = false;
              var s2, r2;
              if ("video" === e3.trackMediaType)
                c2 = !(null === (s2 = this.localTrackMap.get(Ev.LocalAudioTrack)) || void 0 === s2 || !s2.track._muted);
              else
                c2 = void 0 === (null === (r2 = this.localTrackMap.get(Ev.LocalVideoTrack)) || void 0 === r2 ? void 0 : r2.id);
              const d2 = this.createMuteMessage(o2);
              await Tg(this, fv.RequestMuteLocal, d2);
              const l2 = "video" === e3.trackMediaType ? Dv.MUTE_LOCAL_VIDEO : Dv.MUTE_LOCAL_AUDIO;
              await Tg(this, fv.RequestP2PMuteLocal, { action: l2, message: d2, isMuteAll: c2 }), t3();
            } catch (e4) {
              i2(e4);
            } finally {
              n2();
            }
          }), nh(this, "handleUnmuteLocalTrack", async (e3, t3, i2) => {
            const n2 = await this.sendMutex.lock("Locking from P2PChannel2.handleUnmuteLocalTrack");
            try {
              if (!this.sendConnection || this.state !== mv.Connected)
                return void i2(new VT(xT.INVALID_OPERATION, "Cannot call P2PChannel2.handleUnmuteLocalTrack before sendConnection established."));
              const s2 = this.filterTobeUnmutedTracks(e3);
              if (0 === s2.length)
                return void t3();
              await this.sendConnection.unmuteLocal(s2.map((e4) => {
                let [, { id: t4 }] = e4;
                return t4;
              }));
              const r2 = this.createUnmuteMessage(s2), o2 = "video" === e3.trackMediaType ? Dv.UNMUTE_LOCAL_VIDEO : Dv.UNMUTE_LOCAL_AUDIO;
              await Tg(this, fv.RequestP2PMuteLocal, { action: o2, message: r2 }), t3();
            } catch (e4) {
              i2(e4);
            } finally {
              n2();
            }
          }), nh(this, "handleUpdateVideoEncoder", async (e3, t3, i2) => {
            const n2 = await this.sendMutex.lock("Locking from P2PChannel2.handleSetVideoEncoder");
            try {
              const i3 = this.localTrackMap.get(Ev.LocalVideoTrack);
              if (!this.sendConnection || !i3 || i3.track !== e3 || this.state !== mv.Connected)
                return void t3();
              const { id: s2, track: r2 } = i3;
              s2 && (await this.sendConnection.updateSendParameters(s2, r2), await this.sendConnection.updateEncoderConfig(s2, r2), this.emit(fv.UpdateVideoEncoder, r2)), t3();
            } catch (e4) {
              i2(e4);
            } finally {
              n2();
            }
          }), nh(this, "handleSetOptimizationMode", async (e3, t3, i2) => {
            const n2 = await this.sendMutex.lock("Locking from P2PChannel2.handleSetOptimizationMode");
            try {
              const i3 = this.localTrackMap.get(Ev.LocalVideoTrack);
              if (!this.sendConnection || !i3 || i3.track !== e3 || this.state !== mv.Connected)
                return;
              const { id: s2, track: r2 } = i3;
              s2 && await this.sendConnection.updateSendParameters(s2, r2), t3();
            } catch (e4) {
              i2(e4);
            } finally {
              n2();
            }
          }), nh(this, "handleReplaceTrack", async (e3, t3, i2, n2) => {
            let s2;
            YC.debug("[".concat(this.store.clientId, "] P2PChannel2 handleReplaceTrack for [track-id-").concat(e3.getTrackId(), "]")), "boolean" == typeof n2 && n2 || (s2 = await this.sendMutex.lock("From P2PChannel2.handleReplaceTrack"));
            try {
              var r2;
              const i3 = Array.from(this.localTrackMap.entries()).find((t4) => {
                let [, { track: i4 }] = t4;
                return e3 === i4;
              });
              if (!this.sendConnection || !i3 || void 0 === i3[1].id || this.state !== mv.Connected)
                return void t3();
              if (await (null === (r2 = this.sendConnection) || void 0 === r2 ? void 0 : r2.replaceTrack(e3, i3[1].id)), i3[0] === Ev.LocalVideoTrack && wA().supportDualStreamEncoding) {
                const t4 = this.localTrackMap.get(Ev.LocalVideoLowTrack);
                if (t4) {
                  const i4 = e3._mediaStreamTrack.clone();
                  t4.track._originMediaStreamTrack.stop(), t4.track._mediaStreamTrack = i4, t4.track._originMediaStreamTrack = i4, await new tT((e4, i5) => {
                    this.handleReplaceTrack(t4.track, e4, i5, true);
                  });
                }
              }
              t3();
            } catch (e4) {
              i2(e4);
            } finally {
              var o2;
              null === (o2 = s2) || void 0 === o2 || o2();
            }
          }), nh(this, "handleGetLocalVideoStats", (e3) => {
            e3(this.statsCollector.getLocalVideoTrackStats());
          }), nh(this, "handleGetLocalAudioStats", (e3) => {
            e3(this.statsCollector.getLocalAudioTrackStats());
          }), nh(this, "handleGetRemoteVideoStats", (e3) => this.statsCollector.getRemoteVideoTrackStats(e3.uid)[e3.uid]), nh(this, "handleGetRemoteAudioStats", (e3) => this.statsCollector.getRemoteAudioTrackStats(e3.uid)[e3.uid]), this.store = e2, this.statsCollector = t2, this.statsCollector.addP2PChannel(this), this.statsUploader = new tk(e2), this.bindStatsUploaderEvents(), this.reconnectInterval = window.setInterval(() => {
            [this.sendConnection, this.recvConnection].forEach((e3) => {
              e3 && ("disconnected" !== e3.iceConnectionState && "failed" !== e3.iceConnectionState || this.handleDisconnect(e3.direction));
            });
          }, DC("ICE_RESTART_INTERVAL"));
        }
        async startP2PConnection(e2, t2) {
          throw new VT(xT.NOT_SUPPORTED, "p2p mode does not support startP2PConnection.");
        }
        async connect(e2, t2, i2, n2, s2, r2) {
          throw new VT(xT.NOT_SUPPORTED, "p2p mode does not support connect.");
        }
        async startP2P(e2, t2) {
          let i2;
          try {
            if (t2) {
              this.recvConnection && (YC.warning("[".concat(this.store.clientId, "] P2PChannel.startP2P reset recvConnection.")), this.recvConnection.close(), this.unbindConnectionEvents(this.recvConnection)), i2 = await this.recvMutex.lock("From P2PChannel.startP2P"), this.recvConnection = new xL(e2, this.store, vI.RECEIVE_ONLY), this.bindConnectionEvents(this.recvConnection);
              const n2 = await this.recvConnection.establish(t2);
              return { iceParameters: n2.iceParameters, dtlsParameters: n2.dtlsParameters, sdp: n2.sdp };
            }
            {
              this.state = mv.New, this.sendConnection && (YC.warning("[".concat(this.store.clientId, "] P2PChannel.startP2P reset sendConnection.")), this.sendConnection.close(), this.unbindConnectionEvents(this.sendConnection)), i2 = await this.sendMutex.lock("From P2PChannel.startP2P"), this.sendConnection = new xL(e2, this.store), this.store.peerConnectionStart(), this.bindConnectionEvents(this.sendConnection);
              const t3 = await this.sendConnection.establish();
              return { iceParameters: t3.iceParameters, dtlsParameters: t3.dtlsParameters, sdp: t3.sdp };
            }
          } finally {
            i2 && i2();
          }
        }
        async p2pConnect(e2) {
          if (!this.sendConnection)
            throw new VT(xT.UNEXPECTED_ERROR, "Cannot P2PChannel2.p2pConnect before P2PChannel2.startP2PConnection .");
          this.store.peerConnectionStart(), await this.sendConnection.connect(e2), this.statsUploader.startUploadTransportStats(), this.statsUploader.startUploadExtensionUsageStats(), this.state = mv.Connected;
        }
        async addRemoteCandidate(e2, t2) {
          if (t2 === vI.RECEIVE_ONLY) {
            if (!this.sendConnection)
              throw new VT(xT.UNEXPECTED_ERROR, "Cannot P2PChannel2.connect before P2PChannel2.addRemoteCandidate .");
            await this.sendConnection.addRemoteCandidate(e2);
          } else {
            if (!this.recvConnection)
              throw new VT(xT.UNEXPECTED_ERROR, "Cannot P2PChannel2.connect before P2PChannel2.addRemoteCandidate .");
            await this.recvConnection.addRemoteCandidate(e2);
          }
        }
        publish(e2, t2, i2) {
          var n2 = this;
          return OP(function* () {
            const s2 = yield SP(n2.sendMutex.lock("From P2PChannel.publish"));
            try {
              if (!n2.sendConnection || n2.state !== mv.Connected) {
                n2.throwIfTrackTypeNotMatch(e2);
                const t3 = e2.filter((e3) => -1 === n2.pendingLocalTracks.indexOf(e3));
                return void (n2.pendingLocalTracks = n2.pendingLocalTracks.concat(t3));
              }
              n2.store.pubId = n2.store.pubId + 1, TP.markPublishStart(n2.store.clientId, n2.store.pubId);
              const r2 = n2.filterTobePublishedTracks(e2, t2, i2);
              if (0 === r2.length)
                return void (yield SP(n2.tryToUnmuteAudio(e2)));
              r2.forEach((e3) => {
                let { track: t3, type: i3 } = e3;
                const s3 = Date.now();
                n2.store.publish(t3.getTrackId(), i3 === Ev.LocalAudioTrack ? "audio" : "video", s3);
              }), n2.bindLocalTrackEvents(r2);
              const o2 = yield SP(n2.sendConnection.send(r2.map((e3) => {
                let { track: t3 } = e3;
                return t3;
              }), n2.store.codec, n2.store.audioCodec)), a2 = (yield SP(o2.next())).value, c2 = n2.createGatewayPublishMessage(r2, a2);
              try {
                yield c2;
              } catch (e3) {
                throw o2.throw(e3), (null == e3 ? void 0 : e3.code) === xT.WS_ABORT && r2.forEach((e4) => {
                  let { track: t3 } = e4;
                  -1 === n2.pendingLocalTracks.indexOf(t3) && n2.pendingLocalTracks.push(t3);
                }), n2.unbindLocalTrackEvents(r2), e3;
              }
              yield SP(o2.next()), r2.forEach((e3) => {
                let { type: t3 } = e3;
                n2.statsCollector.addLocalStats(t3);
              }), n2.statsUploader.startUploadOutboundStats(), n2.assignLocalTracks(r2, a2), r2.forEach((e3) => {
                let { track: t3, type: i3 } = e3;
                const s3 = Date.now();
                n2.store.publish(t3.getTrackId(), i3 === Ev.LocalAudioTrack ? "audio" : "video", void 0, s3);
              }), n2.startUploadUplinkState();
            } finally {
              s2();
            }
          })();
        }
        async unpublish(e2) {
          if (!this.sendConnection || this.state !== mv.Connected)
            return void (0 === e2.length ? this.pendingLocalTracks.length = 0 : this.pendingLocalTracks = this.pendingLocalTracks.filter((t3) => !bn(e2).call(e2, t3)));
          const t2 = this.filterTobeUnpublishedTracks(e2);
          if (0 === t2.length)
            return;
          const i2 = t2.find((e3) => "videoLowTrack" === e3[0]);
          if (i2) {
            i2[1].track.close();
          }
          const n2 = this.createGatewayUnpublishMessage(t2);
          if (await this.sendConnection.stopSending(t2.map((e3) => {
            let [, { id: t3 }] = e3;
            return t3;
          })), this.withdrawLocalTracks(t2), this.unbindLocalTrackEvents(t2.map((e3) => {
            let [t3, { track: i3 }] = e3;
            return { type: t3, track: i3 };
          })), t2.forEach((e3) => {
            let [t3] = e3;
            this.statsCollector.removeLocalStats(t3);
          }), 0 === this.localTrackMap.size && (this.statsUploader.stopUploadOutboundStats(), this.stopUploadUplinkState()), this.sendConnection && this.state === mv.Connected) {
            if (i2) {
              i2[1].track.close();
            }
            return n2;
          }
          e2.forEach((e3) => {
            const t3 = this.pendingLocalTracks.indexOf(e3);
            -1 !== t3 && this.pendingLocalTracks.splice(t3, 1);
          });
        }
        startUploadUplinkState() {
          if (this.uploadUnplinkStarted)
            return;
          this.uploadUnplinkStarted = true, this.uplinkStateUploadInterval && window.clearInterval(this.uplinkStateUploadInterval);
          const e2 = () => {
            const e3 = [], t2 = [];
            Array.from(this.localTrackMap.entries()).forEach((i2) => {
              let [n2, { track: s2, ssrcs: r2 }] = i2;
              const o2 = { stream_type: sk(s2, n2), ssrcs: r2 };
              s2._muted || !s2._enabled ? e3.push(o2) : t2.push(o2);
            }), e3.length > 0 && e3.forEach((e4) => {
              Tg(this, fv.RequestMuteLocal, [e4]);
            }), t2.length > 0 && t2.forEach((e4) => {
              Tg(this, fv.RequestUnmuteLocal, [e4]);
            });
          };
          e2(), this.uplinkStateUploadInterval = window.setInterval(() => {
            e2();
          }, 3e3);
        }
        stopUploadUplinkState() {
          this.uploadUnplinkStarted && (this.uploadUnplinkStarted = false, this.uplinkStateUploadInterval && window.clearInterval(this.uplinkStateUploadInterval));
        }
        publishLowStream(e2) {
          return OP(function* () {
            throw new VT(xT.NOT_SUPPORTED, "p2p mode does not support publishLowStream.");
          })();
        }
        async republish() {
          this.pendingLocalTracks.length > 0 && (YC.debug("[".concat(this.store.clientId, "] Emit P2PChannelEvents.RequestRePublish to republish tracks.")), await fg(this, fv.RequestRePublish, this.pendingLocalTracks), this.emit(fv.MediaReconnectEnd, this.store.uid), this.pendingLocalTracks = []);
        }
        async unpublishLowStream() {
          throw new VT(xT.NOT_SUPPORTED, "p2p mode does not support unpublishLowStream.");
        }
        async subscribe(e2, t2, i2, n2) {
          var s2;
          if (!this.recvConnection)
            throw new VT(xT.INVALID_OPERATION, "Cannot subscribe remote user when recvConnection disconnected.");
          if (null !== (s2 = this.remoteUserMap.get(e2)) && void 0 !== s2 && s2.has(t2))
            return;
          const { track: r2, mid: o2, transceiver: a2 } = await this.recvConnection.receive(t2, [{ ssrcId: i2 }], String(e2.uid), n2);
          t2 === hv.AUDIO ? (e2._audioTrack ? e2._audioTrack._updateOriginMediaStreamTrack(r2) : (e2._audioTrack = new Fw(r2, e2.uid, e2._uintid, this.store), YC.info("[".concat(this.store.clientId, "] [").concat(this.store.p2pId, "] create remote audio track: ").concat(e2._audioTrack.getTrackId()))), a2 && e2._audioTrack._updateRtpTransceiver(a2), this.bindRemoteTrackEvents(e2, e2._audioTrack)) : (e2._videoSSRC = i2, e2._videoTrack ? e2._videoTrack._updateOriginMediaStreamTrack(r2) : (e2._videoTrack = new Vw(r2, e2.uid, e2._uintid, this.store), YC.info("[".concat(this.store.clientId, "] [").concat(this.store.p2pId, "] create remote video track: ").concat(e2._videoTrack.getTrackId()))), a2 && e2._videoTrack._updateRtpTransceiver(a2), this.bindRemoteTrackEvents(e2, e2._videoTrack));
          const c2 = this.remoteUserMap.get(e2);
          c2 ? c2.set(t2, o2) : this.remoteUserMap.set(e2, /* @__PURE__ */ new Map([[t2, o2]])), this.statsCollector.addRemoteStats(e2.uid), this.statsUploader.startUploadInboundStats(), this.startUploadDownlinkState();
          const d2 = this.pendingRemoteTracks.findIndex((i3) => {
            let { user: n3, kind: s3 } = i3;
            return n3.uid === e2.uid && t2 === s3;
          });
          -1 !== d2 && (this.pendingRemoteTracks.splice(d2, 1), this.emit(fv.MediaReconnectEnd, e2.uid));
        }
        async mockSubscribe(e2, t2, i2, n2) {
          if (!this.recvConnection)
            throw new VT(xT.INVALID_OPERATION, "Cannot subscribe remote user when recvConnection disconnected.");
          await this.recvConnection.mockReceive(t2, [{ ssrcId: i2 }], String(e2.uid), n2);
        }
        async unsubscribe(e2, t2, i2) {
          const n2 = this.pendingRemoteTracks.filter((i3) => {
            let { user: n3, kind: s3 } = i3;
            return void 0 !== t2 ? n3.uid === e2.uid && t2 === s3 : n3.uid === e2.uid;
          });
          if (n2.forEach((e3) => {
            const t3 = this.pendingRemoteTracks.indexOf(e3);
            this.pendingRemoteTracks.splice(t3, 1);
          }), this.recvConnection || i2 || n2.forEach((t3) => {
            let { kind: i3 } = t3;
            var n3;
            if (i3 === hv.AUDIO)
              null === (n3 = e2._audioTrack) || void 0 === n3 || n3._destroy(), e2._audioTrack = void 0;
            else if (i3 === hv.VIDEO) {
              var s3;
              null === (s3 = e2._videoTrack) || void 0 === s3 || s3._destroy(), e2._videoTrack = void 0;
            }
          }), !this.recvConnection)
            return;
          const s2 = this.filterTobeUnSubscribedTracks(e2, t2);
          0 !== s2.length && (await this.recvConnection.stopReceiving(s2.map((e3) => {
            let [, { id: t3 }] = e3;
            return t3;
          })), this.withdrawRemoteTracks(s2), 0 === this.remoteUserMap.size && (this.statsUploader.stopUploadInboundStats(), this.stopUploadDownlinkState()), s2.forEach((e3) => {
            let [t3, { kind: n3 }] = e3;
            var s3, r2;
            n3 === hv.VIDEO && t3._videoSSRC && (null === (s3 = this.recvConnection) || void 0 === s3 || s3.setStatsRemoteVideoIsReady(t3._videoSSRC, false));
            if (n3 === hv.VIDEO)
              this.unbindRemoteTrackEvents(t3._videoTrack), i2 || (null === (r2 = t3._videoTrack) || void 0 === r2 || r2._destroy(), t3._videoTrack = void 0);
            else if (n3 === hv.AUDIO) {
              var o2;
              if (this.unbindRemoteTrackEvents(t3._audioTrack), !i2)
                null === (o2 = t3._audioTrack) || void 0 === o2 || o2._destroy(), t3._audioTrack = void 0;
            }
          }), s2.forEach((e3) => {
            let [, { kind: t3 }] = e3;
            Tg(this, fv.RequestP2PMuteRemote, t3);
          }));
        }
        startUploadDownlinkState() {
          if (this.uploadDownlinkStarted)
            return;
          this.uploadDownlinkStarted = true, this.downlinkStatsUploadInterval && window.clearInterval(this.downlinkStatsUploadInterval);
          const e2 = () => Array.from(this.remoteUserMap.entries()).forEach((e3) => {
            let [, t2] = e3;
            [hv.VIDEO, hv.AUDIO].forEach((e4) => {
              t2.has(e4) ? Tg(this, fv.RequestP2PUnmuteRemote, e4) : Tg(this, fv.RequestP2PMuteRemote, e4);
            });
          });
          e2(), this.downlinkStatsUploadInterval = window.setInterval(() => {
            e2();
          }, 3e3);
        }
        stopUploadDownlinkState() {
          this.uploadDownlinkStarted && (this.uploadDownlinkStarted = false, this.downlinkStatsUploadInterval && window.clearInterval(this.downlinkStatsUploadInterval));
        }
        getAllDataChannels() {
          return this.localDataChannels;
        }
        async massSubscribe(e2) {
          throw new VT(xT.NOT_SUPPORTED, "p2p mode does not support massSubscribe.");
        }
        async massSubscribeNoLock(e2) {
          throw new VT(xT.NOT_SUPPORTED, "p2p mode does not support massSubscribeNoLock.");
        }
        async massUnsubscribe(e2) {
          throw new VT(xT.NOT_SUPPORTED, "p2p mode does not support massUnsubscribe.");
        }
        async massUnsubscribeNoLock(e2) {
          throw new VT(xT.NOT_SUPPORTED, "p2p mode does not support massUnsubscribeNoLock.");
        }
        async muteRemote(e2, t2) {
          if (!this.recvConnection)
            return;
          const i2 = this.remoteUserMap.get(e2);
          if (!i2)
            return void YC.warning("[".concat(this.store.clientId, "] P2PChannel2.muteRemote has no remote user ").concat(e2.uid, "."));
          if (!i2.get(t2))
            return void YC.warning("[".concat(this.store.clientId, "] P2PChannel2.muteRemote has no remote user ").concat(e2.uid, " media type ").concat(t2, "."));
          const n2 = t2 === hv.VIDEO ? e2._videoSSRC : e2._audioSSRC;
          void 0 !== n2 && this.recvConnection.setStatsRemoteVideoIsReady(n2, false);
        }
        async unmuteRemote(e2, t2) {
          return this.unmuteRemoteNoLock(e2, t2);
        }
        async unmuteRemoteNoLock(e2, t2) {
          if (!this.recvConnection)
            return;
          const i2 = this.remoteUserMap.get(e2);
          if (!i2)
            return void YC.warning("[".concat(this.store.clientId, "] P2PChannel2.unmuteRemote has no remote user ").concat(e2.uid, "."));
          i2.get(t2) || YC.warning("[".concat(this.store.clientId, "] P2PChannel2.unmuteRemote has no remote user ").concat(e2.uid, " media type ").concat(t2, "."));
        }
        getAllTracks(e2) {
          const t2 = this.localTrackMap.get(Ev.LocalAudioTrack);
          if ((null == t2 ? void 0 : t2.track) instanceof uw) {
            const i2 = t2.track;
            return Array.from(this.localTrackMap.entries()).filter((e3) => {
              let [t3] = e3;
              return t3 !== Ev.LocalAudioTrack;
            }).filter((t3) => {
              let [i3] = t3;
              return !(e2 && i3 === Ev.LocalVideoLowTrack);
            }).map((e3) => {
              let [, { track: t3 }] = e3;
              return t3;
            }).concat(i2.trackList);
          }
          return Array.from(this.localTrackMap.entries()).filter((t3) => {
            let [i2] = t3;
            return !(e2 && i2 === Ev.LocalVideoLowTrack);
          }).map((e3) => {
            let [, { track: t3 }] = e3;
            return t3;
          });
        }
        reportPublishEvent(e2, t2, i2, n2, s2) {
          if (e2) {
            const i3 = this.localTrackMap.get(Ev.LocalAudioTrack), r3 = n2 ? this.localTrackMap.get(Ev.LocalVideoLowTrack) : this.localTrackMap.get(Ev.LocalVideoTrack);
            rI.publish(this.store.sessionId, { eventElapse: TP.measureFromPublishStart(this.store.clientId, this.store.pubId), succ: e2, ec: t2, audioName: null == i3 ? void 0 : i3.track.getTrackLabel(), videoName: null == r3 ? void 0 : r3.track.getTrackLabel(), screenshare: -1 !== (null == r3 ? void 0 : r3.track._hints.indexOf(YA.SCREEN_TRACK)), audio: !!i3, video: !!r3, p2pid: this.store.p2pId, publishRequestid: this.store.pubId, extend: s2 });
          } else {
            var r2;
            i2 || (i2 = []);
            const o2 = i2.find((e3) => e3 instanceof cw), a2 = n2 ? null === (r2 = this.localTrackMap.get(Ev.LocalVideoTrack)) || void 0 === r2 ? void 0 : r2.track : i2.find((e3) => e3 instanceof Nw);
            rI.publish(this.store.sessionId, { eventElapse: TP.measureFromPublishStart(this.store.clientId, this.store.pubId), succ: e2, ec: t2, audioName: null == o2 ? void 0 : o2.getTrackLabel(), videoName: null == a2 ? void 0 : a2.getTrackLabel(), screenshare: -1 !== (null == a2 ? void 0 : a2._hints.indexOf(YA.SCREEN_TRACK)), audio: !!o2, video: !!a2, p2pid: this.store.p2pId, publishRequestid: this.store.pubId, extend: s2 });
          }
        }
        reportSubscribeEvent(e2, t2, i2, n2) {
          const s2 = n2 === hv.VIDEO ? i2._videoSSRC : i2._audioSSRC;
          s2 && rI.subscribe(this.store.sessionId, { succ: e2, ec: t2, video: n2 === hv.VIDEO, audio: n2 === hv.AUDIO, peerid: i2.uid, subscribeRequestid: n2 === hv.VIDEO ? i2._videoSSRC : i2._audioSSRC, p2pid: this.store.p2pId, eventElapse: TP.measureFromSubscribeStart(this.store.clientId, s2) });
        }
        reset() {
          YC.debug("[".concat(this.store.clientId, "] P2PChannel2.reset")), this.sendMutex = new Yg("P2PChannel2-send-mutex"), this.sendMutex = new Yg("P2PChannel2-recv-mutex"), this.sendConnection && (this.sendConnection.close(), this.unbindConnectionEvents(this.sendConnection), this.sendConnection = void 0), this.recvConnection && (this.recvConnection.close(), this.unbindConnectionEvents(this.recvConnection), this.recvConnection = void 0), this.statsUploader.stopUploadOutboundStats(), this.statsUploader.stopUploadInboundStats(), this.statsUploader.stopUploadTransportStats(), this.statsUploader.stopUploadExtensionUsageStats(), this.stopUploadUplinkState(), this.stopUploadDownlinkState(), this.unbindLocalTrackEvents(), this.unbindAllRemoteTrackEvents(), this.unbindRtpTransceiver();
          const e2 = this.localTrackMap.get(Ev.LocalAudioTrack);
          if ((null == e2 ? void 0 : e2.track) instanceof uw) {
            if (e2.track.trackList.length > 0) {
              const t2 = e2.track;
              e2.track.trackList.forEach((e3) => {
                t2.removeAudioTrack(e3);
              });
            }
            e2.track.close();
          }
          this.localTrackMap.clear(), this.remoteUserMap.clear(), this.statsCollector.removeRemoteStats(), this.statsCollector.removeLocalStats(), this.dtlsFailedCount = 0, this.pendingLocalTracks = [], this.pendingRemoteTracks = [], this.reconnectInterval && (window.clearInterval(this.reconnectInterval), this.reconnectInterval = void 0), this.state = mv.Disconnected;
        }
        getStats(e2) {
          var t2, i2;
          return e2 ? null === (i2 = this.recvConnection) || void 0 === i2 ? void 0 : i2.getStats() : null === (t2 = this.sendConnection) || void 0 === t2 ? void 0 : t2.getStats();
        }
        getRemoteVideoIsReady(e2) {
          var t2;
          return (null === (t2 = this.recvConnection) || void 0 === t2 ? void 0 : t2.getRemoteVideoIsReady(e2)) || false;
        }
        getLocalAudioVolume() {
          const e2 = this.localTrackMap.get(Ev.LocalAudioTrack);
          if (e2)
            return e2.track.getVolumeLevel();
        }
        getLocalVideoSize() {
          const e2 = this.localTrackMap.get(Ev.LocalVideoTrack);
          if (e2)
            return { width: e2.track._videoWidth || 0, height: e2.track._videoHeight || 0 };
        }
        getEncoderConfig(e2) {
          const t2 = this.localTrackMap.get(e2);
          return t2 && t2.track instanceof Nw || t2 && t2.track instanceof cw ? t2.track._encoderConfig : void 0;
        }
        getLocalMedia(e2) {
          return this.localTrackMap.get(e2);
        }
        hasLocalMedia() {
          return this.localTrackMap.size > 0;
        }
        hasRemoteMedia(e2, t2) {
          if (!e2)
            return this.remoteUserMap.size > 0;
          const i2 = this.remoteUserMap.get(e2);
          return !!i2 && (!t2 || i2.has(t2));
        }
        async hasRemoteMediaWithLock(e2, t2) {
          if (!e2)
            return this.remoteUserMap.size > 0;
          const i2 = this.remoteUserMap.get(e2);
          return !!i2 && (!t2 || i2.has(t2));
        }
        getRemoteMedia(e2) {
          var t2;
          const i2 = Array.from(uh(t2 = this.remoteUserMap).call(t2)).find((t3) => t3.uid === e2);
          return i2 ? { audioTrack: i2.audioTrack, audioSSRC: i2._audioSSRC, videoTrack: i2.videoTrack, videoSSRC: i2._videoSSRC } : {};
        }
        getAudioLevels() {
          let e2 = Array.from(this.remoteUserMap.entries()).map((e3) => {
            let [t3] = e3;
            return { uid: t3.uid, level: t3.audioTrack ? 100 * t3.audioTrack._source.getAccurateVolumeLevel() : 0 };
          });
          const t2 = this.localTrackMap.get(Ev.LocalAudioTrack);
          return t2 && e2.push({ level: 100 * t2.track._source.getAccurateVolumeLevel(), uid: this.store.uid }), e2 = Zh(e2).call(e2, (e3, t3) => e3.level - t3.level), e2;
        }
        async disconnectForReconnect() {
          this.sendConnection && this.recvConnection && (YC.debug("[".concat(this.store.clientId, "] P2PChannel2.disconnectForReconnect closing P2PConnection")), this.state = mv.Reconnecting, DC("KEEP_LAST_FRAME") && 0 !== this.remoteUserMap.size && Array.from(this.remoteUserMap.entries()).forEach((e2) => {
            let [t2] = e2;
            var i2;
            t2._videoTrack && t2._videoTrack._player && (null === (i2 = t2._videoTrack._player.getVideoElement()) || void 0 === i2 || i2.pause(), t2._videoTrack._player.isKeepLastFrame = true, t2._videoTrack._originMediaStreamTrack.stop());
          }), this.sendConnection.close(), this.unbindConnectionEvents(this.sendConnection), this.sendConnection = void 0, this.recvConnection.close(), this.unbindConnectionEvents(this.recvConnection), this.recvConnection = void 0, 0 !== this.localTrackMap.size && (Array.from(this.localTrackMap.entries()).forEach((e2) => {
            var t2;
            let [i2, { track: n2 }] = e2;
            switch (i2) {
              case Ev.LocalVideoTrack:
                bn(t2 = n2._hints).call(t2, YA.LOW_STREAM) ? n2.close() : this.pendingLocalTracks.push(n2);
                break;
              case Ev.LocalAudioTrack:
                n2 instanceof uw ? this.pendingLocalTracks = this.pendingLocalTracks.concat(n2.trackList) : this.pendingLocalTracks.push(n2);
              case Ev.LocalVideoLowTrack:
            }
          }), this.emit(fv.MediaReconnectStart, this.store.uid)), this.unbindLocalTrackEvents(), this.localTrackMap.clear(), 0 !== this.remoteUserMap.size && Array.from(this.remoteUserMap.entries()).forEach((e2) => {
            let [t2, i2] = e2;
            Array.from(uh(i2).call(i2)).forEach((e3) => {
              this.setPendingRemoteMedia(t2, e3);
            }), this.emit(fv.MediaReconnectStart, t2.uid);
          }), this.unbindAllRemoteTrackEvents(), this.remoteUserMap.clear(), this.stopUploadUplinkState(), this.stopUploadDownlinkState(), this.statsUploader.stopUploadOutboundStats(), this.statsUploader.stopUploadInboundStats(), this.statsUploader.stopUploadTransportStats(), YC.debug("[".concat(this.store.clientId, "] P2PChannel2 disconnected, waiting to reconnect.")));
        }
        hasPendingRemoteMedia(e2, t2) {
          for (const i2 of this.pendingRemoteTracks) {
            const { user: n2, kind: s2 } = i2;
            if ((e2 instanceof ik ? e2.uid : e2) === n2.uid && t2 === s2)
              return true;
          }
          return false;
        }
        setPendingRemoteMedia(e2, t2) {
          this.hasPendingRemoteMedia(e2, t2) || this.pendingRemoteTracks.push({ user: e2, kind: t2 });
        }
        async restartICE(e2, t2) {
          let i2, n2;
          if (e2 === vI.SEND_ONLY) {
            if (!this.sendConnection)
              throw new VT(xT.INVALID_OPERATION, "Cannot call P2PChannel2.handleMuteLocalTrack before sendConnection established.");
            i2 = await this.sendMutex.lock("From P2PChannel.restartICE"), n2 = this.sendConnection;
          } else {
            if (!this.recvConnection)
              throw new VT(xT.INVALID_OPERATION, "Cannot call P2PChannel2.handleMuteLocalTrack before recvConnection established.");
            i2 = await this.recvMutex.lock("From P2PChannel.restartICE"), n2 = this.recvConnection;
          }
          try {
            if (t2) {
              const e3 = await n2.restartICE(t2);
              return n2.isInRestartIce = false, e3;
            }
            {
              const e3 = await n2.restartICE();
              if (e3) {
                const t3 = await fg(this, fv.RequestP2PRestartICE, { direction: vI.RECEIVE_ONLY, iceParameter: e3 });
                await n2.restartICE(t3), n2.isInRestartIce = false;
              }
            }
          } finally {
            i2();
          }
        }
        getUplinkNetworkQuality() {
          if (!this.sendConnection)
            return 0;
          const e2 = this.sendConnection.getStats(), t2 = this.localTrackMap.get(Ev.LocalVideoTrack), i2 = this.localTrackMap.get(Ev.LocalAudioTrack), n2 = e2.videoSend.find((e3) => {
            var i3;
            return e3.ssrc === (null == t2 || null === (i3 = t2.ssrcs) || void 0 === i3 ? void 0 : i3[0].ssrcId);
          }), s2 = e2.audioSend.find((e3) => {
            var t3;
            return e3.ssrc === (null == i2 || null === (t3 = i2.ssrcs) || void 0 === t3 ? void 0 : t3[0].ssrcId);
          });
          if (!n2 || !s2)
            return 1;
          const r2 = gg(this, fv.NeedSignalRTT), o2 = n2 ? n2.rttMs : void 0, a2 = s2 ? s2.rttMs : void 0, c2 = o2 && a2 ? (o2 + a2) / 2 : o2 || a2, d2 = (c2 && r2 ? (c2 + r2) / 2 : c2 || r2) || 0, l2 = 100 * e2.sendPacketLossRate * 0.7 / 50 + 0.3 * d2 / 1500, u2 = l2 < 0.17 ? 1 : l2 < 0.36 ? 2 : l2 < 0.59 ? 3 : l2 < 0.1 ? 4 : 5, h2 = null == t2 ? void 0 : t2.track;
          if (h2 && h2._encoderConfig && -1 === h2._hints.indexOf(YA.SCREEN_TRACK)) {
            const t3 = h2._encoderConfig.bitrateMax, i3 = e2.bitrate.actualEncoded;
            if (t3 && i3) {
              const e3 = (1e3 * t3 - i3) / (1e3 * t3);
              return cI[e3 < 0.15 ? 0 : e3 < 0.3 ? 1 : e3 < 0.45 ? 2 : e3 < 0.6 ? 3 : 4][u2];
            }
          }
          return u2;
        }
        getDownlinkNetworkQuality() {
          if (!this.recvConnection)
            return 0;
          const e2 = this.recvConnection.getStats();
          let t2 = 0;
          return Array.from(this.remoteUserMap.entries()).forEach((i2) => {
            let [n2] = i2;
            const s2 = n2._audioSSRC, r2 = n2._videoSSRC, o2 = e2.audioRecv.find((e3) => e3.ssrc === s2), a2 = e2.videoRecv.find((e3) => e3.ssrc === r2);
            if (!o2 && !a2)
              return void (t2 += 1);
            const c2 = gg(this, fv.NeedSignalRTT), d2 = e2.rtt, l2 = (d2 && c2 ? (d2 + c2) / 2 : d2 || c2) || 0, u2 = o2 ? o2.jitterMs : void 0, h2 = e2.recvPacketLossRate;
            let p2 = 0.7 * h2 * 100 / 50 + 0.3 * l2 / 1500;
            u2 && (p2 = 0.6 * h2 * 100 / 50 + 0.2 * l2 / 1500 + 0.2 * u2 / 400);
            t2 += p2 < 0.1 ? 1 : p2 < 0.17 ? 2 : p2 < 0.36 ? 3 : p2 < 0.59 ? 4 : 5;
          }), this.remoteUserMap.size > 0 ? Math.round(t2 / this.remoteUserMap.size) : t2;
        }
        async muteLocalTrack(e2) {
          return new tT((t2, i2) => {
            this.handleMuteLocalTrack(e2, t2, i2);
          });
        }
        filterTobePublishedTracks(e2, t2, i2) {
          const n2 = [], s2 = wA(), r2 = this.getAllTracks();
          e2 = yg(e2 = e2.filter((e3) => -1 === r2.indexOf(e3)));
          let o2 = false, a2 = false;
          for (const r3 of e2) {
            if (r3 instanceof Nw && (this.localTrackMap.has(Ev.LocalVideoTrack) || o2 ? new VT(xT.CAN_NOT_PUBLISH_MULTIPLE_VIDEO_TRACKS).throw() : (n2.push({ track: r3, type: Ev.LocalVideoTrack }), o2 = true), t2)) {
              const e3 = this.getLowVideoTrack(r3, i2);
              n2.push({ track: e3, type: Ev.LocalVideoLowTrack });
            }
            if (r3 instanceof cw) {
              const e3 = this.localTrackMap.get(Ev.LocalAudioTrack);
              if (e3) {
                if (!(e3.track instanceof uw))
                  throw new VT(xT.NOT_SUPPORTED, "cannot publish multiple tracks which one of them configured with bypassWebAudio or your browser does not support audio mixing");
                if (r3._bypassWebAudio)
                  throw new VT(xT.NOT_SUPPORTED, "cannot publish multiple tracks which one of them configured with bypassWebAudio");
                e3.track.addAudioTrack(r3), this.bindLocalAudioTrackEvents(r3, true);
              } else if (a2) {
                const e4 = n2.find((e5) => {
                  let { type: t3 } = e5;
                  return t3 === Ev.LocalAudioTrack;
                });
                if (!(e4.track instanceof uw))
                  throw new VT(xT.NOT_SUPPORTED, "cannot publish multiple tracks which one of them configured with bypassWebAudio or your browser does not support audio mixing");
                if (r3._bypassWebAudio)
                  throw new VT(xT.NOT_SUPPORTED, "cannot publish multiple tracks which one of them configured with bypassWebAudio");
                e4.track.addAudioTrack(r3);
              } else {
                if (!s2.webAudioMediaStreamDest || r3 instanceof uw || r3._bypassWebAudio)
                  n2.push({ track: r3, type: Ev.LocalAudioTrack });
                else {
                  const e4 = new uw();
                  e4.addAudioTrack(r3), n2.push({ track: e4, type: Ev.LocalAudioTrack });
                }
                a2 = true;
              }
            }
          }
          return n2;
        }
        filterTobeUnpublishedTracks(e2) {
          const t2 = [], i2 = this.getAllTracks();
          e2 = yg(e2 = e2.filter((e3) => -1 !== i2.indexOf(e3)));
          for (const i3 of e2) {
            if (i3 instanceof cw) {
              const e3 = this.localTrackMap.get(Ev.LocalAudioTrack);
              if (!e3)
                continue;
              e3.track instanceof uw ? (e3.track.removeAudioTrack(i3), this.unbindLocalAudioTrackEvents(i3), 0 === e3.track.trackList.length && (t2.push([Ev.LocalAudioTrack, e3]), e3.track.close())) : t2.push([Ev.LocalAudioTrack, e3]);
            }
            if (i3 instanceof Nw) {
              const e3 = this.localTrackMap.get(Ev.LocalVideoTrack);
              if (!e3)
                continue;
              t2.push([Ev.LocalVideoTrack, e3]);
              const i4 = this.localTrackMap.get(Ev.LocalVideoLowTrack);
              i4 && t2.push([Ev.LocalVideoLowTrack, i4]);
            }
          }
          return t2;
        }
        bindLocalTrackEvents(e2) {
          e2.forEach((e3) => {
            let { track: t2, type: i2 } = e3;
            switch (i2) {
              case Ev.LocalVideoTrack:
                t2.addListener(KA.GET_STATS, this.handleGetLocalVideoStats), t2.addListener(KA.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), t2.addListener(KA.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), t2.addListener(KA.NEED_UPDATE_VIDEO_ENCODER, this.handleUpdateVideoEncoder), t2.addListener(KA.SET_OPTIMIZATION_MODE, this.handleSetOptimizationMode), t2.addListener(KA.NEED_REPLACE_TRACK, this.handleReplaceTrack), t2.addListener(KA.NEED_MUTE_TRACK, this.handleMuteLocalTrack), t2.addListener(KA.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack);
                break;
              case Ev.LocalAudioTrack:
                this.bindLocalAudioTrackEvents(t2);
              case Ev.LocalVideoLowTrack:
            }
          });
        }
        bindLocalAudioTrackEvents(e2, t2) {
          e2 instanceof uw ? e2.trackList.forEach((e3) => {
            e3.addListener(KA.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), e3.addListener(KA.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), e3.addListener(KA.GET_STATS, this.handleGetLocalAudioStats), e3.addListener(KA.NEED_MUTE_TRACK, this.handleMuteLocalTrack), e3.addListener(KA.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack);
          }) : (e2.addListener(KA.GET_STATS, this.handleGetLocalAudioStats), e2.addListener(KA.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), e2.addListener(KA.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), e2.addListener(KA.NEED_MUTE_TRACK, this.handleMuteLocalTrack), e2.addListener(KA.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack), t2 || e2.addListener(KA.NEED_REPLACE_TRACK, this.handleReplaceTrack));
        }
        unbindLocalTrackEvents(e2) {
          e2 || (e2 = Array.from(this.localTrackMap.entries()).map((e3) => {
            let [t2, { track: i2 }] = e3;
            return { track: i2, type: t2 };
          })), e2.forEach((e3) => {
            let { track: t2, type: i2 } = e3;
            switch (i2) {
              case Ev.LocalVideoTrack:
                t2.off(KA.GET_STATS, this.handleGetLocalVideoStats), t2.off(KA.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), t2.off(KA.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), t2.off(KA.NEED_UPDATE_VIDEO_ENCODER, this.handleUpdateVideoEncoder), t2.off(KA.SET_OPTIMIZATION_MODE, this.handleSetOptimizationMode), t2.off(KA.NEED_REPLACE_TRACK, this.handleReplaceTrack), t2.off(KA.NEED_MUTE_TRACK, this.handleMuteLocalTrack), t2.off(KA.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack);
                break;
              case Ev.LocalAudioTrack:
                this.unbindLocalAudioTrackEvents(t2);
              case Ev.LocalVideoLowTrack:
            }
          });
        }
        unbindLocalAudioTrackEvents(e2) {
          e2 instanceof uw ? e2.trackList.forEach((e3) => {
            e3.off(KA.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), e3.off(KA.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), e3.off(KA.GET_STATS, this.handleGetLocalAudioStats), e3.off(KA.NEED_MUTE_TRACK, this.handleMuteLocalTrack), e3.off(KA.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack);
          }) : (e2.off(KA.GET_STATS, this.handleGetLocalAudioStats), e2.off(KA.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), e2.off(KA.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), e2.off(KA.NEED_REPLACE_TRACK, this.handleReplaceTrack), e2.off(KA.NEED_MUTE_TRACK, this.handleMuteLocalTrack), e2.off(KA.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack));
        }
        bindRemoteTrackEvents(e2, t2) {
          t2 instanceof Vw && t2.addListener(KA.GET_STATS, (t3) => {
            t3(this.handleGetRemoteVideoStats(e2));
          }), t2 instanceof Fw && t2.addListener(KA.GET_STATS, (t3) => {
            t3(this.handleGetRemoteAudioStats(e2));
          });
        }
        unbindRemoteTrackEvents(e2) {
          e2 && e2.removeAllListeners(KA.GET_STATS);
        }
        unbindAllRemoteTrackEvents() {
          Array.from(this.remoteUserMap.entries()).forEach((e2) => {
            let [t2, i2] = e2;
            i2.has(hv.AUDIO) && this.unbindRemoteTrackEvents(t2._audioTrack), i2.has(hv.VIDEO) && this.unbindRemoteTrackEvents(t2._videoTrack);
          });
        }
        createGatewayPublishMessage(e2, t2) {
          return e2.map((e3, i2) => {
            var n2;
            let s2, { track: r2, type: o2 } = e3;
            switch (o2) {
              case Ev.LocalAudioTrack:
                s2 = ev.Audio;
                break;
              case Ev.LocalVideoTrack:
                s2 = bn(n2 = r2._hints).call(n2, YA.SCREEN_TRACK) ? ev.Screen : ev.High;
                break;
              case Ev.LocalVideoLowTrack:
                s2 = ev.Low;
            }
            return { kind: o2 === Ev.LocalAudioTrack ? hv.AUDIO : hv.VIDEO, stream_type: s2, mid: t2[i2].id, ssrcs: t2[i2].localSSRC, isMuted: r2.muted || !r2.enabled };
          });
        }
        createGatewayUnpublishMessage(e2) {
          return e2.map((e3) => {
            var t2;
            let i2, [n2, { track: s2, ssrcs: r2, id: o2 }] = e3;
            switch (n2) {
              case Ev.LocalVideoTrack:
                i2 = bn(t2 = s2._hints).call(t2, YA.SCREEN_TRACK) ? ev.Screen : ev.High;
                break;
              case Ev.LocalAudioTrack:
                i2 = ev.Audio;
                break;
              case Ev.LocalVideoLowTrack:
                i2 = ev.Low;
            }
            return { stream_type: i2, ssrcs: r2, mid: o2 };
          });
        }
        assignLocalTracks(e2, t2) {
          e2.forEach((e3, i2) => {
            let { track: n2, type: s2 } = e3;
            this.localTrackMap.set(s2, { track: n2, id: t2[i2].id, ssrcs: t2[i2].localSSRC });
          });
        }
        withdrawLocalTracks(e2) {
          e2.forEach((e3) => {
            let [t2] = e3;
            this.localTrackMap.delete(t2);
          });
        }
        bindConnectionEvents(e2) {
          e2.onConnectionStateChange = async (t2) => {
            var i2;
            YC.info("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: ").concat(e2.name, ".onConnectionStateChange(").concat(t2, ")")), this.emit(fv.PeerConnectionStateChange, t2), "connected" !== t2 || this.store.keyMetrics.peerConnectionEnd || this.store.peerConnectionEnd(), "connected" === t2 && (e2.isInRestartIce = false), bn(i2 = this._restartStates).call(i2, t2) && !e2.isInRestartIce && ("disconnected" === t2 && await Ug(800), "disconnected" !== e2.iceConnectionState && "failed" !== e2.iceConnectionState || this.handleDisconnect(e2.direction));
          }, e2.onICEConnectionStateChange = (e3) => {
            "connected" !== e3 || this.store.keyMetrics.iceConnectionEnd || this.store.iceConnectionEnd(), YC.info("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection.onICEConnectionStateChange(").concat(e3, ")")), rI.reportApiInvoke(this.store.sessionId, { name: "ICEConnectionStateChange", options: e3, tag: og.TRACER }).onSuccess(), this.emit(fv.IceConnectionStateChange, e3);
          }, e2.onICETransportStateChange = (e3) => {
            YC.info("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection.onICETransportStateChange(").concat(e3, ")"));
          }, e2.onDTLSTransportStateChange = (e3) => {
            YC.info("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection.onDTLSTransportStateChange(").concat(e3, ")"));
          }, e2.onDTLSTransportError = (e3) => {
            YC.info("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection.onDTLSTransportError(").concat(e3, ")"));
          }, e2.onFirstAudioDecoded = (e3) => {
            var t2;
            const i2 = Array.from(uh(t2 = this.remoteUserMap).call(t2)).find((t3) => t3._audioSSRC === e3);
            var n2;
            i2 && (this.store.subscribe(i2.uid, "audio", void 0, void 0, void 0, Date.now()), null === (n2 = i2.audioTrack) || void 0 === n2 || n2.emit(ZA.FIRST_FRAME_DECODED), rI.firstRemoteFrame(this.store.sessionId, QC.FIRST_AUDIO_DECODE, ZC.FIRST_AUDIO_DECODE, { peer: i2._uintid, subscribeElapse: TP.measureFromSubscribeStart(this.store.clientId, e3), subscribeRequestid: e3, p2pid: this.store.p2pId }));
          }, e2.onFirstAudioReceived = (e3) => {
            var t2;
            const i2 = Array.from(uh(t2 = this.remoteUserMap).call(t2)).find((t3) => t3._audioSSRC === e3);
            i2 && rI.firstRemoteFrame(this.store.sessionId, QC.FIRST_AUDIO_RECEIVED, ZC.FIRST_AUDIO_RECEIVED, { peer: i2._uintid, subscribeElapse: TP.measureFromSubscribeStart(this.store.clientId, e3), subscribeRequestid: e3, p2pid: this.store.p2pId });
          }, e2.onFirstVideoDecoded = (e3, t2, i2) => {
            this.reportVideoFirstFrameDecoded(e3, t2, i2);
          }, e2.onFirstVideoReceived = (e3) => {
            var t2;
            const i2 = Array.from(uh(t2 = this.remoteUserMap).call(t2)).find((t3) => t3._videoSSRC === e3);
            i2 && rI.firstRemoteFrame(this.store.sessionId, QC.FIRST_VIDEO_RECEIVED, ZC.FIRST_VIDEO_RECEIVED, { peer: i2._uintid, subscribeElapse: TP.measureFromSubscribeStart(this.store.clientId, e3), subscribeRequestid: e3, p2pid: this.store.p2pId });
          }, e2.onSelectedLocalCandidateChanged = (e3, t2) => {
            const i2 = "relay" === e3.candidateType, n2 = "relay" === t2.candidateType;
            "unknown" !== t2.candidateType && i2 === n2 || this.emit(fv.ConnectionTypeChange, i2), YC.info("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection.SelectedLocalCandidateChanged(").concat(JSON.stringify(Dy(t2)), " -> ").concat(JSON.stringify(Dy(e3)), ")"));
          }, e2.onSelectedRemoteCandidateChanged = (e3, t2) => {
            YC.info("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection.SelectedRemoteCandidateChanged(").concat(JSON.stringify(Dy(t2)), " -> ").concat(JSON.stringify(Dy(e3)), ")"));
          }, e2.onFirstVideoDecodedTimeout = (e3) => {
            this.reportVideoFirstFrameDecoded(e3, void 0, void 0, true);
          }, e2.onLocalCandidate = (t2) => {
            this.emit(fv.LocalCandidate, { candidate: t2, direction: e2.direction });
          };
        }
        unbindConnectionEvents(e2) {
          e2.onConnectionStateChange = void 0, e2.onICEConnectionStateChange = void 0, e2.onICETransportStateChange = void 0, e2.onDTLSTransportStateChange = void 0, e2.onDTLSTransportError = void 0, e2.onFirstAudioDecoded = void 0, e2.onFirstAudioReceived = void 0, e2.onFirstVideoDecoded = void 0, e2.onFirstVideoReceived = void 0, e2.onSelectedLocalCandidateChanged = void 0, e2.onSelectedRemoteCandidateChanged = void 0, e2.onFirstVideoDecodedTimeout = void 0, e2.onLocalCandidate = void 0;
        }
        async handleDisconnect(e2) {
          const t2 = e2 === vI.SEND_ONLY ? this.sendConnection : this.recvConnection;
          t2 && !t2.isInRestartIce && (t2.isInRestartIce = true, YC.debug("[".concat(this.store.clientId, "] [P2PChannel-").concat(t2.name, "] start use restartICE")), e2 === vI.SEND_ONLY ? this.restartICE(e2) : fg(this, fv.RequestP2PRestartICE, { direction: vI.SEND_ONLY }));
        }
        filterTobeMutedTracks(e2) {
          const t2 = [];
          if (-1 === this.getAllTracks().indexOf(e2))
            return t2;
          const i2 = this.localTrackMap.get(Ev.LocalAudioTrack);
          if (e2 instanceof cw && (null == i2 ? void 0 : i2.track) instanceof uw)
            return i2.track.isActive || t2.push([Ev.LocalAudioTrack, i2]), t2;
          const n2 = Array.from(this.localTrackMap.entries()).find((t3) => {
            let [, { track: i3 }] = t3;
            return e2 === i3;
          });
          if (n2 && (t2.push(n2), n2[0] === Ev.LocalVideoTrack)) {
            const e3 = this.localTrackMap.get(Ev.LocalVideoLowTrack);
            e3 && t2.push([Ev.LocalVideoLowTrack, e3]);
          }
          return t2;
        }
        filterTobeUnmutedTracks(e2) {
          const t2 = [], i2 = this.localTrackMap.get(Ev.LocalAudioTrack);
          if (e2 instanceof cw && (null == i2 ? void 0 : i2.track) instanceof uw)
            return i2.track.isActive && t2.push([Ev.LocalAudioTrack, i2]), t2;
          const n2 = Array.from(this.localTrackMap.entries()).find((t3) => {
            let [, { track: i3 }] = t3;
            return e2 === i3;
          });
          if (n2)
            if (n2[0] === Ev.LocalVideoTrack) {
              t2.push(n2);
              const e3 = this.localTrackMap.get(Ev.LocalVideoLowTrack);
              e3 && t2.push([Ev.LocalVideoLowTrack, e3]);
            } else
              t2.push(n2);
          return t2;
        }
        createMuteMessage(e2) {
          return e2.map((e3) => {
            var t2;
            let i2, [n2, { track: s2, ssrcs: r2, id: o2 }] = e3;
            switch (n2) {
              case Ev.LocalAudioTrack:
                i2 = ev.Audio;
                break;
              case Ev.LocalVideoTrack:
                i2 = bn(t2 = s2._hints).call(t2, YA.SCREEN_TRACK) ? ev.Screen : ev.High;
                break;
              case Ev.LocalVideoLowTrack:
                i2 = ev.Low;
            }
            return { stream_type: i2, ssrcs: r2, mid: o2 };
          });
        }
        createUnmuteMessage(e2) {
          return e2.map((e3) => {
            var t2;
            let i2, [n2, { track: s2, ssrcs: r2, id: o2 }] = e3;
            switch (n2) {
              case Ev.LocalAudioTrack:
                i2 = ev.Audio;
                break;
              case Ev.LocalVideoTrack:
                i2 = bn(t2 = s2._hints).call(t2, YA.SCREEN_TRACK) ? ev.Screen : ev.High;
                break;
              case Ev.LocalVideoLowTrack:
                i2 = ev.Low;
            }
            return { stream_type: i2, ssrcs: r2, mid: o2 };
          });
        }
        filterTobeUnSubscribedTracks(e2, t2) {
          const i2 = [], n2 = this.remoteUserMap.get(e2);
          if (!n2)
            return i2;
          if (t2) {
            const s2 = n2.get(t2);
            if (!s2)
              return i2;
            i2.push([e2, { kind: t2, id: s2 }]);
          } else
            Array.from(n2.entries()).forEach((t3) => {
              let [n3, s2] = t3;
              i2.push([e2, { kind: n3, id: s2 }]);
            });
          return i2;
        }
        createUnsubscribeMessage(e2) {
          const t2 = [];
          return e2.forEach((e3) => {
            let [i2, { kind: n2, id: s2 }] = e3;
            switch (n2) {
              case hv.VIDEO:
                return void (i2._videoSSRC && t2.push({ stream_type: hv.VIDEO, ssrcId: i2._videoSSRC }));
              case hv.AUDIO:
                return void (i2._audioSSRC && t2.push({ stream_type: hv.AUDIO, ssrcId: i2._audioSSRC }));
            }
          }), t2;
        }
        withdrawRemoteTracks(e2) {
          e2.forEach((e3) => {
            let [t2, { kind: i2 }] = e3;
            const n2 = this.remoteUserMap.get(t2);
            n2 && (n2.delete(i2), 0 === Array.from(n2.entries()).length && this.remoteUserMap.delete(t2));
          });
        }
        async updateBitrateLimit(e2) {
          const t2 = this.localTrackMap.get(Ev.LocalVideoTrack), i2 = this.localTrackMap.get(Ev.LocalVideoLowTrack);
          t2 && await t2.track.setBitrateLimit(e2.uplink), i2 && e2.low_stream_uplink && await i2.track.setBitrateLimit({ max_bitrate: e2.low_stream_uplink.bitrate, min_bitrate: e2.low_stream_uplink.bitrate || 0 });
        }
        isP2PDisconnected() {
          if (this.sendConnection && this.recvConnection) {
            const e2 = this.sendConnection.peerConnectionState, t2 = this.recvConnection.peerConnectionState;
            return "connected" !== e2 && "connected" !== t2;
          }
          return true;
        }
        async tryToUnmuteAudio(e2) {
          for (let t2 = 0; t2 < e2.length; t2++)
            if (e2[t2] instanceof cw) {
              const i2 = this.filterTobeUnmutedTracks(e2[t2]);
              if (0 === i2.length)
                continue;
              const n2 = this.createUnmuteMessage(i2);
              return void await Tg(this, fv.RequestUnmuteLocal, n2);
            }
        }
        bindStatsUploaderEvents() {
          this.statsUploader.requestStats = (e2) => this.getStats(e2), this.statsUploader.requestLocalMedia = () => Array.from(this.localTrackMap.entries()).filter((e2) => {
            let [, { ssrcs: t2 }] = e2;
            return !!t2;
          }), this.statsUploader.requestRemoteMedia = () => Array.from(this.remoteUserMap.entries()), this.statsUploader.requestVideoIsReady = (e2) => {
            var t2;
            return !(null === (t2 = this.recvConnection) || void 0 === t2 || !t2.getRemoteVideoIsReady(e2));
          }, this.statsUploader.requestUpload = (e2, t2) => this.emit(fv.RequestUpload, e2, t2), this.statsUploader.requestUploadStats = (e2) => this.emit(fv.RequestUploadStats, e2), this.statsUploader.requestAllTracks = () => this.getAllTracks();
        }
        unbindStatsUploaderEvents() {
          this.statsUploader.requestStats = void 0, this.statsUploader.requestLocalMedia = void 0, this.statsUploader.requestRemoteMedia = void 0, this.statsUploader.requestVideoIsReady = void 0;
        }
        async requestReconnect() {
          this.dtlsFailedCount += 1, await Ug(zg(this.dtlsFailedCount, Jg)), this.emit(fv.RequestReconnect);
        }
        async reconnectP2P() {
        }
        canPublishLowStream() {
          return this.localTrackMap.has(Ev.LocalVideoTrack) || this.pendingLocalTracks.some((e2) => e2 instanceof Nw);
        }
        throwIfTrackTypeNotMatch(e2) {
          if (e2.filter((e3) => e3 instanceof Nw).length > 1)
            throw new VT(xT.CAN_NOT_PUBLISH_MULTIPLE_VIDEO_TRACKS);
          if (e2.filter((e3) => e3 instanceof cw).length > 1 && (e2.some((e3) => e3 instanceof cw && e3._bypassWebAudio) || !wA().webAudioMediaStreamDest))
            throw new VT(xT.NOT_SUPPORTED, "cannot publish multiple tracks which one of them configured with bypassWebAudio or your browser doesn't support MediaStreamDestNode");
          for (const t2 of e2) {
            if (t2 instanceof Nw && this.pendingLocalTracks.some((e3) => e3 instanceof Nw))
              throw new VT(xT.CAN_NOT_PUBLISH_MULTIPLE_VIDEO_TRACKS);
            if (t2 instanceof cw && this.pendingLocalTracks.some((e3) => e3 instanceof cw) && (!wA().webAudioMediaStreamDest || t2._bypassWebAudio || this.pendingLocalTracks.some((e3) => e3 instanceof cw && e3._bypassWebAudio)))
              throw new VT(xT.NOT_SUPPORTED, "cannot publish multiple tracks which one of them configured with bypassWebAudio or your browser doesn't support MediaStreamDestNode");
          }
        }
        getLowVideoTrack(e2, t2) {
          const i2 = !DC("DISABLE_DUAL_STREAM_USE_ENCODING") && wA().supportDualStreamEncoding, n2 = ok(ok({}, { width: 160, height: 120, framerate: 15, bitrate: 50 }), t2);
          let s2;
          s2 = i2 ? e2._mediaStreamTrack.clone() : FL(e2, n2);
          const r2 = xg(8, "track-low-"), o2 = new Nw(s2, ok(ok({}, i2 && { scaleResolutionDownBy: Ny(n2, e2) }), {}, { frameRate: n2.framerate, bitrateMax: n2.bitrate, bitrateMin: n2.bitrate }), void 0, void 0, r2);
          return o2.on(XA.TRANSCEIVER_UPDATED, (t3) => {
            e2._updateRtpTransceiver(t3, qA.LOW_STREAM);
          }), o2._hints.push(YA.LOW_STREAM), e2.addListener(KA.NEED_CLOSE, () => {
            o2.close();
          }), o2;
        }
        async globalLock() {
          return this.recvMutex.lock("From P2PChannel2.globalLock");
        }
        reportVideoFirstFrameDecoded(e2, t2, i2, n2) {
          var s2;
          const r2 = Array.from(uh(s2 = this.remoteUserMap).call(s2)).find((t3) => t3._videoSSRC === e2);
          if (r2) {
            n2 || this.store.subscribe(r2.uid, "video", void 0, void 0, void 0, void 0, Date.now());
            const s3 = this.store.keyMetrics, o2 = s3.subscribe.find((e3) => e3.userId === r2.uid && "video" === e3.type);
            rI.firstRemoteVideoDecode(this.store.sessionId, QC.FIRST_VIDEO_DECODE, ZC.FIRST_VIDEO_DECODE, { peer: r2._uintid, videowidth: t2, videoheight: i2, subscribeElapse: TP.measureFromSubscribeStart(this.store.clientId, e2), subscribeRequestid: e2, p2pid: this.store.p2pId, apEnd: s3.requestAPEnd || 0, apStart: s3.requestAPStart || 0, joinGwEnd: s3.joinGatewayEnd || 0, joinGwStart: s3.joinGatewayStart || 0, pcEnd: s3.peerConnectionEnd || 0, pcStart: s3.peerConnectionStart || 0, subscriberEnd: (null == o2 ? void 0 : o2.subscribeEnd) || 0, subscriberStart: (null == o2 ? void 0 : o2.subscribeStart) || 0, videoAddNotify: (null == o2 ? void 0 : o2.streamAdded) || 0, state: n2 ? 1 : 0 });
          }
        }
        async remoteMediaSsrcChanged(e2, t2, i2) {
          if (!this.recvConnection)
            return false;
          const n2 = this.remoteUserMap.get(e2);
          if (!n2)
            return false;
          const s2 = n2.get(t2);
          if (!s2)
            return false;
          const r2 = await this.recvConnection.getRemoteSSRC(s2);
          return void 0 !== r2 && r2 !== i2;
        }
        resetConnection(e2) {
          YC.debug("[".concat(this.store.clientId, "] [P2PChannel2] reset connection to ").concat(e2)), this.state === mv.Connected ? (YC.debug("[".concat(this.store.clientId, "] [P2PChannel2] fallback to websocket but P2PChannel2 state still connected, disconnect first")), this.disconnectForReconnect()) : (this.sendConnection && (this.sendConnection.close(), this.unbindConnectionEvents(this.sendConnection), this.sendConnection = void 0), this.recvConnection && (this.recvConnection.close(), this.unbindConnectionEvents(this.recvConnection), this.recvConnection = void 0));
        }
        async publishDataChannel(e2) {
          throw new VT(xT.NOT_SUPPORTED);
        }
        async unpublishDataChannel(e2) {
          throw new VT(xT.NOT_SUPPORTED);
        }
        async subscribeDataChannel(e2, t2) {
          throw new VT(xT.NOT_SUPPORTED);
        }
        async unsubscribeDataChannel(e2, t2) {
          throw new VT(xT.NOT_SUPPORTED);
        }
        hasPendingRemoteDataChannel(e2, t2) {
          throw new VT(xT.NOT_SUPPORTED);
        }
        setPendingRemoteDataChannel(e2, t2) {
          throw new VT(xT.NOT_SUPPORTED);
        }
        async preConnect(e2, t2, i2, n2, s2, r2) {
          throw new VT(xT.NOT_SUPPORTED);
        }
        getEstablishParams() {
          throw new VT(xT.NOT_SUPPORTED);
        }
        async reSubscribe(e2) {
          throw new VT(xT.NOT_SUPPORTED);
        }
        async updateVideoStreamParameter(e2, t2) {
          throw new VT(xT.NOT_SUPPORTED);
        }
        unbindRtpTransceiver() {
          0 !== this.localTrackMap.size && Array.from(this.localTrackMap.entries()).forEach((e2) => {
            let [t2, { track: i2 }] = e2;
            t2 === Ev.LocalVideoLowTrack ? i2._updateRtpTransceiver(void 0, qA.LOW_STREAM) : i2._updateRtpTransceiver(void 0);
          });
        }
      }
      function ck(e2) {
        return function(t2, i2, n2) {
          const s2 = t2[i2];
          if ("function" != typeof s2)
            throw new Error("Cannot use mutex on object property.");
          return n2.value = async function() {
            for (var t3 = arguments.length, n3 = new Array(t3), r2 = 0; r2 < t3; r2++)
              n3[r2] = arguments[r2];
            switch (e2) {
              case nk.SEND_ONLY: {
                const e3 = await this.sendMutex.lock("From P2PChannel2.".concat(i2));
                try {
                  return await s2.apply(this, n3);
                } finally {
                  e3();
                }
              }
              case nk.RECEIVE_ONLY: {
                const e3 = await this.recvMutex.lock("From P2PChannel2.".concat(i2));
                try {
                  return await s2.apply(this, n3);
                } finally {
                  e3();
                }
              }
              default: {
                const e3 = await this.sendMutex.lock("From P2PChannel2.".concat(i2)), t4 = await this.recvMutex.lock("From P2PChannel2.".concat(i2));
                try {
                  return await s2.apply(this, n3);
                } finally {
                  e3(), t4();
                }
              }
            }
          }, n2;
        };
      }
      function dk(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function lk(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? dk(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : dk(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      UI([ck(nk.SEND_ONLY), xI("design:type", Function), xI("design:paramtypes", [Object]), xI("design:returntype", tT)], ak.prototype, "p2pConnect", null), UI([ck(nk.SEND_ONLY), xI("design:type", Function), xI("design:paramtypes", [Array]), xI("design:returntype", tT)], ak.prototype, "unpublish", null), UI([ck(), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", tT)], ak.prototype, "unpublishLowStream", null), UI([ck(nk.RECEIVE_ONLY), xI("design:type", Function), xI("design:paramtypes", [ik, String, Number, String]), xI("design:returntype", tT)], ak.prototype, "subscribe", null), UI([ck(nk.RECEIVE_ONLY), xI("design:type", Function), xI("design:paramtypes", [ik, String, Number, String]), xI("design:returntype", tT)], ak.prototype, "mockSubscribe", null), UI([ck(nk.RECEIVE_ONLY), xI("design:type", Function), xI("design:paramtypes", [ik, String, Boolean]), xI("design:returntype", tT)], ak.prototype, "unsubscribe", null), UI([ck(nk.RECEIVE_ONLY), xI("design:type", Function), xI("design:paramtypes", [ik, String]), xI("design:returntype", tT)], ak.prototype, "muteRemote", null), UI([ck(nk.RECEIVE_ONLY), xI("design:type", Function), xI("design:paramtypes", [ik, String]), xI("design:returntype", tT)], ak.prototype, "unmuteRemote", null), UI([ck(nk.RECEIVE_ONLY), xI("design:type", Function), xI("design:paramtypes", [ik, String]), xI("design:returntype", tT)], ak.prototype, "hasRemoteMediaWithLock", null), UI([ck(), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", tT)], ak.prototype, "disconnectForReconnect", null), UI([ck(nk.RECEIVE_ONLY), xI("design:type", Function), xI("design:paramtypes", [ik, String, Number]), xI("design:returntype", tT)], ak.prototype, "remoteMediaSsrcChanged", null);
      class uk {
        constructor(e2) {
          nh(this, "store", void 0), nh(this, "onStatsException", void 0), nh(this, "onUploadPublishDuration", void 0), nh(this, "onStatsChanged", void 0), nh(this, "localStats", /* @__PURE__ */ new Map()), nh(this, "remoteStats", /* @__PURE__ */ new Map()), nh(this, "updateStatsInterval", void 0), nh(this, "trafficStats", void 0), nh(this, "trafficStatsPeerList", []), nh(this, "uplinkStats", void 0), nh(this, "exceptionMonitor", void 0), nh(this, "p2pChannel", void 0), nh(this, "scalabilityMode", uI.L1T1), nh(this, "updateStats", () => {
            this.p2pChannel && (this.updateRemoteStats(this.p2pChannel), this.updateLocalStats(this.p2pChannel));
          }), this.store = e2, this.updateStatsInterval = window.setInterval(this.updateStats, 1e3), this.exceptionMonitor = new mP(), this.exceptionMonitor.on("exception", (e3, t2, i2) => {
            this.onStatsException && this.onStatsException(e3, t2, i2);
          });
        }
        reset() {
          this.localStats = /* @__PURE__ */ new Map(), this.remoteStats = /* @__PURE__ */ new Map(), this.trafficStats = void 0, this.trafficStatsPeerList = [], this.uplinkStats = void 0;
        }
        getLocalAudioTrackStats() {
          return this.localStats.get(Ev.LocalAudioTrack) || lk({}, tb);
        }
        getLocalVideoTrackStats() {
          return this.localStats.get(Ev.LocalVideoTrack) || lk({}, ib);
        }
        getRemoteAudioTrackStats(e2) {
          const t2 = (e3, t3) => {
            if (!this.trafficStats)
              return t3;
            const i3 = this.trafficStats.peer_delay.find((t4) => t4.peer_uid === e3);
            return i3 && (t3.publishDuration = i3.B_ppad + (Date.now() - this.trafficStats.timestamp)), t3;
          }, i2 = {};
          if (e2) {
            var n2;
            const s2 = null === (n2 = this.remoteStats.get(e2)) || void 0 === n2 ? void 0 : n2.audioStats;
            s2 && (i2[e2] = t2(e2, s2));
          } else
            Array.from(this.remoteStats.entries()).forEach((e3) => {
              let [n3, { audioStats: s2 }] = e3;
              s2 && (i2[n3] = t2(n3, s2));
            });
          return i2;
        }
        getRemoteNetworkQualityStats(e2) {
          const t2 = {};
          if (e2) {
            var i2;
            const n2 = null === (i2 = this.remoteStats.get(e2)) || void 0 === i2 ? void 0 : i2.networkStats;
            n2 && (t2[e2] = n2);
          } else
            Array.from(this.remoteStats.entries()).forEach((e3) => {
              let [i3, { networkStats: n2 }] = e3;
              n2 && (t2[i3] = n2);
            });
          return t2;
        }
        getRemoteVideoTrackStats(e2) {
          const t2 = (e3, t3) => {
            if (!this.trafficStats)
              return t3;
            const i3 = this.trafficStats.peer_delay.find((t4) => t4.peer_uid === e3);
            return i3 && (t3.publishDuration = i3.B_ppvd + (Date.now() - this.trafficStats.timestamp)), t3;
          }, i2 = {};
          if (e2) {
            var n2;
            const s2 = null === (n2 = this.remoteStats.get(e2)) || void 0 === n2 ? void 0 : n2.videoStats;
            s2 && (i2[e2] = t2(e2, s2));
          } else
            Array.from(this.remoteStats.entries()).forEach((e3) => {
              let [n3, { videoStats: s2 }] = e3;
              s2 && (i2[n3] = t2(n3, s2));
            });
          return i2;
        }
        getRTCStats() {
          let e2 = 0, t2 = 0, i2 = 0, n2 = 0;
          const s2 = this.localStats.get(Ev.LocalAudioTrack);
          s2 && (e2 += s2.sendBytes, t2 += s2.sendBitrate);
          const r2 = this.localStats.get(Ev.LocalVideoTrack);
          r2 && (e2 += r2.sendBytes, t2 += r2.sendBitrate);
          const o2 = this.localStats.get(Ev.LocalVideoLowTrack);
          o2 && (e2 += o2.sendBytes, t2 += o2.sendBitrate), this.remoteStats.forEach((e3) => {
            let { audioStats: t3, videoStats: s3 } = e3;
            t3 && (i2 += t3.receiveBytes, n2 += t3.receiveBitrate), s3 && (i2 += s3.receiveBytes, n2 += s3.receiveBitrate);
          });
          let a2 = 1;
          return this.trafficStats && (a2 += this.trafficStats.peer_delay.length), { Duration: 0, UserCount: a2, SendBitrate: t2, SendBytes: e2, RecvBytes: i2, RecvBitrate: n2, OutgoingAvailableBandwidth: this.uplinkStats ? this.uplinkStats.B_uab / 1e3 : 0, RTT: this.trafficStats ? 2 * this.trafficStats.B_acd : 0 };
        }
        addLocalStats(e2) {
          this.localStats.set(e2, void 0);
        }
        removeLocalStats(e2) {
          e2 ? this.localStats.delete(e2) : this.localStats.clear();
        }
        addRemoteStats(e2) {
          this.remoteStats.set(e2, {});
        }
        removeRemoteStats(e2) {
          e2 ? this.remoteStats.delete(e2) : this.remoteStats.clear();
        }
        addP2PChannel(e2) {
          this.p2pChannel = e2;
        }
        updateTrafficStats(e2) {
          e2.peer_delay = e2.peer_delay.filter((e3) => void 0 !== e3.B_ppad || void 0 !== e3.B_ppvd);
          e2.peer_delay.filter((e3) => -1 === this.trafficStatsPeerList.indexOf(e3.peer_uid)).forEach((e3) => {
            var t2;
            const i2 = null === (t2 = this.p2pChannel) || void 0 === t2 ? void 0 : t2.getRemoteMedia(e3.peer_uid), n2 = null != i2 && i2.videoSSRC ? TP.measureFromSubscribeStart(this.store.clientId, i2.videoSSRC) : 0, s2 = null != i2 && i2.audioSSRC ? TP.measureFromSubscribeStart(this.store.clientId, i2.audioSSRC) : 0;
            void 0 !== e3.B_ppad && void 0 !== e3.B_ppvd && (this.onUploadPublishDuration && this.onUploadPublishDuration(e3.peer_uid, e3.B_ppad, e3.B_ppvd, n2 > s2 ? n2 : s2), this.trafficStatsPeerList.push(e3.peer_uid));
          }), this.trafficStats = e2;
        }
        updateUplinkStats(e2) {
          this.uplinkStats && this.uplinkStats.B_fir !== e2.B_fir && YC.debug("[".concat(this.store.clientId, "]: Period fir changes to ").concat(e2.B_fir)), this.uplinkStats = e2;
        }
        static isRemoteVideoFreeze(e2, t2, i2) {
          if (!e2)
            return false;
          const n2 = !!i2 && t2.framesDecodeFreezeTime > i2.framesDecodeFreezeTime, s2 = !i2 || t2.framesDecodeCount > i2.framesDecodeCount;
          return n2 || !s2;
        }
        static isRemoteAudioFreeze(e2) {
          return !!e2 && e2._isFreeze();
        }
        isLocalVideoFreeze(e2) {
          return !(!e2.inputFrame || !e2.sentFrame) && (e2.inputFrame.frameRate > 5 && e2.sentFrame.frameRate < 3);
        }
        updateLocalStats(e2) {
          Array.from(this.localStats.entries()).forEach((t2) => {
            let [i2, n2] = t2;
            switch (i2) {
              case Ev.LocalVideoTrack:
              case Ev.LocalVideoLowTrack: {
                const t3 = n2, r2 = lk({}, ib), o2 = e2.getStats(), a2 = e2.getLocalMedia(i2);
                if (o2) {
                  const i3 = o2.videoSend.find((e3) => e3.ssrc === (null == a2 ? void 0 : a2.ssrcs[0].ssrcId));
                  if (i3) {
                    const n3 = e2.getLocalVideoSize(), s3 = e2.getEncoderConfig(Ev.LocalVideoTrack);
                    "H264" !== i3.codec && "H265" !== i3.codec && "VP8" !== i3.codec && "VP9" !== i3.codec && "AV1X" !== i3.codec && "AV1" !== i3.codec || (r2.codecType = i3.codec), r2.sendBytes = i3.bytes, r2.sendBitrate = t3 ? 8 * Math.max(0, r2.sendBytes - t3.sendBytes) : 0, i3.inputFrame ? (r2.captureFrameRate = i3.inputFrame.frameRate, r2.captureResolutionHeight = i3.inputFrame.height, r2.captureResolutionWidth = i3.inputFrame.width) : n3 && (r2.captureResolutionWidth = n3.width, r2.captureResolutionHeight = n3.height), i3.sentFrame ? (r2.sendFrameRate = i3.sentFrame.frameRate, r2.sendResolutionHeight = i3.sentFrame.height, r2.sendResolutionWidth = i3.sentFrame.width) : n3 && (r2.sendResolutionWidth = n3.width, r2.sendResolutionHeight = n3.height), i3.avgEncodeMs && (r2.encodeDelay = i3.avgEncodeMs), s3 && s3.bitrateMax && (r2.targetSendBitrate = 1e3 * s3.bitrateMax), r2.sendPackets = i3.packets, r2.sendPacketsLost = i3.packetsLost, r2.sendJitterMs = i3.jitterMs, r2.sendRttMs = i3.rttMs, r2.totalDuration = t3 ? t3.totalDuration + 1 : 1, r2.totalFreezeTime = t3 ? t3.totalFreezeTime : 0, this.isLocalVideoFreeze(i3) && (r2.totalFreezeTime += 1), i3.scalabilityMode && this.scalabilityMode !== i3.scalabilityMode && (YC.debug("[".concat(this.store.clientId, "]: The scalabilityMode of the video sending stream is ").concat(i3.scalabilityMode)), this.scalabilityMode = i3.scalabilityMode);
                  }
                  this.trafficStats && (r2.currentPacketLossRate = (this.trafficStats.B_pvlr4 || 0) / 100);
                }
                var s2;
                if (this.localStats.set(i2, r2), (null == t3 ? void 0 : t3.sendResolutionWidth) !== r2.sendResolutionWidth || (null == t3 ? void 0 : t3.sendResolutionHeight) !== r2.sendResolutionHeight)
                  null === (s2 = this.onStatsChanged) || void 0 === s2 || s2.call(this, "resolution", { width: r2.sendResolutionWidth, height: r2.sendResolutionHeight });
                r2 && a2 && this.exceptionMonitor.setLocalVideoStats(this.store.uid, a2.track, r2);
                break;
              }
              case Ev.LocalAudioTrack: {
                const t3 = n2, s3 = lk({}, tb), r2 = e2.getStats(), o2 = e2.getLocalMedia(i2);
                if (r2) {
                  const i3 = r2.audioSend.find((e3) => e3.ssrc === (null == o2 ? void 0 : o2.ssrcs[0].ssrcId));
                  if (i3) {
                    if ("opus" !== i3.codec && "aac" !== i3.codec && "PCMU" !== i3.codec && "PCMA" !== i3.codec && "G722" !== i3.codec || (s3.codecType = i3.codec), i3.inputLevel)
                      s3.sendVolumeLevel = Math.round(32767 * i3.inputLevel);
                    else {
                      const t4 = e2.getLocalAudioVolume();
                      t4 && (s3.sendVolumeLevel = Math.round(32767 * t4));
                    }
                    s3.sendBytes = i3.bytes, s3.sendPackets = i3.packets, s3.sendPacketsLost = i3.packetsLost, s3.sendJitterMs = i3.jitterMs, s3.sendRttMs = i3.rttMs, s3.sendBitrate = t3 ? 8 * Math.max(0, s3.sendBytes - t3.sendBytes) : 0;
                  }
                }
                this.trafficStats && (s3.currentPacketLossRate = (this.trafficStats.B_palr4 || 0) / 100), this.localStats.set(Ev.LocalAudioTrack, s3), s3 && o2 && this.exceptionMonitor.setLocalAudioStats(this.store.uid, o2.track, s3);
                break;
              }
            }
          });
        }
        updateRemoteStats(e2) {
          Array.from(this.remoteStats.entries()).forEach((t2) => {
            var i2, n2;
            let [s2, { videoStats: r2, audioStats: o2, videoPcStats: a2 }] = t2;
            const c2 = o2, d2 = r2, l2 = a2, u2 = lk({}, nb), h2 = lk({}, rb), p2 = lk({}, sb), { audioTrack: _2, videoTrack: E2, audioSSRC: m2, videoSSRC: f2 } = e2.getRemoteMedia(s2);
            let T2;
            T2 = e2 instanceof ak ? e2.getStats(true) : e2.getStats();
            const g2 = null === (i2 = T2) || void 0 === i2 ? void 0 : i2.audioRecv.find((e3) => e3.ssrc === m2), S2 = null === (n2 = T2) || void 0 === n2 ? void 0 : n2.videoRecv.find((e3) => e3.ssrc === f2), R2 = this.trafficStats && this.trafficStats.peer_delay.find((e3) => e3.peer_uid === s2);
            if (g2 && ("opus" !== g2.codec && "aac" !== g2.codec && "PCMU" !== g2.codec && "PCMA" !== g2.codec && "G722" !== g2.codec || (u2.codecType = g2.codec), g2.outputLevel ? u2.receiveLevel = Math.round(32767 * g2.outputLevel) : _2 && (u2.receiveLevel = Math.round(32767 * _2.getVolumeLevel())), u2.receiveBytes = g2.bytes, u2.receivePackets = g2.packets, u2.receivePacketsLost = g2.packetsLost, u2.packetLossRate = u2.receivePacketsLost / (u2.receivePackets + u2.receivePacketsLost), u2.receiveBitrate = c2 ? 8 * Math.max(0, u2.receiveBytes - c2.receiveBytes) : 0, u2.totalDuration = c2 ? c2.totalDuration + 1 : 1, u2.totalFreezeTime = c2 ? c2.totalFreezeTime : 0, u2.freezeRate = u2.totalFreezeTime / u2.totalDuration, u2.receiveDelay = g2.jitterBufferMs, u2.totalDuration > 10 && uk.isRemoteAudioFreeze(_2) && (u2.totalFreezeTime += 1)), S2) {
              "H264" !== S2.codec && "H265" !== S2.codec && "VP8" !== S2.codec && "VP9" !== S2.codec && "AV1X" !== S2.codec && "AV1" !== S2.codec || (h2.codecType = S2.codec), h2.receiveBytes = S2.bytes, h2.receiveBitrate = d2 ? 8 * Math.max(0, h2.receiveBytes - d2.receiveBytes) : 0, h2.decodeFrameRate = S2.decodeFrameRate < 0 ? 0 : S2.decodeFrameRate, h2.renderFrameRate = S2.decodeFrameRate < 0 ? 0 : S2.decodeFrameRate, S2.outputFrame && (h2.renderFrameRate = S2.outputFrame.frameRate), S2.receivedFrame ? (h2.receiveFrameRate = S2.receivedFrame.frameRate, h2.receiveResolutionHeight = S2.receivedFrame.height, h2.receiveResolutionWidth = S2.receivedFrame.width) : E2 && (h2.receiveResolutionHeight = E2._videoHeight || 0, h2.receiveResolutionWidth = E2._videoWidth || 0), void 0 !== S2.framesRateFirefox && (h2.receiveFrameRate = Math.round(S2.framesRateFirefox)), h2.receivePackets = S2.packets, h2.receivePacketsLost = S2.packetsLost, h2.packetLossRate = h2.receivePacketsLost / (h2.receivePackets + h2.receivePacketsLost), h2.totalDuration = d2 ? d2.totalDuration + 1 : 1, h2.totalFreezeTime = d2 ? d2.totalFreezeTime : 0, h2.receiveDelay = S2.jitterBufferMs || 0;
              const t3 = !!f2 && e2.getRemoteVideoIsReady(f2);
              E2 && t3 && uk.isRemoteVideoFreeze(E2, S2, l2) && (h2.totalFreezeTime += 1), h2.freezeRate = h2.totalFreezeTime / h2.totalDuration;
            }
            R2 && (u2.end2EndDelay = R2.B_ad, h2.end2EndDelay = R2.B_vd, u2.transportDelay = R2.B_ed, h2.transportDelay = R2.B_ed, u2.currentPacketLossRate = R2.B_ealr4 / 100, h2.currentPacketLossRate = R2.B_evlr4 / 100, p2.uplinkNetworkQuality = R2.B_punq ? R2.B_punq : 0, p2.downlinkNetworkQuality = R2.B_pdnq ? R2.B_pdnq : 0), this.remoteStats.set(s2, { audioStats: u2, videoStats: h2, videoPcStats: S2, networkStats: p2 }), _2 && this.exceptionMonitor.setRemoteAudioStats(_2, u2), E2 && this.exceptionMonitor.setRemoteVideoStats(E2, h2);
          });
        }
      }
      function hk(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function pk(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? hk(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : hk(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      class _k extends ig {
        constructor(e2, t2, i2, n2) {
          super(), nh(this, "spec", void 0), nh(this, "token", void 0), nh(this, "websocket", void 0), nh(this, "pingpongTimer", void 0), nh(this, "reconnectMode", "retry"), nh(this, "serviceMode", void 0), nh(this, "reqId", 0), nh(this, "commandReqId", 0), nh(this, "handleWebSocketOpen", () => {
            this.reconnectMode = "retry", this.startPingPong();
          }), nh(this, "handleWebSocketMessage", (e3) => {
            if (!e3.data)
              return;
            const t3 = JSON.parse(e3.data);
            t3.requestId ? this.emit("@".concat(t3.requestId, "-").concat(t3.sid), t3) : this.serviceMode === AI.INJECT ? this.emit(YI.INJECT_STREAM_STATUS, t3) : (rI.workerEvent(this.spec.sid, { actionType: "status", serverCode: t3.code, workerType: this.serviceMode === AI.TRANSCODE ? 1 : 2 }), this.emit(YI.PUBLISH_STREAM_STATUS, t3));
          }), this.spec = t2, this.token = e2, this.serviceMode = n2, this.websocket = new $v("live-streaming", i2), this.websocket.on(yI.CONNECTED, this.handleWebSocketOpen), this.websocket.on(yI.ON_MESSAGE, this.handleWebSocketMessage), this.websocket.on(yI.REQUEST_NEW_URLS, (e3, t3) => {
            fg(this, YI.REQUEST_NEW_ADDRESS).then(e3).catch(t3);
          }), this.websocket.on(yI.RECONNECTING, () => {
            this.websocket.reconnectMode = this.reconnectMode;
          });
        }
        init(e2) {
          return this.websocket.init(e2);
        }
        async request(e2, t2, i2, n2) {
          this.reqId += 1, "request" === e2 && (this.commandReqId += 1);
          const s2 = this.commandReqId, r2 = this.reqId;
          if (!r2 || !this.websocket)
            throw new VI(xT.UNEXPECTED_ERROR);
          const o2 = pk({ command: e2, sdkVersion: "4.20.0" === yC ? "0.0.1" : yC, seq: r2, requestId: r2, allocate: i2, cname: this.spec.cname, appId: this.spec.appId, sid: this.spec.sid, uid: this.spec.uid.toString(), ts: Math.floor(Date.now() / 1e3) }, t2);
          if ("closed" === this.websocket.state)
            throw new VI(xT.WS_DISCONNECT);
          const a2 = () => new tT((e3, t3) => {
            this.websocket.once(yI.CLOSED, () => t3(new VI(xT.WS_ABORT))), this.websocket.once(yI.CONNECTED, e3);
          });
          "connected" !== this.websocket.state && await a2(), o2.clientRequest && (o2.clientRequest.workerToken = this.token);
          const c2 = new tT((e3, t3) => {
            const i3 = () => {
              t3(new VI(xT.WS_ABORT));
            };
            this.websocket.once(yI.RECONNECTING, i3), this.websocket.once(yI.CLOSED, i3), this.once("@".concat(r2, "-").concat(this.spec.sid), (t4) => {
              e3(t4);
            });
          });
          n2 && rI.workerEvent(this.spec.sid, pk(pk({}, n2), {}, { requestId: s2, actionType: "request", payload: JSON.stringify(t2.clientRequest), serverCode: 0, code: 0 }));
          const d2 = Date.now();
          this.websocket.sendMessage(o2);
          let l2 = null;
          try {
            l2 = await c2;
          } catch (n3) {
            if ("closed" === this.websocket.state)
              throw n3;
            return await a2(), await this.request(e2, t2, i2);
          }
          return n2 && rI.workerEvent(this.spec.sid, pk(pk({}, n2), {}, { requestId: s2, actionType: "response", payload: JSON.stringify(l2.serverResponse), serverCode: l2.code, success: 200 === l2.code, responseTime: Date.now() - d2 })), 200 !== l2.code && this.handleResponseError(l2), l2;
        }
        tryNextAddress() {
          this.reconnectMode = "tryNext", this.websocket.reconnect("tryNext");
        }
        close() {
          const e2 = "4.20.0" === yC ? "0.0.1" : yC;
          this.reqId += 1, "connected" === this.websocket.state ? (this.websocket.sendMessage({ command: "request", appId: this.spec.appId, cname: this.spec.cname, uid: this.spec.uid.toString(), sdkVersion: e2, sid: this.spec.sid, seq: this.reqId, ts: Math.floor(Date.now() / 1e3), requestId: this.reqId, clientRequest: { command: "DestroyWorker" } }), this.websocket.close(false, true)) : this.websocket.close(false), this.pingpongTimer && (window.clearInterval(this.pingpongTimer), this.pingpongTimer = void 0);
        }
        handleResponseError(e2) {
          switch (e2.code) {
            case JI.LIVE_STREAM_RESPONSE_ALREADY_EXISTS_STREAM:
              return void YC.warning("live stream response already exists stream");
            case JI.LIVE_STREAM_RESPONSE_TRANSCODING_PARAMETER_ERROR:
            case JI.LIVE_STREAM_RESPONSE_BAD_STREAM:
            case JI.LIVE_STREAM_RESPONSE_WM_PARAMETER_ERROR:
              return new VI(xT.LIVE_STREAMING_INVALID_ARGUMENT, "", { code: e2.code }).throw();
            case JI.LIVE_STREAM_RESPONSE_WM_WORKER_NOT_EXIST:
              if ("UnpublishStream" === e2.serverResponse.command || "UninjectStream" === e2.serverResponse.command)
                return;
              throw new VI(xT.LIVE_STREAMING_INTERNAL_SERVER_ERROR, "live stream response wm worker not exist", { retry: true });
            case JI.LIVE_STREAM_RESPONSE_NOT_AUTHORIZED:
              return new VI(xT.LIVE_STREAMING_PUBLISH_STREAM_NOT_AUTHORIZED, "", { code: e2.code }).throw();
            case JI.LIVE_STREAM_RESPONSE_FAILED_LOAD_IMAGE: {
              const t2 = new VI(xT.LIVE_STREAMING_WARN_FAILED_LOAD_IMAGE);
              return this.emit(YI.WARNING, t2, e2.serverResponse.url);
            }
            case JI.LIVE_STREAM_RESPONSE_REQUEST_TOO_OFTEN: {
              const t2 = new VI(xT.LIVE_STREAMING_WARN_FREQUENT_REQUEST);
              return this.emit(YI.WARNING, t2, e2.serverResponse.url);
            }
            case JI.LIVE_STREAM_RESPONSE_NOT_FOUND_PUBLISH:
              throw new VI(xT.LIVE_STREAMING_INTERNAL_SERVER_ERROR, "live stream response wm worker not exist", { retry: true });
            case JI.LIVE_STREAM_RESPONSE_NOT_SUPPORTED:
              return new VI(xT.LIVE_STREAMING_TRANSCODING_NOT_SUPPORTED, "", { code: e2.code }).throw();
            case JI.LIVE_STREAM_RESPONSE_MAX_STREAM_NUM: {
              const t2 = new VI(xT.LIVE_STREAMING_WARN_STREAM_NUM_REACH_LIMIT);
              return this.emit(YI.WARNING, t2, e2.serverResponse.url);
            }
            case JI.LIVE_STREAM_RESPONSE_INTERNAL_SERVER_ERROR:
              return new VI(xT.LIVE_STREAMING_INTERNAL_SERVER_ERROR, "", { code: e2.code }).throw();
            case JI.LIVE_STREAM_RESPONSE_RESOURCE_LIMIT:
              throw new VI(xT.LIVE_STREAMING_INTERNAL_SERVER_ERROR, "live stream resource limit", { retry: true, changeAddress: true });
            case JI.LIVE_STREAM_RESPONSE_WORKER_LOST:
            case JI.LIVE_STREAM_RESPONSE_WORKER_QUIT:
              if ("UnpublishStream" === e2.serverResponse.command || "UninjectStream" === e2.serverResponse.command)
                return;
              throw new VI(xT.LIVE_STREAMING_INTERNAL_SERVER_ERROR, "error fail send message", { retry: true, changeAddress: true });
            case JI.ERROR_FAIL_SEND_MESSAGE:
              if ("UnpublishStream" === e2.serverResponse.command || "UninjectStream" === e2.serverResponse.command)
                return;
              if ("UpdateTranscoding" === e2.serverResponse.command || "ControlStream" === e2.serverResponse.command)
                return new VI(xT.LIVE_STREAMING_INTERNAL_SERVER_ERROR, "error fail send message", { code: e2.code }).throw();
              throw new VI(xT.LIVE_STREAMING_INTERNAL_SERVER_ERROR, "error fail send message", { retry: true, changeAddress: true });
            case JI.PUBLISH_STREAM_STATUS_ERROR_PUBLISH_BROKEN:
            case JI.PUBLISH_STREAM_STATUS_ERROR_RTMP_CONNECT:
            case JI.PUBLISH_STREAM_STATUS_ERROR_RTMP_HANDSHAKE:
            case JI.PUBLISH_STREAM_STATUS_ERROR_RTMP_PUBLISH:
              return new VI(xT.LIVE_STREAMING_CDN_ERROR, "", { code: e2.code }).throw();
          }
        }
        startPingPong() {
          this.pingpongTimer && window.clearInterval(this.pingpongTimer), this.pingpongTimer = window.setInterval(() => {
            "connected" === this.websocket.state && this.request("ping", {}).catch(Fg);
          }, 6e3);
        }
      }
      function Ek(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function mk(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? Ek(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : Ek(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      class fk extends ig {
        constructor(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Jg, i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : Jg;
          super(), nh(this, "onLiveStreamWarning", void 0), nh(this, "onLiveStreamError", void 0), nh(this, "onInjectStatusChange", void 0), nh(this, "spec", void 0), nh(this, "retryTimeout", 1e4), nh(this, "connection", void 0), nh(this, "httpRetryConfig", void 0), nh(this, "wsRetryConfig", void 0), nh(this, "streamingTasks", /* @__PURE__ */ new Map()), nh(this, "isStartingStreamingTask", false), nh(this, "taskMutex", new Yg("live-streaming")), nh(this, "cancelToken", EC.CancelToken.source()), nh(this, "transcodingConfig", void 0), nh(this, "injectConfig", mk({}, KI)), nh(this, "injectLoopTimes", 0), nh(this, "uapResponse", void 0), nh(this, "lastTaskId", 1), nh(this, "statusError", /* @__PURE__ */ new Map()), this.spec = e2, this.httpRetryConfig = i2, this.wsRetryConfig = t2;
        }
        async setTranscodingConfig(e2) {
          const t2 = mk(mk({}, HI), e2);
          66 !== t2.videoCodecProfile && 77 !== t2.videoCodecProfile && 100 !== t2.videoCodecProfile && (YC.debug("[".concat(this.spec.clientId, "] set transcoding config, fix video codec profile: ").concat(t2.videoCodecProfile, " -> 100")), t2.videoCodecProfile = 100), t2.transcodingUsers || (t2.transcodingUsers = t2.userConfigs), t2.transcodingUsers && (t2.transcodingUsers = t2.transcodingUsers.map((e3) => mk(mk(mk({}, jI), e3), {}, { zOrder: e3.zOrder ? e3.zOrder + 1 : 1 }))), function(e3) {
            KT(e3.width) || jT(e3.width, "config.width", 0, 1e4), KT(e3.height) || jT(e3.height, "config.height", 0, 1e4), KT(e3.videoBitrate) || jT(e3.videoBitrate, "config.videoBitrate", 1, 1e6), KT(e3.videoFrameRate) || jT(e3.videoFrameRate, "config.videoFrameRate"), KT(e3.lowLatency) || FT(e3.lowLatency, "config.lowLatency"), KT(e3.audioSampleRate) || BT(e3.audioSampleRate, "config.audioSampleRate", [32e3, 44100, 48e3]), KT(e3.audioBitrate) || jT(e3.audioBitrate, "config.audioBitrate", 1, 128), KT(e3.audioChannels) || BT(e3.audioChannels, "config.audioChannels", [1, 2, 3, 4, 5]), KT(e3.videoGop) || jT(e3.videoGop, "config.videoGop"), KT(e3.videoCodecProfile) || BT(e3.videoCodecProfile, "config.videoCodecProfile", [66, 77, 100]), KT(e3.userCount) || jT(e3.userCount, "config.userCount", 0, 17), KT(e3.backgroundColor) || jT(e3.backgroundColor, "config.backgroundColor", 0, 16777215), KT(e3.userConfigExtraInfo) || WT(e3.userConfigExtraInfo, "config.userConfigExtraInfo", 0, 4096, false), e3.transcodingUsers && !KT(e3.transcodingUsers) && (HT(e3.transcodingUsers, "config.transcodingUsers"), e3.transcodingUsers.forEach((e4, t3) => {
              BI(e4.uid), KT(e4.x) || jT(e4.x, "transcodingUser[".concat(t3, "].x"), 0, 1e4), KT(e4.y) || jT(e4.y, "transcodingUser[".concat(t3, "].y"), 0, 1e4), KT(e4.width) || jT(e4.width, "transcodingUser[".concat(t3, "].width"), 0, 1e4), KT(e4.height) || jT(e4.height, "transcodingUser[".concat(t3, "].height"), 0, 1e4), KT(e4.zOrder) || jT(e4.zOrder - 1, "transcodingUser[".concat(t3, "].zOrder"), 0, 100), KT(e4.alpha) || jT(e4.alpha, "transcodingUser[".concat(t3, "].alpha"), 0, 1, false);
            })), KT(e3.watermark) || WI(e3.watermark, "watermark"), KT(e3.backgroundImage) || WI(e3.backgroundImage, "backgroundImage"), e3.images && !KT(e3.images) && (HT(e3.images, "config.images"), e3.images.forEach((e4, t3) => {
              WI(e4, "images[".concat(t3, "]"));
            }));
          }(t2);
          const i2 = [];
          t2.images && i2.push(...t2.images.map((e3) => mk(mk(mk({}, GI), e3), {}, { zOrder: 255 }))), t2.backgroundImage && (i2.push(mk(mk(mk({}, GI), t2.backgroundImage), {}, { zOrder: 0 })), delete t2.backgroundImage), t2.watermark && (i2.push(mk(mk(mk({}, GI), t2.watermark), {}, { zOrder: 255 })), delete t2.watermark), t2.images = i2, t2.transcodingUsers && (t2.userConfigs = t2.transcodingUsers.map((e3) => mk({}, e3)), t2.userCount = t2.transcodingUsers.length, delete t2.transcodingUsers);
          const n2 = (t2.userConfigs || []).map((e3) => "number" == typeof e3.uid ? tT.resolve(e3.uid) : TA(e3.uid, this.spec, this.cancelToken.token, this.httpRetryConfig));
          if ((await tT.all(n2)).forEach((e3, i3) => {
            t2.userConfigs && t2.userConfigs[i3] && (t2.userConfigs[i3].uid = e3);
          }), this.transcodingConfig = t2, this.connection)
            try {
              var s2;
              const e3 = await this.connection.request("request", { clientRequest: { command: "UpdateTranscoding", transcodingConfig: this.transcodingConfig } }, false, { command: "UpdateTranscoding", workerType: 1, requestByUser: true, tid: Array.from(MI(s2 = this.streamingTasks).call(s2)).map((e4) => e4.taskId).join("#") });
              YC.debug("[".concat(this.spec.clientId, "] update live transcoding config success, code: ").concat(e3.code, ", config:"), JSON.stringify(this.transcodingConfig));
            } catch (e3) {
              if (!e3.data || !e3.data.retry)
                throw e3;
              e3.data.changeAddress && this.connection.tryNextAddress(), this.streamingTasks.forEach((t3) => {
                YC.warning("[".concat(this.spec.clientId, "] live streaming receive error"), e3.toString(), "try to republish", t3.url), this.startLiveStreamingTask(t3.url, t3.mode, e3).then(() => {
                  YC.debug("[".concat(this.spec.clientId, "] live streaming republish ").concat(t3.url, " success"));
                }).catch((e4) => {
                  YC.error("[".concat(this.spec.clientId, "] live streaming republish failed"), t3.url, e4.toString()), this.onLiveStreamError && this.onLiveStreamError(t3.url, e4);
                });
              });
            }
        }
        setInjectStreamConfig(e2, t2) {
          this.injectConfig = Object.assign({}, this.injectConfig, e2), this.injectLoopTimes = t2;
        }
        async startLiveStreamingTask(e2, t2, i2) {
          var n2;
          if (Array.from(MI(n2 = this.streamingTasks).call(n2)).find((e3) => e3.mode === AI.INJECT) && t2 === AI.INJECT)
            return new VI(xT.LIVE_STREAMING_TASK_CONFLICT, "inject stream over limit").throw();
          if (!this.transcodingConfig && t2 === AI.TRANSCODE)
            throw new VI(xT.INVALID_OPERATION, "[LiveStreaming] no transcoding config found, can not start transcoding streaming task");
          let s2 = { command: "PublishStream", ts: Date.now(), url: e2, uid: this.spec.uid.toString(), autoDestroyTime: 100, acceptImageTimeout: true };
          YC.debug("[".concat(this.spec.clientId, "] start live streaming ").concat(e2, ", mode: ").concat(t2));
          const r2 = await this.taskMutex.lock();
          if (!this.connection && i2)
            return void r2();
          if (this.streamingTasks.get(e2) && !i2)
            return r2(), new VI(xT.LIVE_STREAMING_TASK_CONFLICT).throw();
          try {
            this.connection || (this.connection = await this.connect(t2));
          } catch (e3) {
            throw r2(), e3;
          }
          switch (t2) {
            case AI.TRANSCODE:
              s2.transcodingConfig = mk({}, this.transcodingConfig);
              break;
            case AI.RAW:
              break;
            case AI.INJECT:
              s2 = { cname: this.spec.cname, command: "InjectStream", sid: this.spec.sid, transcodingConfig: this.injectConfig, ts: Date.now(), url: e2, loopTimes: this.injectLoopTimes };
          }
          this.uapResponse && this.uapResponse.vid && (s2.vid = this.uapResponse.vid), this.isStartingStreamingTask = true;
          const o2 = this.lastTaskId++;
          try {
            const n3 = new tT((t3, n4) => {
              Ug(this.retryTimeout).then(() => {
                if (i2)
                  return n4(i2);
                const t4 = this.statusError.get(e2);
                return t4 ? (this.statusError.delete(e2), n4(t4)) : void 0;
              });
            }), a2 = await tT.race([this.connection.request("request", { clientRequest: s2 }, true, { url: e2, command: "PublishStream", workerType: t2 === AI.TRANSCODE ? 1 : 2, requestByUser: !i2, tid: o2.toString() }), n3]);
            this.isStartingStreamingTask = false, YC.debug("[".concat(this.spec.clientId, "] live streaming started, code: ").concat(a2.code)), this.streamingTasks.set(e2, { clientRequest: s2, mode: t2, url: e2, taskId: o2 }), r2();
          } catch (n3) {
            if (r2(), this.isStartingStreamingTask = false, !n3.data || !n3.data.retry || i2)
              throw n3;
            return n3.data.changeAddress ? (this.connection.tryNextAddress(), await this.startLiveStreamingTask(e2, t2, n3)) : await this.startLiveStreamingTask(e2, t2, n3);
          }
        }
        stopLiveStreamingTask(e2) {
          return new tT((t2, i2) => {
            const n2 = this.streamingTasks.get(e2);
            if (!n2 || !this.connection)
              return new VI(xT.UNEXPECTED_ERROR, "can not find streaming task to stop").throw();
            const s2 = n2.mode;
            n2.abortTask = () => {
              YC.debug("[".concat(this.spec.clientId, "] stop live streaming success(worker exception)")), this.streamingTasks.delete(e2), t2();
            }, this.connection.request("request", { clientRequest: { command: s2 === AI.INJECT ? "UninjectStream" : "UnpublishStream", url: n2.url } }, false, { url: e2, command: "UnPublishStream", workerType: s2 === AI.TRANSCODE ? 1 : 2, requestByUser: true, tid: (this.lastTaskId++).toString() }).then((i3) => {
              YC.debug("[".concat(this.spec.clientId, "] stop live streaming success, code: ").concat(i3.code)), this.streamingTasks.delete(e2), 0 === this.streamingTasks.size && s2 !== AI.INJECT && (this.connection && this.connection.close(), this.connection = void 0), t2(), s2 === AI.INJECT && this.onInjectStatusChange && this.onInjectStatusChange(bI.INJECT_STREAM_STATUS_STOP_SUCCESS, this.spec.uid, e2);
            }).catch(i2);
          });
        }
        async controlInjectStream(e2, t2, i2, n2) {
          const s2 = this.streamingTasks.get(e2);
          if (!s2 || !this.connection || s2.mode !== AI.INJECT)
            throw new VI(xT.INVALID_OPERATION, "can not find inject stream task to control");
          return (await this.connection.request("request", { clientRequest: { command: "ControlStream", url: e2, control: t2, audioVolume: i2, position: n2 } })).serverResponse;
        }
        resetAllTask() {
          var e2;
          const t2 = Array.from(MI(e2 = this.streamingTasks).call(e2));
          this.terminate();
          for (const e3 of t2)
            this.startLiveStreamingTask(e3.url, e3.mode).catch((t3) => {
              this.onLiveStreamError && this.onLiveStreamError(e3.url, t3);
            });
        }
        terminate() {
          this.cancelToken && this.cancelToken.cancel(), this.streamingTasks = /* @__PURE__ */ new Map(), this.isStartingStreamingTask = false, this.statusError = /* @__PURE__ */ new Map(), this.cancelToken = EC.CancelToken.source(), this.uapResponse = void 0, this.connection && this.connection.close(), this.connection = void 0;
        }
        async connect(e2) {
          if (this.connection)
            throw new VI(xT.UNEXPECTED_ERROR, "live streaming connection has already connected");
          const t2 = await fg(this, qI.REQUEST_WORKER_MANAGER_LIST, e2);
          return this.uapResponse = t2, this.connection = new _k(t2.workerToken, this.spec, this.wsRetryConfig, e2), this.connection.on(YI.WARNING, (e3, t3) => this.onLiveStreamWarning && this.onLiveStreamWarning(t3, e3)), this.connection.on(YI.PUBLISH_STREAM_STATUS, (e3) => this.handlePublishStreamServer(e3)), this.connection.on(YI.INJECT_STREAM_STATUS, (e3) => this.handleInjectStreamServerStatus(e3)), this.connection.on(YI.REQUEST_NEW_ADDRESS, (t3, i2) => {
            if (!this.connection)
              return i2(new VI(xT.UNEXPECTED_ERROR, "can not get new live streaming address list"));
            fg(this, qI.REQUEST_WORKER_MANAGER_LIST, e2).then((e3) => {
              this.uapResponse = e3, t3(e3.addressList);
            }).catch(i2);
          }), await this.connection.init(t2.addressList), this.connection;
        }
        handlePublishStreamServer(e2) {
          const t2 = e2.serverStatus && e2.serverStatus.url || "empty_url", i2 = this.streamingTasks.get(t2), n2 = e2.reason;
          switch (e2.code) {
            case JI.PUBLISH_STREAM_STATUS_ERROR_PUBLISH_BROKEN:
            case JI.PUBLISH_STREAM_STATUS_ERROR_RTMP_CONNECT:
            case JI.PUBLISH_STREAM_STATUS_ERROR_RTMP_HANDSHAKE:
            case JI.PUBLISH_STREAM_STATUS_ERROR_RTMP_PUBLISH: {
              const n3 = new VI(xT.LIVE_STREAMING_CDN_ERROR, "", { code: e2.code });
              if (i2)
                return YC.error(n3.toString()), this.onLiveStreamError && this.onLiveStreamError(t2, n3);
              if (!this.isStartingStreamingTask)
                return;
              this.statusError.set(t2, n3);
            }
            case JI.LIVE_STREAM_RESPONSE_FAILED_LOAD_IMAGE: {
              const e3 = new VI(xT.LIVE_STREAMING_WARN_FAILED_LOAD_IMAGE, n2);
              return this.onLiveStreamWarning && this.onLiveStreamWarning(t2, e3);
            }
            case JI.LIVE_STREAM_RESPONSE_WORKER_LOST:
            case JI.LIVE_STREAM_RESPONSE_WORKER_QUIT: {
              var s2;
              if (!this.connection)
                return;
              this.connection.tryNextAddress();
              const t3 = Array.from(MI(s2 = this.streamingTasks).call(s2));
              for (const i3 of t3)
                i3.abortTask ? i3.abortTask() : (YC.warning("[".concat(this.spec.clientId, "] publish stream status code"), e2.code, "try to republish", i3.url), this.startLiveStreamingTask(i3.url, i3.mode, new VI(xT.LIVE_STREAMING_INTERNAL_SERVER_ERROR, "", { code: e2.code })).then(() => {
                  YC.debug("[".concat(this.spec.clientId, "] republish live stream success"), i3.url);
                }).catch((e3) => {
                  YC.error(e3.toString()), this.onLiveStreamError && this.onLiveStreamError(i3.url, e3);
                }));
              return;
            }
          }
        }
        handleInjectStreamServerStatus(e2) {
          const t2 = Number(e2.uid), i2 = e2.serverStatus && e2.serverStatus.url;
          switch (e2.code) {
            case 200:
              return void (this.onInjectStatusChange && this.onInjectStatusChange(bI.INJECT_STREAM_STATUS_START_SUCCESS, t2, i2));
            case 451:
              return this.onInjectStatusChange && this.onInjectStatusChange(bI.INJECT_STREAM_STATUS_START_ALREADY_EXISTS, t2, i2), void this.streamingTasks.delete(i2);
            case 453:
              return this.onInjectStatusChange && this.onInjectStatusChange(bI.INJECT_STREAM_STATUS_START_UNAUTHORIZED, t2, i2), void this.streamingTasks.delete(i2);
            case 470:
              return this.onInjectStatusChange && this.onInjectStatusChange(bI.INJECT_STREAM_STATUS_BROKEN, t2, i2), void this.streamingTasks.delete(i2);
            case 499:
              return this.onInjectStatusChange && this.onInjectStatusChange(bI.INJECT_STREAM_STATUS_START_TIMEOUT, t2, i2), void this.streamingTasks.delete(i2);
            default:
              return void YC.debug("inject stream server status", e2);
          }
        }
        hasUrl(e2) {
          return this.streamingTasks.has(e2);
        }
      }
      class Tk {
        constructor() {
          nh(this, "destChannelMediaInfos", /* @__PURE__ */ new Map()), nh(this, "srcChannelMediaInfo", void 0);
        }
        setSrcChannelInfo(e2) {
          ov(e2), this.srcChannelMediaInfo = e2;
        }
        addDestChannelInfo(e2) {
          ov(e2), this.destChannelMediaInfos.set(e2.channelName, e2);
        }
        removeDestChannelInfo(e2) {
          FI(e2), this.destChannelMediaInfos.delete(e2);
        }
        getSrcChannelMediaInfo() {
          return this.srcChannelMediaInfo;
        }
        getDestChannelMediaInfo() {
          return this.destChannelMediaInfos;
        }
      }
      function gk(e2) {
        if (!(e2 instanceof Tk)) {
          return new VI(xT.INVALID_PARAMS, "Config should be instance of [ChannelMediaRelayConfiguration]").throw();
        }
        const t2 = e2.getSrcChannelMediaInfo(), i2 = e2.getDestChannelMediaInfo();
        if (!t2) {
          return new VI(xT.INVALID_PARAMS, "srcChannelMediaInfo should not be empty").throw();
        }
        if (0 === i2.size) {
          return new VI(xT.INVALID_PARAMS, "destChannelMediaInfo should not be empty").throw();
        }
      }
      class Sk extends ig {
        constructor(e2, t2, i2) {
          super(), nh(this, "ws", void 0), nh(this, "requestId", 1), nh(this, "heartBeatTimer", void 0), nh(this, "joinInfo", void 0), nh(this, "clientId", void 0), nh(this, "onOpen", () => {
            this.emit("open"), this.startHeartBeatCheck();
          }), nh(this, "onClose", (e3) => {
            this.emit("close"), this.dispose();
          }), nh(this, "onMessage", (e3) => {
            const t3 = JSON.parse(e3.data);
            if (!t3 || "serverResponse" !== t3.command || !t3.requestId)
              return t3 && "serverStatus" === t3.command && t3.serverStatus && t3.serverStatus.command ? (this.emit("status", t3.serverStatus), void this.emit(t3.serverStatus.command, t3.serverStatus)) : void 0;
            this.emit("req_".concat(t3.requestId), t3);
          }), this.joinInfo = e2, this.clientId = t2, this.ws = new $v("cross-channel-".concat(this.clientId), i2), this.ws.on(yI.RECONNECTING, () => {
            this.ws.reconnectMode = "retry", this.emit("reconnecting");
          }), this.ws.on(yI.CONNECTED, this.onOpen), this.ws.on(yI.ON_MESSAGE, this.onMessage), this.ws.on(yI.CLOSED, this.onClose);
        }
        isConnect() {
          return "connected" === this.ws.state;
        }
        sendMessage(e2) {
          const t2 = this.requestId++;
          return e2.requestId = t2, e2.seq = t2, this.ws.sendMessage(e2), t2;
        }
        waitStatus(e2) {
          return new tT((t2, i2) => {
            const n2 = window.setTimeout(() => {
              i2(new VI(xT.TIMEOUT, "wait status timeout, status: ".concat(e2)));
            }, 5e3);
            this.once(e2, (s2) => {
              window.clearTimeout(n2), s2.state && 0 !== s2.state ? i2(new VI(xT.CROSS_CHANNEL_WAIT_STATUS_ERROR, "wait status error, status: ".concat(e2))) : t2(void 0);
            }), this.once("dispose", () => {
              window.clearTimeout(n2), i2(new VI(xT.WS_ABORT));
            });
          });
        }
        async request(e2) {
          if ("closed" === this.ws.state)
            throw new VI(xT.WS_DISCONNECT);
          const t2 = () => new tT((e3, t3) => {
            this.ws.once(yI.CLOSED, () => t3(new VI(xT.WS_ABORT))), this.ws.once(yI.CONNECTED, e3);
          });
          "connected" !== this.ws.state && await t2();
          const i2 = this.sendMessage(e2), n2 = new tT((e3, t3) => {
            const n3 = () => {
              t3(new VI(xT.WS_ABORT));
            };
            this.ws.once(yI.RECONNECTING, n3), this.ws.once(yI.CLOSED, n3), this.once("req_".concat(i2), e3), Ug(3e3).then(() => {
              this.removeAllListeners("req_".concat(i2)), this.ws.off(yI.RECONNECTING, n3), this.ws.off(yI.CLOSED, n3), t3(new VI(xT.TIMEOUT, "cross channel ws request timeout"));
            });
          }), s2 = await n2;
          if (!s2 || 200 !== s2.code)
            throw new VI(xT.CROSS_CHANNEL_SERVER_ERROR_RESPONSE, "response: ".concat(JSON.stringify(s2)));
          return s2;
        }
        async connect(e2) {
          this.ws.removeAllListeners(yI.REQUEST_NEW_URLS), this.ws.on(yI.REQUEST_NEW_URLS, (t2) => {
            t2(e2);
          }), await this.ws.init(e2);
        }
        dispose() {
          this.clearHeartBeatCheck(), this.emit("dispose"), this.removeAllListeners(), this.ws.close();
        }
        sendPing(e2) {
          const t2 = this.requestId++;
          return e2.requestId = t2, this.ws.sendMessage(e2), t2;
        }
        startHeartBeatCheck() {
          this.heartBeatTimer && window.clearInterval(this.heartBeatTimer), this.heartBeatTimer = window.setInterval(() => {
            this.sendPing({ command: "ping", appId: this.joinInfo.appId, cname: this.joinInfo.cname, uid: this.joinInfo.uid.toString(), sid: this.joinInfo.sid, ts: +/* @__PURE__ */ new Date(), requestId: 0 });
          }, 3e3);
        }
        clearHeartBeatCheck() {
          window.clearInterval(this.heartBeatTimer), this.heartBeatTimer = void 0;
        }
      }
      class Rk extends ig {
        set state(e2) {
          e2 !== this._state && (e2 !== ZI.RELAY_STATE_FAILURE && (this.errorCode = $I.RELAY_OK), this.emit("state", e2, this.errorCode), this._state = e2);
        }
        get state() {
          return this._state;
        }
        constructor(e2, t2, i2, n2, s2) {
          super(), nh(this, "joinInfo", void 0), nh(this, "sid", void 0), nh(this, "clientId", void 0), nh(this, "cancelToken", EC.CancelToken.source()), nh(this, "workerToken", void 0), nh(this, "requestId", 0), nh(this, "signal", void 0), nh(this, "prevChannelMediaConfig", void 0), nh(this, "httpRetryConfig", void 0), nh(this, "_resolution", void 0), nh(this, "_state", ZI.RELAY_STATE_IDLE), nh(this, "errorCode", $I.RELAY_OK), nh(this, "onStatus", (e3) => {
            YC.debug("[".concat(this.clientId, "] ChannelMediaStatus: ").concat(JSON.stringify(e3))), e3 && e3.command && ("onAudioPacketReceived" === e3.command && this.emit("event", QI.PACKET_RECEIVED_AUDIO_FROM_SRC), "onVideoPacketReceived" === e3.command && this.emit("event", QI.PACKET_RECEIVED_VIDEO_FROM_SRC), "onSrcTokenPrivilegeDidExpire" === e3.command && (this.errorCode = $I.SRC_TOKEN_EXPIRED, this.state = ZI.RELAY_STATE_FAILURE), "onDestTokenPrivilegeDidExpire" === e3.command && (this.errorCode = $I.DEST_TOKEN_EXPIRED, this.state = ZI.RELAY_STATE_FAILURE));
          }), nh(this, "onReconnect", async () => {
            YC.debug("[".concat(this.clientId, "] ChannelMediaSocket disconnect, reconnecting")), this.emit("event", QI.NETWORK_DISCONNECTED), this.state = ZI.RELAY_STATE_IDLE, this.prevChannelMediaConfig && this.sendStartRelayMessage(this.prevChannelMediaConfig).catch((e3) => {
              this.state !== ZI.RELAY_STATE_IDLE && (YC.error("auto restart channel media relay failed", e3.toString()), this.errorCode = $I.SERVER_CONNECTION_LOST, this.state = ZI.RELAY_STATE_FAILURE);
            });
          }), this.joinInfo = e2, this.clientId = t2, this.sid = Vg(), this.signal = new Sk(this.joinInfo, this.clientId, i2), this.httpRetryConfig = n2, this._resolution = s2;
        }
        async startChannelMediaRelay(e2) {
          if (this.state !== ZI.RELAY_STATE_IDLE)
            throw new VI(xT.INVALID_OPERATION);
          this.state = ZI.RELAY_STATE_CONNECTING, await this.connect(), YC.debug("[".concat(this.clientId, "] startChannelMediaRelay: connect success"));
          try {
            await this.sendStartRelayMessage(e2);
          } catch (e3) {
            if (e3.data && e3.data.serverResponse && "SetSourceChannel" === e3.data.serverResponse.command)
              throw new VI(xT.CROSS_CHANNEL_FAILED_JOIN_SRC);
            if (e3.data && e3.data.serverResponse && "SetDestChannelStatus" === e3.serverResponse.command)
              throw new VI(xT.CROSS_CHANNEL_FAILED_JOIN_DEST);
            if (e3.data && e3.data.serverResponse && "StartPacketTransfer" === e3.serverResponse.command)
              throw new VI(xT.CROSS_CHANNEL_FAILED_PACKET_SENT_TO_DEST);
            throw e3;
          }
          this.prevChannelMediaConfig = e2;
        }
        async updateChannelMediaRelay(e2) {
          if (this.state !== ZI.RELAY_STATE_RUNNING)
            throw new VI(xT.INVALID_OPERATION);
          await this.sendUpdateMessage(e2), this.prevChannelMediaConfig = e2;
        }
        async setVideoProfile(e2) {
          if (this._resolution = e2, this.state !== ZI.RELAY_STATE_RUNNING)
            throw new VI(xT.INVALID_OPERATION);
          const t2 = this.genMessage(XI.SetVideoProfile);
          await this.signal.request(t2), YC.debug("[".concat(this.clientId, "] startChannelMediaRelay: setVideoProfile success"));
        }
        async stopChannelMediaRelay() {
          await this.sendStopRelayMessage(), YC.debug("[".concat(this.clientId, "] stopChannelMediaRelay: send stop message success")), this.state = ZI.RELAY_STATE_IDLE, this.dispose();
        }
        dispose() {
          YC.debug("[".concat(this.clientId, "] disposeChannelMediaRelay")), this.cancelToken.cancel(), this.cancelToken = EC.CancelToken.source(), this.state = ZI.RELAY_STATE_IDLE, this.emit("dispose"), this.signal.dispose(), this.prevChannelMediaConfig = void 0;
        }
        async connect() {
          const e2 = await CA(this.joinInfo, this.cancelToken.token, this.httpRetryConfig);
          this.workerToken = e2.workerToken, await this.signal.connect(e2.addressList), this.emit("event", QI.NETWORK_CONNECTED), this.signal.on("status", this.onStatus), this.signal.on("reconnecting", this.onReconnect);
        }
        async sendStartRelayMessage(e2) {
          const t2 = this.genMessage(XI.StopPacketTransfer);
          await this.signal.request(t2), await this.signal.waitStatus("Normal Quit"), YC.debug("[".concat(this.clientId, "] startChannelMediaRelay: StopPacketTransfer success"));
          const i2 = this.genMessage(XI.SetSdkProfile, e2);
          await this.signal.request(i2), YC.debug("[".concat(this.clientId, "] startChannelMediaRelay: SetSdkProfile success"));
          const n2 = this.genMessage(XI.SetSourceChannel, e2);
          await this.signal.request(n2), await this.signal.waitStatus("SetSourceChannelStatus"), this.emit("event", QI.PACKET_JOINED_SRC_CHANNEL), YC.debug("[".concat(this.clientId, "] startChannelMediaRelay: SetSourceChannel success"));
          const s2 = this.genMessage(XI.SetSourceUserId, e2);
          await this.signal.request(s2), YC.debug("[".concat(this.clientId, "] startChannelMediaRelay: SetSourceUserId success"));
          const r2 = this.genMessage(XI.SetDestChannel, e2);
          await this.signal.request(r2), await this.signal.waitStatus("SetDestChannelStatus"), this.emit("event", QI.PACKET_JOINED_DEST_CHANNEL), YC.debug("[".concat(this.clientId, "] startChannelMediaRelay: SetDestChannel success"));
          const o2 = this.genMessage(XI.StartPacketTransfer, e2);
          await this.signal.request(o2), this.emit("event", QI.PACKET_SENT_TO_DEST_CHANNEL), this.state = ZI.RELAY_STATE_RUNNING, YC.debug("[".concat(this.clientId, "] startChannelMediaRelay: StartPacketTransfer success")), this.setVideoProfile(this._resolution);
        }
        async sendUpdateMessage(e2) {
          const t2 = this.genMessage(XI.UpdateDestChannel, e2);
          await this.signal.request(t2), this.emit("event", QI.PACKET_UPDATE_DEST_CHANNEL), YC.debug("[".concat(this.clientId, "] sendUpdateMessage: UpdateDestChannel success"));
        }
        async sendStopRelayMessage() {
          const e2 = this.genMessage(XI.StopPacketTransfer);
          await this.signal.request(e2), YC.debug("[".concat(this.clientId, "] sendStopRelayMessage: StopPacketTransfer success"));
        }
        genMessage(e2, t2) {
          const i2 = [], n2 = [], s2 = [];
          this.requestId += 1;
          const r2 = { appId: this.joinInfo.appId, cname: this.joinInfo.cname, uid: this.joinInfo.uid.toString(), sdkVersion: yC, sid: this.sid, ts: Date.now(), requestId: this.requestId, seq: this.requestId, allocate: true, clientRequest: {} };
          "4.20.0" === r2.sdkVersion && (r2.sdkVersion = "0.0.1");
          let o2 = null, a2 = null;
          switch (e2) {
            case XI.SetSdkProfile:
              return r2.clientRequest = { command: "SetSdkProfile", type: "multi_channel" }, r2;
            case XI.SetSourceChannel:
              if (a2 = t2 && t2.getSrcChannelMediaInfo(), !a2)
                throw new VI(xT.UNEXPECTED_ERROR, "can not find source config");
              return r2.clientRequest = { command: "SetSourceChannel", uid: "0", channelName: a2.channelName, token: a2.token || this.joinInfo.appId }, r2;
            case XI.SetSourceUserId:
              if (a2 = t2 && t2.getSrcChannelMediaInfo(), !a2)
                throw new VI(xT.UNEXPECTED_ERROR, "can not find source config");
              return r2.clientRequest = { command: "SetSourceUserId", uid: a2.uid + "" }, r2;
            case XI.SetDestChannel:
              if (o2 = t2 && t2.getDestChannelMediaInfo(), !o2)
                throw new VI(xT.UNEXPECTED_ERROR, "can not find dest config");
              return o2.forEach((e3) => {
                i2.push(e3.channelName), n2.push(e3.uid + ""), s2.push(e3.token || this.joinInfo.appId);
              }), r2.clientRequest = { command: "SetDestChannel", channelName: i2, uid: n2, token: s2 }, r2;
            case XI.StartPacketTransfer:
              return r2.clientRequest = { command: "StartPacketTransfer" }, r2;
            case XI.Reconnect:
              return r2.clientRequest = { command: "Reconnect" }, r2;
            case XI.StopPacketTransfer:
              return r2.clientRequest = { command: "StopPacketTransfer" }, r2;
            case XI.UpdateDestChannel:
              if (o2 = t2 && t2.getDestChannelMediaInfo(), !o2)
                throw new VI(xT.UNEXPECTED_ERROR, "can not find dest config");
              return o2.forEach((e3) => {
                i2.push(e3.channelName), n2.push(e3.uid + ""), s2.push(e3.token || this.joinInfo.appId);
              }), r2.clientRequest = { command: "UpdateDestChannel", channelName: i2, uid: n2, token: s2 }, r2;
            case XI.SetVideoProfile:
              r2.clientRequest = { command: "SetVideoProfile", width: this._resolution.width, height: this._resolution.height };
          }
          return r2;
        }
      }
      function Ck(e2) {
        var t2 = {}, i2 = false;
        function n2(t3, n3) {
          return i2 = true, { done: false, value: new gP(n3 = new yP(function(i3) {
            i3(e2[t3](n3));
          }), 1) };
        }
        return t2[void 0 !== Uu && $u || "@@iterator"] = function() {
          return this;
        }, t2.next = function(e3) {
          return i2 ? (i2 = false, e3) : n2("next", e3);
        }, "function" == typeof e2.throw && (t2.throw = function(e3) {
          if (i2)
            throw i2 = false, e3;
          return n2("throw", e3);
        }), "function" == typeof e2.return && (t2.return = function(e3) {
          return i2 ? (i2 = false, e3) : n2("return", e3);
        }), t2;
      }
      var Ik = i(AP);
      function vk(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function yk(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? vk(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : vk(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      function Ak(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function bk(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? Ak(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : Ak(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      class wk extends Mv {
        get peerConnectionState() {
          return this.peerConnection.connectionState;
        }
        get iceConnectionState() {
          return this.peerConnection.iceConnectionState;
        }
        get currentLocalDescription() {
          return this.peerConnection.currentLocalDescription;
        }
        get currentRemoteDescription() {
          return this.peerConnection.currentRemoteDescription;
        }
        get localCodecs() {
          return [...new Set(this.localCapabilities && this.localCapabilities.videoCodecs.map((e2) => e2.rtpMap && e2.rtpMap.encodingName.toLowerCase() || "").filter((e2) => {
            var t2;
            return bn(t2 = Object.keys(xC)).call(t2, e2);
          }))];
        }
        constructor(e2, t2) {
          super(e2, t2), nh(this, "store", void 0), nh(this, "peerConnection", void 0), nh(this, "remoteSDP", void 0), nh(this, "initialOffer", void 0), nh(this, "statsFilter", void 0), nh(this, "useRTX", false), nh(this, "localCapabilities", void 0), nh(this, "localCandidateCount", 0), nh(this, "allCandidatesReceived", false), nh(this, "establishPromise", void 0), nh(this, "mutex", new Yg("P2PConnection-mutex")), this.store = t2, this.peerConnection = new RTCPeerConnection(wk.resolvePCConfiguration(e2), { optional: [{ googDscp: true }] }), this.statsFilter = hL(this.peerConnection, DC("STATS_UPDATE_INTERVAL"), void 0, RT() ? 1200 : void 0), this.bindPCEvents(), this.bindStatsEvents(), this.store.p2pId = this.store.p2pId + 1, this.establishPromise = this.establish();
        }
        async establish() {
          try {
            const e2 = await this.peerConnection.createOffer({ offerToReceiveAudio: true, offerToReceiveVideo: true });
            if (!e2.sdp)
              throw new Error("Cannot get initialOffer.sdp when trying to establish PeerConnection.");
            const t2 = mL(e2.sdp), i2 = EL(e2.sdp, { filterRTX: !this.useRTX, filterVideoFec: DC("FILTER_VIDEO_FEC"), filterAudioFec: DC("FILTER_AUDIO_FEC"), filterAudioCodec: ["opus"] });
            return this.localCapabilities = i2, this.initialOffer = e2, bk(bk({}, t2), {}, { rtpCapabilities: { send: { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] }, recv: { audioCodecs: [], audioExtensions: [], videoCodecs: [], videoExtensions: [] }, sendrecv: i2 }, offerSDP: e2.sdp });
          } catch (e2) {
            throw new VT(xT.GET_LOCAL_CONNECTION_PARAMS_FAILED, e2.toString());
          }
        }
        async connect(e2, t2, i2, n2, s2, r2) {
          try {
            if (!this.initialOffer)
              throw new Error("Cannot establish P2PConnection without initial offer.");
            this.remoteSDP = new class {
              constructor(e3) {
                nh(this, "sessionDesc", void 0), nh(this, "localCapabilities", void 0), nh(this, "rtpCapabilities", void 0), nh(this, "candidates", void 0), nh(this, "iceParameters", void 0), nh(this, "dtlsParameters", void 0), nh(this, "setup", void 0), nh(this, "currentMidIndex", void 0), nh(this, "cname", void 0), e3 = bg(e3);
                const { remoteIceParameters: t3, remoteDtlsParameters: i3, candidates: n3, remoteRTPCapabilities: s3, remoteSetup: r3, localCapabilities: o3, sdkCodec: a2, cname: c2 } = e3, d2 = YP.parse("v=0\no=- 0 0 IN IP4 127.0.0.1\ns=AgoraGateway\nt=0 0\na=group:BUNDLE audio video\na=msid-semantic: WMS\na=ice-lite\nm=audio 9 UDP/TLS/RTP/SAVPF 0\nc=IN IP4 127.0.0.1\na=rtcp:9 IN IP4 0.0.0.0\na=sendrecv\na=rtcp-mux\na=rtcp-rsize\na=mid:audio\nm=video 9 UDP/TLS/RTP/SAVPF 0\nc=IN IP4 127.0.0.1\na=rtcp:9 IN IP4 0.0.0.0\na=sendrecv\na=rtcp-mux\na=rtcp-rsize\na=mid:video\n");
                this.rtpCapabilities = s3, this.candidates = n3, this.iceParameters = t3, this.dtlsParameters = i3, this.setup = r3, this.localCapabilities = o3, this.cname = c2;
                for (let e4 = 0; e4 < d2.mediaDescriptions.length; e4++) {
                  const o4 = d2.mediaDescriptions[e4];
                  if (o4.attributes.iceUfrag = t3.iceUfrag, o4.attributes.icePwd = t3.icePwd, o4.attributes.fingerprints = i3.fingerprints, o4.attributes.candidates = n3, o4.attributes.setup = r3, "video" === o4.media.mediaType) {
                    o4.media.fmts = s3.videoCodecs.map((e6) => e6.payloadType.toString(10));
                    let e5 = s3.videoCodecs.filter((e6) => {
                      var t4, i4;
                      return null === (t4 = e6.rtpMap) || void 0 === t4 ? void 0 : bn(i4 = t4.encodingName.toLowerCase()).call(i4, a2);
                    });
                    0 === e5.length && (e5 = s3.videoCodecs), o4.attributes.payloads = e5, o4.attributes.extmaps = s3.videoExtensions;
                  }
                  "audio" === o4.media.mediaType && (o4.media.fmts = s3.audioCodecs.map((e5) => e5.payloadType.toString(10)), o4.attributes.payloads = s3.audioCodecs, o4.attributes.extmaps = s3.audioExtensions), d2.mediaDescriptions[e4] = this.mungMediaDesc(o4);
                }
                this.sessionDesc = d2, this.currentMidIndex = d2.mediaDescriptions.length - 1;
              }
              toString() {
                return YP.print(this.sessionDesc);
              }
              send(e3, t3, i3) {
                const { ssrcs: n3, ssrcGroups: s3 } = gL(t3, this.cname), r3 = this.sessionDesc.mediaDescriptions.find((t4) => e3 === hv.VIDEO ? "video" === t4.media.mediaType : "audio" === t4.media.mediaType), o3 = n3[0].attributes.label, a2 = n3[0].attributes.mslabel;
                return r3.attributes.ssrcs = r3.attributes.ssrcs.concat(n3), r3.attributes.ssrcGroups = r3.attributes.ssrcGroups.concat(s3), { id: o3, mslabel: a2 };
              }
              batchSend(e3) {
                return e3.map((e4) => {
                  let { kind: t3, ssrcMsg: i3 } = e4;
                  return this.send(t3, i3, void 0);
                });
              }
              stopSending(e3) {
                this.sessionDesc.mediaDescriptions.forEach((t3) => {
                  const i3 = [], n3 = [], s3 = [];
                  t3.attributes.ssrcs.forEach((t4) => {
                    bn(e3).call(e3, t4.attributes.label || "") ? s3.push(t4) : i3.push(t4);
                  }), t3.attributes.ssrcGroups.forEach((e4) => {
                    var t4;
                    bn(t4 = s3.map((e5) => e5.ssrcId)).call(t4, e4.ssrcIds[0]) || n3.push(e4);
                  }), t3.attributes.ssrcs = i3, t3.attributes.ssrcGroups = n3;
                });
              }
              mute(e3) {
                const t3 = this.sessionDesc.mediaDescriptions.find((t4) => t4.attributes.mid === e3);
                if (!t3)
                  throw new Error("mediaDescription not found with ".concat(e3, " in remote SDP when calling RemoteSDP.mute."));
                t3.attributes.direction = "inactive";
              }
              unmute(e3) {
                const t3 = this.sessionDesc.mediaDescriptions.find((t4) => t4.attributes.mid === e3);
                if (!t3)
                  throw new Error("mediaDescription not found with ".concat(e3, " in remote SDP when calling RemoteSDP.unmute."));
                t3.attributes.direction = "sendonly";
              }
              receive(e3, t3, i3) {
                e3.forEach((e4, t4) => {
                  const i4 = e4._mediaStreamTrack, n3 = this.sessionDesc.mediaDescriptions.findIndex((e5) => e5.attributes.mid === i4.kind), s3 = this.mungRecvMediaDsec(this.sessionDesc.mediaDescriptions[n3], e4);
                  this.sessionDesc.mediaDescriptions[n3] = s3;
                });
              }
              stopReceiving(e3) {
              }
              updateCandidates(e3) {
                e3 === pv.TCP ? this.candidates.forEach((e4) => {
                  -1 === this.candidates.findIndex((t3) => "tcp" === t3.transport && t3.connectionAddress === e4.connectionAddress && t3.port === e4.port) && this.candidates.push(yk(yk({}, e4), {}, { foundation: "tcpcandidate", priority: Number(e4.priority) - 1 + "", transport: "tcp", port: Number(e4.port) + 90 + "" }));
                }) : this.candidates = this.candidates.filter((e4) => "tcp" !== e4.transport);
                for (const e4 of this.sessionDesc.mediaDescriptions)
                  e4.attributes.candidates = this.candidates;
              }
              restartICE(e3) {
                e3 = bg(e3), this.iceParameters = e3, this.sessionDesc.mediaDescriptions.forEach((t3) => {
                  t3.attributes.iceUfrag = e3.iceUfrag, t3.attributes.icePwd = e3.icePwd;
                });
              }
              predictReceivingMids(e3) {
                const t3 = [];
                for (let i3 = 0; i3 < e3; i3++)
                  t3.push((this.currentMidIndex + i3 + 1).toString(10));
                return t3;
              }
              mungRecvMediaDsec(e3, t3) {
                const i3 = bg(e3);
                return SL(i3, t3), CL(i3, t3), i3;
              }
              updateRecvMedia(e3, t3) {
                const i3 = this.sessionDesc.mediaDescriptions.findIndex((t4) => t4.attributes.mid === e3);
                if (-1 !== i3) {
                  const e4 = this.mungRecvMediaDsec(this.sessionDesc.mediaDescriptions[i3], t3);
                  this.sessionDesc.mediaDescriptions[i3] = e4;
                }
              }
              bumpMid(e3) {
                this.currentMidIndex += e3;
              }
              updateTrackLabel(e3, t3, i3) {
                const n3 = this.sessionDesc.mediaDescriptions.find((t4) => e3 === hv.VIDEO ? "video" === t4.attributes.mid : "audio" === t4.attributes.mid);
                if (n3) {
                  const e4 = n3.attributes.ssrcs.find((e5) => e5.attributes.label === t3);
                  var s3;
                  e4 && (e4.attributes.label = i3, null === (s3 = e4.attributes.msid) || void 0 === s3 || s3.replace(t3, i3));
                }
              }
              mungMediaDesc(e3) {
                const t3 = bg(e3);
                return RL(t3), function(e4) {
                  const t4 = e4.attributes.extmaps.find((e5) => "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01" === e5.extensionName);
                  t4 && e4.attributes.extmaps.splice(e4.attributes.extmaps.indexOf(t4), 1), e4.attributes.payloads.forEach((e5) => {
                    const t5 = e5.rtcpFeedbacks.findIndex((e6) => "transport-cc" === e6.type);
                    -1 !== t5 && e5.rtcpFeedbacks.splice(t5, 1);
                  });
                }(t3), t3;
              }
              getSSRC(e3) {
                for (const t3 of this.sessionDesc.mediaDescriptions)
                  for (const i3 of t3.attributes.ssrcs)
                    if (i3.attributes.label === e3)
                      return [i3];
              }
            }({ remoteIceParameters: e2, remoteDtlsParameters: t2, candidates: i2, remoteRTPCapabilities: n2.send, remoteSetup: s2, localCapabilities: this.localCapabilities, sdkCodec: this.store.codec, cname: r2 });
            const o2 = this.remoteSDP.toString();
            await this.peerConnection.setLocalDescription(this.initialOffer), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: o2 });
          } catch (e3) {
            throw new VT(xT.EXCHANGE_SDP_FAILED, "P2PConnection.connect failed; ".concat(e3.toString()));
          }
        }
        async updateRemoteRTPCapabilities(e2, t2) {
          throw new VT(xT.NOT_SUPPORTED, "Planb mode does not support createDataChannels.");
        }
        send(e2, t2) {
          var i2 = this;
          return OP(function* () {
            const n2 = yield SP(i2.mutex.lock());
            try {
              if (!i2.remoteSDP)
                throw new Error("Cannot call P2PConnection.send before remote SDP created");
              const s2 = e2.map((e3) => i2.peerConnection.addTrack(e3._mediaStreamTrack)), r2 = yield SP(i2.peerConnection.createOffer()), o2 = YP.parse(r2.sdp), a2 = e2.map((e3) => {
                const t3 = e3._mediaStreamTrack, n3 = o2.mediaDescriptions.find((e4) => e4.attributes.mid === t3.kind);
                if (!n3)
                  throw new Error("Cannot extract ssrc from mediaDescription.");
                return function(e4, t4, i3) {
                  const n4 = e4.attributes.ssrcs.filter((e5) => e5.attributes.label === t4), s3 = e4.attributes.ssrcGroups;
                  if (0 === n4.length)
                    throw new Error("Cannot extract ssrc from plan-b SDP.");
                  if (s3 && n4.length > 1) {
                    const e5 = s3.find((e6) => -1 !== e6.ssrcIds.indexOf(n4[0].ssrcId));
                    return e5 ? [{ ssrcId: e5.ssrcIds[0], rtx: i3 ? e5.ssrcIds[1] : void 0 }] : [{ ssrcId: n4[0].ssrcId }];
                  }
                  return [{ ssrcId: n4[0].ssrcId }];
                }(n3, t3.id, i2.useRTX);
              });
              let c2;
              try {
                c2 = yield a2;
              } catch (e3) {
                throw s2.forEach((e4) => {
                  ST() && e4.replaceTrack(null), i2.peerConnection.removeTrack(e4);
                }), e3;
              }
              const d2 = i2.mungSendOfferSDP(r2.sdp, e2);
              i2.remoteSDP.receive(e2, t2, c2);
              const l2 = i2.remoteSDP.toString();
              return yield SP(i2.peerConnection.setLocalDescription({ type: "offer", sdp: d2 })), yield SP(i2.applySendEncodings(s2, e2)), yield SP(i2.peerConnection.setRemoteDescription({ type: "answer", sdp: l2 })), e2.map((e3, t3) => {
                const i3 = e3._mediaStreamTrack.id;
                return { localSSRC: a2[t3], id: i3 };
              });
            } catch (e3) {
              throw new VT(xT.EXCHANGE_SDP_FAILED, "P2PConnection.send failed; ".concat(e3.toString()));
            } finally {
              n2();
            }
          })();
        }
        async stopSending(e2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.stopSending before remote SDP created");
            const t2 = this.peerConnection.getSenders().filter((t3) => {
              var i3;
              return -1 !== e2.indexOf((null === (i3 = t3.track) || void 0 === i3 ? void 0 : i3.id) || "");
            });
            if (t2.length !== e2.length)
              throw new Error("Transceivers' length doesn't match mids' length when trying to call P2PConnection.stopSending.");
            t2.map((e3) => {
              ST() && e3.replaceTrack(null), this.peerConnection.removeTrack(e3);
            });
            const i2 = await this.peerConnection.createOffer();
            await this.peerConnection.setLocalDescription(i2), this.remoteSDP.stopReceiving(e2);
            const n2 = this.remoteSDP.toString();
            await this.peerConnection.setRemoteDescription({ type: "answer", sdp: n2 });
          } catch (e3) {
            throw new VT(xT.EXCHANGE_SDP_FAILED, "P2PConnection.stopSending failed; ".concat(e3.toString()));
          }
        }
        async receive(e2, t2, i2, n2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.receive ".concat(e2, " before remoteSDP created."));
            const { id: i3, mslabel: s2 } = this.remoteSDP.send(e2, t2, n2), r2 = new tT((t3, n3) => {
              const r3 = setTimeout(() => {
                n3(new Error("Cannot receive track, id: ".concat(i3)));
              }, 1e4), o3 = (n4) => {
                const a3 = pT();
                if (("Safari" === a3.name && 11 === Number(a3.version) || CT()) && n4.track.id !== i3 && n4.streams[0].id === s2) {
                  var c2;
                  const s3 = n4.streams[0].getTracks()[0];
                  return null === (c2 = this.remoteSDP) || void 0 === c2 || c2.updateTrackLabel(e2, i3, n4.track.id), this.peerConnection.removeEventListener("track", o3), clearTimeout(r3), void t3(s3);
                }
                if (n4.track.id === i3)
                  return this.peerConnection.removeEventListener("track", o3), clearTimeout(r3), void t3(n4.track);
              };
              this.peerConnection.addEventListener("track", o3);
            }), o2 = this.remoteSDP.toString();
            await this.peerConnection.setRemoteDescription({ type: "offer", sdp: o2 });
            const a2 = await this.peerConnection.createAnswer();
            await this.peerConnection.setLocalDescription(a2);
            return { track: await r2, id: i3 };
          } catch (e3) {
            throw new VT(xT.EXCHANGE_SDP_FAILED, "P2PConnection.receive failed; ".concat(e3.toString()));
          }
        }
        async stopReceiving(e2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.stopReceiving before remote SDP created.");
            this.remoteSDP.stopSending(e2);
            const t2 = this.remoteSDP.toString();
            await this.peerConnection.setRemoteDescription({ type: "offer", sdp: t2 });
            const i2 = await this.peerConnection.createAnswer();
            await this.peerConnection.setLocalDescription(i2);
          } catch (e3) {
            throw new VT(xT.EXCHANGE_SDP_FAILED, "P2PConnection stopReceiving failed; ".concat(e3.toString()));
          }
        }
        async muteRemote(e2) {
        }
        async unmuteRemote(e2) {
        }
        async muteLocal(e2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.muteLocal before remote SDP created.");
            const t2 = this.peerConnection.getSenders().filter((t3) => {
              var i2;
              return -1 !== e2.indexOf((null === (i2 = t3.track) || void 0 === i2 ? void 0 : i2.id) || "");
            });
            if (t2.length !== e2.length)
              throw new Error("sender' length doesn't match mids' length.");
            t2.map((e3) => {
              if (ST() && e3.track)
                e3.track.enabled = false;
              else {
                const t3 = e3.getParameters();
                t3.encodings.forEach((e4) => e4.active = false), e3.setParameters(t3);
              }
            });
          } catch (e3) {
            throw new VT(xT.EXCHANGE_SDP_FAILED, "P2PConnection.muteLocal failed; ".concat(e3.toString()));
          }
        }
        async unmuteLocal(e2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.unmuteLocal before remote SDP created.");
            const t2 = this.peerConnection.getSenders().filter((t3) => {
              var i3;
              return -1 !== e2.indexOf((null === (i3 = t3.track) || void 0 === i3 ? void 0 : i3.id) || "");
            });
            if (t2.length !== e2.length)
              throw new Error("Senders' length doesn't match mids' length.");
            t2.map(async (e3) => {
              if (ST() && e3.track)
                e3.track.enabled = true;
              else {
                const t3 = e3.getParameters();
                t3.encodings.forEach((e4) => e4.active = true), await e3.setParameters(t3);
              }
            });
            const i2 = await this.peerConnection.createOffer();
            await this.peerConnection.setLocalDescription(i2);
            const n2 = this.remoteSDP.toString();
            await this.peerConnection.setRemoteDescription({ type: "answer", sdp: n2 });
          } catch (e3) {
            throw new VT(xT.EXCHANGE_SDP_FAILED, "P2PConnection.unmuteLocal failed; ".concat(e3.toString()));
          }
        }
        restartICE(e2) {
          var t2 = this;
          return OP(function* () {
            const i2 = yield SP(t2.mutex.lock("From P2PConnection.restartICE"));
            try {
              if (!t2.remoteSDP)
                throw new Error("Cannot restartICE before remoteSDP created.");
              if (wA().supportPCSetConfiguration) {
                const i3 = t2.peerConnection.getConfiguration(), n3 = e2 === pv.RELAY ? "relay" : "all";
                i3.iceTransportPolicy !== n3 && (YC.debug("[".concat(t2.store.clientId, "] restartICE change iceTransportPolicy from [").concat(i3.iceTransportPolicy, "] to [").concat(n3, "]")), i3.iceTransportPolicy = n3, t2.peerConnection.setConfiguration(i3));
              } else if (e2 === pv.RELAY)
                return;
              e2 !== pv.RELAY && t2.remoteSDP.updateCandidates(e2);
              const n2 = yield SP(t2.peerConnection.createOffer({ iceRestart: true }));
              if (!n2.sdp)
                throw new Error("Cannot restartICE because restart offer SDP does not exist.");
              const s2 = mL(n2.sdp), { remoteIceParameters: r2 } = yield s2.iceParameters;
              t2.remoteSDP.restartICE(r2);
              const o2 = t2.remoteSDP.toString();
              yield SP(t2.peerConnection.setLocalDescription(n2)), yield SP(t2.peerConnection.setRemoteDescription({ type: "answer", sdp: o2 }));
            } catch (e3) {
              YC.warning("[".concat(t2.store.clientId, "] restart ICE failed, abort operation"), e3);
            } finally {
              i2();
            }
          })();
        }
        close() {
          var e2;
          this.peerConnection.close(), null === (e2 = this.onConnectionStateChange) || void 0 === e2 || e2.call(this, "closed"), this.unbindPCEvents(), this.unbindStatsEvents(), this.removeAllListeners(), this.statsFilter.destroy();
        }
        getStats() {
          return this.statsFilter.getStats();
        }
        getRemoteVideoIsReady(e2) {
          return this.statsFilter.getVideoIsReady(e2);
        }
        async updateEncoderConfig(e2, t2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.updateEncoderConfig before remote SDP created.");
            const e3 = await this.peerConnection.createOffer(), i2 = this.mungSendOfferSDP(e3.sdp, [t2]);
            this.remoteSDP.updateRecvMedia(t2._mediaStreamTrack.kind, t2);
            const n2 = this.remoteSDP.toString();
            await this.peerConnection.setLocalDescription({ type: "offer", sdp: i2 }), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: n2 });
          } catch (e3) {
            throw new VT(xT.EXCHANGE_SDP_FAILED, e3.toString());
          }
        }
        async updateSendParameters(e2, t2) {
          const i2 = this.peerConnection.getSenders().filter((t3) => {
            var i3;
            return (null === (i3 = t3.track) || void 0 === i3 ? void 0 : i3.id) === e2;
          });
          1 === i2.length && await this.applySendEncodings(i2, [t2]);
        }
        setStatsRemoteVideoIsReady(e2, t2) {
          this.statsFilter.setVideoIsReady2(e2, t2);
        }
        async replaceTrack(e2, t2) {
          const i2 = this.peerConnection.getSenders().find((e3) => {
            var i3;
            return (null === (i3 = e3.track) || void 0 === i3 ? void 0 : i3.id) === t2;
          });
          i2 && await i2.replaceTrack(e2._mediaStreamTrack);
        }
        createDataChannels(e2, t2) {
          throw new VT(xT.NOT_SUPPORTED, "Planb mode does not support createDataChannels.");
        }
        stopDataChannels(e2) {
          throw new VT(xT.NOT_SUPPORTED, "Planb mode does not support stopDataChannels.");
        }
        bindPCEvents() {
          this.peerConnection.oniceconnectionstatechange = () => {
            var e2;
            null === (e2 = this.onICEConnectionStateChange) || void 0 === e2 || e2.call(this, this.peerConnection.iceConnectionState);
          }, this.peerConnection.onconnectionstatechange = () => {
            var e2;
            null === (e2 = this.onConnectionStateChange) || void 0 === e2 || e2.call(this, this.peerConnection.connectionState);
          }, this.peerConnection.onicecandidate = (e2) => {
            e2.candidate ? this.localCandidateCount += 1 : (this.peerConnection.onicecandidate = null, this.allCandidatesReceived = true, YC.debug("[".concat(this.store.clientId, "] [pc-").concat(this.store.p2pId, "] local candidate count"), this.localCandidateCount));
          }, setTimeout(() => {
            this.allCandidatesReceived || (this.allCandidatesReceived = true, YC.debug("[".concat(this.store.clientId, "] [pc-").concat(this.store.p2pId, "] onicecandidate timeout, local candidate count"), this.localCandidateCount));
          }, DC("CANDIDATE_TIMEOUT"));
        }
        unbindPCEvents() {
          this.peerConnection.oniceconnectionstatechange = null, this.peerConnection.onconnectionstatechange = null, this.peerConnection.onsignalingstatechange = null, this.peerConnection.onicecandidateerror = null, this.peerConnection.onicecandidate = null, this.peerConnection.ontrack = null;
        }
        static resolvePCConfiguration(e2) {
          const t2 = { iceServers: [], sdpSemantics: "plan-b" };
          return e2.iceServers ? t2.iceServers = e2.iceServers : e2.turnServer && "off" !== e2.turnServer.mode && (_g(e2.turnServer.servers) ? t2.iceServers = e2.turnServer.servers : (t2.iceServers && t2.iceServers.push(...wk.turnServerConfigToIceServers(e2.turnServer.servers)), DC("USE_TURN_SERVER_OF_GATEWAY") && t2.iceServers && e2.turnServer.serversFromGateway && t2.iceServers.push(...wk.turnServerConfigToIceServers(e2.turnServer.serversFromGateway)), e2.turnServer.servers.concat(e2.turnServer.serversFromGateway || []).forEach((e3) => {
            e3.forceturn && (t2.iceTransportPolicy = "relay");
          }))), t2;
        }
        static turnServerConfigToIceServers(e2) {
          const t2 = [];
          return e2.forEach((e3) => {
            e3.security ? e3.tcpport && t2.push({ username: e3.username, credential: e3.password, credentialType: "password", urls: "turns:".concat(e3.turnServerURL, ":").concat(e3.tcpport, "?transport=tcp") }) : (e3.udpport && t2.push({ username: e3.username, credential: e3.password, credentialType: "password", urls: "turn:".concat(e3.turnServerURL, ":").concat(e3.udpport, "?transport=udp") }), e3.tcpport && t2.push({ username: e3.username, credential: e3.password, credentialType: "password", urls: "turn:".concat(e3.turnServerURL, ":").concat(e3.tcpport, "?transport=tcp") }));
          }), t2;
        }
        async updateRtpSenderEncodings(e2, t2) {
          var i2;
          if (!t2) {
            t2 = this.peerConnection.getSenders().find((t3) => {
              var i3;
              return (null === (i3 = t3.track) || void 0 === i3 ? void 0 : i3.id) === e2._mediaStreamTrack.id;
            });
          }
          if (!t2)
            return YC.warn("[".concat(e2.getTrackId(), "] no rtpSender found}"));
          if (!wA().supportSetRtpSenderParameters)
            return YC.warn("Browser not support set rtp-sender parameters");
          const n2 = {}, s2 = {};
          if (e2 instanceof Nw)
            switch (e2._optimizationMode) {
              case "motion":
                n2.degradationPreference = "maintain-framerate";
                break;
              case "detail":
                n2.degradationPreference = "maintain-resolution";
                break;
              default:
                n2.degradationPreference = "balanced";
            }
          if (DC("DSCP_TYPE") && kT()) {
            var r2;
            const e3 = DC("DSCP_TYPE");
            bn(r2 = ["very-low", "low", "medium", "high"]).call(r2, e3) && (s2.networkPriority = e3);
          }
          const o2 = t2.getParameters(), a2 = null === (i2 = o2.encodings) || void 0 === i2 ? void 0 : i2[0];
          a2 && Object.assign(a2, s2), Object.assign(o2, n2), YC.debug("[".concat(e2.getTrackId(), "] updateRtpSenderEncodings: ").concat(JSON.stringify(o2.encodings))), await t2.setParameters(o2);
        }
        async applySendEncodings(e2, t2) {
          try {
            if (!wA().supportSetRtpSenderParameters)
              return;
            if (e2.length !== t2.length)
              return;
            for (let i2 = 0; i2 < e2.length; i2++) {
              const n2 = e2[i2], s2 = t2[i2];
              n2 && s2 && await this.updateRtpSenderEncodings(s2, n2);
            }
          } catch (e3) {
            YC.debug("[".concat(this.store.clientId, "] Apply RTPSendEncodings failed."));
          }
        }
        mungSendOfferSDP(e2, t2) {
          const i2 = YP.parse(e2);
          return t2.forEach((e3, t3) => {
            const n2 = e3._mediaStreamTrack, s2 = i2.mediaDescriptions.find((e4) => e4.attributes.mid === n2.kind);
            s2 && SL(s2, e3);
          }), YP.print(i2);
        }
        bindStatsEvents() {
          this.statsFilter.onFirstAudioReceived = (e2) => {
            var t2;
            null === (t2 = this.onFirstAudioReceived) || void 0 === t2 || t2.call(this, e2);
          }, this.statsFilter.onFirstVideoReceived = (e2) => {
            var t2;
            null === (t2 = this.onFirstVideoReceived) || void 0 === t2 || t2.call(this, e2);
          }, this.statsFilter.onFirstAudioDecoded = (e2) => {
            var t2;
            null === (t2 = this.onFirstAudioDecoded) || void 0 === t2 || t2.call(this, e2);
          }, this.statsFilter.onFirstVideoDecoded = (e2, t2, i2) => {
            var n2;
            null === (n2 = this.onFirstVideoDecoded) || void 0 === n2 || n2.call(this, e2, t2, i2);
          }, this.statsFilter.onSelectedLocalCandidateChanged = (e2, t2) => {
            var i2;
            null === (i2 = this.onSelectedLocalCandidateChanged) || void 0 === i2 || i2.call(this, e2, t2);
          }, this.statsFilter.onSelectedRemoteCandidateChanged = (e2, t2) => {
            var i2;
            null === (i2 = this.onSelectedRemoteCandidateChanged) || void 0 === i2 || i2.call(this, e2, t2);
          };
        }
        unbindStatsEvents() {
          this.statsFilter.onFirstAudioReceived = void 0, this.statsFilter.onFirstVideoReceived = void 0, this.statsFilter.onFirstAudioDecoded = void 0, this.statsFilter.onFirstVideoDecoded = void 0, this.statsFilter.onSelectedLocalCandidateChanged = void 0, this.statsFilter.onSelectedRemoteCandidateChanged = void 0;
        }
        async batchReceive(e2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.batchReceive before remoteSDP created.");
            const t2 = this.remoteSDP.batchSend(e2).map((t3, i3) => {
              let { id: n3, mslabel: s2 } = t3;
              const { kind: r2 } = e2[i3];
              return new tT((e3, t4) => {
                const i4 = setTimeout(() => {
                  t4(new Error("Cannot receive track, id: ".concat(n3)));
                }, 1e4), o2 = (t5) => {
                  const a2 = pT();
                  if ("Safari" === a2.name && 11 === Number(a2.version) && t5.track.id !== n3 && t5.streams[0].id === s2) {
                    var c2;
                    const s3 = t5.streams[0].getTracks()[0];
                    return null === (c2 = this.remoteSDP) || void 0 === c2 || c2.updateTrackLabel(r2, n3, t5.track.id), this.peerConnection.removeEventListener("track", o2), clearTimeout(i4), void e3({ track: s3, id: n3 });
                  }
                  if (t5.track.id === n3)
                    return this.peerConnection.removeEventListener("track", o2), clearTimeout(i4), void e3({ track: t5.track, id: n3 });
                };
                this.peerConnection.addEventListener("track", o2);
              });
            }), i2 = this.remoteSDP.toString();
            await this.peerConnection.setRemoteDescription({ type: "offer", sdp: i2 });
            const n2 = await this.peerConnection.createAnswer();
            return await this.peerConnection.setLocalDescription(n2), await tT.all(t2);
          } catch (e3) {
            throw new VT(xT.EXCHANGE_SDP_FAILED, "P2PConnection.receive failed; ".concat(e3.toString()));
          }
        }
        async getRemoteSSRC(e2) {
          if (!this.remoteSDP)
            return;
          const t2 = this.remoteSDP.getSSRC(e2);
          return null == t2 ? void 0 : t2[0].ssrcId;
        }
        setConfiguration(e2) {
          if (wA().supportPCSetConfiguration) {
            const t2 = wk.resolvePCConfiguration(e2);
            this.peerConnection.setConfiguration(t2);
          }
        }
      }
      function Ok(e2, t2, i2) {
        const n2 = e2[t2];
        if ("function" != typeof n2)
          throw new Error("Cannot use mutex on object property.");
        return i2.value = async function() {
          const e3 = this.mutex, i3 = await e3.lock("Locking from P2PConnection.".concat(t2));
          try {
            for (var s2 = arguments.length, r2 = new Array(s2), o2 = 0; o2 < s2; o2++)
              r2[o2] = arguments[o2];
            return await n2.apply(this, r2);
          } finally {
            i3();
          }
        }, i2;
      }
      function Nk(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function Dk(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? Nk(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : Nk(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      UI([Ok, xI("design:type", Function), xI("design:paramtypes", [Object, Object, Array, Object, String, String]), xI("design:returntype", tT)], wk.prototype, "connect", null), UI([Ok, xI("design:type", Function), xI("design:paramtypes", [Array]), xI("design:returntype", tT)], wk.prototype, "stopSending", null), UI([Ok, xI("design:type", Function), xI("design:paramtypes", [String, Array, String, Object]), xI("design:returntype", tT)], wk.prototype, "receive", null), UI([Ok, xI("design:type", Function), xI("design:paramtypes", [Array]), xI("design:returntype", tT)], wk.prototype, "stopReceiving", null), UI([Ok, xI("design:type", Function), xI("design:paramtypes", [String]), xI("design:returntype", tT)], wk.prototype, "muteRemote", null), UI([Ok, xI("design:type", Function), xI("design:paramtypes", [String]), xI("design:returntype", tT)], wk.prototype, "unmuteRemote", null), UI([Ok, xI("design:type", Function), xI("design:paramtypes", [Array]), xI("design:returntype", tT)], wk.prototype, "muteLocal", null), UI([Ok, xI("design:type", Function), xI("design:paramtypes", [Array]), xI("design:returntype", tT)], wk.prototype, "unmuteLocal", null), UI([Ok, xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", void 0)], wk.prototype, "close", null), UI([Ok, xI("design:type", Function), xI("design:paramtypes", [String, _b]), xI("design:returntype", tT)], wk.prototype, "updateEncoderConfig", null), UI([Ok, xI("design:type", Function), xI("design:paramtypes", [String, _b]), xI("design:returntype", tT)], wk.prototype, "updateSendParameters", null), UI([Ok, xI("design:type", Function), xI("design:paramtypes", [_b, String]), xI("design:returntype", tT)], wk.prototype, "replaceTrack", null), UI([Ok, xI("design:type", Function), xI("design:paramtypes", [String]), xI("design:returntype", tT)], wk.prototype, "getRemoteSSRC", null);
      const Pk = "9", Lk = 4e4;
      function kk(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function Mk(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? kk(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : kk(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      class Uk extends Mv {
        get currentLocalDescription() {
          return this.peerConnection.currentLocalDescription;
        }
        get currentRemoteDescription() {
          return this.peerConnection.currentRemoteDescription;
        }
        get peerConnectionState() {
          return this.peerConnection.connectionState;
        }
        get iceConnectionState() {
          return this.peerConnection.iceConnectionState;
        }
        get dtlsTransportState() {
          var e2, t2;
          return null !== (e2 = null === (t2 = this.peerConnection.getReceivers()[0]) || void 0 === t2 || null === (t2 = t2.transport) || void 0 === t2 ? void 0 : t2.state) && void 0 !== e2 ? e2 : null;
        }
        get localCodecs() {
          return [...new Set(this.localCapabilities && this.localCapabilities.send.videoCodecs.map((e2) => e2.rtpMap && e2.rtpMap.encodingName.toLowerCase() || "").filter((e2) => {
            var t2;
            return bn(t2 = Object.keys(xC)).call(t2, e2);
          }))];
        }
        constructor(e2, t2) {
          super(e2, t2), nh(this, "store", void 0), nh(this, "peerConnection", void 0), nh(this, "remoteSDP", void 0), nh(this, "initialOffer", void 0), nh(this, "transportEventReceiver", void 0), nh(this, "statsFilter", void 0), nh(this, "useXR", DC("USE_XR")), nh(this, "localCapabilities", void 0), nh(this, "remoteCodecs", void 0), nh(this, "localCandidateCount", 0), nh(this, "allCandidatesReceived", false), nh(this, "dataStreamChannelMap", /* @__PURE__ */ new Map()), nh(this, "establishPromise", void 0), nh(this, "mutex", new Yg("P2PConnection-mutex")), this.store = t2, this.peerConnection = new RTCPeerConnection(Uk.resolvePCConfiguration(e2), { optional: [{ googDscp: true }] }), this.statsFilter = hL(this.peerConnection, DC("STATS_UPDATE_INTERVAL"), void 0, RT() ? 1200 : void 0), this.bindPCEvents(), this.bindStatsEvents(), this.store.p2pId = this.store.p2pId + 1, this.establishPromise = this.establish();
        }
        async updateRemoteRTPCapabilities(e2, t2) {
          if (this.remoteCodecs = t2, !this.remoteSDP)
            return void YC.debug("[P2PConnection] cannot updateRemoteRTPCapabilities before remote SDP created, local codecs: ".concat(this.localCodecs, ", codecs: ").concat(t2));
          if (this.remoteSDP.updateRemoteCodec(e2, t2, this.store.codec)) {
            const e3 = await this.peerConnection.createOffer(), t3 = this.logSDPExchange(e3.sdp || "", "offer", "local", "muteLocal");
            await this.peerConnection.setLocalDescription(e3);
            const i2 = this.remoteSDP.toString();
            null == t3 || t3(i2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: i2 });
          } else
            YC.debug("[P2PConnection] updateRemoteRTPCapabilities no need to exchange SDP.");
        }
        async establish() {
          try {
            this.peerConnection.addTransceiver("video", { direction: "recvonly" }), this.peerConnection.addTransceiver("audio", { direction: "recvonly" });
            const e2 = await this.peerConnection.createOffer();
            if (!e2.sdp)
              throw new Error("Cannot get initialOffer.sdp when trying to establish PeerConnection.");
            const t2 = mL(e2.sdp), i2 = await AL({ filterRTX: !DC("USE_PUB_RTX") && !DC("USE_SUB_RTX"), filterVideoFec: DC("FILTER_VIDEO_FEC"), filterAudioFec: DC("FILTER_AUDIO_FEC"), filterVideoCodec: DC("FILTER_VIDEO_CODEC") }, { useXR: this.useXR });
            return this.localCapabilities = OL(i2), this.initialOffer = e2, Mk(Mk({}, t2), {}, { rtpCapabilities: i2, offerSDP: e2.sdp });
          } catch (e2) {
            throw new VT(xT.GET_LOCAL_CONNECTION_PARAMS_FAILED, e2.toString());
          }
        }
        async connect(e2, t2, i2, n2, s2, r2) {
          try {
            if (!this.initialOffer)
              throw new Error("Cannot establish P2PConnection without initial offer.");
            this.remoteSDP = new class {
              get localCapabilities() {
                return bg(this._localCapabilities);
              }
              get rtpCapabilities() {
                return bg(this._rtpCapabilities);
              }
              get candidates() {
                return bg(this._candidates);
              }
              get iceParameters() {
                return bg(this._iceParameters);
              }
              get dtlsParameters() {
                return bg(this._dtlsParameters);
              }
              constructor(e3) {
                nh(this, "sessionDesc", void 0), nh(this, "_localCapabilities", void 0), nh(this, "_rtpCapabilities", void 0), nh(this, "_candidates", void 0), nh(this, "_iceParameters", void 0), nh(this, "_dtlsParameters", void 0), nh(this, "setup", void 0), nh(this, "currentMidIndex", void 0), nh(this, "cname", void 0), nh(this, "firefoxSsrcMidMap", /* @__PURE__ */ new Map()), e3 = bg(e3);
                const { remoteIceParameters: t3, remoteDtlsParameters: i3, candidates: n3, remoteRTPCapabilities: s3, remoteSetup: r3, localCapabilities: o3, cname: a3 } = e3, c3 = YP.parse("v=0\no=- 0 0 IN IP4 127.0.0.1\ns=AgoraGateway\nt=0 0\na=group:BUNDLE 0 1\na=msid-semantic: WMS\na=ice-lite\nm=video 9 UDP/TLS/RTP/SAVPF 0\nc=IN IP4 127.0.0.1\na=rtcp:9 IN IP4 0.0.0.0\na=sendonly\na=rtcp-mux\na=rtcp-rsize\na=mid:0\nm=audio 9 UDP/TLS/RTP/SAVPF 0\nc=IN IP4 127.0.0.1\na=rtcp:9 IN IP4 0.0.0.0\na=sendonly\na=rtcp-mux\na=rtcp-rsize\na=mid:1\n");
                this._rtpCapabilities = s3, this._candidates = n3, this._iceParameters = t3, this._dtlsParameters = i3, this._localCapabilities = o3, this.setup = r3, this.cname = a3;
                const d3 = this.rtpCapabilities.send;
                for (const e4 of c3.mediaDescriptions) {
                  if (e4.attributes.iceUfrag = t3.iceUfrag, e4.attributes.icePwd = t3.icePwd, e4.attributes.fingerprints = i3.fingerprints, e4.attributes.candidates = n3, e4.attributes.setup = r3, "video" === e4.media.mediaType && (e4.media.fmts = d3.videoCodecs.map((e5) => e5.payloadType.toString(10)), e4.attributes.payloads = d3.videoCodecs, e4.attributes.extmaps = d3.videoExtensions, DC("PRELOAD_MEDIA_COUNT") > 0)) {
                    const { ssrcs: t4, ssrcGroups: i4 } = gL([{ ssrcId: Lk, rtx: DC("USE_SUB_RTX") ? 40001 : void 0 }], this.cname);
                    e4.attributes.ssrcs = t4, e4.attributes.ssrcGroups = i4;
                  }
                  if ("audio" === e4.media.mediaType && (e4.media.fmts = d3.audioCodecs.map((e5) => e5.payloadType.toString(10)), e4.attributes.payloads = d3.audioCodecs, e4.attributes.extmaps = d3.audioExtensions, NL(e4), DC("PRELOAD_MEDIA_COUNT") > 0)) {
                    const { ssrcs: t4, ssrcGroups: i4 } = gL([{ ssrcId: 2e4 }], this.cname);
                    e4.attributes.ssrcs = t4, e4.attributes.ssrcGroups = i4;
                  }
                }
                this.sessionDesc = c3, this.currentMidIndex = c3.mediaDescriptions.length - 1;
              }
              preloadRemoteMedia() {
                const e3 = DC("PRELOAD_MEDIA_COUNT");
                this.rtpCapabilities;
                const t3 = this.candidates, i3 = this.dtlsParameters, n3 = this.iceParameters, s3 = this.rtpCapabilities.send;
                for (let r3 = 1; r3 < e3; r3++) {
                  const e4 = 2 * r3 + 2e4, o3 = 2 * r3 + Lk, { ssrcs: a3, ssrcGroups: c3 } = gL([{ ssrcId: e4 }], this.cname), { ssrcs: d3, ssrcGroups: l3 } = gL([{ ssrcId: o3, rtx: DC("USE_SUB_RTX") ? o3 + 1 : void 0 }], this.cname);
                  this.sessionDesc.mediaDescriptions.push({ media: { mediaType: "video", port: Pk, protos: ["UDP", "TLS", "RTP", "SAVPF"], fmts: s3.videoCodecs.map((e5) => e5.payloadType.toString(10)) }, connections: [{ nettype: "IN", addrtype: "IP4", address: "127.0.0.1" }], bandwidths: [], attributes: { iceUfrag: n3.iceUfrag, icePwd: n3.icePwd, unrecognized: [], candidates: t3, extmaps: s3.videoExtensions, fingerprints: i3.fingerprints, imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: d3, ssrcGroups: l3, rtcpFeedbackWildcards: [], payloads: s3.videoCodecs, rtcp: { port: "9", netType: "IN", addressType: "IP4", address: "0.0.0.0" }, setup: this.setup, direction: "sendonly", rtcpMux: true, rtcpRsize: true, mid: "".concat(2 * r3) } }), this.sessionDesc.mediaDescriptions.push({ media: { mediaType: "audio", port: Pk, protos: ["UDP", "TLS", "RTP", "SAVPF"], fmts: s3.audioCodecs.map((e5) => e5.payloadType.toString(10)) }, connections: [{ nettype: "IN", addrtype: "IP4", address: "127.0.0.1" }], bandwidths: [], attributes: { iceUfrag: n3.iceUfrag, icePwd: n3.icePwd, unrecognized: [], candidates: t3, extmaps: s3.audioExtensions, fingerprints: i3.fingerprints, imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: a3, ssrcGroups: c3, rtcpFeedbackWildcards: [], payloads: s3.audioCodecs, rtcp: { port: "9", netType: "IN", addressType: "IP4", address: "0.0.0.0" }, setup: this.setup, direction: "sendonly", rtcpMux: true, rtcpRsize: true, mid: "".concat(2 * r3 + 1) } }), this.currentMidIndex += 2;
                }
                this.updateBundleMids();
              }
              toString() {
                return YP.print(this.sessionDesc);
              }
              send(e3, t3, i3, n3) {
                const { ssrcs: s3, ssrcGroups: r3 } = gL(t3, this.cname, DC("SYNC_GROUP") ? i3 : void 0), o3 = this.findPreloadMediaDesc(s3);
                if (o3) {
                  if (RT() && this.firefoxSsrcMidMap.set(s3[0].ssrcId, o3.attributes.mid), n3 && (n3.twcc || n3.remb)) {
                    const e4 = this.sessionDesc.mediaDescriptions.indexOf(o3);
                    return this.sessionDesc.mediaDescriptions[e4] = this.mungSendMediaDesc(o3, n3), { mid: o3.attributes.mid, needExchangeSDP: true };
                  }
                  return { mid: o3.attributes.mid, needExchangeSDP: false };
                }
                {
                  const t4 = this.findAvailableMediaIndex(e3, s3);
                  let i4;
                  return -1 === t4 || 1 === t4 && (ST() || AT()) || 0 === t4 && DC("USE_SUB_RTX") || bT() ? (i4 = this.createOrRecycleSendMedia(e3, s3, r3, "sendonly", n3), this.updateBundleMids()) : (i4 = bg(this.sessionDesc.mediaDescriptions[t4]), i4.attributes.direction = "sendonly", i4.attributes.ssrcs = s3, i4.attributes.ssrcGroups = r3, this.sessionDesc.mediaDescriptions[t4] = this.mungSendMediaDesc(i4, n3)), RT() && this.firefoxSsrcMidMap.set(s3[0].ssrcId, i4.attributes.mid), { mid: i4.attributes.mid, needExchangeSDP: true };
                }
              }
              sendDataChannel() {
                const { mediaDesc: e3, needExchangeSDP: t3 } = this.createOrRecycleDataChannel();
                return this.updateBundleMids(), { mid: e3.attributes.mid, needExchangeSDP: t3 };
              }
              batchSend(e3) {
                const t3 = e3.map((e4) => {
                  let { kind: t4, ssrcMsg: i4, mslabel: n4 } = e4;
                  return this.send(t4, i4, n4);
                }), i3 = [];
                let n3 = false;
                return t3.forEach((e4) => {
                  let { mid: t4, needExchangeSDP: s3 } = e4;
                  s3 && (n3 = true), i3.push(t4);
                }), { mids: i3, needExchangeSDP: n3 };
              }
              stopSending(e3) {
                const t3 = this.sessionDesc.mediaDescriptions.filter((t4) => t4.attributes.mid && -1 !== e3.indexOf(t4.attributes.mid));
                if (t3.length !== e3.length)
                  throw new Error("mediaDescriptions' length doesn't match mids' length when calling RemoteSDP.stopSending.");
                t3.forEach((e4) => {
                  "0" === e4.attributes.mid || RT() || bT() ? e4.attributes.ssrcs = [] : (e4.attributes.ssrcs = [], e4.attributes.direction = "inactive", e4.media.port = "0");
                }), this.updateBundleMids();
              }
              mute(e3) {
                const t3 = this.sessionDesc.mediaDescriptions.find((t4) => t4.attributes.mid === e3);
                if (!t3)
                  throw new Error("mediaDescription not found with ".concat(e3, " in remote SDP when calling RemoteSDP.mute."));
                t3.attributes.direction = "inactive";
              }
              unmute(e3) {
                const t3 = this.sessionDesc.mediaDescriptions.find((t4) => t4.attributes.mid === e3);
                if (!t3)
                  throw new Error("mediaDescription not found with ".concat(e3, " in remote SDP when calling RemoteSDP.unmute."));
                t3.attributes.direction = "sendonly";
              }
              muteRemote(e3) {
                const t3 = this.sessionDesc.mediaDescriptions.filter((t4) => bn(e3).call(e3, t4.attributes.mid || ""));
                if (t3.length !== e3.length)
                  throw new Error("mediaDescriptions' length doesn't match mids' length when calling RemoteSDP.muteRemote.");
                t3.forEach((e4) => {
                  e4.attributes.direction = "inactive";
                });
              }
              unmuteRemote(e3) {
                const t3 = this.sessionDesc.mediaDescriptions.filter((t4) => bn(e3).call(e3, t4.attributes.mid || ""));
                if (t3.length !== e3.length)
                  throw new Error("mediaDescriptions' length doesn't match mids' length when calling RemoteSDP.muteRemote.");
                t3.forEach((e4) => {
                  e4.attributes.direction = "recvonly";
                });
              }
              receive(e3, t3, i3, n3) {
                e3.forEach((e4, s3) => {
                  this.createOrRecycleRecvMedia(e4, [], "recvonly", t3, i3, n3[s3]);
                }), this.updateBundleMids();
              }
              stopReceiving(e3) {
                const t3 = this.sessionDesc.mediaDescriptions.filter((t4) => -1 !== e3.indexOf(t4.attributes.mid));
                if (t3.length !== e3.length)
                  throw new Error("MediaDescriptions' length doesn't match mids's length when calling RemoteSDP.receive.");
                t3.forEach((e4) => {
                  e4.media.port = "0", e4.attributes.direction = "inactive";
                }), this.updateBundleMids();
              }
              updateCandidates(e3) {
                const t3 = this._candidates.filter((e4) => "udp" === e4.transport);
                if (e3 === pv.TCP) {
                  if (0 === t3.length)
                    return;
                  if (DC("TCP_CANDIDATE_ONLY")) {
                    const e4 = this._candidates.filter((e5) => "tcp" === e5.transport);
                    t3.forEach((t4) => {
                      -1 === e4.findIndex((e5) => e5.connectionAddress === t4.connectionAddress) && e4.push(Dk(Dk({}, t4), {}, { foundation: "tcpcandidate", priority: Number(t4.priority) - 1 + "", transport: "tcp", port: Number(t4.port) + 90 + "" }));
                    }), this._candidates = e4;
                  } else {
                    const e4 = [];
                    t3.forEach((t4) => {
                      e4.push(Dk(Dk({}, t4), {}, { foundation: "tcpcandidate", priority: Number(t4.priority) - 1 + "", transport: "tcp", port: Number(t4.port) + 90 + "" }));
                    }), this._candidates = [...t3, ...e4];
                  }
                } else if (e3 === pv.RELAY) {
                  if (0 !== t3.length)
                    return;
                  {
                    const e4 = this._candidates.filter((e5) => "tcp" === e5.transport);
                    e4.forEach((e5) => {
                      t3.push(Dk(Dk({}, e5), {}, { foundation: "udpcandidate", priority: Number(e5.priority) + 1 + "", transport: "udp", port: Number(e5.port) - 90 + "" }));
                    }), this._candidates = [...t3, ...e4];
                  }
                } else
                  0 === t3.length ? (this._candidates.filter((e4) => "tcp" === e4.transport).forEach((e4) => {
                    t3.push(Dk(Dk({}, e4), {}, { foundation: "udpcandidate", priority: Number(e4.priority) + 1 + "", transport: "udp", port: Number(e4.port) - 90 + "" }));
                  }), this._candidates = t3) : this._candidates = this._candidates.filter((e4) => "tcp" !== e4.transport);
                for (const e4 of this.sessionDesc.mediaDescriptions)
                  e4.attributes.candidates = this.candidates;
              }
              restartICE(e3) {
                e3 = bg(e3), this._iceParameters = e3, this.sessionDesc.mediaDescriptions.forEach((t3) => {
                  t3.attributes.iceUfrag = e3.iceUfrag, t3.attributes.icePwd = e3.icePwd;
                });
              }
              predictReceivingMids(e3) {
                const t3 = [];
                for (let i3 = 0; i3 < e3; i3++)
                  t3.push((this.currentMidIndex + i3 + 1).toString(10));
                return t3;
              }
              findAvailableMediaIndex(e3, t3) {
                return this.sessionDesc.mediaDescriptions.findIndex((i3) => {
                  const n3 = i3.media.mediaType === e3 && "0" !== i3.media.port && ("sendonly" === i3.attributes.direction || "sendrecv" === i3.attributes.direction) && 0 === i3.attributes.ssrcs.length;
                  if (RT()) {
                    if (n3) {
                      const e4 = this.firefoxSsrcMidMap.get(t3[0].ssrcId);
                      return !(e4 || "0" !== i3.attributes.mid && "1" !== i3.attributes.mid) || !(!e4 || e4 !== i3.attributes.mid);
                    }
                    return false;
                  }
                  return n3;
                });
              }
              createOrRecycleDataChannel() {
                for (const e4 of this.sessionDesc.mediaDescriptions)
                  if ("application" === e4.media.mediaType)
                    return { mediaDesc: e4, needExchangeSDP: false };
                this.currentMidIndex += 1;
                const e3 = "".concat(this.currentMidIndex), t3 = { media: { mediaType: "application", port: Pk, protos: ["UDP", "DTLS", "SCTP"], fmts: ["webrtc-datachannel"] }, connections: [{ nettype: "IN", addrtype: "IP4", address: "127.0.0.1" }], bandwidths: [], attributes: { iceUfrag: this.iceParameters.iceUfrag, icePwd: this.iceParameters.icePwd, unrecognized: [], candidates: this.candidates, extmaps: [], fingerprints: this.dtlsParameters.fingerprints, imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: [], ssrcGroups: [], rtcpFeedbackWildcards: [], payloads: [], rtcp: { port: "9", netType: "IN", addressType: "IP4", address: "0.0.0.0" }, setup: this.setup, mid: "".concat(e3), sctpPort: "5000" } };
                return this.sessionDesc.mediaDescriptions.push(t3), { mediaDesc: t3, needExchangeSDP: true };
              }
              createOrRecycleRecvMedia(e3, t3, i3, n3, s3, r3) {
                const o3 = e3._mediaStreamTrack.kind, a3 = this.rtpCapabilities.recv, c3 = PL(o3, a3, this.localCapabilities.send, o3 === hv.VIDEO ? n3 : s3), d3 = o3 === hv.VIDEO ? a3.videoExtensions : a3.audioExtensions;
                this.currentMidIndex += 1;
                const l3 = "".concat(this.currentMidIndex);
                let u3 = { media: { mediaType: o3, port: Pk, protos: ["UDP", "TLS", "RTP", "SAVPF"], fmts: c3.map((e4) => e4.payloadType.toString(10)) }, connections: [{ nettype: "IN", addrtype: "IP4", address: "127.0.0.1" }], bandwidths: [], attributes: { iceUfrag: this.iceParameters.iceUfrag, icePwd: this.iceParameters.icePwd, unrecognized: [], candidates: this.candidates, extmaps: d3, fingerprints: this.dtlsParameters.fingerprints, imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: t3, ssrcGroups: [], rtcpFeedbackWildcards: [], payloads: c3, rtcp: { port: "9", netType: "IN", addressType: "IP4", address: "0.0.0.0" }, setup: this.setup, direction: i3, rtcpMux: true, rtcpRsize: true, mid: "".concat(l3) } };
                u3 = this.mungRecvMediaDsec(u3, e3, r3);
                const h2 = this.findFirstClosedMedia(o3);
                if (h2) {
                  const e4 = this.sessionDesc.mediaDescriptions.indexOf(h2);
                  this.sessionDesc.mediaDescriptions[e4] = u3;
                } else
                  this.sessionDesc.mediaDescriptions.push(u3);
                return u3;
              }
              updateRemoteCodec(e3, t3, i3) {
                const n3 = [...new Set(this._rtpCapabilities.recv.videoCodecs.map((e4) => e4.rtpMap && e4.rtpMap.encodingName.toLowerCase() || "").filter((e4) => {
                  var t4;
                  return bn(t4 = Object.keys(xC)).call(t4, e4);
                }))], s3 = new Set(t3);
                if (n3.every((e4) => s3.has(e4)))
                  return YC.debug("codecs has not changed, no need to updateRemoteCodec, codecs: ".concat(t3)), false;
                const r3 = this._rtpCapabilities.recv.videoCodecs.filter((e4) => t3.some((t4) => {
                  var i4;
                  return bn(i4 = e4.rtpMap && e4.rtpMap.encodingName.toLowerCase() || "").call(i4, t4);
                }));
                if (0 === r3.length)
                  return YC.debug("updateRemoteCodec failed, because cannot find matched codec, remoteCapabilities codecs: ".concat(n3, " codecs: ").concat(t3)), false;
                const o3 = [...new Set(r3.map((e4) => e4.rtpMap && e4.rtpMap.encodingName.toLowerCase() || ""))];
                let a3;
                if (YC.debug("updateRemoteCodec, from ".concat(n3, " to ").concat(o3)), 0 === e3.length)
                  a3 = this.sessionDesc.mediaDescriptions.filter((e4) => "video" === e4.media.mediaType && "recvonly" === e4.attributes.direction);
                else if (a3 = this.sessionDesc.mediaDescriptions.filter((t4) => t4.attributes.mid && bn(e3).call(e3, t4.attributes.mid) && "recvonly" === t4.attributes.direction), a3.length !== e3.length)
                  return YC.debug("updateRemoteCodec failed, because cannot find mids, mids: ".concat(e3, ", codecs: ").concat(t3)), false;
                this._rtpCapabilities.recv.videoCodecs = r3;
                const c3 = this.localCapabilities.send, d3 = this.rtpCapabilities.recv, l3 = PL(hv.VIDEO, d3, c3, i3);
                return a3.forEach((e4) => {
                  const t4 = l3.map((e5) => e5.payloadType.toString(10));
                  YC.debug("updateRemoteCodec mid: ".concat(e4.attributes.mid, ", from ").concat(e4.attributes.payloads, " to ").concat(l3)), e4.attributes.payloads = l3, e4.media.fmts = t4;
                }), true;
              }
              createOrRecycleSendMedia(e3, t3, i3, n3, s3) {
                const r3 = this.rtpCapabilities.send, o3 = e3 === hv.VIDEO ? r3.videoCodecs : r3.audioCodecs, a3 = e3 === hv.VIDEO ? r3.videoExtensions : r3.audioExtensions;
                this.currentMidIndex += 1;
                const c3 = "".concat(this.currentMidIndex);
                let d3 = { media: { mediaType: e3, port: Pk, protos: ["UDP", "TLS", "RTP", "SAVPF"], fmts: o3.map((e4) => e4.payloadType.toString(10)) }, connections: [{ nettype: "IN", addrtype: "IP4", address: "127.0.0.1" }], bandwidths: [], attributes: { iceUfrag: this.iceParameters.iceUfrag, icePwd: this.iceParameters.icePwd, unrecognized: [], candidates: this.candidates, extmaps: a3, fingerprints: this.dtlsParameters.fingerprints, imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: t3, ssrcGroups: i3, rtcpFeedbackWildcards: [], payloads: o3, rtcp: { port: "9", netType: "IN", addressType: "IP4", address: "0.0.0.0" }, setup: this.setup, direction: n3, rtcpMux: true, rtcpRsize: true, mid: "".concat(c3) } };
                d3 = this.mungSendMediaDesc(d3, s3);
                const l3 = this.findFirstClosedMedia(e3);
                if (l3) {
                  const e4 = this.sessionDesc.mediaDescriptions.indexOf(l3);
                  this.sessionDesc.mediaDescriptions[e4] = d3;
                } else
                  this.sessionDesc.mediaDescriptions.push(d3);
                return d3;
              }
              updateBundleMids() {
                this.sessionDesc.attributes.groups[0].identificationTag = this.sessionDesc.mediaDescriptions.filter((e3) => "0" !== e3.media.port).map((e3) => e3.attributes.mid);
              }
              mungRecvMediaDsec(e3, t3, i3) {
                const n3 = bg(e3);
                return RL(n3), SL(n3, t3), CL(n3, t3), IL(n3), vL(n3, i3, this.localCapabilities.send), n3;
              }
              mungSendMediaDesc(e3, t3) {
                const i3 = bg(e3);
                return vL(i3, t3, this.localCapabilities.recv), NL(i3), i3;
              }
              updateRecvMedia(e3, t3) {
                const i3 = this.sessionDesc.mediaDescriptions.findIndex((t4) => t4.attributes.mid === e3);
                if (-1 !== i3) {
                  const e4 = this.mungRecvMediaDsec(this.sessionDesc.mediaDescriptions[i3], t3);
                  this.sessionDesc.mediaDescriptions[i3] = e4;
                }
              }
              bumpMid(e3) {
                this.currentMidIndex += e3;
              }
              findFirstClosedMedia(e3) {
                return this.sessionDesc.mediaDescriptions.find((t3) => RT() ? "0" === t3.media.port && t3.media.mediaType === e3 : "0" === t3.media.port);
              }
              findPreloadMediaDesc(e3) {
                return this.sessionDesc.mediaDescriptions.find((t3) => {
                  var i3;
                  return (null === (i3 = t3.attributes) || void 0 === i3 || null === (i3 = i3.ssrcs[0]) || void 0 === i3 ? void 0 : i3.ssrcId) === e3[0].ssrcId;
                });
              }
              getSSRC(e3) {
                var t3;
                return null === (t3 = this.sessionDesc.mediaDescriptions.find((t4) => t4.attributes.mid === e3)) || void 0 === t3 ? void 0 : t3.attributes.ssrcs;
              }
            }({ remoteIceParameters: e2, remoteDtlsParameters: t2, candidates: i2, remoteRTPCapabilities: n2, remoteSetup: s2, localCapabilities: this.localCapabilities, cname: r2 }), Array.isArray(this.remoteCodecs) && this.remoteCodecs.length > 0 && this.remoteSDP.updateRemoteCodec([], this.remoteCodecs, this.store.codec);
            const o2 = this.remoteSDP.toString(), a2 = YP.parse(this.initialOffer.sdp), c2 = a2.mediaDescriptions.find((e3) => "audio" === e3.media.mediaType);
            c2 && NL(c2), this.useXR && DL(a2);
            const d2 = YP.print(a2), l2 = this.logSDPExchange(d2 || "", "offer", "local", "connect");
            this.store.descriptionStart(), await this.peerConnection.setLocalDescription({ type: "offer", sdp: d2 }), null == l2 || l2(o2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: o2 });
            const u2 = this.peerConnection.getTransceivers()[0];
            if (null != u2 && u2.receiver && this.tryBindTransportEvents(u2.receiver), DC("PRELOAD_MEDIA_COUNT") > 0) {
              this.remoteSDP.preloadRemoteMedia();
              const e3 = this.remoteSDP.toString();
              await this.peerConnection.setRemoteDescription({ type: "offer", sdp: e3 });
              const t3 = await this.peerConnection.createAnswer();
              await this.peerConnection.setLocalDescription(t3);
            }
          } catch (e3) {
            throw new VT(xT.EXCHANGE_SDP_FAILED, "P2PConnection.connect failed; ".concat(e3.toString()));
          }
        }
        send(e2, t2, i2) {
          var n2 = this;
          return OP(function* () {
            const s2 = yield SP(n2.mutex.lock("From P2PConnection.send"));
            try {
              if (!n2.remoteSDP)
                throw new Error("Cannot call P2PConnection.send before remote SDP created");
              const r2 = [];
              e2.forEach((e3) => {
                const t3 = n2.peerConnection.addTransceiver(e3._mediaStreamTrack, { direction: "sendonly" });
                r2.push(t3), e3._updateRtpTransceiver(t3);
              }), RT() && true === DC("SIMULCAST") && (yield SP(n2.applySimulcastForFirefox(r2, e2)));
              const o2 = yield SP(n2.peerConnection.createOffer()), a2 = n2.remoteSDP.predictReceivingMids(e2.length), c2 = n2.mungSendOfferSDP(o2.sdp, e2, a2), d2 = YP.parse(c2), l2 = a2.map((e3) => {
                const t3 = d2.mediaDescriptions.find((t4) => t4.attributes.mid === e3);
                if (!t3)
                  throw new Error("Cannot extract ssrc from mediaDescription.");
                return fL(t3, DC("USE_PUB_RTX"));
              });
              let u2;
              try {
                u2 = yield l2;
              } catch (s3) {
                u2 = [], n2.remoteSDP.receive(e2, t2, i2, u2);
                const r3 = n2.remoteSDP.toString();
                throw yield SP(n2.peerConnection.setLocalDescription({ type: "offer", sdp: c2 })), yield SP(n2.peerConnection.setRemoteDescription({ type: "answer", sdp: r3 })), yield SP(n2.stopSending(a2, true)), s3;
              }
              n2.remoteSDP.receive(e2, t2, i2, u2);
              const h2 = n2.remoteSDP.toString(), p2 = n2.logSDPExchange(c2, "offer", "local", "send");
              return yield SP(n2.peerConnection.setLocalDescription({ type: "offer", sdp: c2 })), yield SP(n2.applySimulcastEncodings(r2, e2)), yield SP(n2.applySendEncodings(r2, e2)), null == p2 || p2(h2), yield SP(n2.peerConnection.setRemoteDescription({ type: "answer", sdp: h2 })), r2.map((e3, t3) => {
                const i3 = a2[t3];
                return { localSSRC: l2[t3], id: i3, transceiver: e3 };
              });
            } catch (e3) {
              throw e3 instanceof VT ? e3 : new VT(xT.EXCHANGE_SDP_FAILED, "P2PConnection.send failed; ".concat(e3.toString()));
            } finally {
              s2();
            }
          })();
        }
        async createDataChannels(e2, t2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.createDataChannels before remote SDP created");
            let i2 = this.dataStreamChannelMap.get(e2);
            i2 && "open" === i2.readyState ? YC.debug("[P2PConnection] Channels are already available and can be reused directly.") : (i2 = this.peerConnection.createDataChannel("datastream-channel", { ordered: false, maxRetransmits: DC("DATASTREAM_MAX_RETRANSMITS") }), i2.binaryType = "arraybuffer", this.dataStreamChannelMap.set(e2, i2)), t2.forEach((e3) => {
              e3._updateOriginDataChannel(i2);
            });
            const { needExchangeSDP: n2 } = this.remoteSDP.sendDataChannel();
            if (n2) {
              const e3 = this.remoteSDP.toString();
              await this.peerConnection.setRemoteDescription({ type: "offer", sdp: e3 });
              const t3 = await this.peerConnection.createAnswer();
              await this.peerConnection.setLocalDescription(t3), YC.debug("[P2PConnection] createDataChannels by exchanging SDP.");
            } else
              YC.debug("[P2PConnection] createDataChannels no need to exchange SDP.");
            return;
          } catch (e3) {
            throw e3 instanceof VT ? e3 : new VT(xT.EXCHANGE_SDP_FAILED, "P2PConnection.createDataChannels failed; ".concat(e3.toString()));
          }
        }
        async stopDataChannels(e2) {
          try {
            const t2 = this.dataStreamChannelMap.get(e2);
            return null == t2 || t2.close(), void this.dataStreamChannelMap.delete(e2);
          } catch (e3) {
            throw e3 instanceof VT ? e3 : new VT(xT.DATACHANNEL_FAILED, "P2PConnection.stopDataChannels failed; ".concat(e3.toString()));
          }
        }
        async stopSending(e2, t2) {
          const i2 = t2 ? void 0 : await this.mutex.lock("From P2PConnection.stopSending");
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.stopSending before remote SDP created");
            const t3 = this.peerConnection.getTransceivers().filter((t4) => -1 !== e2.indexOf(t4.mid));
            if (t3.length !== e2.length)
              throw new Error("Transceivers' length doesn't match mids' length when trying to call P2PConnection.stopSending.");
            t3.map((e3) => {
              var t4;
              e3.direction = "inactive", null === (t4 = e3.stop) || void 0 === t4 || t4.call(e3);
            });
            const n2 = await this.peerConnection.createOffer(), s2 = this.logSDPExchange(n2.sdp || "", "offer", "local", "stopSending");
            await this.peerConnection.setLocalDescription(n2), this.remoteSDP.stopReceiving(e2);
            const r2 = this.remoteSDP.toString();
            null == s2 || s2(r2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: r2 });
          } catch (e3) {
            throw new VT(xT.EXCHANGE_SDP_FAILED, "P2PConnection.stopSending failed; ".concat(e3.toString()));
          } finally {
            i2 && i2();
          }
        }
        async receive(e2, t2, i2, n2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.receive ".concat(e2, " before remoteSDP created."));
            const { mid: s2, needExchangeSDP: r2 } = this.remoteSDP.send(e2, t2, i2, n2);
            if (r2) {
              const t3 = this.remoteSDP.toString(), i3 = this.logSDPExchange(t3, "offer", "remote", "receive");
              await this.peerConnection.setRemoteDescription({ type: "offer", sdp: t3 });
              const n3 = await this.peerConnection.createAnswer(), r3 = this.mungReceiveAnswerSDP(n3.sdp, s2, e2);
              null == i3 || i3(r3 || ""), await this.peerConnection.setLocalDescription({ type: "answer", sdp: r3 }), YC.debug("[".concat(this.store.clientId, "] [P2PConnection] receive ").concat(e2, " by exchanging SDP."));
            } else
              YC.debug("[".concat(this.store.clientId, "] [P2PConnection] receive ").concat(e2, " no need to exchange SDP."));
            const o2 = this.peerConnection.getTransceivers().find((e3) => e3.mid === s2);
            if (!o2)
              throw new Error("Cannot get transceiver after setLocalDescription.");
            return { track: o2.receiver.track, id: s2, transceiver: o2 };
          } catch (e3) {
            throw new VT(xT.EXCHANGE_SDP_FAILED, "P2PConnection.receive failed; ".concat(e3.toString()));
          }
        }
        async batchReceive(e2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.batchReceive before remoteSDP created.");
            const { mids: t2, needExchangeSDP: i2 } = this.remoteSDP.batchSend(e2);
            if (i2) {
              const e3 = this.remoteSDP.toString(), t3 = this.logSDPExchange(e3, "offer", "remote", "receive");
              await this.peerConnection.setRemoteDescription({ type: "offer", sdp: e3 });
              const i3 = await this.peerConnection.createAnswer();
              null == t3 || t3(i3.sdp || ""), await this.peerConnection.setLocalDescription(i3), YC.debug("[".concat(this.store.clientId, "] [P2PConnection] batchReceive by exchanging SDP."));
            } else
              YC.debug("[".concat(this.store.clientId, "] [P2PConnection] batchReceive no need to exchange SDP."));
            return t2.map((e3) => {
              const t3 = this.peerConnection.getTransceivers().find((t4) => t4.mid === e3);
              if (!t3)
                throw new Error("Cannot get transceiver after setLocalDescription.");
              return { track: t3.receiver.track, id: e3, transceiver: t3 };
            });
          } catch (e3) {
            throw new VT(xT.EXCHANGE_SDP_FAILED, "P2PConnection.receive failed; ".concat(e3.toString()));
          }
        }
        async stopReceiving(e2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.stopReceiving before remote SDP created.");
            this.remoteSDP.stopSending(e2);
            const t2 = this.remoteSDP.toString(), i2 = this.logSDPExchange(t2, "offer", "remote", "stopReceiving");
            await this.peerConnection.setRemoteDescription({ type: "offer", sdp: t2 });
            const n2 = await this.peerConnection.createAnswer();
            null == i2 || i2(n2.sdp || ""), await this.peerConnection.setLocalDescription(n2);
          } catch (e3) {
            throw new VT(xT.EXCHANGE_SDP_FAILED, "P2PConnection stopReceiving failed; ".concat(e3.toString()));
          }
        }
        async muteRemote(e2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.muteRemote mid=".concat(e2, " before remote SDP created."));
            this.remoteSDP.mute(e2);
            const t2 = this.remoteSDP.toString(), i2 = this.logSDPExchange(t2, "offer", "remote", "muteRemote");
            await this.peerConnection.setRemoteDescription({ type: "offer", sdp: t2 });
            const n2 = await this.peerConnection.createAnswer();
            null == i2 || i2(n2.sdp || ""), await this.peerConnection.setLocalDescription(n2);
          } catch (e3) {
            throw new VT(xT.EXCHANGE_SDP_FAILED, "P2PConnection.muteRemote failed; ".concat(e3.toString()));
          }
        }
        async unmuteRemote(e2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.unmuteRemote mid=".concat(e2, " before remote SDP created."));
            this.remoteSDP.unmute(e2);
            const t2 = this.remoteSDP.toString(), i2 = this.logSDPExchange(t2, "offer", "remote", "unmuteRemote");
            await this.peerConnection.setRemoteDescription({ type: "offer", sdp: t2 });
            const n2 = await this.peerConnection.createAnswer();
            null == i2 || i2(n2.sdp || ""), await this.peerConnection.setLocalDescription(n2);
          } catch (e3) {
            throw new VT(xT.EXCHANGE_SDP_FAILED, "P2PConnection.unmuteRemote failed; ".concat(e3.toString()));
          }
        }
        async muteLocal(e2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.muteLocal before remote SDP created.");
            const t2 = this.peerConnection.getTransceivers().filter((t3) => t3.mid && -1 !== e2.indexOf(t3.mid));
            if (t2.length !== e2.length)
              throw new Error("Transceivers' length doesn't match mids' length.");
            t2.map((e3) => {
              e3.direction = "inactive";
            });
            const i2 = await this.peerConnection.createOffer(), n2 = this.logSDPExchange(i2.sdp || "", "offer", "local", "muteLocal");
            await this.peerConnection.setLocalDescription(i2), this.remoteSDP.muteRemote(e2);
            const s2 = this.remoteSDP.toString();
            null == n2 || n2(s2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: s2 });
          } catch (e3) {
            throw new VT(xT.EXCHANGE_SDP_FAILED, "P2PConnection.muteLocal failed; ".concat(e3.toString()));
          }
        }
        async unmuteLocal(e2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.unmuteLocal before remote SDP created.");
            const t2 = this.peerConnection.getTransceivers().filter((t3) => t3.mid && -1 !== e2.indexOf(t3.mid));
            if (t2.length !== e2.length)
              throw new Error("Transceivers' length doesn't match mids' length.");
            t2.map(async (e3, t3) => {
              e3.direction = "sendonly";
            });
            const i2 = await this.peerConnection.createOffer(), n2 = this.logSDPExchange(i2.sdp || "", "offer", "local", "unmuteLocal");
            await this.peerConnection.setLocalDescription(i2), this.remoteSDP.unmuteRemote(e2);
            const s2 = this.remoteSDP.toString();
            null == n2 || n2(s2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: s2 });
          } catch (e3) {
            throw new VT(xT.EXCHANGE_SDP_FAILED, "P2PConnection.unmuteLocal failed; ".concat(e3.toString()));
          }
        }
        restartICE(e2) {
          var t2 = this;
          return OP(function* () {
            const i2 = yield SP(t2.mutex.lock("From P2PConnection.restartICE"));
            try {
              if (!t2.remoteSDP)
                throw new Error("Cannot restartICE before remoteSDP created.");
              if (wA().supportPCSetConfiguration) {
                const i3 = t2.peerConnection.getConfiguration(), n3 = e2 === pv.RELAY ? "relay" : "all";
                i3.iceTransportPolicy !== n3 && (YC.debug("[".concat(t2.store.clientId, "] restartICE change iceTransportPolicy from [").concat(i3.iceTransportPolicy, "] to [").concat(n3, "]")), i3.iceTransportPolicy = n3, t2.peerConnection.setConfiguration(i3));
              } else if (e2 === pv.RELAY)
                return;
              t2.remoteSDP.updateCandidates(e2);
              const n2 = yield SP(t2.peerConnection.createOffer({ iceRestart: true }));
              if (!n2.sdp)
                throw new Error("Cannot restartICE because restart offer SDP does not exist.");
              const s2 = mL(n2.sdp), { remoteIceParameters: r2 } = yield s2.iceParameters;
              t2.remoteSDP.restartICE(r2);
              const o2 = t2.remoteSDP.toString(), a2 = t2.logSDPExchange(n2.sdp || "", "offer", "local", "restartICE");
              t2.store.descriptionStart(), yield SP(t2.peerConnection.setLocalDescription(n2)), null == a2 || a2(o2), yield SP(t2.peerConnection.setRemoteDescription({ type: "answer", sdp: o2 }));
            } catch (e3) {
              YC.warning("[".concat(t2.store.clientId, "] restart ICE failed, abort operation"), e3);
            } finally {
              i2();
            }
          })();
        }
        close() {
          var e2;
          this.peerConnection.close(), null === (e2 = this.onConnectionStateChange) || void 0 === e2 || e2.call(this, "closed"), this.tryUnbindTransportEvents(), this.unbindPCEvents(), this.unbindStatsEvents(), this.removeAllListeners(), this.transportEventReceiver = void 0, this.statsFilter.destroy(), this.dataStreamChannelMap.clear();
        }
        getStats() {
          return this.statsFilter.getStats();
        }
        getRemoteVideoIsReady(e2) {
          return this.statsFilter.getVideoIsReady(e2);
        }
        async updateEncoderConfig(e2, t2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call P2PConnection.updateEncoderConfig before remote SDP created.");
            const i2 = await this.peerConnection.createOffer(), n2 = this.mungSendOfferSDP(i2.sdp, [t2], [e2]);
            this.remoteSDP.updateRecvMedia(e2, t2);
            const s2 = this.remoteSDP.toString(), r2 = this.logSDPExchange(n2, "offer", "local", "updateEncoderConfig");
            await this.peerConnection.setLocalDescription({ type: "offer", sdp: n2 }), null == r2 || r2(s2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: s2 });
          } catch (e3) {
            throw new VT(xT.EXCHANGE_SDP_FAILED, e3.toString());
          }
        }
        async updateSendParameters(e2, t2) {
          const i2 = this.peerConnection.getTransceivers().filter((t3) => t3.mid === e2);
          1 === i2.length && (this.isVP8Simulcast(t2) ? RT() || await this.applySimulcastEncodings(i2, [t2]) : await this.applySendEncodings(i2, [t2]));
        }
        setStatsRemoteVideoIsReady(e2, t2) {
          this.statsFilter.setVideoIsReady2(e2, t2);
        }
        async replaceTrack(e2, t2) {
          const i2 = this.peerConnection.getTransceivers().find((e3) => e3.mid === t2);
          i2 && await i2.sender.replaceTrack(e2._mediaStreamTrack);
        }
        async getSelectedCandidatePair() {
          const e2 = this.peerConnection.getReceivers();
          if (e2.length > 0 && e2[0].transport && e2[0].transport.iceTransport && e2[0].transport.iceTransport.getSelectedCandidatePair && e2[0].transport.iceTransport.getSelectedCandidatePair()) {
            const t2 = e2[0].transport.iceTransport, { local: i2, remote: n2 } = t2.getSelectedCandidatePair();
            return { local: Mk(Mk({}, XP), {}, { candidateType: i2.type, protocol: i2.protocol, address: i2.address, port: i2.port }), remote: Mk(Mk({}, XP), {}, { candidateType: n2.type, protocol: n2.protocol, address: n2.address, port: n2.port }) };
          }
          return this.statsFilter.getSelectedCandidatePair();
        }
        bindPCEvents() {
          this.peerConnection.oniceconnectionstatechange = () => {
            var e2;
            null === (e2 = this.onICEConnectionStateChange) || void 0 === e2 || e2.call(this, this.peerConnection.iceConnectionState);
          }, this.peerConnection.onconnectionstatechange = () => {
            var e2;
            null === (e2 = this.onConnectionStateChange) || void 0 === e2 || e2.call(this, this.peerConnection.connectionState);
          }, this.peerConnection.onicecandidate = (e2) => {
            e2.candidate ? this.localCandidateCount += 1 : (this.peerConnection.onicecandidate = null, this.allCandidatesReceived = true, YC.debug("[".concat(this.store.clientId, "] [pc-").concat(this.store.p2pId, "] local candidate count"), this.localCandidateCount));
          }, setTimeout(() => {
            this.allCandidatesReceived || (this.allCandidatesReceived = true, YC.debug("[".concat(this.store.clientId, "] [pc-").concat(this.store.p2pId, "] onicecandidate timeout, local candidate count"), this.localCandidateCount));
          }, DC("CANDIDATE_TIMEOUT"));
        }
        unbindPCEvents() {
          this.peerConnection.oniceconnectionstatechange = null, this.peerConnection.onconnectionstatechange = null, this.peerConnection.onsignalingstatechange = null, this.peerConnection.onicecandidateerror = null, this.peerConnection.onicecandidate = null, this.peerConnection.ontrack = null;
        }
        static resolvePCConfiguration(e2) {
          const t2 = { iceServers: [] };
          return e2.iceServers ? t2.iceServers = e2.iceServers : e2.turnServer && "off" !== e2.turnServer.mode && (_g(e2.turnServer.servers) ? t2.iceServers = e2.turnServer.servers : (t2.iceServers && t2.iceServers.push(...Uk.turnServerConfigToIceServers(e2.turnServer.servers)), DC("USE_TURN_SERVER_OF_GATEWAY") && t2.iceServers && e2.turnServer.serversFromGateway && t2.iceServers.push(...Uk.turnServerConfigToIceServers(e2.turnServer.serversFromGateway)), DC("FORCE_TURN_TCP") ? t2.iceTransportPolicy = "relay" : e2.turnServer.servers.concat(e2.turnServer.serversFromGateway || []).forEach((e3) => {
            e3.forceturn && (t2.iceTransportPolicy = "relay");
          }))), DC("ENABLE_ENCODED_TRANSFORM") && wA().supportWebRTCEncodedTransform && (t2.encodedInsertableStreams = true), t2;
        }
        static turnServerConfigToIceServers(e2) {
          const t2 = [];
          return e2.forEach((e3) => {
            e3.security ? e3.tcpport && t2.push({ username: e3.username, credential: e3.password, credentialType: "password", urls: "turns:".concat(Iy(e3.turnServerURL), ":").concat(e3.tcpport, "?transport=tcp") }) : (e3.udpport && !DC("FORCE_TURN_TCP") && t2.push({ username: e3.username, credential: e3.password, credentialType: "password", urls: "turn:".concat(e3.turnServerURL, ":").concat(e3.udpport, "?transport=udp") }), e3.tcpport && t2.push({ username: e3.username, credential: e3.password, credentialType: "password", urls: "turn:".concat(e3.turnServerURL, ":").concat(e3.tcpport, "?transport=tcp") }));
          }), t2;
        }
        tryBindTransportEvents(e2) {
          const t2 = e2.transport;
          if (t2) {
            this.transportEventReceiver = e2, t2.onstatechange = () => {
              var e3;
              null != t2 && t2.state && (null === (e3 = this.onDTLSTransportStateChange) || void 0 === e3 || e3.call(this, t2.state));
            }, t2.onerror = (e3) => {
              var t3;
              null === (t3 = this.onDTLSTransportError) || void 0 === t3 || t3.call(this, "error" in e3 ? e3.error : e3);
            };
            const i2 = t2.iceTransport;
            i2 && (i2.onstatechange = () => {
              const e3 = null == t2 ? void 0 : t2.iceTransport.state;
              var i3;
              e3 && (null === (i3 = this.onICETransportStateChange) || void 0 === i3 || i3.call(this, e3));
            }, i2.getSelectedCandidatePair && (i2.onselectedcandidatepairchange = () => {
              if (i2.getSelectedCandidatePair()) {
                const { local: e3, remote: t3 } = i2.getSelectedCandidatePair();
                YC.info("[".concat(this.store.clientId, "] [pc-").concat(this.store.p2pId, "] selectedcandidatepairchange: local ").concat(JSON.stringify({ candidateType: e3.type, protocol: e3.protocol }), ", remote ").concat(JSON.stringify({ candidateType: t3.type, protocol: t3.protocol, address: t3.address, port: t3.port }), " )"));
              }
            }));
          }
        }
        tryUnbindTransportEvents() {
          this.transportEventReceiver && this.transportEventReceiver.transport && (this.transportEventReceiver.transport.onstatechange = null, this.transportEventReceiver.transport.onerror = null, this.transportEventReceiver.transport.iceTransport && (this.transportEventReceiver.transport.iceTransport.onstatechange = null));
        }
        async updateRtpSenderEncodings(e2, t2) {
          var i2;
          if (!t2) {
            t2 = this.peerConnection.getSenders().find((t3) => t3.track === e2._mediaStreamTrack);
          }
          if (!t2)
            return YC.warn("[".concat(e2.getTrackId(), "] no rtpSender found}"));
          if (this.isVP8Simulcast(e2))
            return YC.warn("[updateRtpSenderEncodings] Track is VP8 simulcast, please apply simulcast encodings");
          if (!wA().supportSetRtpSenderParameters)
            return YC.warn("[updateRtpSenderEncodings] Browser not support set rtp-sender parameters");
          const n2 = {}, s2 = {};
          switch (e2._optimizationMode) {
            case "motion":
              n2.degradationPreference = "maintain-framerate";
              break;
            case "detail":
              n2.degradationPreference = "maintain-resolution";
              break;
            default:
              n2.degradationPreference = "balanced";
          }
          if (e2._encoderConfig) {
            var r2;
            const { bitrateMax: t3, frameRate: i3, scaleResolutionDownBy: n3 } = e2._encoderConfig;
            t3 && (s2.maxBitrate = 1e3 * t3), (bn(r2 = e2._hints).call(r2, YA.LOW_STREAM) || e2.isUseScaleResolutionDownBy) && (i3 && (s2.maxFramerate = yy(i3)), n3 && n3 >= 1 && (s2.scaleResolutionDownBy = n3));
          }
          if (DC("DSCP_TYPE") && kT()) {
            var o2;
            const e3 = DC("DSCP_TYPE");
            bn(o2 = ["very-low", "low", "medium", "high"]).call(o2, e3) && (s2.networkPriority = e3);
          }
          const a2 = t2.getParameters(), c2 = null === (i2 = a2.encodings) || void 0 === i2 ? void 0 : i2[0];
          RT() && !c2 && (n2.encodings = [s2]), c2 && Object.assign(c2, s2), Object.assign(a2, n2), YC.debug("[".concat(e2.getTrackId(), "] updateRtpSenderEncodings: ").concat(JSON.stringify(a2.encodings))), await t2.setParameters(a2);
        }
        async applySendEncodings(e2, t2) {
          try {
            if (!wA().supportSetRtpSenderParameters)
              return;
            if (e2.length !== t2.length)
              return;
            for (let i2 = 0; i2 < e2.length; i2++) {
              const n2 = e2[i2], s2 = t2[i2];
              s2 instanceof Nw && !this.isVP8Simulcast(s2) && await this.updateRtpSenderEncodings(s2, n2.sender);
            }
          } catch (e3) {
            YC.debug("[".concat(this.store.clientId, "] Apply RTPSendEncodings failed."));
          }
        }
        mungSendOfferSDP(e2, t2, i2) {
          const n2 = YP.parse(e2);
          return t2.forEach((e3, t3) => {
            const s2 = i2[t3], r2 = n2.mediaDescriptions.find((e4) => e4.attributes.mid === s2);
            r2 && (SL(r2, e3), yL(r2, e3, this.store.codec));
          }), YP.print(n2);
        }
        mungReceiveAnswerSDP(e2, t2, i2) {
          const n2 = YP.parse(e2), s2 = n2.mediaDescriptions.find((e3) => e3.attributes.mid === t2);
          return s2 && (i2 === hv.AUDIO && "audio" === s2.media.mediaType && NL(s2), this.useXR && DL(n2)), YP.print(n2);
        }
        bindStatsEvents() {
          this.statsFilter.onFirstAudioReceived = (e2) => {
            var t2;
            null === (t2 = this.onFirstAudioReceived) || void 0 === t2 || t2.call(this, e2);
          }, this.statsFilter.onFirstVideoReceived = (e2) => {
            var t2;
            null === (t2 = this.onFirstVideoReceived) || void 0 === t2 || t2.call(this, e2);
          }, this.statsFilter.onFirstAudioDecoded = (e2) => {
            var t2;
            null === (t2 = this.onFirstAudioDecoded) || void 0 === t2 || t2.call(this, e2);
          }, this.statsFilter.onFirstVideoDecoded = (e2, t2, i2) => {
            var n2;
            null === (n2 = this.onFirstVideoDecoded) || void 0 === n2 || n2.call(this, e2, t2, i2);
          }, this.statsFilter.onSelectedLocalCandidateChanged = (e2, t2) => {
            var i2;
            null === (i2 = this.onSelectedLocalCandidateChanged) || void 0 === i2 || i2.call(this, e2, t2);
          }, this.statsFilter.onSelectedRemoteCandidateChanged = (e2, t2) => {
            var i2;
            null === (i2 = this.onSelectedRemoteCandidateChanged) || void 0 === i2 || i2.call(this, e2, t2);
          }, this.statsFilter.onFirstVideoDecodedTimeout = (e2) => {
            var t2;
            null === (t2 = this.onFirstVideoDecodedTimeout) || void 0 === t2 || t2.call(this, e2);
          };
        }
        unbindStatsEvents() {
          this.statsFilter.onFirstAudioReceived = void 0, this.statsFilter.onFirstVideoReceived = void 0, this.statsFilter.onFirstAudioDecoded = void 0, this.statsFilter.onFirstVideoDecoded = void 0, this.statsFilter.onSelectedLocalCandidateChanged = void 0, this.statsFilter.onSelectedRemoteCandidateChanged = void 0, this.statsFilter.onFirstVideoDecodedTimeout = void 0;
        }
        async applySimulcastForFirefox(e2, t2) {
          if (e2.length === t2.length)
            for (let a2 = 0; a2 < e2.length; a2++) {
              var i2, n2, s2, r2, o2;
              const c2 = e2[a2], d2 = t2[a2];
              if (d2 instanceof Nw && !bn(i2 = d2._hints).call(i2, YA.LOW_STREAM) && null !== (n2 = d2._encoderConfig) && void 0 !== n2 && n2.bitrateMax && (null === (s2 = d2._encoderConfig) || void 0 === s2 ? void 0 : s2.bitrateMax) > 200 && null !== (r2 = d2._scalabilityMode) && void 0 !== r2 && r2.numSpatialLayers && (null === (o2 = d2._scalabilityMode) || void 0 === o2 ? void 0 : o2.numSpatialLayers) > 1 && "vp8" === this.store.codec) {
                const e3 = {}, t3 = { high: 1e3 * (d2._encoderConfig.bitrateMax - 50), medium: 5e4 };
                e3.encodings = [{ rid: "m", active: true, maxBitrate: t3.medium, scaleResolutionDownBy: 4 }, { rid: "h", active: true, maxBitrate: t3.high }];
                const i3 = c2.sender.getParameters();
                await c2.sender.setParameters(Object.assign(i3, e3));
              }
            }
        }
        async applySimulcastEncodings(e2, t2) {
          if (!RT() && e2.length === t2.length)
            for (let i2 = 0; i2 < e2.length; i2++) {
              const n2 = t2[i2];
              if (n2 instanceof Nw && this.isVP8Simulcast(n2)) {
                const t3 = e2[i2], s2 = {}, r2 = { high: 1e3 * (n2._encoderConfig.bitrateMax - 50), medium: 5e4 };
                s2.encodings = [{ active: true, adaptivePtime: false, networkPriority: "high", priority: "high", maxBitrate: r2.high }, { active: true, adaptivePtime: false, networkPriority: "low", priority: "low", maxBitrate: r2.medium, scaleResolutionDownBy: 4 }];
                const o2 = t3.sender.getParameters();
                await t3.sender.setParameters(Object.assign(o2, s2));
              }
            }
        }
        isVP8Simulcast(e2) {
          var t2, i2, n2, s2, r2;
          return !!(e2 instanceof Nw && DC("SIMULCAST") && "vp8" === this.store.codec && !bn(t2 = e2._hints).call(t2, YA.LOW_STREAM) && null !== (i2 = e2._encoderConfig) && void 0 !== i2 && i2.bitrateMax && (null === (n2 = e2._encoderConfig) || void 0 === n2 ? void 0 : n2.bitrateMax) > 200 && null !== (s2 = e2._scalabilityMode) && void 0 !== s2 && s2.numSpatialLayers && (null === (r2 = e2._scalabilityMode) || void 0 === r2 ? void 0 : r2.numSpatialLayers) > 1);
        }
        logSDPExchange(e2, t2, i2, n2) {
          if (DC("SDP_LOGGING"))
            return YC.upload("[".concat(this.store.clientId, "] exchanging ").concat(i2, " ").concat(t2, " SDP during P2PConnection.").concat(n2, "\n"), e2), "offer" === t2 ? (e3) => {
              this.logSDPExchange(e3, "answer", "local" === i2 ? "remote" : "local", n2);
            } : void 0;
        }
        async getRemoteSSRC(e2) {
          if (!this.remoteSDP)
            return;
          const t2 = this.remoteSDP.getSSRC(e2);
          return null == t2 ? void 0 : t2[0].ssrcId;
        }
        setConfiguration(e2) {
          if (wA().supportPCSetConfiguration) {
            const t2 = Uk.resolvePCConfiguration(e2);
            this.peerConnection.setConfiguration(t2);
          }
        }
      }
      function xk(e2, t2, i2) {
        const n2 = e2[t2];
        if ("function" != typeof n2)
          throw new Error("Cannot use mutex on object property.");
        return i2.value = async function() {
          const e3 = this.mutex, i3 = await e3.lock("From P2PConnection.".concat(t2));
          try {
            for (var s2 = arguments.length, r2 = new Array(s2), o2 = 0; o2 < s2; o2++)
              r2[o2] = arguments[o2];
            return await n2.apply(this, r2);
          } finally {
            i3();
          }
        }, i2;
      }
      function Vk(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function Fk(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? Vk(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : Vk(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      UI([xk, xI("design:type", Function), xI("design:paramtypes", [Array, Array]), xI("design:returntype", tT)], Uk.prototype, "updateRemoteRTPCapabilities", null), UI([xk, xI("design:type", Function), xI("design:paramtypes", [Object, Object, Array, Object, String, String]), xI("design:returntype", tT)], Uk.prototype, "connect", null), UI([xk, xI("design:type", Function), xI("design:paramtypes", [Object, Array]), xI("design:returntype", tT)], Uk.prototype, "createDataChannels", null), UI([xk, xI("design:type", Function), xI("design:paramtypes", [String, Array, String, Object]), xI("design:returntype", tT)], Uk.prototype, "receive", null), UI([xk, xI("design:type", Function), xI("design:paramtypes", [Array]), xI("design:returntype", tT)], Uk.prototype, "batchReceive", null), UI([xk, xI("design:type", Function), xI("design:paramtypes", [Array]), xI("design:returntype", tT)], Uk.prototype, "stopReceiving", null), UI([xk, xI("design:type", Function), xI("design:paramtypes", [String]), xI("design:returntype", tT)], Uk.prototype, "muteRemote", null), UI([xk, xI("design:type", Function), xI("design:paramtypes", [String]), xI("design:returntype", tT)], Uk.prototype, "unmuteRemote", null), UI([xk, xI("design:type", Function), xI("design:paramtypes", [Array]), xI("design:returntype", tT)], Uk.prototype, "muteLocal", null), UI([xk, xI("design:type", Function), xI("design:paramtypes", [Array]), xI("design:returntype", tT)], Uk.prototype, "unmuteLocal", null), UI([xk, xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", void 0)], Uk.prototype, "close", null), UI([xk, xI("design:type", Function), xI("design:paramtypes", [String, _b]), xI("design:returntype", tT)], Uk.prototype, "updateEncoderConfig", null), UI([xk, xI("design:type", Function), xI("design:paramtypes", [String, _b]), xI("design:returntype", tT)], Uk.prototype, "updateSendParameters", null), UI([xk, xI("design:type", Function), xI("design:paramtypes", [_b, String]), xI("design:returntype", tT)], Uk.prototype, "replaceTrack", null), UI([xk, xI("design:type", Function), xI("design:paramtypes", [String]), xI("design:returntype", tT)], Uk.prototype, "getRemoteSSRC", null);
      const Bk = "v=0\no=- 0 0 IN IP4 127.0.0.1\ns=AgoraGateway\nt=0 0\na=group:BUNDLE 0\na=msid-semantic: WMS\na=ice-lite\nm=application 9 UDP/DTLS/SCTP webrtc-datachannel\nc=IN IP4 127.0.0.1\na=mid:0\n", jk = "9", Gk = 2e4, Wk = 4e4;
      class Hk {
        get localCapabilities() {
          return bg(this._localCapabilities);
        }
        get rtpCapabilities() {
          return bg(this._rtpCapabilities);
        }
        get candidates() {
          return bg(this._candidates);
        }
        get iceParameters() {
          return bg(this._iceParameters);
        }
        get dtlsParameters() {
          return bg(this._dtlsParameters);
        }
        constructor(e2) {
          nh(this, "sessionDesc", void 0), nh(this, "_localCapabilities", void 0), nh(this, "_rtpCapabilities", void 0), nh(this, "_candidates", void 0), nh(this, "_iceParameters", void 0), nh(this, "_dtlsParameters", void 0), nh(this, "setup", void 0), nh(this, "currentMidIndex", void 0), nh(this, "cname", void 0), nh(this, "firefoxSsrcMidMap", /* @__PURE__ */ new Map()), e2 = bg(e2);
          const { remoteIceParameters: t2, remoteDtlsParameters: i2, candidates: n2, remoteRTPCapabilities: s2, remoteSetup: r2, localCapabilities: o2, cname: a2 } = e2, c2 = YP.parse(Bk);
          this._rtpCapabilities = s2, this._candidates = n2, this._iceParameters = t2, this._dtlsParameters = i2, this._localCapabilities = o2, this.setup = r2, this.cname = a2;
          const d2 = this.rtpCapabilities.send;
          for (const e3 of c2.mediaDescriptions) {
            if (e3.attributes.iceUfrag = t2.iceUfrag, e3.attributes.icePwd = t2.icePwd, e3.attributes.fingerprints = i2.fingerprints, e3.attributes.candidates = n2, e3.attributes.setup = r2, "application" === e3.media.mediaType && (e3.attributes.sctpPort = "5000"), "video" === e3.media.mediaType && (e3.media.fmts = d2.videoCodecs.map((e4) => e4.payloadType.toString(10)), e3.attributes.payloads = d2.videoCodecs, e3.attributes.extmaps = d2.videoExtensions, DC("PRELOAD_MEDIA_COUNT") > 0)) {
              const { ssrcs: t3, ssrcGroups: i3 } = gL([{ ssrcId: Wk, rtx: DC("USE_SUB_RTX") ? 40001 : void 0 }], this.cname);
              e3.attributes.ssrcs = t3, e3.attributes.ssrcGroups = i3;
            }
            if ("audio" === e3.media.mediaType && (e3.media.fmts = d2.audioCodecs.map((e4) => e4.payloadType.toString(10)), e3.attributes.payloads = d2.audioCodecs, e3.attributes.extmaps = d2.audioExtensions, NL(e3), DC("PRELOAD_MEDIA_COUNT") > 0)) {
              const { ssrcs: t3, ssrcGroups: i3 } = gL([{ ssrcId: Gk }], this.cname);
              e3.attributes.ssrcs = t3, e3.attributes.ssrcGroups = i3;
            }
          }
          this.sessionDesc = c2, this.currentMidIndex = c2.mediaDescriptions.length - 1;
        }
        updateRemoteRTPCapabilities(e2) {
          const t2 = YP.parse(Bk);
          this._rtpCapabilities = e2;
          const i2 = this.rtpCapabilities.send;
          for (const e3 of t2.mediaDescriptions) {
            if (e3.attributes.iceUfrag = this._iceParameters.iceUfrag, e3.attributes.icePwd = this._iceParameters.icePwd, e3.attributes.fingerprints = this._dtlsParameters.fingerprints, e3.attributes.candidates = this._candidates, e3.attributes.setup = this.setup, "application" === e3.media.mediaType && (e3.attributes.sctpPort = "5000"), "video" === e3.media.mediaType && (e3.media.fmts = i2.videoCodecs.map((e4) => e4.payloadType.toString(10)), e3.attributes.payloads = i2.videoCodecs, e3.attributes.extmaps = i2.videoExtensions, DC("PRELOAD_MEDIA_COUNT") > 0)) {
              const { ssrcs: t3, ssrcGroups: i3 } = gL([{ ssrcId: Wk, rtx: DC("USE_SUB_RTX") ? 40001 : void 0 }], this.cname);
              e3.attributes.ssrcs = t3, e3.attributes.ssrcGroups = i3;
            }
            if ("audio" === e3.media.mediaType && (e3.media.fmts = i2.audioCodecs.map((e4) => e4.payloadType.toString(10)), e3.attributes.payloads = i2.audioCodecs, e3.attributes.extmaps = i2.audioExtensions, DC("PRELOAD_MEDIA_COUNT") > 0)) {
              const { ssrcs: t3, ssrcGroups: i3 } = gL([{ ssrcId: Gk }], this.cname);
              e3.attributes.ssrcs = t3, e3.attributes.ssrcGroups = i3;
            }
          }
          this.sessionDesc = t2, this.currentMidIndex = t2.mediaDescriptions.length - 1;
        }
        preloadRemoteMedia(e2) {
          this.rtpCapabilities;
          const t2 = this.candidates, i2 = this.dtlsParameters, n2 = this.iceParameters, s2 = this.rtpCapabilities.send;
          for (let r2 = 1; r2 < e2; r2++) {
            const e3 = 2 * r2 + Gk, o2 = 2 * r2 + Wk, { ssrcs: a2, ssrcGroups: c2 } = gL([{ ssrcId: e3 }], this.cname), { ssrcs: d2, ssrcGroups: l2 } = gL([{ ssrcId: o2, rtx: DC("USE_SUB_RTX") ? o2 + 1 : void 0 }], this.cname);
            this.sessionDesc.mediaDescriptions.push({ media: { mediaType: "video", port: jk, protos: ["UDP", "TLS", "RTP", "SAVPF"], fmts: s2.videoCodecs.map((e4) => e4.payloadType.toString(10)) }, connections: [{ nettype: "IN", addrtype: "IP4", address: "127.0.0.1" }], bandwidths: [], attributes: { iceUfrag: n2.iceUfrag, icePwd: n2.icePwd, unrecognized: [], candidates: t2, extmaps: s2.videoExtensions, fingerprints: i2.fingerprints, imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: d2, ssrcGroups: l2, rtcpFeedbackWildcards: [], payloads: s2.videoCodecs, rtcp: { port: "9", netType: "IN", addressType: "IP4", address: "0.0.0.0" }, setup: this.setup, direction: "sendonly", rtcpMux: true, rtcpRsize: true, mid: "".concat(2 * r2 - 1) } }), this.sessionDesc.mediaDescriptions.push({ media: { mediaType: "audio", port: jk, protos: ["UDP", "TLS", "RTP", "SAVPF"], fmts: s2.audioCodecs.map((e4) => e4.payloadType.toString(10)) }, connections: [{ nettype: "IN", addrtype: "IP4", address: "127.0.0.1" }], bandwidths: [], attributes: { iceUfrag: n2.iceUfrag, icePwd: n2.icePwd, unrecognized: [], candidates: t2, extmaps: s2.audioExtensions, fingerprints: i2.fingerprints, imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: a2, ssrcGroups: c2, rtcpFeedbackWildcards: [], payloads: s2.audioCodecs, rtcp: { port: "9", netType: "IN", addressType: "IP4", address: "0.0.0.0" }, setup: this.setup, direction: "sendonly", rtcpMux: true, rtcpRsize: true, mid: "".concat(2 * r2) } }), this.currentMidIndex += 2;
          }
          this.updateBundleMids();
        }
        toString() {
          return YP.print(this.sessionDesc);
        }
        send(e2, t2, i2, n2) {
          const { ssrcs: s2, ssrcGroups: r2 } = gL(t2, this.cname, DC("SYNC_GROUP") ? i2 : void 0), o2 = this.findPreloadMediaDesc(s2);
          if (o2) {
            if (RT() && this.firefoxSsrcMidMap.set(s2[0].ssrcId, o2.attributes.mid), n2 && (n2.twcc || n2.remb)) {
              const e3 = this.sessionDesc.mediaDescriptions.indexOf(o2);
              return this.sessionDesc.mediaDescriptions[e3] = this.mungSendMediaDesc(o2, n2), { mid: o2.attributes.mid, needExchangeSDP: true };
            }
            return { mid: o2.attributes.mid, needExchangeSDP: false };
          }
          {
            const t3 = this.findAvailableMediaIndex(e2, s2);
            let i3;
            return -1 === t3 || ST() || CT() || AT() || 0 === t3 && DC("USE_SUB_RTX") ? (i3 = this.createOrRecycleSendMedia(e2, s2, r2, "sendonly", n2), this.updateBundleMids()) : (i3 = bg(this.sessionDesc.mediaDescriptions[t3]), i3.attributes.direction = "sendonly", i3.attributes.ssrcs = s2, i3.attributes.ssrcGroups = r2, this.sessionDesc.mediaDescriptions[t3] = this.mungSendMediaDesc(i3, n2)), RT() && this.firefoxSsrcMidMap.set(s2[0].ssrcId, i3.attributes.mid), { mid: i3.attributes.mid, needExchangeSDP: true };
          }
        }
        batchSend(e2) {
          const t2 = e2.map((e3) => {
            let { kind: t3, ssrcMsg: i3, mslabel: n3 } = e3;
            return this.send(t3, i3, n3);
          }), i2 = [];
          let n2 = false;
          return t2.forEach((e3) => {
            let { mid: t3, needExchangeSDP: s2 } = e3;
            s2 && (n2 = true), i2.push(t3);
          }), { mids: i2, needExchangeSDP: n2 };
        }
        stopSending(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.filter((t3) => t3.attributes.mid && -1 !== e2.indexOf(t3.attributes.mid));
          if (t2.length !== e2.length)
            throw new Error("mediaDescriptions' length doesn't match mids' length when calling RemoteSDP.stopSending.");
          t2.forEach((e3) => {
            "0" === e3.attributes.mid || RT() || ST() || CT() ? e3.attributes.ssrcs = [] : (e3.attributes.ssrcs = [], e3.attributes.direction = "inactive", e3.media.port = "0");
          }), this.updateBundleMids();
        }
        mute(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.find((t3) => t3.attributes.mid === e2);
          if (!t2)
            throw new Error("mediaDescription not found with ".concat(e2, " in remote SDP when calling RemoteSDP.mute."));
          t2.attributes.direction = "inactive";
        }
        unmute(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.find((t3) => t3.attributes.mid === e2);
          if (!t2)
            throw new Error("mediaDescription not found with ".concat(e2, " in remote SDP when calling RemoteSDP.unmute."));
          t2.attributes.direction = "sendonly";
        }
        muteRemote(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.filter((t3) => bn(e2).call(e2, t3.attributes.mid || ""));
          if (t2.length !== e2.length)
            throw new Error("mediaDescriptions' length doesn't match mids' length when calling RemoteSDP.muteRemote.");
          t2.forEach((e3) => {
            e3.attributes.direction = "inactive";
          });
        }
        unmuteRemote(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.filter((t3) => bn(e2).call(e2, t3.attributes.mid || ""));
          if (t2.length !== e2.length)
            throw new Error("mediaDescriptions' length doesn't match mids' length when calling RemoteSDP.muteRemote.");
          t2.forEach((e3) => {
            e3.attributes.direction = "recvonly";
          });
        }
        receive(e2, t2, i2, n2) {
          e2.forEach((e3, s2) => {
            this.createOrRecycleRecvMedia(e3, [], "recvonly", t2, i2, n2[s2]);
          }), this.updateBundleMids();
        }
        stopReceiving(e2) {
          const t2 = this.sessionDesc.mediaDescriptions.filter((t3) => -1 !== e2.indexOf(t3.attributes.mid));
          if (t2.length !== e2.length)
            throw new Error("MediaDescriptions' length doesn't match mids's length when calling RemoteSDP.receive.");
          t2.forEach((e3) => {
            e3.media.port = "0", e3.attributes.direction = "inactive";
          }), this.updateBundleMids();
        }
        updateCandidates(e2) {
          e2 === pv.TCP ? this._candidates.forEach((e3) => {
            -1 === this._candidates.findIndex((t2) => "tcp" === t2.transport && t2.connectionAddress === e3.connectionAddress && t2.port === e3.port) && this._candidates.push(Fk(Fk({}, e3), {}, { foundation: "tcpcandidate", priority: Number(e3.priority) - 1 + "", transport: "tcp", port: Number(e3.port) + 90 + "" }));
          }) : this._candidates = this._candidates.filter((e3) => "tcp" !== e3.transport);
          for (const e3 of this.sessionDesc.mediaDescriptions)
            e3.attributes.candidates = this.candidates;
        }
        restartICE(e2) {
          e2 = bg(e2), this._iceParameters = e2, this.sessionDesc.mediaDescriptions.forEach((t2) => {
            t2.attributes.iceUfrag = e2.iceUfrag, t2.attributes.icePwd = e2.icePwd;
          });
        }
        predictReceivingMids(e2) {
          const t2 = [];
          for (let i2 = 0; i2 < e2; i2++)
            t2.push((this.currentMidIndex + i2 + 1).toString(10));
          return t2;
        }
        findAvailableMediaIndex(e2, t2) {
          return this.sessionDesc.mediaDescriptions.findIndex((i2) => {
            const n2 = i2.media.mediaType === e2 && "0" !== i2.media.port && ("sendonly" === i2.attributes.direction || "sendrecv" === i2.attributes.direction) && 0 === i2.attributes.ssrcs.length;
            if (RT()) {
              if (n2) {
                const e3 = this.firefoxSsrcMidMap.get(t2[0].ssrcId);
                return !(e3 || "0" !== i2.attributes.mid && "1" !== i2.attributes.mid) || !(!e3 || e3 !== i2.attributes.mid);
              }
              return false;
            }
            return n2;
          });
        }
        createOrRecycleRecvMedia(e2, t2, i2, n2, s2, r2) {
          const o2 = e2._mediaStreamTrack.kind, a2 = this.rtpCapabilities.recv, c2 = PL(o2, a2, this.localCapabilities.send, o2 === hv.VIDEO ? n2 : s2), d2 = o2 === hv.VIDEO ? a2.videoExtensions : a2.audioExtensions;
          this.currentMidIndex += 1;
          const l2 = "".concat(this.currentMidIndex);
          let u2 = { media: { mediaType: o2, port: jk, protos: ["UDP", "TLS", "RTP", "SAVPF"], fmts: c2.map((e3) => e3.payloadType.toString(10)) }, connections: [{ nettype: "IN", addrtype: "IP4", address: "127.0.0.1" }], bandwidths: [], attributes: { iceUfrag: this.iceParameters.iceUfrag, icePwd: this.iceParameters.icePwd, unrecognized: [], candidates: this.candidates, extmaps: d2, fingerprints: this.dtlsParameters.fingerprints, imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: t2, ssrcGroups: [], rtcpFeedbackWildcards: [], payloads: c2, rtcp: { port: "9", netType: "IN", addressType: "IP4", address: "0.0.0.0" }, setup: this.setup, direction: i2, rtcpMux: true, rtcpRsize: true, mid: "".concat(l2) } };
          u2 = this.mungRecvMediaDsec(u2, e2, r2);
          const h2 = this.findFirstClosedMedia(o2);
          if (h2) {
            const e3 = this.sessionDesc.mediaDescriptions.indexOf(h2);
            this.sessionDesc.mediaDescriptions[e3] = u2;
          } else
            this.sessionDesc.mediaDescriptions.push(u2);
          return u2;
        }
        updateRemoteCodec(e2, t2, i2) {
          const n2 = [...new Set(this._rtpCapabilities.recv.videoCodecs.map((e3) => e3.rtpMap && e3.rtpMap.encodingName.toLowerCase() || "").filter((e3) => {
            var t3;
            return bn(t3 = Object.keys(xC)).call(t3, e3);
          }))], s2 = new Set(t2);
          if (n2.every((e3) => s2.has(e3)))
            return YC.debug("codecs has not changed, no need to updateRemoteCodec, codecs: ".concat(t2)), false;
          const r2 = this._rtpCapabilities.recv.videoCodecs.filter((e3) => t2.some((t3) => {
            var i3;
            return bn(i3 = e3.rtpMap && e3.rtpMap.encodingName.toLowerCase() || "").call(i3, t3);
          }));
          if (0 === r2.length)
            return YC.debug("updateRemoteCodec failed, because cannot find matched codec, remoteCapabilities codecs: ".concat(n2, " codecs: ").concat(t2)), false;
          const o2 = [...new Set(r2.map((e3) => e3.rtpMap && e3.rtpMap.encodingName.toLowerCase() || ""))];
          let a2;
          if (YC.debug("updateRemoteCodec, from ".concat(n2, " to ").concat(o2)), 0 === e2.length)
            a2 = this.sessionDesc.mediaDescriptions.filter((e3) => "video" === e3.media.mediaType && "recvonly" === e3.attributes.direction);
          else if (a2 = this.sessionDesc.mediaDescriptions.filter((t3) => t3.attributes.mid && bn(e2).call(e2, t3.attributes.mid) && "recvonly" === t3.attributes.direction), a2.length !== e2.length)
            return YC.debug("updateRemoteCodec failed, because cannot find mids, mids: ".concat(e2, ", codecs: ").concat(t2)), false;
          this._rtpCapabilities.recv.videoCodecs = r2;
          const c2 = this.localCapabilities.send, d2 = this.rtpCapabilities.recv, l2 = PL(hv.VIDEO, d2, c2, i2);
          return a2.forEach((e3) => {
            const t3 = l2.map((e4) => e4.payloadType.toString(10));
            YC.debug("updateRemoteCodec mid: ".concat(e3.attributes.mid, ", from ").concat(e3.attributes.payloads, " to ").concat(l2)), e3.attributes.payloads = l2, e3.media.fmts = t3;
          }), true;
        }
        createOrRecycleSendMedia(e2, t2, i2, n2, s2) {
          const r2 = this.rtpCapabilities.send, o2 = e2 === hv.VIDEO ? r2.videoCodecs : r2.audioCodecs, a2 = e2 === hv.VIDEO ? r2.videoExtensions : r2.audioExtensions;
          this.currentMidIndex += 1;
          const c2 = "".concat(this.currentMidIndex);
          let d2 = { media: { mediaType: e2, port: jk, protos: ["UDP", "TLS", "RTP", "SAVPF"], fmts: o2.map((e3) => e3.payloadType.toString(10)) }, connections: [{ nettype: "IN", addrtype: "IP4", address: "127.0.0.1" }], bandwidths: [], attributes: { iceUfrag: this.iceParameters.iceUfrag, icePwd: this.iceParameters.icePwd, unrecognized: [], candidates: this.candidates, extmaps: a2, fingerprints: this.dtlsParameters.fingerprints, imageattr: [], msids: [], remoteCandidatesList: [], rids: [], ssrcs: t2, ssrcGroups: i2, rtcpFeedbackWildcards: [], payloads: o2, rtcp: { port: "9", netType: "IN", addressType: "IP4", address: "0.0.0.0" }, setup: this.setup, direction: n2, rtcpMux: true, rtcpRsize: true, mid: "".concat(c2) } };
          d2 = this.mungSendMediaDesc(d2, s2);
          const l2 = this.findFirstClosedMedia(e2);
          if (l2) {
            const e3 = this.sessionDesc.mediaDescriptions.indexOf(l2);
            this.sessionDesc.mediaDescriptions[e3] = d2;
          } else
            this.sessionDesc.mediaDescriptions.push(d2);
          return d2;
        }
        updateBundleMids() {
          this.sessionDesc.attributes.groups[0].identificationTag = this.sessionDesc.mediaDescriptions.filter((e2) => "0" !== e2.media.port).map((e2) => e2.attributes.mid);
        }
        mungRecvMediaDsec(e2, t2, i2) {
          const n2 = bg(e2);
          return RL(n2), SL(n2, t2), CL(n2, t2), IL(n2), vL(n2, i2, this.localCapabilities.send), n2;
        }
        mungSendMediaDesc(e2, t2) {
          const i2 = bg(e2);
          return vL(i2, t2, this.localCapabilities.recv), NL(i2), i2;
        }
        updateRecvMedia(e2, t2) {
          const i2 = this.sessionDesc.mediaDescriptions.findIndex((t3) => t3.attributes.mid === e2);
          if (-1 !== i2) {
            const e3 = this.mungRecvMediaDsec(this.sessionDesc.mediaDescriptions[i2], t2);
            this.sessionDesc.mediaDescriptions[i2] = e3;
          }
        }
        bumpMid(e2) {
          this.currentMidIndex += e2;
        }
        findFirstClosedMedia(e2) {
          return this.sessionDesc.mediaDescriptions.find((t2) => RT() ? "0" === t2.media.port && t2.media.mediaType === e2 : "0" === t2.media.port);
        }
        findPreloadMediaDesc(e2) {
          return this.sessionDesc.mediaDescriptions.find((t2) => {
            var i2;
            return (null === (i2 = t2.attributes) || void 0 === i2 || null === (i2 = i2.ssrcs[0]) || void 0 === i2 ? void 0 : i2.ssrcId) === e2[0].ssrcId;
          });
        }
        getSSRC(e2) {
          var t2;
          return null === (t2 = this.sessionDesc.mediaDescriptions.find((t3) => t3.attributes.mid === e2)) || void 0 === t2 ? void 0 : t2.attributes.ssrcs;
        }
      }
      function Kk(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function Yk(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? Kk(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : Kk(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      class qk extends Mv {
        get currentLocalDescription() {
          return this.peerConnection.currentLocalDescription;
        }
        get currentRemoteDescription() {
          return this.peerConnection.currentRemoteDescription;
        }
        get peerConnectionState() {
          return this.peerConnection.connectionState;
        }
        get iceConnectionState() {
          return this.peerConnection.iceConnectionState;
        }
        get localCodecs() {
          let e2;
          return this.localCapabilities && (e2 = OL(this.localCapabilities)), [...new Set(e2 && e2.send.videoCodecs.map((e3) => e3.rtpMap && e3.rtpMap.encodingName.toLowerCase() || "").filter((e3) => {
            var t2;
            return bn(t2 = Object.keys(xC)).call(t2, e3);
          }))];
        }
        constructor(e2, t2, i2) {
          super(e2, t2), nh(this, "store", void 0), nh(this, "peerConnection", void 0), nh(this, "remoteSDP", void 0), nh(this, "initialOffer", void 0), nh(this, "transportEventReceiver", void 0), nh(this, "statsFilter", void 0), nh(this, "useXR", DC("USE_XR")), nh(this, "localCapabilities", void 0), nh(this, "localCandidateCount", 0), nh(this, "allCandidatesReceived", false), nh(this, "remoteCodecs", void 0), nh(this, "dataStreamChannelMap", /* @__PURE__ */ new Map()), nh(this, "establishPromise", void 0), nh(this, "mutex", new Yg("NVExtentionsConnection-mutex")), nh(this, "rtcMedia", void 0), this.store = t2, this.peerConnection = i2, this.statsFilter = hL(this.peerConnection, DC("STATS_UPDATE_INTERVAL"), void 0, RT() ? 1200 : void 0), this.bindPCEvents(), this.bindStatsEvents(), this.store.p2pId = this.store.p2pId + 1, this.establishPromise = this.establish();
        }
        async establish(e2) {
          try {
            const e3 = await this.peerConnection.createOffer();
            if (!e3.sdp)
              throw new Error("Cannot get initialOffer.sdp when trying to establish PeerConnection.");
            const t2 = mL(e3.sdp), i2 = await AL({ filterRTX: !DC("USE_PUB_RTX") && !DC("USE_SUB_RTX"), filterVideoFec: DC("FILTER_VIDEO_FEC"), filterAudioFec: DC("FILTER_AUDIO_FEC"), filterVideoCodec: DC("FILTER_VIDEO_CODEC") }, { useXR: this.useXR });
            return this.localCapabilities = i2, this.initialOffer = e3, Yk(Yk({}, t2), {}, { rtpCapabilities: i2, offerSDP: e3.sdp });
          } catch (e3) {
            throw new VI(xT.GET_LOCAL_CONNECTION_PARAMS_FAILED, e3.toString());
          }
        }
        async connect(e2, t2, i2, n2, s2, r2) {
          try {
            if (!this.initialOffer)
              throw new Error("Cannot establish NVConnection without initial offer.");
            this.remoteSDP = new Hk({ remoteIceParameters: e2, remoteDtlsParameters: t2, candidates: i2, remoteRTPCapabilities: n2, remoteSetup: s2, localCapabilities: OL(this.localCapabilities), cname: r2 });
            const o2 = this.remoteSDP.toString(), a2 = YP.parse(this.initialOffer.sdp), c2 = a2.mediaDescriptions.find((e3) => "audio" === e3.media.mediaType);
            c2 && NL(c2), this.useXR && DL(a2);
            const d2 = YP.print(a2), l2 = this.logSDPExchange(d2 || "", "offer", "local", "connect");
            await this.peerConnection.setLocalDescription({ type: "offer", sdp: d2 }), null == l2 || l2(o2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: o2 });
          } catch (e3) {
            throw new VI(xT.EXCHANGE_SDP_FAILED, "NV.connect failed; ".concat(e3.toString()));
          }
        }
        async updateRemoteRTPCapabilities(e2, t2) {
          if (this.remoteCodecs = t2, !this.remoteSDP)
            return void YC.debug("[P2PConnection] cannot updateRemoteRTPCapabilities before remote SDP created, local codecs: ".concat(this.localCodecs, ", codecs: ").concat(t2));
          if (this.remoteSDP.updateRemoteCodec(e2, t2, this.store.codec)) {
            const e3 = await this.peerConnection.createOffer(), t3 = this.logSDPExchange(e3.sdp || "", "offer", "local", "muteLocal");
            await this.peerConnection.setLocalDescription(e3);
            const i2 = this.remoteSDP.toString();
            null == t3 || t3(i2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: i2 });
          } else
            YC.debug("[P2PConnection] updateRemoteRTPCapabilities no need to exchange SDP.");
        }
        async updateRemoteConnect(e2) {
          var t2, i2, n2, s2;
          (null === (t2 = this.remoteSDP) || void 0 === t2 || t2.updateRemoteRTPCapabilities(e2), Array.isArray(this.remoteCodecs) && this.remoteCodecs.length > 0) && (null === (s2 = this.remoteSDP) || void 0 === s2 || s2.updateRemoteCodec([], this.remoteCodecs, this.store.codec));
          null === (i2 = this.remoteSDP) || void 0 === i2 || i2.preloadRemoteMedia(2);
          const r2 = null === (n2 = this.remoteSDP) || void 0 === n2 ? void 0 : n2.toString();
          await this.peerConnection.setRemoteDescription({ type: "offer", sdp: r2 });
          const o2 = await this.peerConnection.createAnswer();
          await this.peerConnection.setLocalDescription(o2), YC.debug("[NVExtentionsConnection] updateRemoteRTPCapabilities by exchanging SDP.");
        }
        send(e2, t2, i2) {
          var n2 = this;
          return OP(function* () {
            const s2 = yield SP(n2.mutex.lock("From NVExtentionsConnection.send"));
            try {
              if (!n2.remoteSDP)
                throw new Error("Cannot call NVExtentionsConnection.send before remote SDP created");
              const r2 = [];
              e2.forEach((e3) => {
                const t3 = n2.peerConnection.addTransceiver(e3._mediaStreamTrack, { direction: "sendonly" });
                r2.push(t3);
              }), RT() && true === DC("SIMULCAST") && (yield SP(n2.applySimulcastForFirefox(r2, e2)));
              const o2 = yield SP(n2.peerConnection.createOffer()), a2 = n2.remoteSDP.predictReceivingMids(e2.length), c2 = n2.mungSendOfferSDP(o2.sdp, e2, a2), d2 = YP.parse(c2), l2 = a2.map((e3) => {
                const t3 = d2.mediaDescriptions.find((t4) => t4.attributes.mid === e3);
                if (!t3)
                  throw new Error("Cannot extract ssrc from mediaDescription.");
                return fL(t3, DC("USE_PUB_RTX"));
              });
              let u2;
              try {
                u2 = yield l2;
              } catch (s3) {
                u2 = [], n2.remoteSDP.receive(e2, t2, i2, u2);
                const r3 = n2.remoteSDP.toString();
                throw yield SP(n2.peerConnection.setLocalDescription({ type: "offer", sdp: c2 })), yield SP(n2.peerConnection.setRemoteDescription({ type: "answer", sdp: r3 })), yield SP(n2.stopSending(a2, true)), s3;
              }
              n2.remoteSDP.receive(e2, t2, i2, u2);
              const h2 = n2.remoteSDP.toString(), p2 = n2.logSDPExchange(c2, "offer", "local", "send");
              return yield SP(n2.peerConnection.setLocalDescription({ type: "offer", sdp: c2 })), yield SP(n2.applySimulcastEncodings(r2, e2)), yield SP(n2.applySendEncodings(r2, e2)), null == p2 || p2(h2), yield SP(n2.peerConnection.setRemoteDescription({ type: "answer", sdp: h2 })), r2.map((e3, t3) => {
                const i3 = a2[t3];
                return { localSSRC: l2[t3], id: i3, transceiver: e3 };
              });
            } catch (e3) {
              throw e3 instanceof VI ? e3 : new VI(xT.EXCHANGE_SDP_FAILED, "NVExtentionsConnection.send failed; ".concat(e3.toString()));
            } finally {
              s2();
            }
          })();
        }
        async stopSending(e2, t2) {
          const i2 = t2 ? void 0 : await this.mutex.lock("From NVExtentionsConnection.stopSending");
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call NVExtentionsConnection.stopSending before remote SDP created");
            const t3 = this.peerConnection.getTransceivers().filter((t4) => -1 !== e2.indexOf(t4.mid));
            if (t3.length !== e2.length)
              throw new Error("Transceivers' length doesn't match mids' length when trying to call NVExtentionsConnection.stopSending.");
            t3.map((e3) => {
              var t4;
              e3.direction = "inactive", null === (t4 = e3.stop) || void 0 === t4 || t4.call(e3);
            });
            const n2 = await this.peerConnection.createOffer(), s2 = this.logSDPExchange(n2.sdp || "", "offer", "local", "stopSending");
            await this.peerConnection.setLocalDescription(n2), this.remoteSDP.stopReceiving(e2);
            const r2 = this.remoteSDP.toString();
            null == s2 || s2(r2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: r2 });
          } catch (e3) {
            throw new VI(xT.EXCHANGE_SDP_FAILED, "NVExtentionsConnection.stopSending failed; ".concat(e3.toString()));
          } finally {
            i2 && i2();
          }
        }
        async createDataChannels(e2, t2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call NVExtentionsConnection.createDataChannels before remote SDP created");
            let i2 = this.dataStreamChannelMap.get(e2);
            return i2 && "open" === i2.readyState ? YC.debug("[P2PConnection] Channels are already available and can be reused directly.") : (i2 = this.peerConnection.createDataChannel("datastream-channel", { ordered: false, maxRetransmits: DC("DATASTREAM_MAX_RETRANSMITS") }), i2.binaryType = "arraybuffer", this.dataStreamChannelMap.set(e2, i2)), void t2.forEach((e3) => {
              e3._updateOriginDataChannel(i2);
            });
          } catch (e3) {
            throw e3 instanceof VI ? e3 : new VI(xT.DATACHANNEL_FAILED, "NVExtentionsConnection.createDataChannels failed; ".concat(e3.toString()));
          }
        }
        async stopDataChannels(e2) {
          try {
            const t2 = this.dataStreamChannelMap.get(e2);
            return null == t2 || t2.close(), void this.dataStreamChannelMap.delete(e2);
          } catch (e3) {
            throw e3 instanceof VI ? e3 : new VI(xT.DATACHANNEL_FAILED, "NVExtentionsConnection.stopDataChannels failed; ".concat(e3.toString()));
          }
        }
        async receive(e2, t2, i2, n2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call NVExtentionsConnection.receive ".concat(e2, " before remoteSDP created."));
            const { mid: s2, needExchangeSDP: r2 } = this.remoteSDP.send(e2, t2, i2, n2);
            if (r2) {
              const t3 = this.remoteSDP.toString(), i3 = this.logSDPExchange(t3, "offer", "remote", "receive");
              await this.peerConnection.setRemoteDescription({ type: "offer", sdp: t3 });
              const n3 = await this.peerConnection.createAnswer(), r3 = this.mungReceiveAnswerSDP(n3.sdp, s2, e2);
              null == i3 || i3(r3 || ""), await this.peerConnection.setLocalDescription({ type: "answer", sdp: r3 }), YC.debug("[NVExtentionsConnection] receive ".concat(e2, " by exchanging SDP."));
            } else
              YC.debug("[NVExtentionsConnection] receive ".concat(e2, " no need to exchange SDP."));
            const o2 = this.peerConnection.getTransceivers().find((e3) => e3.mid === s2);
            if (!o2)
              throw new Error("Cannot get transceiver after setLocalDescription.");
            return { track: o2.receiver.track, id: s2 };
          } catch (e3) {
            throw new VI(xT.EXCHANGE_SDP_FAILED, "NVExtentionsConnection.receive failed; ".concat(e3.toString()));
          }
        }
        async batchReceive(e2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call NVExtentionsConnection.batchReceive before remoteSDP created.");
            const { mids: t2, needExchangeSDP: i2 } = this.remoteSDP.batchSend(e2);
            if (i2) {
              const e3 = this.remoteSDP.toString(), t3 = this.logSDPExchange(e3, "offer", "remote", "receive");
              await this.peerConnection.setRemoteDescription({ type: "offer", sdp: e3 });
              const i3 = await this.peerConnection.createAnswer();
              null == t3 || t3(i3.sdp || ""), await this.peerConnection.setLocalDescription(i3), YC.debug("[NVExtentionsConnection] batchReceive by exchanging SDP.");
            } else
              YC.debug("[NVExtentionsConnection] batchReceive no need to exchange SDP.");
            return t2.map((e3) => {
              const t3 = this.peerConnection.getTransceivers().find((t4) => t4.mid === e3);
              if (!t3)
                throw new Error("Cannot get transceiver after setLocalDescription.");
              return { track: t3.receiver.track, id: e3 };
            });
          } catch (e3) {
            throw new VI(xT.EXCHANGE_SDP_FAILED, "NVExtentionsConnection.receive failed; ".concat(e3.toString()));
          }
        }
        async stopReceiving(e2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call NVExtentionsConnection.stopReceiving before remote SDP created.");
            this.remoteSDP.stopSending(e2);
            const t2 = this.remoteSDP.toString(), i2 = this.logSDPExchange(t2, "offer", "remote", "stopReceiving");
            await this.peerConnection.setRemoteDescription({ type: "offer", sdp: t2 });
            const n2 = await this.peerConnection.createAnswer();
            null == i2 || i2(n2.sdp || ""), await this.peerConnection.setLocalDescription(n2);
          } catch (e3) {
            throw new VI(xT.EXCHANGE_SDP_FAILED, "NVExtentionsConnection stopReceiving failed; ".concat(e3.toString()));
          }
        }
        async muteRemote(e2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call NVExtentionsConnection.muteRemote mid=".concat(e2, " before remote SDP created."));
            this.remoteSDP.mute(e2);
            const t2 = this.remoteSDP.toString(), i2 = this.logSDPExchange(t2, "offer", "remote", "muteRemote");
            await this.peerConnection.setRemoteDescription({ type: "offer", sdp: t2 });
            const n2 = await this.peerConnection.createAnswer();
            null == i2 || i2(n2.sdp || ""), await this.peerConnection.setLocalDescription(n2);
          } catch (e3) {
            throw new VI(xT.EXCHANGE_SDP_FAILED, "NVExtentionsConnection.muteRemote failed; ".concat(e3.toString()));
          }
        }
        async unmuteRemote(e2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call NVExtentionsConnection.unmuteRemote mid=".concat(e2, " before remote SDP created."));
            this.remoteSDP.unmute(e2);
            const t2 = this.remoteSDP.toString(), i2 = this.logSDPExchange(t2, "offer", "remote", "unmuteRemote");
            await this.peerConnection.setRemoteDescription({ type: "offer", sdp: t2 });
            const n2 = await this.peerConnection.createAnswer();
            null == i2 || i2(n2.sdp || ""), await this.peerConnection.setLocalDescription(n2);
          } catch (e3) {
            throw new VI(xT.EXCHANGE_SDP_FAILED, "NVExtentionsConnection.unmuteRemote failed; ".concat(e3.toString()));
          }
        }
        async muteLocal(e2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call NVExtentionsConnection.muteLocal before remote SDP created.");
            const t2 = this.peerConnection.getTransceivers().filter((t3) => t3.mid && -1 !== e2.indexOf(t3.mid));
            if (t2.length !== e2.length)
              throw new Error("Transceivers' length doesn't match mids' length.");
            t2.map((e3) => {
              e3.direction = "inactive";
            });
            const i2 = await this.peerConnection.createOffer(), n2 = this.logSDPExchange(i2.sdp || "", "offer", "local", "muteLocal");
            await this.peerConnection.setLocalDescription(i2), this.remoteSDP.muteRemote(e2);
            const s2 = this.remoteSDP.toString();
            null == n2 || n2(s2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: s2 });
          } catch (e3) {
            throw new VI(xT.EXCHANGE_SDP_FAILED, "NVExtentionsConnection.muteLocal failed; ".concat(e3.toString()));
          }
        }
        async unmuteLocal(e2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call NVExtentionsConnection.unmuteLocal before remote SDP created.");
            const t2 = this.peerConnection.getTransceivers().filter((t3) => t3.mid && -1 !== e2.indexOf(t3.mid));
            if (t2.length !== e2.length)
              throw new Error("Transceivers' length doesn't match mids' length.");
            t2.map(async (e3, t3) => {
              e3.direction = "sendonly";
            });
            const i2 = await this.peerConnection.createOffer(), n2 = this.logSDPExchange(i2.sdp || "", "offer", "local", "unmuteLocal");
            await this.peerConnection.setLocalDescription(i2), this.remoteSDP.unmuteRemote(e2);
            const s2 = this.remoteSDP.toString();
            null == n2 || n2(s2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: s2 });
          } catch (e3) {
            throw new VI(xT.EXCHANGE_SDP_FAILED, "NVExtentionsConnection.unmuteLocal failed; ".concat(e3.toString()));
          }
        }
        restartICE(e2) {
          var t2 = this;
          return OP(function* () {
            const i2 = yield SP(t2.mutex.lock("From NVExtentionsConnection.restartICE"));
            try {
              if (!t2.remoteSDP)
                throw new Error("Cannot restartICE before remoteSDP created.");
              if (wA().supportPCSetConfiguration) {
                const i3 = t2.peerConnection.getConfiguration(), n3 = e2 === pv.RELAY ? "relay" : "all";
                i3.iceTransportPolicy !== n3 && (YC.debug("restartICE change iceTransportPolicy from [".concat(i3.iceTransportPolicy, "] to [").concat(n3, "]")), i3.iceTransportPolicy = n3, t2.peerConnection.setConfiguration(i3));
              } else if (e2 === pv.RELAY)
                return;
              e2 !== pv.RELAY && t2.remoteSDP.updateCandidates(e2);
              const n2 = yield SP(t2.peerConnection.createOffer({ iceRestart: true }));
              if (!n2.sdp)
                throw new Error("Cannot restartICE because restart offer SDP does not exist.");
              const s2 = mL(n2.sdp), { remoteIceParameters: r2 } = yield s2.iceParameters;
              t2.remoteSDP.restartICE(r2);
              const o2 = t2.remoteSDP.toString(), a2 = t2.logSDPExchange(n2.sdp || "", "offer", "local", "restartICE");
              yield SP(t2.peerConnection.setLocalDescription(n2)), null == a2 || a2(o2), yield SP(t2.peerConnection.setRemoteDescription({ type: "answer", sdp: o2 }));
            } catch (e3) {
              YC.warning("restart ICE failed, abort operation", e3);
            } finally {
              i2();
            }
          })();
        }
        close() {
          var e2;
          null === (e2 = this.onConnectionStateChange) || void 0 === e2 || e2.call(this, "closed"), this.unbindPCEvents(), this.unbindStatsEvents(), this.removeAllListeners(), this.transportEventReceiver = void 0, this.statsFilter.destroy(), this.dataStreamChannelMap.clear();
        }
        getStats() {
          return this.statsFilter.getStats();
        }
        getRemoteVideoIsReady(e2) {
          return this.statsFilter.getVideoIsReady(e2);
        }
        async updateEncoderConfig(e2, t2) {
          try {
            if (!this.remoteSDP)
              throw new Error("Cannot call NVExtentionsConnection.updateEncoderConfig before remote SDP created.");
            const i2 = await this.peerConnection.createOffer(), n2 = this.mungSendOfferSDP(i2.sdp, [t2], [e2]);
            this.remoteSDP.updateRecvMedia(e2, t2);
            const s2 = this.remoteSDP.toString(), r2 = this.logSDPExchange(n2, "offer", "local", "updateEncoderConfig");
            await this.peerConnection.setLocalDescription({ type: "offer", sdp: n2 }), null == r2 || r2(s2), await this.peerConnection.setRemoteDescription({ type: "answer", sdp: s2 });
          } catch (e3) {
            throw new VI(xT.EXCHANGE_SDP_FAILED, e3.toString());
          }
        }
        async updateSendParameters(e2, t2) {
          const i2 = this.peerConnection.getTransceivers().filter((t3) => t3.mid === e2);
          1 === i2.length && (this.isVP8Simulcast(t2) ? RT() || await this.applySimulcastEncodings(i2, [t2]) : await this.applySendEncodings(i2, [t2]));
        }
        setStatsRemoteVideoIsReady(e2, t2) {
          this.statsFilter.setVideoIsReady2(e2, t2);
        }
        async replaceTrack(e2, t2) {
          const i2 = this.peerConnection.getTransceivers().find((e3) => e3.mid === t2);
          i2 && await i2.sender.replaceTrack(e2._mediaStreamTrack);
        }
        getP2PConnectionParams() {
          var e2;
          if (null === (e2 = this.peerConnection.currentLocalDescription) || void 0 === e2 || !e2.sdp || !this.localCapabilities)
            throw new Error();
          return Yk(Yk({}, mL(this.peerConnection.currentLocalDescription.sdp)), {}, { rtpCapabilities: this.localCapabilities });
        }
        bindPCEvents() {
          this.peerConnection.oniceconnectionstatechange = () => {
            var e2;
            null === (e2 = this.onICEConnectionStateChange) || void 0 === e2 || e2.call(this, this.peerConnection.iceConnectionState);
          }, this.peerConnection.onconnectionstatechange = () => {
            var e2;
            null === (e2 = this.onConnectionStateChange) || void 0 === e2 || e2.call(this, this.peerConnection.connectionState);
          }, this.peerConnection.onicecandidate = (e2) => {
            e2.candidate ? this.localCandidateCount += 1 : (this.peerConnection.onicecandidate = null, this.allCandidatesReceived = true, YC.debug("[pc-".concat(this.store.p2pId, "] local candidate count"), this.localCandidateCount));
          }, setTimeout(() => {
            this.allCandidatesReceived || (this.allCandidatesReceived = true, YC.debug("[pc-".concat(this.store.p2pId, "] onicecandidate timeout, local candidate count"), this.localCandidateCount));
          }, DC("CANDIDATE_TIMEOUT"));
        }
        unbindPCEvents() {
          this.peerConnection.oniceconnectionstatechange = null, this.peerConnection.onconnectionstatechange = null, this.peerConnection.onsignalingstatechange = null, this.peerConnection.onicecandidateerror = null, this.peerConnection.onicecandidate = null, this.peerConnection.ontrack = null;
        }
        static resolvePCConfiguration(e2) {
          const t2 = { iceServers: [] };
          return e2.iceServers ? t2.iceServers = e2.iceServers : e2.turnServer && "off" !== e2.turnServer.mode && (_g(e2.turnServer.servers) ? t2.iceServers = e2.turnServer.servers : (t2.iceServers && t2.iceServers.push(...qk.turnServerConfigToIceServers(e2.turnServer.servers)), DC("USE_TURN_SERVER_OF_GATEWAY") && t2.iceServers && e2.turnServer.serversFromGateway && t2.iceServers.push(...qk.turnServerConfigToIceServers(e2.turnServer.serversFromGateway)), DC("FORCE_TURN_TCP") ? t2.iceTransportPolicy = "relay" : e2.turnServer.servers.concat(e2.turnServer.serversFromGateway || []).forEach((e3) => {
            e3.forceturn && (t2.iceTransportPolicy = "relay");
          }))), t2;
        }
        static turnServerConfigToIceServers(e2) {
          const t2 = [];
          return e2.forEach((e3) => {
            e3.security ? e3.tcpport && t2.push({ username: e3.username, credential: e3.password, credentialType: "password", urls: "turns:".concat(Iy(e3.turnServerURL), ":").concat(e3.tcpport, "?transport=tcp") }) : (e3.udpport && !DC("FORCE_TURN_TCP") && t2.push({ username: e3.username, credential: e3.password, credentialType: "password", urls: "turn:".concat(e3.turnServerURL, ":").concat(e3.udpport, "?transport=udp") }), e3.tcpport && t2.push({ username: e3.username, credential: e3.password, credentialType: "password", urls: "turn:".concat(e3.turnServerURL, ":").concat(e3.tcpport, "?transport=tcp") }));
          }), t2;
        }
        async applySendEncodings(e2, t2) {
          try {
            if (!wA().supportSetRtpSenderParameters)
              return;
            if (e2.length !== t2.length)
              return;
            for (let l2 = 0; l2 < e2.length; l2++) {
              const u2 = e2[l2], h2 = t2[l2];
              if (h2 && h2 instanceof Nw) {
                var i2, n2, s2;
                if (this.isVP8Simulcast(h2))
                  continue;
                const e3 = {}, t3 = {};
                switch (h2._optimizationMode) {
                  case "motion":
                    e3.degradationPreference = "maintain-framerate";
                    break;
                  case "detail":
                    e3.degradationPreference = "maintain-resolution";
                    break;
                  default:
                    e3.degradationPreference = "balanced";
                }
                var r2, o2, a2, c2;
                if (null !== (i2 = h2._encoderConfig) && void 0 !== i2 && i2.bitrateMax)
                  t3.maxBitrate = 1e3 * (null === (r2 = h2._encoderConfig) || void 0 === r2 ? void 0 : r2.bitrateMax);
                if (bn(n2 = h2._hints).call(n2, YA.LOW_STREAM))
                  null !== (o2 = h2._encoderConfig) && void 0 !== o2 && o2.frameRate && (t3.maxFramerate = yy(h2._encoderConfig.frameRate)), null !== (a2 = h2._encoderConfig) && void 0 !== a2 && a2.scaleResolutionDownBy && (null === (c2 = h2._encoderConfig) || void 0 === c2 ? void 0 : c2.scaleResolutionDownBy) > 1 && (t3.scaleResolutionDownBy = h2._encoderConfig.scaleResolutionDownBy);
                if (DC("DSCP_TYPE") && kT()) {
                  var d2;
                  const e4 = DC("DSCP_TYPE");
                  bn(d2 = ["very-low", "low", "medium", "high"]).call(d2, e4) && (t3.networkPriority = e4);
                }
                const l3 = u2.sender.getParameters(), p2 = null === (s2 = l3.encodings) || void 0 === s2 ? void 0 : s2[0];
                RT() && !p2 && (e3.encodings = [t3]), p2 && Object.assign(p2, t3), Object.assign(l3, e3), await u2.sender.setParameters(l3);
              }
            }
          } catch (e3) {
            YC.debug("Apply RTPSendEncodings failed.");
          }
        }
        mungSendOfferSDP(e2, t2, i2) {
          const n2 = YP.parse(e2);
          return t2.forEach((e3, t3) => {
            const s2 = i2[t3], r2 = n2.mediaDescriptions.find((e4) => e4.attributes.mid === s2);
            r2 && (SL(r2, e3), yL(r2, e3, this.store.codec));
          }), YP.print(n2);
        }
        mungReceiveAnswerSDP(e2, t2, i2) {
          const n2 = YP.parse(e2), s2 = n2.mediaDescriptions.find((e3) => e3.attributes.mid === t2);
          return s2 && i2 === hv.AUDIO && "audio" === s2.media.mediaType && NL(s2), this.useXR && DL(n2), YP.print(n2);
        }
        bindStatsEvents() {
          this.statsFilter.onFirstAudioReceived = (e2) => {
            var t2;
            null === (t2 = this.onFirstAudioReceived) || void 0 === t2 || t2.call(this, e2);
          }, this.statsFilter.onFirstVideoReceived = (e2) => {
            var t2;
            null === (t2 = this.onFirstVideoReceived) || void 0 === t2 || t2.call(this, e2);
          }, this.statsFilter.onFirstAudioDecoded = (e2) => {
            var t2;
            null === (t2 = this.onFirstAudioDecoded) || void 0 === t2 || t2.call(this, e2);
          }, this.statsFilter.onFirstVideoDecoded = (e2, t2, i2) => {
            var n2;
            null === (n2 = this.onFirstVideoDecoded) || void 0 === n2 || n2.call(this, e2, t2, i2);
          }, this.statsFilter.onSelectedLocalCandidateChanged = (e2, t2) => {
            var i2;
            null === (i2 = this.onSelectedLocalCandidateChanged) || void 0 === i2 || i2.call(this, e2, t2);
          }, this.statsFilter.onSelectedRemoteCandidateChanged = (e2, t2) => {
            var i2;
            null === (i2 = this.onSelectedRemoteCandidateChanged) || void 0 === i2 || i2.call(this, e2, t2);
          }, this.statsFilter.onFirstVideoDecodedTimeout = (e2) => {
            var t2;
            null === (t2 = this.onFirstVideoDecodedTimeout) || void 0 === t2 || t2.call(this, e2);
          };
        }
        unbindStatsEvents() {
          this.statsFilter.onFirstAudioReceived = void 0, this.statsFilter.onFirstVideoReceived = void 0, this.statsFilter.onFirstAudioDecoded = void 0, this.statsFilter.onFirstVideoDecoded = void 0, this.statsFilter.onSelectedLocalCandidateChanged = void 0, this.statsFilter.onSelectedRemoteCandidateChanged = void 0, this.statsFilter.onFirstVideoDecodedTimeout = void 0;
        }
        async applySimulcastForFirefox(e2, t2) {
          if (e2.length === t2.length)
            for (let a2 = 0; a2 < e2.length; a2++) {
              var i2, n2, s2, r2, o2;
              const c2 = e2[a2], d2 = t2[a2];
              if (d2 instanceof Nw && !bn(i2 = d2._hints).call(i2, YA.LOW_STREAM) && null !== (n2 = d2._encoderConfig) && void 0 !== n2 && n2.bitrateMax && (null === (s2 = d2._encoderConfig) || void 0 === s2 ? void 0 : s2.bitrateMax) > 200 && null !== (r2 = d2._scalabilityMode) && void 0 !== r2 && r2.numSpatialLayers && (null === (o2 = d2._scalabilityMode) || void 0 === o2 ? void 0 : o2.numSpatialLayers) > 1 && "vp8" === this.store.codec) {
                const e3 = {}, t3 = { high: 1e3 * (d2._encoderConfig.bitrateMax - 50), medium: 5e4 };
                e3.encodings = [{ rid: "m", active: true, maxBitrate: t3.medium, scaleResolutionDownBy: 4 }, { rid: "h", active: true, maxBitrate: t3.high }];
                const i3 = c2.sender.getParameters();
                await c2.sender.setParameters(Object.assign(i3, e3));
              }
            }
        }
        async applySimulcastEncodings(e2, t2) {
          if (!RT() && e2.length === t2.length)
            for (let i2 = 0; i2 < e2.length; i2++) {
              const n2 = t2[i2];
              if (n2 instanceof Nw && this.isVP8Simulcast(n2)) {
                const t3 = e2[i2], s2 = {}, r2 = { high: 1e3 * (n2._encoderConfig.bitrateMax - 50), medium: 5e4 };
                s2.encodings = [{ active: true, adaptivePtime: false, networkPriority: "high", priority: "high", maxBitrate: r2.high }, { active: true, adaptivePtime: false, networkPriority: "low", priority: "low", maxBitrate: r2.medium, scaleResolutionDownBy: 4 }];
                const o2 = t3.sender.getParameters();
                await t3.sender.setParameters(Object.assign(o2, s2));
              }
            }
        }
        isVP8Simulcast(e2) {
          var t2, i2, n2, s2, r2;
          return !!(e2 instanceof Nw && DC("SIMULCAST") && "vp8" === this.store.codec && !bn(t2 = e2._hints).call(t2, YA.LOW_STREAM) && null !== (i2 = e2._encoderConfig) && void 0 !== i2 && i2.bitrateMax && (null === (n2 = e2._encoderConfig) || void 0 === n2 ? void 0 : n2.bitrateMax) > 200 && null !== (s2 = e2._scalabilityMode) && void 0 !== s2 && s2.numSpatialLayers && (null === (r2 = e2._scalabilityMode) || void 0 === r2 ? void 0 : r2.numSpatialLayers) > 1);
        }
        logSDPExchange(e2, t2, i2, n2) {
          if (DC("SDP_LOGGING"))
            return YC.upload("exchanging ".concat(i2, " ").concat(t2, " SDP during NVExtentionsConnection.").concat(n2, "\n"), e2), "offer" === t2 ? (e3) => {
              this.logSDPExchange(e3, "answer", "local" === i2 ? "remote" : "local", n2);
            } : void 0;
        }
        async getRemoteSSRC(e2) {
          if (!this.remoteSDP)
            return;
          const t2 = this.remoteSDP.getSSRC(e2);
          return null == t2 ? void 0 : t2[0].ssrcId;
        }
        setConfiguration(e2) {
          if (wA().supportPCSetConfiguration) {
            const t2 = qk.resolvePCConfiguration(e2);
            this.peerConnection.setConfiguration(t2);
          }
        }
      }
      function Jk(e2, t2, i2) {
        const n2 = e2[t2];
        if ("function" != typeof n2)
          throw new Error("Cannot use mutex on object property.");
        return i2.value = async function() {
          const e3 = this.mutex, i3 = await e3.lock("From NVExtentionsConnection.".concat(t2));
          try {
            for (var s2 = arguments.length, r2 = new Array(s2), o2 = 0; o2 < s2; o2++)
              r2[o2] = arguments[o2];
            return await n2.apply(this, r2);
          } finally {
            i3();
          }
        }, i2;
      }
      function zk(e2) {
        var t2, i2, n2, s2 = 2;
        for ("undefined" != typeof Symbol && (i2 = Ik, n2 = Symbol.iterator); s2--; ) {
          if (i2 && null != (t2 = e2[i2]))
            return t2.call(e2);
          if (n2 && null != (t2 = e2[n2]))
            return new Xk(t2.call(e2));
          i2 = "@@asyncIterator", n2 = "@@iterator";
        }
        throw new TypeError("Object is not async iterable");
      }
      function Xk(e2) {
        function t2(e3) {
          if (Object(e3) !== e3)
            return tT.reject(new TypeError(e3 + " is not an object."));
          var t3 = e3.done;
          return tT.resolve(e3.value).then(function(e4) {
            return { value: e4, done: t3 };
          });
        }
        return Xk = function(e3) {
          this.s = e3, this.n = e3.next;
        }, Xk.prototype = { s: null, n: null, next: function() {
          return t2(this.n.apply(this.s, arguments));
        }, return: function(e3) {
          var i2 = this.s.return;
          return void 0 === i2 ? tT.resolve({ value: e3, done: true }) : t2(i2.apply(this.s, arguments));
        }, throw: function(e3) {
          var i2 = this.s.return;
          return void 0 === i2 ? tT.reject(e3) : t2(i2.apply(this.s, arguments));
        } }, new Xk(e2);
      }
      UI([Jk, xI("design:type", Function), xI("design:paramtypes", [Object, Object, Array, Object, String, String]), xI("design:returntype", tT)], qk.prototype, "connect", null), UI([Jk, xI("design:type", Function), xI("design:paramtypes", [Array, Array]), xI("design:returntype", tT)], qk.prototype, "updateRemoteRTPCapabilities", null), UI([Jk, xI("design:type", Function), xI("design:paramtypes", [Object]), xI("design:returntype", tT)], qk.prototype, "updateRemoteConnect", null), UI([Jk, xI("design:type", Function), xI("design:paramtypes", [Object, Array]), xI("design:returntype", tT)], qk.prototype, "createDataChannels", null), UI([Jk, xI("design:type", Function), xI("design:paramtypes", [String, Array, String, Object]), xI("design:returntype", tT)], qk.prototype, "receive", null), UI([Jk, xI("design:type", Function), xI("design:paramtypes", [Array]), xI("design:returntype", tT)], qk.prototype, "batchReceive", null), UI([Jk, xI("design:type", Function), xI("design:paramtypes", [Array]), xI("design:returntype", tT)], qk.prototype, "stopReceiving", null), UI([Jk, xI("design:type", Function), xI("design:paramtypes", [String]), xI("design:returntype", tT)], qk.prototype, "muteRemote", null), UI([Jk, xI("design:type", Function), xI("design:paramtypes", [String]), xI("design:returntype", tT)], qk.prototype, "unmuteRemote", null), UI([Jk, xI("design:type", Function), xI("design:paramtypes", [Array]), xI("design:returntype", tT)], qk.prototype, "muteLocal", null), UI([Jk, xI("design:type", Function), xI("design:paramtypes", [Array]), xI("design:returntype", tT)], qk.prototype, "unmuteLocal", null), UI([Jk, xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", void 0)], qk.prototype, "close", null), UI([Jk, xI("design:type", Function), xI("design:paramtypes", [String, _b]), xI("design:returntype", tT)], qk.prototype, "updateEncoderConfig", null), UI([Jk, xI("design:type", Function), xI("design:paramtypes", [String, _b]), xI("design:returntype", tT)], qk.prototype, "updateSendParameters", null), UI([Jk, xI("design:type", Function), xI("design:paramtypes", [_b, String]), xI("design:returntype", tT)], qk.prototype, "replaceTrack", null), UI([Jk, xI("design:type", Function), xI("design:paramtypes", [String]), xI("design:returntype", tT)], qk.prototype, "getRemoteSSRC", null);
      class Qk extends Mv {
        get currentLocalDescription() {
          return this.peerConnection.currentLocalDescription;
        }
        get currentRemoteDescription() {
          return this.peerConnection.currentRemoteDescription;
        }
        get peerConnectionState() {
          return this.peerConnection.connectionState;
        }
        get iceConnectionState() {
          return this.peerConnection.iceConnectionState;
        }
        get localCodecs() {
          return this._p2pConnection.localCodecs;
        }
        constructor(e2, t2) {
          super(e2, t2), nh(this, "store", void 0), nh(this, "peerConnection", void 0), nh(this, "cname", void 0), nh(this, "mutex", new Yg("DataChannelConnection-mutex")), nh(this, "dataChannel", void 0), nh(this, "_p2pConnection", void 0), nh(this, "establishPromise", void 0), nh(this, "_nvMedia", void 0), this.store = t2, this.store.dcId = this.store.dcId + 1, this.peerConnection = new RTCPeerConnection(Qk.resolvePCConfiguration(e2), { optional: [{ googDscp: true }] }), this.dataChannel = this.peerConnection.createDataChannel("agora-signal", { ordered: false, maxPacketLifeTime: 50 }), this.dataChannel.binaryType = "arraybuffer", this._p2pConnection = new qk(e2, t2, this.peerConnection), this.bindPCEvents(), this.establishPromise = this._p2pConnection.establishPromise;
        }
        async establish() {
          var e2;
          const t2 = null === (e2 = this._nvMedia) || void 0 === e2 ? void 0 : e2.getLocalRtpCapabilities();
          return await this._p2pConnection.establish(t2);
        }
        getP2PConnectionParams() {
          return this._p2pConnection.getP2PConnectionParams();
        }
        async connect(e2, t2, i2, n2, s2, r2) {
          return this.cname = r2, await this._p2pConnection.connect(e2, t2, i2, n2, s2, r2), await new tT((e3, t3) => {
            const n3 = setTimeout(() => {
              this.closeSignal(), t3(new VI(xT.DATACHANNEL_CONNECTION_TIMEOUT, "Datachannel connection timed out, candidates: ".concat(JSON.stringify(i2))));
            }, 2e3);
            this.dataChannel.onopen = () => {
              if ("open" === this.dataChannel.readyState)
                return clearTimeout(n3), void e3();
            }, this.dataChannel.onerror = (e4) => {
              this.closeSignal(), t3(e4);
            };
          }), { transmitter: this.dataChannel, close: this.closeSignal.bind(this) };
        }
        async updateRemoteRTPCapabilities(e2, t2) {
          return this._p2pConnection.updateRemoteRTPCapabilities(e2, t2);
        }
        send(e2, t2, i2) {
          var n2 = this;
          return OP(function* () {
            const s2 = yield SP(n2.mutex.lock("From DataChannelConnection.send"));
            try {
              return yield* Ck(zk(n2._p2pConnection.send(e2, t2, i2)));
            } finally {
              s2();
            }
          })();
        }
        async stopSending(e2, t2) {
          return this._p2pConnection.stopSending(e2, t2);
        }
        async createDataChannels(e2, t2) {
          return this._p2pConnection.createDataChannels(e2, t2);
        }
        async stopDataChannels(e2) {
          return this._p2pConnection.stopDataChannels(e2);
        }
        async receive(e2, t2, i2, n2) {
          return this._nvMedia ? (YC.debug("[DataChannelConnection] receive ".concat(e2, " by DataChannel.")), await this._nvMedia.reveiveByRTCMedia(e2, t2, this.cname)) : (YC.debug("[DataChannelConnection] receive ".concat(e2, " by WebRTC.")), await this._p2pConnection.receive(e2, t2, i2, n2));
        }
        async batchReceive(e2) {
          return [...await this._p2pConnection.batchReceive(e2)];
        }
        async stopReceiving(e2) {
          return await this._p2pConnection.stopReceiving(e2);
        }
        async muteRemote(e2) {
          return await this._p2pConnection.muteRemote(e2);
        }
        async unmuteRemote(e2) {
          return await this._p2pConnection.unmuteRemote(e2);
        }
        async muteLocal(e2) {
          return await this._p2pConnection.muteLocal(e2);
        }
        async unmuteLocal(e2) {
          return await this._p2pConnection.unmuteLocal(e2);
        }
        restartICE(e2) {
          var t2 = this;
          return OP(function* () {
            return yield* Ck(zk(t2._p2pConnection.restartICE(e2)));
          })();
        }
        close() {
          var e2;
          null === (e2 = this._nvMedia) || void 0 === e2 || e2.close(), this._p2pConnection.close(), this.unbindConnectionEvents(this._p2pConnection);
        }
        getStats() {
          return this._p2pConnection.getStats();
        }
        getRemoteVideoIsReady(e2) {
          return this._p2pConnection.getRemoteVideoIsReady(e2);
        }
        updateRemoteConnect(e2) {
          var t2;
          null === (t2 = this._nvMedia) || void 0 === t2 || t2.setRemoteRtpCapabilities(e2), this._p2pConnection.updateRemoteConnect(e2);
        }
        async updateEncoderConfig(e2, t2) {
          return await this._p2pConnection.updateEncoderConfig(e2, t2);
        }
        async updateSendParameters(e2, t2) {
          return await this._p2pConnection.updateSendParameters(e2, t2);
        }
        setStatsRemoteVideoIsReady(e2, t2) {
          this._p2pConnection.setStatsRemoteVideoIsReady(e2, t2);
        }
        async replaceTrack(e2, t2) {
          return await this._p2pConnection.replaceTrack(e2, t2);
        }
        async getRemoteSSRC(e2) {
          return this._p2pConnection.getRemoteSSRC(e2);
        }
        logSDPExchange(e2, t2, i2, n2) {
          if (DC("SDP_LOGGING"))
            return YC.upload("exchanging ".concat(i2, " ").concat(t2, " SDP during DataChannelConnection.").concat(n2, "\n"), e2), "offer" === t2 ? (e3) => {
              this.logSDPExchange(e3, "answer", "local" === i2 ? "remote" : "local", n2);
            } : void 0;
        }
        static resolvePCConfiguration(e2) {
          const t2 = { iceServers: [] };
          return e2.iceServers ? t2.iceServers = e2.iceServers : e2.turnServer && "off" !== e2.turnServer.mode && (_g(e2.turnServer.servers) ? t2.iceServers = e2.turnServer.servers : (t2.iceServers && t2.iceServers.push(...Qk.turnServerConfigToIceServers(e2.turnServer.servers)), DC("USE_TURN_SERVER_OF_GATEWAY") && t2.iceServers && e2.turnServer.serversFromGateway && t2.iceServers.push(...Qk.turnServerConfigToIceServers(e2.turnServer.serversFromGateway)), DC("FORCE_TURN_TCP") ? t2.iceTransportPolicy = "relay" : e2.turnServer.servers.concat(e2.turnServer.serversFromGateway || []).forEach((e3) => {
            e3.forceturn && (t2.iceTransportPolicy = "relay");
          }))), t2;
        }
        static turnServerConfigToIceServers(e2) {
          const t2 = [];
          return e2.forEach((e3) => {
            e3.security ? e3.tcpport && t2.push({ username: e3.username, credential: e3.password, credentialType: "password", urls: "turns:".concat(Iy(e3.turnServerURL), ":").concat(e3.tcpport, "?transport=tcp") }) : (e3.udpport && !DC("FORCE_TURN_TCP") && t2.push({ username: e3.username, credential: e3.password, credentialType: "password", urls: "turn:".concat(e3.turnServerURL, ":").concat(e3.udpport, "?transport=udp") }), e3.tcpport && t2.push({ username: e3.username, credential: e3.password, credentialType: "password", urls: "turn:".concat(e3.turnServerURL, ":").concat(e3.tcpport, "?transport=tcp") }));
          }), t2;
        }
        bindPCEvents() {
          this._p2pConnection.onICEConnectionStateChange = (e2) => {
            var t2;
            return null === (t2 = this.onICEConnectionStateChange) || void 0 === t2 ? void 0 : t2.call(this, e2);
          }, this._p2pConnection.onConnectionStateChange = (e2) => {
            var t2;
            return null === (t2 = this.onConnectionStateChange) || void 0 === t2 ? void 0 : t2.call(this, e2);
          }, this._p2pConnection.onDTLSTransportStateChange = (e2) => {
            var t2;
            return null === (t2 = this.onDTLSTransportStateChange) || void 0 === t2 ? void 0 : t2.call(this, e2);
          }, this._p2pConnection.onDTLSTransportError = (e2) => {
            var t2;
            return null === (t2 = this.onDTLSTransportError) || void 0 === t2 ? void 0 : t2.call(this, e2);
          }, this._p2pConnection.onICETransportStateChange = (e2) => {
            var t2;
            return null === (t2 = this.onICETransportStateChange) || void 0 === t2 ? void 0 : t2.call(this, e2);
          }, this._p2pConnection.onFirstAudioReceived = (e2) => {
            var t2;
            return null === (t2 = this.onFirstAudioReceived) || void 0 === t2 ? void 0 : t2.call(this, e2);
          }, this._p2pConnection.onFirstVideoReceived = (e2) => {
            var t2;
            return null === (t2 = this.onFirstVideoReceived) || void 0 === t2 ? void 0 : t2.call(this, e2);
          }, this._p2pConnection.onFirstAudioDecoded = (e2) => {
            var t2;
            return null === (t2 = this.onFirstAudioDecoded) || void 0 === t2 ? void 0 : t2.call(this, e2);
          }, this._p2pConnection.onFirstVideoDecoded = (e2, t2, i2) => {
            var n2;
            return null === (n2 = this.onFirstVideoDecoded) || void 0 === n2 ? void 0 : n2.call(this, e2, t2, i2);
          }, this._p2pConnection.onFirstVideoDecodedTimeout = (e2) => {
            var t2;
            return null === (t2 = this.onFirstVideoDecodedTimeout) || void 0 === t2 ? void 0 : t2.call(this, e2);
          }, this._p2pConnection.onSelectedLocalCandidateChanged = (e2, t2) => {
            var i2;
            return null === (i2 = this.onSelectedLocalCandidateChanged) || void 0 === i2 ? void 0 : i2.call(this, e2, t2);
          }, this._p2pConnection.onSelectedRemoteCandidateChanged = (e2, t2) => {
            var i2;
            return null === (i2 = this.onSelectedRemoteCandidateChanged) || void 0 === i2 ? void 0 : i2.call(this, e2, t2);
          };
        }
        closeSignal() {
          this.dataChannel.close(), this.peerConnection.close();
        }
        unbindConnectionEvents(e2) {
          e2.onConnectionStateChange = void 0, e2.onICEConnectionStateChange = void 0, e2.onICETransportStateChange = void 0, e2.onDTLSTransportStateChange = void 0, e2.onDTLSTransportError = void 0, e2.onFirstAudioDecoded = void 0, e2.onFirstAudioReceived = void 0, e2.onFirstVideoDecoded = void 0, e2.onFirstVideoReceived = void 0, e2.onSelectedLocalCandidateChanged = void 0, e2.onSelectedRemoteCandidateChanged = void 0, e2.onFirstVideoDecodedTimeout = void 0;
        }
        setConfiguration(e2) {
          this._p2pConnection.setConfiguration(e2);
        }
      }
      function Zk(e2, t2, i2) {
        const n2 = e2[t2];
        if ("function" != typeof n2)
          throw new Error("Cannot use mutex on object property.");
        return i2.value = async function() {
          const e3 = this.mutex, i3 = await e3.lock("From DataChannelConnection.".concat(t2));
          try {
            for (var s2 = arguments.length, r2 = new Array(s2), o2 = 0; o2 < s2; o2++)
              r2[o2] = arguments[o2];
            return await n2.apply(this, r2);
          } finally {
            i3();
          }
        }, i2;
      }
      function $k(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function eM(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? $k(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : $k(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      function tM(e2) {
        var t2, i2, n2, s2 = 2;
        for ("undefined" != typeof Symbol && (i2 = Ik, n2 = Symbol.iterator); s2--; ) {
          if (i2 && null != (t2 = e2[i2]))
            return t2.call(e2);
          if (n2 && null != (t2 = e2[n2]))
            return new iM(t2.call(e2));
          i2 = "@@asyncIterator", n2 = "@@iterator";
        }
        throw new TypeError("Object is not async iterable");
      }
      function iM(e2) {
        function t2(e3) {
          if (Object(e3) !== e3)
            return tT.reject(new TypeError(e3 + " is not an object."));
          var t3 = e3.done;
          return tT.resolve(e3.value).then(function(e4) {
            return { value: e4, done: t3 };
          });
        }
        return iM = function(e3) {
          this.s = e3, this.n = e3.next;
        }, iM.prototype = { s: null, n: null, next: function() {
          return t2(this.n.apply(this.s, arguments));
        }, return: function(e3) {
          var i2 = this.s.return;
          return void 0 === i2 ? tT.resolve({ value: e3, done: true }) : t2(i2.apply(this.s, arguments));
        }, throw: function(e3) {
          var i2 = this.s.return;
          return void 0 === i2 ? tT.reject(e3) : t2(i2.apply(this.s, arguments));
        } }, new iM(e2);
      }
      UI([Zk, xI("design:type", Function), xI("design:paramtypes", [Object, Object, Array, Object, String, String]), xI("design:returntype", tT)], Qk.prototype, "connect", null), UI([Zk, xI("design:type", Function), xI("design:paramtypes", [Array, Array]), xI("design:returntype", tT)], Qk.prototype, "updateRemoteRTPCapabilities", null), UI([Zk, xI("design:type", Function), xI("design:paramtypes", [Object, Array]), xI("design:returntype", tT)], Qk.prototype, "createDataChannels", null), UI([Zk, xI("design:type", Function), xI("design:paramtypes", [String, Array, String, Object]), xI("design:returntype", tT)], Qk.prototype, "receive", null), UI([Zk, xI("design:type", Function), xI("design:paramtypes", [Array]), xI("design:returntype", tT)], Qk.prototype, "stopReceiving", null), UI([Zk, xI("design:type", Function), xI("design:paramtypes", [String]), xI("design:returntype", tT)], Qk.prototype, "muteRemote", null), UI([Zk, xI("design:type", Function), xI("design:paramtypes", [String]), xI("design:returntype", tT)], Qk.prototype, "unmuteRemote", null), UI([Zk, xI("design:type", Function), xI("design:paramtypes", [Array]), xI("design:returntype", tT)], Qk.prototype, "muteLocal", null), UI([Zk, xI("design:type", Function), xI("design:paramtypes", [Array]), xI("design:returntype", tT)], Qk.prototype, "unmuteLocal", null), UI([Zk, xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", void 0)], Qk.prototype, "close", null), UI([Zk, xI("design:type", Function), xI("design:paramtypes", [String, _b]), xI("design:returntype", tT)], Qk.prototype, "updateEncoderConfig", null), UI([Zk, xI("design:type", Function), xI("design:paramtypes", [String, _b]), xI("design:returntype", tT)], Qk.prototype, "updateSendParameters", null), UI([Zk, xI("design:type", Function), xI("design:paramtypes", [_b, String]), xI("design:returntype", tT)], Qk.prototype, "replaceTrack", null), UI([Zk, xI("design:type", Function), xI("design:paramtypes", [String]), xI("design:returntype", tT)], Qk.prototype, "getRemoteSSRC", null);
      class nM extends ig {
        get state() {
          return this._state;
        }
        set state(e2) {
          const t2 = this._state;
          this._state = e2, this.emit(fv.StateChange, t2, this._state);
        }
        constructor(e2, t2) {
          super(), nh(this, "store", void 0), nh(this, "statsUploader", void 0), nh(this, "connection", void 0), nh(this, "localTrackMap", /* @__PURE__ */ new Map()), nh(this, "remoteUserMap", /* @__PURE__ */ new Map()), nh(this, "localDataChannels", []), nh(this, "remoteDataChannelMap", /* @__PURE__ */ new Map()), nh(this, "pendingLocalTracks", []), nh(this, "pendingRemoteTracks", []), nh(this, "pendingLocalDataChannels", []), nh(this, "pendingRemoteDataChannels", []), nh(this, "statsCollector", void 0), nh(this, "isPlanB", false), nh(this, "shouldForwardP2PCreation", void 0), nh(this, "iceFailedCount", 0), nh(this, "dtlsFailedCount", 0), nh(this, "mutex", new Yg("P2PChannel-mutex")), nh(this, "_state", mv.Disconnected), nh(this, "_pcStatsUploadType", DC("NEW_ICE_RESTART") ? _v.FIRST_CONNECTION : _v.OLD_FIRST_CONNECTION), nh(this, "_isInRestartIce", false), nh(this, "_isStartRestartIce", false), nh(this, "_restartStates", ["disconnected", "failed"]), nh(this, "_restartTimer", void 0), nh(this, "_isFirstConnected", true), nh(this, "handleMuteLocalTrack", async (e3, t3, i2) => {
            const n2 = await this.mutex.lock("Locking from P2PChannel.handleMuteLocalTrack");
            try {
              if (!this.connection || this.state !== mv.Connected)
                return void i2(new VT(xT.INVALID_OPERATION, "Cannot call P2PChannel.handleMuteLocalTrack before connection established."));
              const s2 = this.filterTobeMutedTracks(e3);
              if (0 === s2.length)
                return void t3();
              const r2 = s2.find((e4) => "videoLowTrack" === e4[0]);
              if (r2) {
                r2[1].track._originMediaStreamTrack.stop();
              }
              await this.connection.muteLocal(s2.map((e4) => {
                let [, { id: t4 }] = e4;
                return t4;
              }));
              const o2 = this.createMuteMessage(s2);
              await Tg(this, fv.RequestMuteLocal, o2), t3();
            } catch (e4) {
              i2(e4);
            } finally {
              n2();
            }
          }), nh(this, "handleUnmuteLocalTrack", async (e3, t3, i2) => {
            const n2 = await this.mutex.lock("Locking from P2PChannel.handleUnmuteLocalTrack");
            try {
              if (!this.connection || this.state !== mv.Connected)
                return void i2(new VT(xT.INVALID_OPERATION, "Cannot call P2PChannel.handleUnmuteLocalTrack before connection established."));
              const s2 = this.filterTobeUnmutedTracks(e3);
              if (0 === s2.length)
                return void t3();
              const r2 = s2.find((e4) => "videoLowTrack" === e4[0]);
              if (r2) {
                const t4 = r2[1];
                if (t4.track._originMediaStreamTrack.stop(), !DC("DISABLE_DUAL_STREAM_USE_ENCODING") && wA().supportDualStreamEncoding) {
                  const i3 = e3._mediaStreamTrack.clone();
                  t4.track._mediaStreamTrack = i3, t4.track._originMediaStreamTrack = i3;
                } else {
                  const i3 = FL(e3, Sg(this, fv.RequestLowStreamParameter));
                  t4.track._mediaStreamTrack = i3, t4.track._originMediaStreamTrack = i3;
                }
                await new tT((e4, i3) => {
                  this.handleReplaceTrack(t4.track, e4, i3, true);
                });
              }
              await this.connection.unmuteLocal(s2.map((e4) => {
                let [, { id: t4 }] = e4;
                return t4;
              }));
              const o2 = this.createUnmuteMessage(s2);
              await Tg(this, fv.RequestUnmuteLocal, o2), t3();
            } catch (e4) {
              i2(e4);
            } finally {
              n2();
            }
          }), nh(this, "handleUpdateVideoEncoder", async (e3, t3, i2) => {
            const n2 = await this.mutex.lock("Locking from P2PChannel.handleSetVideoEncoder");
            try {
              const i3 = this.localTrackMap.get(Ev.LocalVideoTrack);
              if (!this.connection || !i3 || i3.track !== e3 || this.state !== mv.Connected)
                return void t3();
              const { id: s2, track: r2 } = i3;
              await this.connection.updateSendParameters(s2, r2), await this.connection.updateEncoderConfig(s2, r2), this.emit(fv.UpdateVideoEncoder, r2), t3();
            } catch (e4) {
              i2(e4);
            } finally {
              n2();
            }
          }), nh(this, "handleSetOptimizationMode", async (e3, t3, i2) => {
            const n2 = await this.mutex.lock("Locking from P2PChannel.handleSetOptimizationMode");
            try {
              const i3 = this.localTrackMap.get(Ev.LocalVideoTrack);
              if (!this.connection || !i3 || i3.track !== e3 || this.state !== mv.Connected)
                return;
              const { id: s2, track: r2 } = i3;
              await this.connection.updateSendParameters(s2, r2), t3();
            } catch (e4) {
              i2(e4);
            } finally {
              n2();
            }
          }), nh(this, "handleReplaceTrack", async (e3, t3, i2, n2) => {
            let s2;
            YC.debug("[".concat(this.store.clientId, "] P2PChannel handleReplaceTrack for [track-id-").concat(e3.getTrackId(), "]")), "boolean" == typeof n2 && n2 || (s2 = await this.mutex.lock("From P2PChannel.handleReplaceTrack"));
            try {
              var r2;
              const i3 = Array.from(this.localTrackMap.entries()).find((t4) => {
                let [, { track: i4 }] = t4;
                return e3 === i4;
              });
              if (!this.connection || !i3 || this.state !== mv.Connected)
                return void t3();
              if (await (null === (r2 = this.connection) || void 0 === r2 ? void 0 : r2.replaceTrack(e3, i3[1].id)), this.isPlanB) {
                const t4 = i3[1];
                t4.id = e3._mediaStreamTrack.id, this.localTrackMap.set(i3[0], t4);
              }
              if (i3[0] === Ev.LocalVideoTrack && !DC("DISABLE_DUAL_STREAM_USE_ENCODING") && wA().supportDualStreamEncoding) {
                const t4 = this.localTrackMap.get(Ev.LocalVideoLowTrack);
                if (t4) {
                  const i4 = e3._mediaStreamTrack.clone();
                  t4.track._originMediaStreamTrack.stop(), t4.track._mediaStreamTrack = i4, t4.track._originMediaStreamTrack = i4, await new tT((e4, i5) => {
                    this.handleReplaceTrack(t4.track, e4, i5, true);
                  });
                }
              }
              t3();
            } catch (e4) {
              i2(e4);
            } finally {
              var o2;
              null === (o2 = s2) || void 0 === o2 || o2();
            }
          }), nh(this, "handleGetRTCStats", (e3) => {
            e3(this.statsCollector.getRTCStats());
          }), nh(this, "handleGetLocalVideoStats", (e3) => {
            e3(this.statsCollector.getLocalVideoTrackStats());
          }), nh(this, "handleGetLocalAudioStats", (e3) => {
            e3(this.statsCollector.getLocalAudioTrackStats());
          }), nh(this, "handleGetRemoteVideoStats", (e3) => this.statsCollector.getRemoteVideoTrackStats(e3.uid)[e3.uid]), nh(this, "handleGetRemoteAudioStats", (e3) => this.statsCollector.getRemoteAudioTrackStats(e3.uid)[e3.uid]), this.store = e2, this.statsCollector = t2, this.statsCollector.addP2PChannel(this), this.statsUploader = new tk(this.store), this.bindStatsUploaderEvents(), this.isPlanB = !wA().supportUnifiedPlan || DC("CHROME_FORCE_PLAN_B") && kT(), this.shouldForwardP2PCreation = DC("FORWARD_P2P_CREATION") && wA().supportPCSetConfiguration && function() {
            const e3 = _T();
            return e3 === aT.ANDROID || e3 === aT.IOS || e3 === aT.HARMONY_OS;
          }(), this.shouldForwardP2PCreation && (this.connection = this.store.useDataChannel ? new Qk({}, this.store) : this.isPlanB ? new wk({}, this.store) : new Uk({}, this.store), this.bindConnectionEvents(this.connection));
        }
        async startP2PConnection(e2, t2) {
          var i2;
          this.state = mv.New;
          const n2 = this.shouldForwardP2PCreation && "closed" === (null === (i2 = this.connection) || void 0 === i2 ? void 0 : i2.peerConnectionState);
          if (this.shouldForwardP2PCreation && !n2 || (n2 && this.connection && (YC.warning("[".concat(this.store.clientId, "] P2PChannel.startP2PConnection ForwardP2P closed.")), this.connection.close(), this.unbindConnectionEvents(this.connection)), this.connection = this.store.useDataChannel ? new Qk(e2, this.store) : this.isPlanB ? new wk(e2, this.store) : new Uk(e2, this.store), this.bindConnectionEvents(this.connection)), !this.connection)
            throw new VT(xT.UNEXPECTED_ERROR, "Cannot P2PChannel.startConnection before P2PConnection initialization .");
          return this._pcStatsUploadType = DC("NEW_ICE_RESTART") ? _v.FIRST_CONNECTION : _v.OLD_FIRST_CONNECTION, this._isFirstConnected = true, this._isInRestartIce = false, this._isStartRestartIce = false, this.connection.setConfiguration(e2), this.connection.establishPromise;
        }
        async connect(e2, t2, i2, n2, s2, r2) {
          if (!this.connection)
            throw new VT(xT.UNEXPECTED_ERROR, "Cannot P2PChannel.connect before P2PChannel.startP2PConnection .");
          this.connection instanceof Qk ? this.connection.updateRemoteConnect(n2) : (this.store.peerConnectionStart(), await this.connection.connect(e2, t2, i2, n2, s2, r2), this.statsUploader.startUploadTransportStats(), this.statsUploader.startUploadExtensionUsageStats(), this.state = mv.Connected);
        }
        updateRemoteRTPCapabilities(e2) {
          const t2 = Array.from(this.localTrackMap.entries()).filter((e3) => {
            var t3;
            let [i3] = e3;
            return bn(t3 = [Ev.LocalVideoLowTrack, Ev.LocalVideoTrack]).call(t3, i3);
          }), i2 = t2.map((e3) => {
            let [, { id: t3 }] = e3;
            return t3;
          }), n2 = t2.map((e3) => {
            let [t3] = e3;
            return t3;
          });
          if (this.connection instanceof Uk) {
            if (rI.updateRemoteRTPCapabilities(this.store.sessionId, { trackTypes: JSON.stringify(n2), localCodecs: JSON.stringify(this.connection.localCodecs), remoteCodecs: JSON.stringify(e2) }), !bn(e2).call(e2, this.store.codec)) {
              const t3 = ["vp8", "h264"].find((t4) => bn(e2).call(e2, t4));
              t3 && (this.store.codec = t3, YC.debug("[".concat(this.store.clientId, "] [").concat(this.store.p2pId, " updateRemoteRTPCapabilities] default codec is not available, hence the fallback to ").concat(t3, ".")));
            }
            this.connection.updateRemoteRTPCapabilities(i2, e2);
          }
        }
        async preConnect(e2, t2, i2, n2, s2, r2) {
          if (!this.connection)
            throw new VT(xT.UNEXPECTED_ERROR, "Cannot P2PChannel.connect before P2PChannel.startP2PConnection .");
          this.store.peerConnectionStart();
          const o2 = await this.connection.connect(e2, t2, i2, n2, s2, r2);
          return this.statsUploader.startUploadTransportStats(), this.statsUploader.startUploadExtensionUsageStats(), this.state = mv.Connected, o2;
        }
        getEstablishParams() {
          if (this.connection instanceof Qk)
            return this.connection.getP2PConnectionParams();
          throw new Error("Only DataChannelConnection needs to obtain establishParams");
        }
        async publishDataChannel(e2) {
          if (!this.connection) {
            if (this.state === mv.Disconnected)
              throw new VT(xT.UNEXPECTED_ERROR, "PeerConnection already disconnected.");
            const t3 = e2.filter((e3) => -1 !== this.pendingLocalDataChannels.findIndex((t4) => t4.id === e3.id));
            return void (this.pendingLocalDataChannels = this.pendingLocalDataChannels.concat(t3));
          }
          const t2 = this.filterTobePublishedDataChannels(e2);
          0 !== t2.length && (t2.forEach((e3) => {
            const t3 = Date.now();
            this.store.publish(e3.id.toString(), "datachannel", t3);
          }), await this.connection.createDataChannels(this.store.uid, t2), t2.forEach((e3) => {
            this.localDataChannels.push(e3);
            const t3 = Date.now();
            this.store.publish(e3.id + "", "datachannel", void 0, t3);
          }));
        }
        publish(e2, t2, i2) {
          var n2 = this;
          return OP(function* () {
            const s2 = yield SP(n2.mutex.lock("From P2PChannel.publish"));
            try {
              if (!n2.connection || n2.state !== mv.Connected) {
                if (n2.state === mv.Disconnected)
                  throw new VT(xT.UNEXPECTED_ERROR, "PeerConnection already disconnected.");
                n2.throwIfTrackTypeNotMatch(e2);
                const t3 = e2.filter((e3) => -1 === n2.pendingLocalTracks.indexOf(e3));
                return void (n2.pendingLocalTracks = n2.pendingLocalTracks.concat(t3));
              }
              n2.store.pubId = n2.store.pubId + 1, TP.markPublishStart(n2.store.clientId, n2.store.pubId);
              const r2 = n2.filterTobePublishedTracks(e2, t2, i2);
              if (0 === r2.length)
                return void (yield SP(n2.tryToUnmuteAudio(e2)));
              yield* Ck(tM(n2.doPublish(n2.connection, r2)));
            } finally {
              s2();
            }
          })();
        }
        doPublish(e2, t2) {
          var i2 = this;
          return OP(function* () {
            t2.forEach((e3) => {
              let { track: t3, type: n3 } = e3;
              const s3 = Date.now();
              i2.store.publish(t3.getTrackId(), n3 === Ev.LocalAudioTrack ? "audio" : "video", s3);
            }), i2.bindLocalTrackEvents(t2);
            const n2 = yield SP(e2.send(t2.map((e3) => {
              let { track: t3 } = e3;
              return t3;
            }), i2.store.codec, i2.store.audioCodec)), s2 = (yield SP(n2.next())).value, r2 = i2.createGatewayPublishMessage(t2, s2);
            let o2;
            try {
              o2 = yield r2;
            } catch (e3) {
              throw n2.throw(e3), (null == e3 ? void 0 : e3.code) === xT.WS_ABORT && t2.forEach((e4) => {
                let { track: t3 } = e4;
                -1 === i2.pendingLocalTracks.indexOf(t3) && i2.pendingLocalTracks.push(t3);
              }), i2.unbindLocalTrackEvents(t2), e3;
            }
            const a2 = i2.mapPubResToRemoteConfig(r2, o2), c2 = (yield SP(n2.next(a2))).value;
            t2.forEach((e3) => {
              let { type: t3 } = e3;
              i2.statsCollector.addLocalStats(t3);
            }), i2.assignLocalTracks(t2, c2), i2.statsUploader.startUploadOutboundStats(), t2.forEach((e3) => {
              let { track: t3, type: n3 } = e3;
              const s3 = Date.now();
              i2.store.publish(t3.getTrackId(), n3 === Ev.LocalAudioTrack ? "audio" : "video", void 0, s3);
            });
          })();
        }
        async updateVideoStreamParameter(e2, t2) {
          const i2 = this.localTrackMap.get(t2);
          if (!i2)
            return;
          if (!(i2.track instanceof Nw))
            return YC.warn("[updateVideoStreamParameter]: track is not an instance of LocalVideoTrack");
          if (!(this.connection instanceof Uk || this.connection instanceof wk))
            return YC.warn("[updateVideoStreamParameter]: connection is not P2PConnection or P2PConnectionPlanB");
          const { track: n2 } = i2, s2 = function(e3, t3) {
            const i3 = {};
            return e3.height && e3.width && (i3.scaleResolutionDownBy = Ny(e3, t3)), i3.maxFramerate = e3.framerate ? yy(e3.framerate) : void 0, i3.maxBitrate = e3.bitrate ? 1e3 * e3.bitrate : void 0, i3;
          }(e2, n2);
          if (n2._encoderConfig || (n2._encoderConfig = {}), t2 !== Ev.LocalVideoLowTrack || !DC("DISABLE_DUAL_STREAM_USE_ENCODING") && wA().supportDualStreamEncoding)
            null != s2.scaleResolutionDownBy && (n2._encoderConfig.scaleResolutionDownBy = s2.scaleResolutionDownBy);
          else {
            const t3 = n2._originMediaStreamTrack;
            if (!t3.canvas)
              return YC.warn("[".concat(n2.getTrackId(), "] no canvas on track"));
            !function(e3, t4) {
              const i3 = e3.canvas;
              t4.width && (i3.width = yy(t4.width)), t4.height && (i3.height = yy(t4.height)), t4.framerate && (i3.stopCapture && i3.stopCapture(), i3.stopCapture = vb(() => {
                !i3.startCapture && i3.stopCapture && i3.stopCapture(), i3.startCapture && i3.startCapture();
              }, yy(t4.framerate)));
            }(t3, e2);
          }
          null != s2.maxBitrate && (n2._encoderConfig.bitrateMax = s2.maxBitrate / 1e3), null != s2.maxFramerate && (n2._encoderConfig.frameRate && "object" == typeof n2._encoderConfig.frameRate ? n2._encoderConfig.frameRate.max = s2.maxFramerate : n2._encoderConfig.frameRate = { max: s2.maxFramerate }), YC.debug("[".concat(n2.getTrackId(), "] LowStreamEncoderConfig: , ").concat(JSON.stringify(n2._encoderConfig))), await this.connection.updateRtpSenderEncodings(n2);
        }
        publishLowStream(e2) {
          var t2 = this;
          return OP(function* () {
            if (!t2.connection || t2.state !== mv.Connected)
              return;
            const i2 = yield SP(t2.mutex.lock("Locking from P2PChannel.publishLowStream"));
            try {
              const s2 = t2.localTrackMap.get(Ev.LocalVideoTrack);
              if (!s2)
                throw new VT(xT.UNEXPECTED_ERROR, "Could not find high stream");
              if (t2.localTrackMap.has(Ev.LocalVideoLowTrack))
                throw new VT(xT.UNEXPECTED_ERROR, "[".concat(t2.store.clientId, "] Can't publish low stream when stream already publish"));
              const r2 = [{ track: t2.getLowVideoTrack(s2.track, e2), type: Ev.LocalVideoLowTrack }];
              if (yield* Ck(tM(t2.doPublish(t2.connection, r2))), s2.track.muted || !s2.track.enabled) {
                var n2;
                const e3 = null === (n2 = t2.localTrackMap.get(Ev.LocalVideoLowTrack)) || void 0 === n2 ? void 0 : n2.id;
                void 0 !== e3 && (yield SP(t2.connection.muteLocal([e3])));
              }
            } finally {
              i2();
            }
          })();
        }
        async republish() {
          this.pendingLocalTracks.length > 0 && (YC.debug("[".concat(this.store.clientId, "] Emit P2PChannelEvents.RequestRePublish to republish tracks.")), await fg(this, fv.RequestRePublish, this.pendingLocalTracks), this.emit(fv.MediaReconnectEnd, this.store.uid), this.pendingLocalTracks = []), this.pendingLocalDataChannels.length > 0 && (YC.debug("Emit P2PChannelEvents.RequestRePublishDataChannel to republish datachannels."), await fg(this, fv.RequestRePublishDataChannel, this.pendingLocalDataChannels), this.pendingLocalDataChannels = []);
        }
        async reSubscribe(e2) {
          for (let e3 = this.pendingRemoteTracks.length - 1; e3 >= 0; e3--) {
            const { user: t2, kind: i2 } = this.pendingRemoteTracks[e3];
            (i2 !== hv.AUDIO || t2._audio_added_ && t2._audioSSRC) && (i2 !== hv.VIDEO || t2._video_added_ && t2._videoSSRC) || this.pendingRemoteTracks.splice(e3, 1);
          }
          if (e2)
            await fg(this, fv.RequestReSubscribe, this.pendingRemoteTracks);
          else
            for (const { user: e3, kind: t2 } of this.pendingRemoteTracks)
              await this.subscribe(e3, t2, t2 === hv.VIDEO ? e3._videoSSRC : e3._audioSSRC);
          this.pendingRemoteTracks.forEach((e3) => {
            let { user: t2 } = e3;
            this.emit(fv.MediaReconnectEnd, t2.uid);
          }), this.pendingRemoteTracks = [];
        }
        async unpublish(e2) {
          if (!this.connection || this.state !== mv.Connected)
            return void e2.forEach((e3) => {
              const t3 = this.pendingLocalTracks.indexOf(e3);
              -1 !== t3 && this.pendingLocalTracks.splice(t3, 1);
            });
          const t2 = this.filterTobeUnpublishedTracks(e2);
          if (0 === t2.length)
            return;
          const i2 = t2.find((e3) => "videoLowTrack" === e3[0]);
          if (i2) {
            i2[1].track.close();
          }
          return this.doUnpublish(this.connection, t2);
        }
        async unpublishDataChannel(e2) {
          if (!this.connection || this.state !== mv.Connected)
            return void e2.forEach((e3) => {
              const t3 = this.pendingLocalDataChannels.indexOf(e3);
              -1 !== t3 && this.pendingLocalDataChannels.splice(t3, 1);
            });
          const t2 = this.filterTobeUnpublishedDataChannels(e2);
          return 0 !== t2.length ? (t2.forEach((e3) => {
            const t3 = this.localDataChannels.indexOf(e3);
            -1 !== t3 && this.localDataChannels.splice(t3, 1);
          }), 0 === this.localDataChannels.length && await this.connection.stopDataChannels(this.store.uid), t2.map((e3) => e3.id)) : void 0;
        }
        async unpublishLowStream() {
          if (!this.connection || this.state !== mv.Connected)
            return;
          const e2 = this.localTrackMap.get(Ev.LocalVideoLowTrack);
          if (!e2)
            return;
          e2.track.close();
          const t2 = [[Ev.LocalVideoLowTrack, e2]];
          return this.doUnpublish(this.connection, t2);
        }
        async doUnpublish(e2, t2) {
          const i2 = this.createGatewayUnpublishMessage(t2);
          return await e2.stopSending(t2.map((e3) => {
            let [, { id: t3 }] = e3;
            return t3;
          })), this.withdrawLocalTracks(t2), this.unbindLocalTrackEvents(t2.map((e3) => {
            let [t3, { track: i3 }] = e3;
            return { type: t3, track: i3 };
          })), t2.forEach((e3) => {
            let [t3] = e3;
            this.statsCollector.removeLocalStats(t3);
          }), 0 === this.localTrackMap.size && this.statsUploader.stopUploadOutboundStats(), i2;
        }
        async subscribeDataChannel(e2, t2) {
          if (!this.connection || this.state !== mv.Connected)
            throw new VT(xT.INVALID_OPERATION, "Cannot subscribe remote user when peerConnection disconnected.");
          const i2 = t2.filter((t3) => {
            var i3;
            return !(null !== (i3 = this.remoteDataChannelMap.get(e2)) && void 0 !== i3 && i3.get(t3.id));
          });
          if (0 !== i2.length)
            return await this.connection.createDataChannels(e2.uid, i2), i2.forEach((t3) => {
              var i3;
              this.remoteDataChannelMap.has(e2) ? null === (i3 = this.remoteDataChannelMap.get(e2)) || void 0 === i3 || i3.set(t3.id, t3) : this.remoteDataChannelMap.set(e2, /* @__PURE__ */ new Map([[t3.id, t3]]));
              const n2 = this.pendingRemoteDataChannels.findIndex((i4) => {
                let { user: n3, id: s2 } = i4;
                return n3.uid === e2.uid && s2 === t3.id;
              });
              -1 !== n2 && this.pendingRemoteDataChannels.splice(n2, 1);
            }), i2.map((e3) => e3.id);
        }
        async subscribe(e2, t2, i2, n2, s2) {
          var r2;
          if (!this.connection || this.state !== mv.Connected)
            throw new VT(xT.INVALID_OPERATION, "Cannot subscribe remote user when peerConnection disconnected.");
          if (null !== (r2 = this.remoteUserMap.get(e2)) && void 0 !== r2 && r2.has(t2))
            return;
          let o2, a2, c2;
          if (s2) {
            const i3 = s2.find((e3) => {
              let { stream_type: i4 } = e3;
              return i4 === t2;
            });
            if (!i3)
              throw new VT(xT.UNEXPECTED_ERROR, "Cannot subscribe to remote ".concat(t2, " for user: ").concat(e2.uid, " because subscribe answer from gateway does not contain stream_type: ").concat(t2, "."));
            const n3 = await this.connection.receive(t2, i3.ssrcs, String(e2._uintid), i3.attributes);
            this.connection instanceof Uk && (c2 = n3.transceiver), o2 = n3.track, a2 = n3.id;
          } else {
            const s3 = await this.connection.receive(t2, [{ ssrcId: i2, rtx: n2 }], String(e2._uintid), void 0);
            this.connection instanceof Uk && (c2 = s3.transceiver), o2 = s3.track, a2 = s3.id;
          }
          t2 === hv.AUDIO ? (e2._audioTrack ? e2._audioTrack._updateOriginMediaStreamTrack(o2) : (e2._audioTrack = new Fw(o2, e2.uid, e2._uintid, this.store), YC.info("[".concat(this.store.clientId, "] [").concat(this.store.p2pId, "] create remote audio track: ").concat(e2._audioTrack.getTrackId()))), c2 && e2._audioTrack._updateRtpTransceiver(c2), this.bindRemoteTrackEvents(e2, e2._audioTrack)) : (e2._videoTrack ? e2._videoTrack._updateOriginMediaStreamTrack(o2) : (e2._videoTrack = new Vw(o2, e2.uid, e2._uintid, this.store), YC.info("[".concat(this.store.clientId, "] [").concat(this.store.p2pId, "] create remote video track: ").concat(e2._videoTrack.getTrackId()))), c2 && e2._videoTrack._updateRtpTransceiver(c2), this.bindRemoteTrackEvents(e2, e2._videoTrack));
          const d2 = this.remoteUserMap.get(e2);
          d2 ? d2.set(t2, a2) : this.remoteUserMap.set(e2, /* @__PURE__ */ new Map([[t2, a2]])), this.statsCollector.addRemoteStats(e2.uid), this.statsUploader.startUploadInboundStats();
          const l2 = this.pendingRemoteTracks.findIndex((i3) => {
            let { user: n3, kind: s3 } = i3;
            return n3.uid === e2.uid && t2 === s3;
          });
          -1 !== l2 && (this.pendingRemoteTracks.splice(l2, 1), this.emit(fv.MediaReconnectEnd, e2.uid));
        }
        async massSubscribe(e2) {
          return this.massSubscribeNoLock(e2);
        }
        async massSubscribeNoLock(e2) {
          if (!this.connection || this.state !== mv.Connected)
            throw new VT(xT.INVALID_OPERATION, "Cannot subscribeAll remote users when peerConnection disconnected.");
          e2 = e2.filter((e3) => {
            var t3;
            let { user: i2, mediaType: n2 } = e3;
            return !(null !== (t3 = this.remoteUserMap.get(i2)) && void 0 !== t3 && t3.has(n2));
          });
          const t2 = await this.connection.batchReceive(e2.map((e3) => {
            let { user: t3, mediaType: i2, ssrcId: n2, rtxSsrcId: s2 } = e3;
            return { kind: i2, ssrcMsg: [{ ssrcId: n2, rtx: s2 }], mslabel: String(t3._uintid) };
          }));
          e2.forEach((e3, i2) => {
            let { user: n2, mediaType: s2 } = e3;
            const { track: r2, id: o2, transceiver: a2 } = t2[i2];
            s2 === hv.AUDIO ? (n2._audioTrack ? n2._audioTrack._updateOriginMediaStreamTrack(r2) : (n2._audioTrack = new Fw(r2, n2.uid, n2._uintid, this.store), YC.info("[".concat(this.store.clientId, "] [").concat(this.store.p2pId, "] create remote audio track: ").concat(n2._audioTrack.getTrackId()))), a2 && n2._audioTrack._updateRtpTransceiver(a2), this.bindRemoteTrackEvents(n2, n2._audioTrack)) : (n2._videoTrack ? n2._videoTrack._updateOriginMediaStreamTrack(r2) : (n2._videoTrack = new Vw(r2, n2.uid, n2._uintid, this.store), YC.info("[".concat(this.store.clientId, "] [").concat(this.store.p2pId, "] create remote video track: ").concat(n2._videoTrack.getTrackId()))), a2 && n2._videoTrack._updateRtpTransceiver(a2), this.bindRemoteTrackEvents(n2, n2._videoTrack));
            const c2 = this.remoteUserMap.get(n2);
            c2 ? c2.set(s2, o2) : this.remoteUserMap.set(n2, /* @__PURE__ */ new Map([[s2, o2]])), this.statsCollector.addRemoteStats(n2.uid), this.statsUploader.startUploadInboundStats();
            const d2 = this.pendingRemoteTracks.findIndex((e4) => {
              let { user: t3, kind: i3 } = e4;
              return t3.uid === n2.uid && s2 === i3;
            });
            -1 !== d2 && (this.pendingRemoteTracks.splice(d2, 1), this.emit(fv.MediaReconnectEnd, n2.uid));
          });
        }
        async unsubscribe(e2, t2, i2) {
          const n2 = this.pendingRemoteTracks.filter((i3) => {
            let { user: n3, kind: s3 } = i3;
            return void 0 !== t2 ? n3.uid === e2.uid && t2 === s3 : n3.uid === e2.uid;
          });
          if (n2.forEach((e3) => {
            const t3 = this.pendingRemoteTracks.indexOf(e3);
            this.pendingRemoteTracks.splice(t3, 1);
          }), this.connection && this.state === mv.Connected || i2 || n2.forEach((t3) => {
            let { kind: i3 } = t3;
            var n3;
            if (i3 === hv.AUDIO)
              null === (n3 = e2._audioTrack) || void 0 === n3 || n3._destroy(), e2._audioTrack = void 0;
            else if (i3 === hv.VIDEO) {
              var s3;
              null === (s3 = e2._videoTrack) || void 0 === s3 || s3._destroy(), e2._videoTrack = void 0;
            }
          }), !this.connection || this.state !== mv.Connected)
            return;
          const s2 = this.filterTobeUnSubscribedTracks(e2, t2);
          if (0 === s2.length)
            return;
          await this.connection.stopReceiving(s2.map((e3) => {
            let [, { id: t3 }] = e3;
            return t3;
          }));
          const r2 = this.createUnsubscribeMessage(s2);
          return this.withdrawRemoteTracks(s2), 0 === this.remoteUserMap.size && this.statsUploader.stopUploadInboundStats(), s2.forEach((e3) => {
            let [t3, { kind: n3 }] = e3;
            var s3, r3;
            n3 === hv.VIDEO && t3._videoSSRC && (null === (s3 = this.connection) || void 0 === s3 || s3.setStatsRemoteVideoIsReady(t3._videoSSRC, false));
            if (n3 === hv.VIDEO)
              this.unbindRemoteTrackEvents(t3._videoTrack), i2 || (null === (r3 = t3._videoTrack) || void 0 === r3 || r3._destroy(), t3._videoTrack = void 0);
            else if (n3 === hv.AUDIO) {
              var o2;
              if (this.unbindRemoteTrackEvents(t3._audioTrack), !i2)
                null === (o2 = t3._audioTrack) || void 0 === o2 || o2._destroy(), t3._audioTrack = void 0;
            }
          }), r2;
        }
        async unsubscribeDataChannel(e2, t2) {
          if (t2.forEach((e3) => {
            const t3 = this.pendingRemoteDataChannels.findIndex((t4) => t4.id === e3.id);
            -1 !== t3 && this.pendingRemoteDataChannels.splice(t3, 1);
          }), !this.connection)
            return;
          const i2 = this.filterTobeUnSubscribedDataChannels(e2, t2);
          if (0 === i2.length)
            return;
          t2.forEach((e3) => {
            e3._close();
          });
          const n2 = this.remoteDataChannelMap.get(e2);
          return i2.forEach((e3) => {
            n2 && n2.delete(e3.id);
          }), n2 && 0 === n2.size && (this.remoteDataChannelMap.delete(e2), await this.connection.stopDataChannels(e2.uid)), i2.map((e3) => e3.id);
        }
        async massUnsubscribe(e2) {
          return this.massUnsubscribeNoLock(e2);
        }
        async massUnsubscribeNoLock(e2) {
          let t2 = [];
          for (const { user: i3, mediaType: n3 } of e2) {
            const e3 = this.pendingRemoteTracks.filter((e4) => {
              let { user: t3, kind: s2 } = e4;
              return void 0 !== n3 ? t3.uid === i3.uid && n3 === s2 : t3.uid === i3.uid;
            });
            e3.forEach((e4) => {
              const t3 = this.pendingRemoteTracks.indexOf(e4);
              this.pendingRemoteTracks.splice(t3, 1);
            }), t2 = t2.concat(e3);
          }
          if (!this.connection || this.state !== mv.Connected)
            return void t2.forEach((e3) => {
              let { user: t3, kind: i3 } = e3;
              var n3;
              if (i3 === hv.AUDIO)
                null === (n3 = t3._audioTrack) || void 0 === n3 || n3._destroy(), t3._audioTrack = void 0;
              else if (i3 === hv.VIDEO) {
                var s2;
                null === (s2 = t3._videoTrack) || void 0 === s2 || s2._destroy(), t3._videoTrack = void 0;
              }
            });
          const i2 = cS(e2).call(e2, (e3, t3) => {
            let { user: i3, mediaType: n3 } = t3;
            const s2 = this.filterTobeUnSubscribedTracks(i3, n3);
            return e3.concat(s2);
          }, []);
          if (0 === i2.length)
            return;
          await this.connection.stopReceiving(i2.map((e3) => {
            let [, { id: t3 }] = e3;
            return t3;
          }));
          const n2 = this.createUnsubscribeAllMessage(i2);
          return this.withdrawRemoteTracks(i2), 0 === this.remoteUserMap.size && this.statsUploader.stopUploadInboundStats(), i2.forEach((e3) => {
            let [t3, { kind: i3 }] = e3;
            var n3, s2;
            i3 === hv.VIDEO && t3._videoSSRC && (null === (n3 = this.connection) || void 0 === n3 || n3.setStatsRemoteVideoIsReady(t3._videoSSRC, false));
            if (i3 === hv.VIDEO)
              this.unbindRemoteTrackEvents(t3._videoTrack), null === (s2 = t3._videoTrack) || void 0 === s2 || s2._destroy(), t3._videoTrack = void 0;
            else if (i3 === hv.AUDIO) {
              var r2;
              this.unbindRemoteTrackEvents(t3._audioTrack), null === (r2 = t3._audioTrack) || void 0 === r2 || r2._destroy(), t3._audioTrack = void 0;
            }
          }), n2;
        }
        async muteRemote(e2, t2) {
          if (!this.connection)
            return;
          const i2 = this.remoteUserMap.get(e2);
          if (!i2)
            return void YC.warning("[".concat(this.store.clientId, "] P2PChannel.muteRemote has no remote user ").concat(e2.uid, "."));
          if (!i2.get(t2))
            return void YC.warning("[".concat(this.store.clientId, "] P2PChannel.muteRemote has no remote user ").concat(e2.uid, " media type ").concat(t2, "."));
          const n2 = t2 === hv.VIDEO ? e2._videoSSRC : e2._audioSSRC;
          void 0 !== n2 && this.connection.setStatsRemoteVideoIsReady(n2, false);
        }
        async unmuteRemote(e2, t2) {
          return this.unmuteRemoteNoLock(e2, t2);
        }
        async unmuteRemoteNoLock(e2, t2) {
          if (!this.connection)
            return;
          const i2 = this.remoteUserMap.get(e2);
          if (!i2)
            return void YC.warning("[".concat(this.store.clientId, "] P2PChannel.unmuteRemote has no remote user ").concat(e2.uid, "."));
          i2.get(t2) || YC.warning("[".concat(this.store.clientId, "] P2PChannel.unmuteRemote has no remote user ").concat(e2.uid, " media type ").concat(t2, "."));
        }
        getAllTracks(e2) {
          const t2 = this.localTrackMap.get(Ev.LocalAudioTrack);
          if ((null == t2 ? void 0 : t2.track) instanceof uw) {
            const i2 = t2.track;
            return Array.from(this.localTrackMap.entries()).filter((e3) => {
              let [t3] = e3;
              return t3 !== Ev.LocalAudioTrack;
            }).filter((t3) => {
              let [i3] = t3;
              return !(e2 && i3 === Ev.LocalVideoLowTrack);
            }).map((e3) => {
              let [, { track: t3 }] = e3;
              return t3;
            }).concat(i2.trackList);
          }
          return Array.from(this.localTrackMap.entries()).filter((t3) => {
            let [i2] = t3;
            return !(e2 && i2 === Ev.LocalVideoLowTrack);
          }).map((e3) => {
            let [, { track: t3 }] = e3;
            return t3;
          });
        }
        getAllDataChannels() {
          return this.localDataChannels;
        }
        reportPublishEvent(e2, t2, i2, n2, s2) {
          if (e2) {
            const i3 = this.localTrackMap.get(Ev.LocalAudioTrack), r3 = n2 ? this.localTrackMap.get(Ev.LocalVideoLowTrack) : this.localTrackMap.get(Ev.LocalVideoTrack);
            rI.publish(this.store.sessionId, { eventElapse: TP.measureFromPublishStart(this.store.clientId, this.store.pubId), succ: e2, ec: t2, audioName: null == i3 ? void 0 : i3.track.getTrackLabel(), videoName: null == r3 ? void 0 : r3.track.getTrackLabel(), screenshare: -1 !== (null == r3 ? void 0 : r3.track._hints.indexOf(YA.SCREEN_TRACK)), audio: !!i3, video: !!r3, p2pid: this.store.p2pId, publishRequestid: this.store.pubId, extend: s2 });
          } else {
            var r2;
            i2 || (i2 = []);
            const o2 = i2.find((e3) => e3 instanceof cw), a2 = n2 ? null === (r2 = this.localTrackMap.get(Ev.LocalVideoTrack)) || void 0 === r2 ? void 0 : r2.track : i2.find((e3) => e3 instanceof Nw);
            rI.publish(this.store.sessionId, { eventElapse: TP.measureFromPublishStart(this.store.clientId, this.store.pubId), succ: e2, ec: t2, audioName: null == o2 ? void 0 : o2.getTrackLabel(), videoName: null == a2 ? void 0 : a2.getTrackLabel(), screenshare: -1 !== (null == a2 ? void 0 : a2._hints.indexOf(YA.SCREEN_TRACK)), audio: !!o2, video: !!a2, p2pid: this.store.p2pId, publishRequestid: this.store.pubId, extend: s2 });
          }
        }
        reportSubscribeEvent(e2, t2, i2, n2) {
          const s2 = n2 === hv.VIDEO ? i2._videoSSRC : i2._audioSSRC;
          s2 && rI.subscribe(this.store.sessionId, { succ: e2, ec: t2, video: n2 === hv.VIDEO, audio: n2 === hv.AUDIO, peerid: i2.uid, subscribeRequestid: n2 === hv.VIDEO ? i2._videoSSRC : i2._audioSSRC, p2pid: this.store.p2pId, eventElapse: TP.measureFromSubscribeStart(this.store.clientId, s2) });
        }
        reset() {
          YC.debug("[".concat(this.store.clientId, "] P2PChannel.reset")), this.mutex = new Yg("P2PChannel-mutex"), this.connection && (this.connection.close(), this.unbindConnectionEvents(this.connection), this.connection = void 0), this.shouldForwardP2PCreation && (this.connection = this.store.useDataChannel ? new Qk({}, this.store) : this.isPlanB ? new wk({}, this.store) : new Uk({}, this.store), this.bindConnectionEvents(this.connection)), this.statsUploader.stopUploadOutboundStats(), this.statsUploader.stopUploadInboundStats(), this.statsUploader.stopUploadTransportStats(), this.statsUploader.stopUploadExtensionUsageStats(), this.unbindLocalTrackEvents(), this.unbindAllRemoteTrackEvents(), this.unbindRtpTransceiver();
          const e2 = this.localTrackMap.get(Ev.LocalAudioTrack);
          if ((null == e2 ? void 0 : e2.track) instanceof uw) {
            if (e2.track.trackList.length > 0) {
              const t2 = e2.track;
              e2.track.trackList.forEach((e3) => {
                t2.removeAudioTrack(e3);
              });
            }
            e2.track.close();
          }
          this.localTrackMap.clear(), this.remoteUserMap.clear(), this.statsCollector.removeRemoteStats(), this.statsCollector.removeLocalStats(), this.iceFailedCount = 0, this.dtlsFailedCount = 0, this.pendingLocalTracks = [], this.pendingRemoteTracks = [], this.localDataChannels = [], this.remoteDataChannelMap.clear(), this.pendingLocalDataChannels = [], this.pendingRemoteDataChannels = [], this.state = mv.Disconnected;
        }
        getStats() {
          var e2;
          return null === (e2 = this.connection) || void 0 === e2 ? void 0 : e2.getStats();
        }
        getRemoteVideoIsReady(e2) {
          var t2;
          return (null === (t2 = this.connection) || void 0 === t2 ? void 0 : t2.getRemoteVideoIsReady(e2)) || false;
        }
        getLocalAudioVolume() {
          const e2 = this.localTrackMap.get(Ev.LocalAudioTrack);
          if (e2)
            return e2.track.getVolumeLevel();
        }
        getLocalVideoSize() {
          const e2 = this.localTrackMap.get(Ev.LocalVideoTrack);
          if (e2)
            return { width: e2.track._videoWidth || 0, height: e2.track._videoHeight || 0 };
        }
        getEncoderConfig(e2) {
          const t2 = this.localTrackMap.get(e2);
          return t2 && t2.track instanceof Nw || t2 && t2.track instanceof cw ? t2.track._encoderConfig : void 0;
        }
        getLocalMedia(e2) {
          return this.localTrackMap.get(e2);
        }
        hasLocalMedia() {
          return this.localTrackMap.size > 0;
        }
        hasRemoteMedia(e2, t2) {
          if (!e2)
            return this.remoteUserMap.size > 0;
          const i2 = this.remoteUserMap.get(e2);
          return !!i2 && (!t2 || i2.has(t2));
        }
        async hasRemoteMediaWithLock(e2, t2) {
          if (!e2)
            return this.remoteUserMap.size > 0;
          const i2 = this.remoteUserMap.get(e2);
          return !!i2 && (!t2 || i2.has(t2));
        }
        getRemoteMedia(e2) {
          var t2;
          const i2 = Array.from(uh(t2 = this.remoteUserMap).call(t2)).find((t3) => t3.uid === e2);
          return i2 ? { audioTrack: i2.audioTrack, audioSSRC: i2._audioSSRC, videoTrack: i2.videoTrack, videoSSRC: i2._videoSSRC } : {};
        }
        getAudioLevels() {
          let e2 = Array.from(this.remoteUserMap.entries()).map((e3) => {
            let [t3] = e3;
            return { uid: t3.uid, level: t3.audioTrack ? 100 * t3.audioTrack._source.getAccurateVolumeLevel() : 0 };
          });
          const t2 = this.localTrackMap.get(Ev.LocalAudioTrack);
          return t2 && e2.push({ level: 100 * t2.track._source.getAccurateVolumeLevel(), uid: this.store.uid }), e2 = Zh(e2).call(e2, (e3, t3) => e3.level - t3.level), e2;
        }
        async disconnectForReconnect() {
          this.connection && (YC.debug("[".concat(this.store.clientId, "] P2PChannel.disconnectForReconnect closing P2PConnection")), this.state = mv.Reconnecting, DC("KEEP_LAST_FRAME") && 0 !== this.remoteUserMap.size && Array.from(this.remoteUserMap.entries()).forEach((e2) => {
            let [t2] = e2;
            var i2;
            t2._videoTrack && t2._videoTrack._player && (null === (i2 = t2._videoTrack._player.getVideoElement()) || void 0 === i2 || i2.pause(), t2._videoTrack._player.isKeepLastFrame = true, t2._videoTrack._originMediaStreamTrack.stop());
          }), this.connection.close(), this.unbindConnectionEvents(this.connection), this.connection = void 0, this.shouldForwardP2PCreation && (this.connection = this.store.useDataChannel ? new Qk({}, this.store) : this.isPlanB ? new wk({}, this.store) : new Uk({}, this.store), this.bindConnectionEvents(this.connection)), 0 !== this.localTrackMap.size && (Array.from(this.localTrackMap.entries()).forEach((e2) => {
            var t2;
            let [i2, { track: n2 }] = e2;
            switch (i2) {
              case Ev.LocalVideoTrack:
                bn(t2 = n2._hints).call(t2, YA.LOW_STREAM) ? n2.close() : this.pendingLocalTracks.push(n2);
                break;
              case Ev.LocalAudioTrack:
                n2 instanceof uw ? this.pendingLocalTracks = this.pendingLocalTracks.concat(n2.trackList) : this.pendingLocalTracks.push(n2);
              case Ev.LocalVideoLowTrack:
            }
          }), this.emit(fv.MediaReconnectStart, this.store.uid)), this.unbindLocalTrackEvents(), this.localTrackMap.clear(), 0 !== this.remoteUserMap.size && Array.from(this.remoteUserMap.entries()).forEach((e2) => {
            let [t2, i2] = e2;
            Array.from(uh(i2).call(i2)).forEach((e3) => {
              this.setPendingRemoteMedia(t2, e3);
            }), this.emit(fv.MediaReconnectStart, t2.uid);
          }), this.unbindAllRemoteTrackEvents(), this.remoteUserMap.clear(), 0 !== this.localDataChannels.length && (this.localDataChannels.forEach((e2) => {
            this.pendingLocalDataChannels.push(e2);
          }), this.localDataChannels.length = 0), 0 !== this.remoteDataChannelMap.size && (Array.from(this.remoteDataChannelMap.entries()).forEach((e2) => {
            let [t2, i2] = e2;
            Array.from(uh(i2).call(i2)).forEach((e3) => {
              this.setPendingRemoteDataChannel(t2, e3);
            });
          }), this.remoteDataChannelMap.clear()), this.statsUploader.stopUploadOutboundStats(), this.statsUploader.stopUploadInboundStats(), this.statsUploader.stopUploadTransportStats(), YC.debug("[".concat(this.store.clientId, "] P2PChannel disconnected, waiting to reconnect.")));
        }
        hasPendingRemoteDataChannel(e2, t2) {
          for (const i2 of this.pendingRemoteDataChannels) {
            const { user: n2, id: s2 } = i2;
            if ((e2 instanceof ik ? e2.uid : e2) === n2.uid && s2 === t2)
              return true;
          }
          return false;
        }
        setPendingRemoteDataChannel(e2, t2) {
          this.hasPendingRemoteDataChannel(e2, t2) || this.pendingRemoteDataChannels.push({ user: e2, id: t2 });
        }
        hasPendingRemoteMedia(e2, t2) {
          for (const i2 of this.pendingRemoteTracks) {
            const { user: n2, kind: s2 } = i2;
            if ((e2 instanceof ik ? e2.uid : e2) === n2.uid && t2 === s2)
              return true;
          }
          return false;
        }
        setPendingRemoteMedia(e2, t2) {
          this.hasPendingRemoteMedia(e2, t2) || this.pendingRemoteTracks.push({ user: e2, kind: t2 });
        }
        restartICE(e2) {
          var t2 = this;
          return OP(function* () {
            if (!t2.connection || t2.state !== mv.Connected || t2.connection instanceof Qk)
              return;
            const i2 = yield SP(t2.mutex.lock("From P2PChannel.restartICE"));
            let n2;
            try {
              n2 = yield SP(t2.connection.restartICE(e2));
              const s3 = yield SP(n2.next());
              if (s3.done)
                return;
              const r2 = s3.value, o2 = yield r2;
              switch (t2.reportPCDisconnectedOrFailed(e2), e2) {
                case pv.TCP:
                  t2._pcStatsUploadType = _v.TCP_RESTART;
                  break;
                case pv.RELAY:
                  t2._pcStatsUploadType = _v.RELAY_RESTART;
                  break;
                default:
                  t2._pcStatsUploadType = _v.OLD_RESTART;
              }
              t2._isInRestartIce = true, n2.next(o2);
            } catch (e3) {
              var s2;
              null === (s2 = n2) || void 0 === s2 || s2.throw(e3);
            } finally {
              i2();
            }
          })();
        }
        getUplinkNetworkQuality() {
          if (!this.connection)
            return 0;
          const e2 = this.connection.getStats(), t2 = this.localTrackMap.get(Ev.LocalVideoTrack), i2 = this.localTrackMap.get(Ev.LocalAudioTrack), n2 = e2.videoSend.find((e3) => e3.ssrc === (null == t2 ? void 0 : t2.ssrcs[0].ssrcId)), s2 = e2.audioSend.find((e3) => e3.ssrc === (null == i2 ? void 0 : i2.ssrcs[0].ssrcId));
          if (!n2 || !s2)
            return 1;
          const r2 = gg(this, fv.NeedSignalRTT), o2 = n2 ? n2.rttMs : void 0, a2 = s2 ? s2.rttMs : void 0, c2 = o2 && a2 ? (o2 + a2) / 2 : o2 || a2, d2 = (c2 && r2 ? (c2 + r2) / 2 : c2 || r2) || 0, l2 = 100 * e2.sendPacketLossRate * 0.7 / 50 + 0.3 * d2 / 1500, u2 = l2 < 0.17 ? 1 : l2 < 0.36 ? 2 : l2 < 0.59 ? 3 : l2 < 0.1 ? 4 : 5, h2 = null == t2 ? void 0 : t2.track;
          if (h2 && h2._encoderConfig && -1 === h2._hints.indexOf(YA.SCREEN_TRACK)) {
            const t3 = h2._encoderConfig.bitrateMax, i3 = e2.bitrate.actualEncoded;
            if (t3 && i3) {
              const e3 = (1e3 * t3 - i3) / (1e3 * t3);
              return cI[e3 < 0.15 ? 0 : e3 < 0.3 ? 1 : e3 < 0.45 ? 2 : e3 < 0.6 ? 3 : 4][u2];
            }
          }
          return u2;
        }
        getDownlinkNetworkQuality() {
          if (!this.connection)
            return 0;
          const e2 = this.connection.getStats();
          let t2 = 0;
          return Array.from(this.remoteUserMap.entries()).forEach((i2) => {
            let [n2] = i2;
            const s2 = n2._audioSSRC, r2 = n2._videoSSRC, o2 = e2.audioRecv.find((e3) => e3.ssrc === s2), a2 = e2.videoRecv.find((e3) => e3.ssrc === r2);
            if (!o2 && !a2)
              return void (t2 += 1);
            const c2 = gg(this, fv.NeedSignalRTT), d2 = e2.rtt, l2 = (d2 && c2 ? (d2 + c2) / 2 : d2 || c2) || 0, u2 = o2 ? o2.jitterMs : void 0, h2 = e2.recvPacketLossRate;
            let p2 = 0.7 * h2 * 100 / 50 + 0.3 * l2 / 1500;
            u2 && (p2 = 0.6 * h2 * 100 / 50 + 0.2 * l2 / 1500 + 0.2 * u2 / 400);
            t2 += p2 < 0.1 ? 1 : p2 < 0.17 ? 2 : p2 < 0.36 ? 3 : p2 < 0.59 ? 4 : 5;
          }), this.remoteUserMap.size > 0 ? Math.round(t2 / this.remoteUserMap.size) : t2;
        }
        async muteLocalTrack(e2) {
          return new tT((t2, i2) => {
            this.handleMuteLocalTrack(e2, t2, i2);
          });
        }
        filterTobePublishedTracks(e2, t2, i2) {
          const n2 = [], s2 = wA(), r2 = this.getAllTracks();
          e2 = yg(e2 = e2.filter((e3) => -1 === r2.indexOf(e3)));
          let o2 = false, a2 = false;
          for (const r3 of e2) {
            if (r3 instanceof Nw && (this.localTrackMap.has(Ev.LocalVideoTrack) || o2 ? new VT(xT.CAN_NOT_PUBLISH_MULTIPLE_VIDEO_TRACKS).throw() : (n2.push({ track: r3, type: Ev.LocalVideoTrack }), o2 = true), t2)) {
              const e3 = this.getLowVideoTrack(r3, i2);
              n2.push({ track: e3, type: Ev.LocalVideoLowTrack });
            }
            if (r3 instanceof cw) {
              const e3 = this.localTrackMap.get(Ev.LocalAudioTrack);
              if (e3) {
                if (!(e3.track instanceof uw))
                  throw new VT(xT.NOT_SUPPORTED, "cannot publish multiple tracks which one of them configured with bypassWebAudio or your browser does not support audio mixing");
                if (r3._bypassWebAudio)
                  throw new VT(xT.NOT_SUPPORTED, "cannot publish multiple tracks which one of them configured with bypassWebAudio");
                e3.track.addAudioTrack(r3), this.bindLocalAudioTrackEvents(r3, true);
              } else if (a2) {
                const e4 = n2.find((e5) => {
                  let { type: t3 } = e5;
                  return t3 === Ev.LocalAudioTrack;
                });
                if (!(e4.track instanceof uw))
                  throw new VT(xT.NOT_SUPPORTED, "cannot publish multiple tracks which one of them configured with bypassWebAudio or your browser does not support audio mixing");
                if (r3._bypassWebAudio)
                  throw new VT(xT.NOT_SUPPORTED, "cannot publish multiple tracks which one of them configured with bypassWebAudio");
                e4.track.addAudioTrack(r3);
              } else {
                if (!s2.webAudioMediaStreamDest || r3 instanceof uw || r3._bypassWebAudio)
                  n2.push({ track: r3, type: Ev.LocalAudioTrack });
                else {
                  const e4 = new uw();
                  e4.addAudioTrack(r3), n2.push({ track: e4, type: Ev.LocalAudioTrack });
                }
                a2 = true;
              }
            }
          }
          return n2;
        }
        filterTobeUnpublishedTracks(e2) {
          const t2 = [], i2 = this.getAllTracks();
          e2 = yg(e2 = e2.filter((e3) => -1 !== i2.indexOf(e3)));
          for (const i3 of e2) {
            if (i3 instanceof cw) {
              const e3 = this.localTrackMap.get(Ev.LocalAudioTrack);
              if (!e3)
                continue;
              e3.track instanceof uw ? (e3.track.removeAudioTrack(i3), this.unbindLocalAudioTrackEvents(i3), 0 === e3.track.trackList.length && (t2.push([Ev.LocalAudioTrack, e3]), e3.track.close())) : t2.push([Ev.LocalAudioTrack, e3]);
            }
            if (i3 instanceof Nw) {
              const e3 = this.localTrackMap.get(Ev.LocalVideoTrack);
              if (!e3)
                continue;
              t2.push([Ev.LocalVideoTrack, e3]);
              const i4 = this.localTrackMap.get(Ev.LocalVideoLowTrack);
              i4 && t2.push([Ev.LocalVideoLowTrack, i4]);
            }
          }
          return t2;
        }
        filterTobePublishedDataChannels(e2) {
          return e2 = (e2 = yg(e2)).filter((e3) => -1 === this.localDataChannels.findIndex((t2) => t2.id === e3.id));
        }
        filterTobeUnpublishedDataChannels(e2) {
          return e2 = (e2 = (e2 = yg(e2)).filter((e3) => -1 !== this.localDataChannels.indexOf(e3))).filter((e3) => e3._originDataChannel);
        }
        bindLocalTrackEvents(e2) {
          e2.forEach((e3) => {
            let { track: t2, type: i2 } = e3;
            switch (i2) {
              case Ev.LocalVideoTrack:
                t2.addListener(KA.GET_STATS, this.handleGetLocalVideoStats), t2.addListener(KA.GET_RTC_STATS, this.handleGetRTCStats), t2.addListener(KA.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), t2.addListener(KA.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), t2.addListener(KA.NEED_UPDATE_VIDEO_ENCODER, this.handleUpdateVideoEncoder), t2.addListener(KA.SET_OPTIMIZATION_MODE, this.handleSetOptimizationMode), t2.addListener(KA.NEED_REPLACE_TRACK, this.handleReplaceTrack), t2.addListener(KA.NEED_MUTE_TRACK, this.handleMuteLocalTrack), t2.addListener(KA.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack);
                break;
              case Ev.LocalAudioTrack:
                this.bindLocalAudioTrackEvents(t2);
              case Ev.LocalVideoLowTrack:
            }
          });
        }
        bindLocalAudioTrackEvents(e2, t2) {
          e2 instanceof uw ? e2.trackList.forEach((e3) => {
            e3.addListener(KA.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), e3.addListener(KA.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), e3.addListener(KA.GET_STATS, this.handleGetLocalAudioStats), e3.addListener(KA.NEED_MUTE_TRACK, this.handleMuteLocalTrack), e3.addListener(KA.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack);
          }) : (e2.addListener(KA.GET_STATS, this.handleGetLocalAudioStats), e2.addListener(KA.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), e2.addListener(KA.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), e2.addListener(KA.NEED_MUTE_TRACK, this.handleMuteLocalTrack), e2.addListener(KA.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack), t2 || e2.addListener(KA.NEED_REPLACE_TRACK, this.handleReplaceTrack));
        }
        unbindLocalTrackEvents(e2) {
          e2 || (e2 = Array.from(this.localTrackMap.entries()).map((e3) => {
            let [t2, { track: i2 }] = e3;
            return { track: i2, type: t2 };
          })), e2.forEach((e3) => {
            let { track: t2, type: i2 } = e3;
            switch (i2) {
              case Ev.LocalVideoTrack:
                t2.off(KA.GET_STATS, this.handleGetLocalVideoStats), t2.off(KA.GET_RTC_STATS, this.handleGetRTCStats), t2.off(KA.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), t2.off(KA.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), t2.off(KA.NEED_UPDATE_VIDEO_ENCODER, this.handleUpdateVideoEncoder), t2.off(KA.SET_OPTIMIZATION_MODE, this.handleSetOptimizationMode), t2.off(KA.NEED_REPLACE_TRACK, this.handleReplaceTrack), t2.off(KA.NEED_MUTE_TRACK, this.handleMuteLocalTrack), t2.off(KA.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack);
                break;
              case Ev.LocalAudioTrack:
                this.unbindLocalAudioTrackEvents(t2);
              case Ev.LocalVideoLowTrack:
            }
          });
        }
        unbindLocalAudioTrackEvents(e2) {
          e2 instanceof uw ? e2.trackList.forEach((e3) => {
            e3.off(KA.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), e3.off(KA.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), e3.off(KA.GET_STATS, this.handleGetLocalAudioStats), e3.off(KA.NEED_MUTE_TRACK, this.handleMuteLocalTrack), e3.off(KA.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack);
          }) : (e2.off(KA.GET_STATS, this.handleGetLocalAudioStats), e2.off(KA.NEED_DISABLE_TRACK, this.handleMuteLocalTrack), e2.off(KA.NEED_ENABLE_TRACK, this.handleUnmuteLocalTrack), e2.off(KA.NEED_REPLACE_TRACK, this.handleReplaceTrack), e2.off(KA.NEED_MUTE_TRACK, this.handleMuteLocalTrack), e2.off(KA.NEED_UNMUTE_TRACK, this.handleUnmuteLocalTrack));
        }
        bindRemoteTrackEvents(e2, t2) {
          t2 instanceof Vw && t2.addListener(KA.GET_STATS, (t3) => {
            t3(this.handleGetRemoteVideoStats(e2));
          }), t2 instanceof Fw && t2.addListener(KA.GET_STATS, (t3) => {
            t3(this.handleGetRemoteAudioStats(e2));
          });
        }
        unbindRemoteTrackEvents(e2) {
          e2 && e2.removeAllListeners(KA.GET_STATS);
        }
        unbindAllRemoteTrackEvents() {
          Array.from(this.remoteUserMap.entries()).forEach((e2) => {
            let [t2, i2] = e2;
            i2.has(hv.AUDIO) && this.unbindRemoteTrackEvents(t2._audioTrack), i2.has(hv.VIDEO) && this.unbindRemoteTrackEvents(t2._videoTrack);
          });
        }
        createGatewayPublishMessage(e2, t2) {
          return e2.map((e3, i2) => {
            var n2;
            let s2, r2, { track: o2, type: a2 } = e3;
            switch (a2) {
              case Ev.LocalAudioTrack:
                s2 = ev.Audio, r2 = { dtx: o2 instanceof dw && o2._config.DTX, hq: false, lq: false, stereo: false, speech: false };
                break;
              case Ev.LocalVideoTrack:
                s2 = bn(n2 = o2._hints).call(n2, YA.SCREEN_TRACK) ? ev.Screen : ev.High, r2 = eM(eM({}, Ay(o2)), {}, { codec: this.store.codec });
                break;
              case Ev.LocalVideoLowTrack:
                s2 = ev.Low, r2 = eM(eM({}, Ay(o2)), {}, { codec: this.store.codec });
            }
            return { stream_type: s2, attributes: r2, ssrcs: t2[i2] };
          });
        }
        createGatewayUnpublishMessage(e2) {
          return e2.map((e3) => {
            var t2;
            let i2, [n2, { track: s2, ssrcs: r2, id: o2 }] = e3;
            switch (n2) {
              case Ev.LocalVideoTrack:
                i2 = bn(t2 = s2._hints).call(t2, YA.SCREEN_TRACK) ? ev.Screen : ev.High;
                break;
              case Ev.LocalAudioTrack:
                i2 = ev.Audio;
                break;
              case Ev.LocalVideoLowTrack:
                i2 = ev.Low;
            }
            return { stream_type: i2, ssrcs: r2, mid: o2 };
          });
        }
        assignLocalTracks(e2, t2) {
          e2.forEach((e3, i2) => {
            let { track: n2, type: s2 } = e3;
            this.localTrackMap.set(s2, { track: n2, id: t2[i2].id, ssrcs: t2[i2].localSSRC });
          });
        }
        withdrawLocalTracks(e2) {
          e2.forEach((e3) => {
            let [t2] = e3;
            this.localTrackMap.delete(t2);
          });
        }
        bindConnectionEvents(e2) {
          e2.onConnectionStateChange = async (t2) => {
            if (YC.info("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection.onConnectionStateChange(").concat(t2, ")")), this.emit(fv.PeerConnectionStateChange, t2), "connected" !== t2 || this.store.keyMetrics.peerConnectionEnd || this.store.peerConnectionEnd(), "connected" === t2 && (this._restartTimer && (clearTimeout(this._restartTimer), this._restartTimer = void 0), (this._isFirstConnected || this._isInRestartIce) && this.reportPCStats(Date.now(), true, this._pcStatsUploadType), this._isInRestartIce = false, this._isFirstConnected = false, this._isStartRestartIce = false), DC("NEW_ICE_RESTART")) {
              var i2;
              if (bn(i2 = this._restartStates).call(i2, t2)) {
                if (this._isStartRestartIce)
                  return;
                this._isStartRestartIce = true;
                const t3 = (t4) => {
                  if ("disconnected" === e2.iceConnectionState || "checking" === e2.iceConnectionState || "failed" === e2.iceConnectionState) {
                    YC.debug("[".concat(this.store.clientId, "] [P2PChannel] start use restartICE, type is ").concat(t4));
                    "CONNECTED" === gg(this, fv.QueryClientConnectionState) && this.emit(fv.RequestRestartICE, t4);
                  }
                }, i3 = () => {
                  "disconnected" !== e2.iceConnectionState && "checking" !== e2.iceConnectionState && "failed" !== e2.iceConnectionState || (this.reportPCStats(Date.now(), false, this._pcStatsUploadType), YC.debug("[".concat(this.store.clientId, "] P2PConnection disconnected timeout, force reconnect")), setTimeout(() => this.emit(fv.P2PLost), 0), this.iceFailedCount += 1, this.requestReconnect());
                }, n2 = DC("ICE_RESTART_INTERVAL");
                return void (this._restartTimer = window.setTimeout(() => {
                  if (DC("JOIN_WITH_FALLBACK_MEDIA_PROXY_FORCE") && wA().supportPCSetConfiguration)
                    t3(pv.RELAY), this._restartTimer = window.setTimeout(i3, n2);
                  else if (RT())
                    t3(pv.UDP), this._restartTimer = window.setTimeout(i3, 4e3);
                  else {
                    if (t3(pv.TCP), wA().supportPCSetConfiguration)
                      return void (this._restartTimer = window.setTimeout(() => {
                        t3(pv.RELAY), this._restartTimer = window.setTimeout(i3, n2);
                      }, n2));
                    this._restartTimer = window.setTimeout(i3, n2);
                  }
                }, 800));
              }
            } else {
              if ("disconnected" === t2 && "disconnected" === e2.iceConnectionState)
                return setTimeout(() => {
                  if ("disconnected" === e2.iceConnectionState && DC("ICE_RESTART")) {
                    "CONNECTED" === gg(this, fv.QueryClientConnectionState) && this.emit(fv.RequestRestartICE);
                  }
                }, 800), void setTimeout(() => {
                  "disconnected" === e2.peerConnectionState && (YC.debug("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection disconnected timeout 4000ms, force reconnect")), this.reportPCStats(Date.now(), false, this._pcStatsUploadType), this._isInRestartIce = false, setTimeout(() => this.emit(fv.P2PLost), 0), this.iceFailedCount += 1, this.requestReconnect());
                }, 4e3);
              "failed" === t2 && (YC.debug("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection state failed, force reconnect")), this.reportPCDisconnectedOrFailed(), setTimeout(() => this.emit(fv.P2PLost), 0), this.iceFailedCount += 1, await this.requestReconnect());
            }
          }, e2.onICEConnectionStateChange = (e3) => {
            "connected" !== e3 || this.store.keyMetrics.iceConnectionEnd || this.store.iceConnectionEnd(), YC.info("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection.onICEConnectionStateChange(").concat(e3, ")")), rI.reportApiInvoke(this.store.sessionId, { name: "ICEConnectionStateChange", options: e3, tag: og.TRACER }).onSuccess(), this.emit(fv.IceConnectionStateChange, e3);
          }, e2.onICETransportStateChange = (e3) => {
            YC.info("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection.onICETransportStateChange(").concat(e3, ")"));
          }, e2.onDTLSTransportStateChange = (e3) => {
            YC.info("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection.onDTLSTransportStateChange(").concat(e3, ")"));
          }, e2.onDTLSTransportError = (e3) => {
            YC.info("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection.onDTLSTransportError(").concat(e3, ")"));
          }, e2.onFirstAudioDecoded = (e3) => {
            var t2;
            const i2 = Array.from(uh(t2 = this.remoteUserMap).call(t2)).find((t3) => t3._audioSSRC === e3);
            var n2;
            i2 && (this.store.subscribe(i2.uid, "audio", void 0, void 0, void 0, Date.now()), null === (n2 = i2.audioTrack) || void 0 === n2 || n2.emit(ZA.FIRST_FRAME_DECODED), rI.firstRemoteFrame(this.store.sessionId, QC.FIRST_AUDIO_DECODE, ZC.FIRST_AUDIO_DECODE, { peer: i2._uintid, subscribeElapse: TP.measureFromSubscribeStart(this.store.clientId, e3), subscribeRequestid: e3, p2pid: this.store.p2pId }));
          }, e2.onFirstAudioReceived = (e3) => {
            var t2;
            const i2 = Array.from(uh(t2 = this.remoteUserMap).call(t2)).find((t3) => t3._audioSSRC === e3);
            i2 && rI.firstRemoteFrame(this.store.sessionId, QC.FIRST_AUDIO_RECEIVED, ZC.FIRST_AUDIO_RECEIVED, { peer: i2._uintid, subscribeElapse: TP.measureFromSubscribeStart(this.store.clientId, e3), subscribeRequestid: e3, p2pid: this.store.p2pId });
          }, e2.onFirstVideoDecoded = (e3, t2, i2) => {
            this.reportVideoFirstFrameDecoded(e3, t2, i2);
          }, e2.onFirstVideoReceived = (e3) => {
            var t2;
            const i2 = Array.from(uh(t2 = this.remoteUserMap).call(t2)).find((t3) => t3._videoSSRC === e3);
            i2 && rI.firstRemoteFrame(this.store.sessionId, QC.FIRST_VIDEO_RECEIVED, ZC.FIRST_VIDEO_RECEIVED, { peer: i2._uintid, subscribeElapse: TP.measureFromSubscribeStart(this.store.clientId, e3), subscribeRequestid: e3, p2pid: this.store.p2pId });
          }, e2.onSelectedLocalCandidateChanged = (e3, t2) => {
            const i2 = "relay" === e3.candidateType, n2 = "relay" === t2.candidateType;
            "unknown" !== t2.candidateType && i2 === n2 || this.emit(fv.ConnectionTypeChange, i2), YC.info("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection.SelectedLocalCandidateChanged(").concat(JSON.stringify(Dy(t2)), " -> ").concat(JSON.stringify(Dy(e3)), ")"));
          }, e2.onSelectedRemoteCandidateChanged = (e3, t2) => {
            YC.info("[".concat(this.store.clientId, "] [p2pId: ").concat(this.store.p2pId, "]: P2PConnection.SelectedRemoteCandidateChanged(").concat(JSON.stringify(Dy(t2)), " -> ").concat(JSON.stringify(Dy(e3)), ")"));
          }, e2.onFirstVideoDecodedTimeout = (e3) => {
            this.reportVideoFirstFrameDecoded(e3, void 0, void 0, true);
          };
        }
        unbindConnectionEvents(e2) {
          e2.onConnectionStateChange = void 0, e2.onICEConnectionStateChange = void 0, e2.onICETransportStateChange = void 0, e2.onDTLSTransportStateChange = void 0, e2.onDTLSTransportError = void 0, e2.onFirstAudioDecoded = void 0, e2.onFirstAudioReceived = void 0, e2.onFirstVideoDecoded = void 0, e2.onFirstVideoReceived = void 0, e2.onSelectedLocalCandidateChanged = void 0, e2.onSelectedRemoteCandidateChanged = void 0, e2.onFirstVideoDecodedTimeout = void 0;
        }
        filterTobeMutedTracks(e2) {
          const t2 = [];
          if (-1 === this.getAllTracks().indexOf(e2))
            return t2;
          const i2 = this.localTrackMap.get(Ev.LocalAudioTrack);
          if (e2 instanceof cw && (null == i2 ? void 0 : i2.track) instanceof uw)
            return i2.track.isActive || t2.push([Ev.LocalAudioTrack, i2]), t2;
          const n2 = Array.from(this.localTrackMap.entries()).find((t3) => {
            let [, { track: i3 }] = t3;
            return e2 === i3;
          });
          if (n2 && (t2.push(n2), n2[0] === Ev.LocalVideoTrack)) {
            const e3 = this.localTrackMap.get(Ev.LocalVideoLowTrack);
            e3 && t2.push([Ev.LocalVideoLowTrack, e3]);
          }
          return t2;
        }
        filterTobeUnmutedTracks(e2) {
          const t2 = [], i2 = this.localTrackMap.get(Ev.LocalAudioTrack);
          if (e2 instanceof cw && (null == i2 ? void 0 : i2.track) instanceof uw)
            return i2.track.isActive && t2.push([Ev.LocalAudioTrack, i2]), t2;
          const n2 = Array.from(this.localTrackMap.entries()).find((t3) => {
            let [, { track: i3 }] = t3;
            return e2 === i3;
          });
          if (n2)
            if (n2[0] === Ev.LocalVideoTrack) {
              t2.push(n2);
              const e3 = this.localTrackMap.get(Ev.LocalVideoLowTrack);
              e3 && t2.push([Ev.LocalVideoLowTrack, e3]);
            } else
              t2.push(n2);
          return t2;
        }
        createMuteMessage(e2) {
          return e2.map((e3) => {
            var t2;
            let i2, [n2, { track: s2, ssrcs: r2, id: o2 }] = e3;
            switch (n2) {
              case Ev.LocalAudioTrack:
                i2 = ev.Audio;
                break;
              case Ev.LocalVideoTrack:
                i2 = bn(t2 = s2._hints).call(t2, YA.SCREEN_TRACK) ? ev.Screen : ev.High;
                break;
              case Ev.LocalVideoLowTrack:
                i2 = ev.Low;
            }
            return { stream_type: i2, ssrcs: r2, mid: o2 };
          });
        }
        createUnmuteMessage(e2) {
          return e2.map((e3) => {
            var t2;
            let i2, [n2, { track: s2, ssrcs: r2, id: o2 }] = e3;
            switch (n2) {
              case Ev.LocalAudioTrack:
                i2 = ev.Audio;
                break;
              case Ev.LocalVideoTrack:
                i2 = bn(t2 = s2._hints).call(t2, YA.SCREEN_TRACK) ? ev.Screen : ev.High;
                break;
              case Ev.LocalVideoLowTrack:
                i2 = ev.Low;
            }
            return { stream_type: i2, ssrcs: r2, mid: o2 };
          });
        }
        filterTobeUnSubscribedTracks(e2, t2) {
          const i2 = [], n2 = this.remoteUserMap.get(e2);
          if (!n2)
            return i2;
          if (t2) {
            const s2 = n2.get(t2);
            if (!s2)
              return i2;
            i2.push([e2, { kind: t2, id: s2 }]);
          } else
            Array.from(n2.entries()).forEach((t3) => {
              let [n3, s2] = t3;
              i2.push([e2, { kind: n3, id: s2 }]);
            });
          return i2;
        }
        filterTobeUnSubscribedDataChannels(e2, t2) {
          const i2 = [];
          return t2.forEach((t3) => {
            var n2;
            null !== (n2 = this.remoteDataChannelMap.get(e2)) && void 0 !== n2 && n2.has(t3.id) && i2.push(t3);
          }), i2;
        }
        createUnsubscribeMessage(e2) {
          const t2 = [];
          return e2.forEach((e3) => {
            let [i2, { kind: n2, id: s2 }] = e3;
            switch (n2) {
              case hv.VIDEO:
                return void (i2._videoSSRC && t2.push({ stream_type: hv.VIDEO, ssrcId: i2._videoSSRC }));
              case hv.AUDIO:
                return void (i2._audioSSRC && t2.push({ stream_type: hv.AUDIO, ssrcId: i2._audioSSRC }));
            }
          }), t2;
        }
        createUnsubscribeAllMessage(e2) {
          const t2 = /* @__PURE__ */ new Map();
          return e2.forEach((e3) => {
            let [i2, { kind: n2 }] = e3;
            if (t2.has(i2)) {
              let e4 = t2.get(i2);
              n2 === hv.VIDEO ? e4 |= nv.Video : e4 |= nv.Audio, t2.set(i2, e4);
            } else
              n2 === hv.VIDEO ? t2.set(i2, nv.Video) : t2.set(i2, nv.Audio);
          }), { users: Array.from(t2.entries()).map((e3) => {
            let [t3, i2] = e3;
            return { stream_id: t3.uid, stream_type: i2 };
          }) };
        }
        withdrawRemoteTracks(e2) {
          e2.forEach((e3) => {
            let [t2, { kind: i2 }] = e3;
            const n2 = this.remoteUserMap.get(t2);
            n2 && (n2.delete(i2), 0 === Array.from(n2.entries()).length && this.remoteUserMap.delete(t2));
          });
        }
        async updateBitrateLimit(e2) {
          const t2 = this.localTrackMap.get(Ev.LocalVideoTrack), i2 = this.localTrackMap.get(Ev.LocalVideoLowTrack);
          t2 && await t2.track.setBitrateLimit(e2.uplink), i2 && e2.low_stream_uplink && await i2.track.setBitrateLimit({ max_bitrate: e2.low_stream_uplink.bitrate, min_bitrate: e2.low_stream_uplink.bitrate || 0 });
        }
        isP2PDisconnected() {
          if (this.connection) {
            return "connected" !== this.connection.peerConnectionState;
          }
          return true;
        }
        mapPubResToRemoteConfig(e2, t2) {
          return e2.map((e3, i2) => {
            var n2;
            let { stream_type: s2 } = e3;
            return null === (n2 = t2.find((e4) => {
              let { stream_type: t3 } = e4;
              return s2 === t3;
            })) || void 0 === n2 ? void 0 : n2.attributes;
          });
        }
        async tryToUnmuteAudio(e2) {
          for (let i2 = 0; i2 < e2.length; i2++)
            if (e2[i2] instanceof cw) {
              var t2;
              const n2 = this.filterTobeUnmutedTracks(e2[i2]);
              if (0 === n2.length)
                continue;
              await (null === (t2 = this.connection) || void 0 === t2 ? void 0 : t2.unmuteLocal(n2.map((e3) => {
                let [, { id: t3 }] = e3;
                return t3;
              })));
              const s2 = this.createUnmuteMessage(n2);
              return void await Tg(this, fv.RequestUnmuteLocal, s2);
            }
        }
        bindStatsUploaderEvents() {
          this.statsUploader.requestStats = () => this.getStats(), this.statsUploader.requestLocalMedia = () => Array.from(this.localTrackMap.entries()), this.statsUploader.requestRemoteMedia = () => Array.from(this.remoteUserMap.entries()), this.statsUploader.requestVideoIsReady = (e2) => {
            var t2;
            return !(null === (t2 = this.connection) || void 0 === t2 || !t2.getRemoteVideoIsReady(e2));
          }, this.statsUploader.requestUpload = (e2, t2) => this.emit(fv.RequestUpload, e2, t2), this.statsUploader.requestUploadStats = (e2) => this.emit(fv.RequestUploadStats, e2), this.statsUploader.requestAllTracks = () => this.getAllTracks();
        }
        unbindStatsUploaderEvents() {
          this.statsUploader.requestStats = void 0, this.statsUploader.requestLocalMedia = void 0, this.statsUploader.requestRemoteMedia = void 0, this.statsUploader.requestVideoIsReady = void 0;
        }
        async requestReconnect() {
          this.dtlsFailedCount += 1, await Ug(zg(this.dtlsFailedCount, Jg)), this.emit(fv.RequestReconnect);
        }
        async reconnectP2P() {
          const e2 = Array.from(this.localTrackMap.entries()), t2 = this.createGatewayUnpublishMessage(e2);
          Array.from(this.remoteUserMap.entries()), t2.length > 0 && await fg(this, fv.RequestUnpublishForReconnectPC, t2), this.disconnectForReconnect(), this.emit(fv.RequestReconnectPC);
        }
        canPublishLowStream() {
          return this.localTrackMap.has(Ev.LocalVideoTrack) || this.pendingLocalTracks.some((e2) => e2 instanceof Nw);
        }
        throwIfTrackTypeNotMatch(e2) {
          if (e2.filter((e3) => e3 instanceof Nw).length > 1)
            throw new VT(xT.CAN_NOT_PUBLISH_MULTIPLE_VIDEO_TRACKS);
          if (e2.filter((e3) => e3 instanceof cw).length > 1 && (e2.some((e3) => e3 instanceof cw && e3._bypassWebAudio) || !wA().webAudioMediaStreamDest))
            throw new VT(xT.NOT_SUPPORTED, "cannot publish multiple tracks which one of them configured with bypassWebAudio or your browser doesn't support MediaStreamDestNode");
          for (const t2 of e2) {
            if (t2 instanceof Nw && this.pendingLocalTracks.some((e3) => e3 instanceof Nw))
              throw new VT(xT.CAN_NOT_PUBLISH_MULTIPLE_VIDEO_TRACKS);
            if (t2 instanceof cw && this.pendingLocalTracks.some((e3) => e3 instanceof cw) && (!wA().webAudioMediaStreamDest || t2._bypassWebAudio || this.pendingLocalTracks.some((e3) => e3 instanceof cw && e3._bypassWebAudio)))
              throw new VT(xT.NOT_SUPPORTED, "cannot publish multiple tracks which one of them configured with bypassWebAudio or your browser doesn't support MediaStreamDestNode");
          }
        }
        getLowVideoTrack(e2, t2) {
          const i2 = !DC("DISABLE_DUAL_STREAM_USE_ENCODING") && wA().supportDualStreamEncoding, n2 = eM(eM({}, { width: 160, height: 120, framerate: 15, bitrate: 50 }), t2);
          let s2;
          s2 = i2 ? e2._mediaStreamTrack.clone() : FL(e2, n2);
          const r2 = xg(8, "track-low-"), o2 = new Nw(s2, eM(eM({}, i2 && { scaleResolutionDownBy: Ny(n2, e2) }), {}, { frameRate: n2.framerate, bitrateMax: n2.bitrate, bitrateMin: n2.bitrate }), void 0, void 0, r2);
          return o2.on(XA.TRANSCEIVER_UPDATED, (t3) => {
            e2._updateRtpTransceiver(t3, qA.LOW_STREAM);
          }), o2._hints.push(YA.LOW_STREAM), e2.addListener(KA.NEED_CLOSE, () => {
            o2.close();
          }), o2;
        }
        async globalLock() {
          return this.mutex.lock("From P2PChannel.globalLock");
        }
        async reportPCStats(e2, t2, i2) {
          let n2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null;
          if (this.connection && this.connection instanceof Uk) {
            var s2, r2, o2, a2;
            const c2 = this.store.keyMetrics.descriptionStart || 0, { iceConnectionState: d2, dtlsTransportState: l2, peerConnectionState: u2 } = this.connection, { local: h2, remote: p2 } = await this.connection.getSelectedCandidatePair();
            rI.pcStats(this.store.sessionId, { startTime: c2, eventElapse: e2 - c2 || 0, iceconnectionsate: d2, dtlsstate: l2, connectionstate: u2, intSucc: t2 ? 1 : 2, error: n2, selectedLocalCandidateProtocol: null !== (s2 = null == h2 ? void 0 : h2.protocol) && void 0 !== s2 ? s2 : "", selectedLocalCandidateType: null !== (r2 = h2.candidateType) && void 0 !== r2 ? r2 : "", selectedLocalCandidateAddress: "".concat(h2.address, ":").concat(h2.port), selectedRemoteCandidateProtocol: null !== (o2 = p2.protocol) && void 0 !== o2 ? o2 : "", selectedRemoteCandidateType: null !== (a2 = p2.candidateType) && void 0 !== a2 ? a2 : "", selectedRemoteCandidateAddress: "".concat(p2.address, ":").concat(p2.port), restartCnt: i2 });
          }
        }
        reportVideoFirstFrameDecoded(e2, t2, i2, n2) {
          var s2;
          const r2 = Array.from(uh(s2 = this.remoteUserMap).call(s2)).find((t3) => t3._videoSSRC === e2);
          if (r2) {
            n2 || this.store.subscribe(r2.uid, "video", void 0, void 0, void 0, void 0, Date.now());
            const s3 = this.store.keyMetrics, o2 = s3.subscribe.find((e3) => e3.userId === r2.uid && "video" === e3.type);
            rI.firstRemoteVideoDecode(this.store.sessionId, QC.FIRST_VIDEO_DECODE, ZC.FIRST_VIDEO_DECODE, { peer: r2._uintid, videowidth: t2, videoheight: i2, subscribeElapse: TP.measureFromSubscribeStart(this.store.clientId, e2), subscribeRequestid: e2, p2pid: this.store.p2pId, apEnd: s3.requestAPEnd || 0, apStart: s3.requestAPStart || 0, joinGwEnd: s3.joinGatewayEnd || 0, joinGwStart: s3.joinGatewayStart || 0, pcEnd: s3.peerConnectionEnd || 0, pcStart: s3.peerConnectionStart || 0, subscriberEnd: (null == o2 ? void 0 : o2.subscribeEnd) || 0, subscriberStart: (null == o2 ? void 0 : o2.subscribeStart) || 0, videoAddNotify: (null == o2 ? void 0 : o2.streamAdded) || 0, state: n2 ? 1 : 0 });
          }
        }
        async remoteMediaSsrcChanged(e2, t2, i2) {
          if (!this.connection)
            return false;
          const n2 = this.remoteUserMap.get(e2);
          if (!n2)
            return false;
          const s2 = n2.get(t2);
          if (!s2)
            return false;
          const r2 = await this.connection.getRemoteSSRC(s2);
          return void 0 !== r2 && r2 !== i2;
        }
        resetConnection(e2) {
          YC.debug("[".concat(this.store.clientId, "] [P2PChannel] reset connection to ").concat(e2)), this.state === mv.Connected ? (YC.debug("[".concat(this.store.clientId, "] [P2PChannel] fallback to websocket but P2PChannel state still connected, disconnect first")), this.disconnectForReconnect()) : (this.connection && (this.connection.close(), this.unbindConnectionEvents(this.connection), this.connection = void 0), this.shouldForwardP2PCreation && (this.connection = e2 === sv.datachannel ? new Qk({}, this.store) : this.isPlanB ? new wk({}, this.store) : new Uk({}, this.store), this.bindConnectionEvents(this.connection)));
        }
        unbindRtpTransceiver() {
          0 !== this.localTrackMap.size && Array.from(this.localTrackMap.entries()).forEach((e2) => {
            let [t2, { track: i2 }] = e2;
            t2 === Ev.LocalVideoLowTrack ? i2._updateRtpTransceiver(void 0, qA.LOW_STREAM) : i2._updateRtpTransceiver(void 0);
          });
        }
        reportPCDisconnectedOrFailed(e2) {
          this.connection && this.connection instanceof Uk && ("disconnected" !== this.connection.iceConnectionState && "checking" !== this.connection.iceConnectionState && "failed" !== this.connection.iceConnectionState || (this._isFirstConnected ? (this.reportPCStats(Date.now(), false, this._pcStatsUploadType), this._isFirstConnected = false) : this._pcStatsUploadType === _v.TCP_RESTART && e2 === pv.RELAY ? this.reportPCStats(Date.now(), false, this._pcStatsUploadType) : this.reportPCStats(Date.now(), false, _v.DISCONNECTED_OR_FAILED)));
        }
      }
      function sM(e2, t2, i2) {
        const n2 = e2[t2];
        if ("function" != typeof n2)
          throw new Error("Cannot use mutex on object property.");
        return i2.value = async function() {
          const e3 = this.mutex, i3 = await e3.lock("From P2PChannel.".concat(t2));
          try {
            for (var s2 = arguments.length, r2 = new Array(s2), o2 = 0; o2 < s2; o2++)
              r2[o2] = arguments[o2];
            return await n2.apply(this, r2);
          } finally {
            i3();
          }
        }, i2;
      }
      function rM(e2) {
        let t2 = mM();
        return function(e3, t3) {
          let i2 = e3.appId;
          void 0 !== i2 && (NM(t3, 10), IM(t3, i2));
          let n2 = e3.cid;
          void 0 !== n2 && (NM(t3, 16), NM(t3, n2));
          let s2 = e3.cname;
          void 0 !== s2 && (NM(t3, 26), IM(t3, s2));
          let r2 = e3.deviceId;
          void 0 !== r2 && (NM(t3, 34), IM(t3, r2));
          let o2 = e3.elapse;
          void 0 !== o2 && (NM(t3, 40), DM(t3, o2));
          let a2 = e3.fileSize;
          void 0 !== a2 && (NM(t3, 48), DM(t3, _M(a2)));
          let c2 = e3.height;
          void 0 !== c2 && (NM(t3, 56), DM(t3, _M(c2)));
          let d2 = e3.jpg;
          void 0 !== d2 && (NM(t3, 66), NM(t3, d2.length), function(e4, t4) {
            let i3 = SM(e4, t4.length);
            e4.bytes.set(t4, i3);
          }(t3, d2));
          let l2 = e3.networkType;
          void 0 !== l2 && (NM(t3, 72), DM(t3, _M(l2)));
          let u2 = e3.osType;
          void 0 !== u2 && (NM(t3, 80), DM(t3, _M(u2)));
          let h2 = e3.requestId;
          void 0 !== h2 && (NM(t3, 90), IM(t3, h2));
          let p2 = e3.sdkVersion;
          void 0 !== p2 && (NM(t3, 98), IM(t3, p2));
          let _2 = e3.sequence;
          void 0 !== _2 && (NM(t3, 104), DM(t3, _M(_2)));
          let E2 = e3.sid;
          void 0 !== E2 && (NM(t3, 114), IM(t3, E2));
          let m2 = e3.timestamp;
          void 0 !== m2 && (NM(t3, 120), DM(t3, m2));
          let f2 = e3.uid;
          void 0 !== f2 && (NM(t3, 128), NM(t3, f2));
          let T2 = e3.vid;
          void 0 !== T2 && (NM(t3, 136), NM(t3, T2));
          let g2 = e3.width;
          void 0 !== g2 && (NM(t3, 144), DM(t3, _M(g2)));
          let S2 = e3.service;
          void 0 !== S2 && (NM(t3, 152), NM(t3, S2));
          let R2 = e3.callbackData;
          void 0 !== R2 && (NM(t3, 162), IM(t3, R2));
          let C2 = e3.jpgEncryption;
          void 0 !== C2 && (NM(t3, 168), NM(t3, C2));
          let I2 = e3.requestType;
          void 0 !== I2 && (NM(t3, 176), NM(t3, I2));
          let v2 = e3.scorePorn;
          void 0 !== v2 && (NM(t3, 185), wM(t3, v2));
          let y2 = e3.scoreSexy;
          void 0 !== y2 && (NM(t3, 193), wM(t3, y2));
          let A2 = e3.scoreNeutral;
          void 0 !== A2 && (NM(t3, 201), wM(t3, A2));
          let b2 = e3.scene;
          void 0 !== b2 && (NM(t3, 208), NM(t3, b2));
          let w2 = e3.ossFilePrefix;
          void 0 !== w2 && (NM(t3, 218), IM(t3, w2));
          let O2 = e3.serviceVendor;
          if (void 0 !== O2)
            for (let e4 of O2) {
              NM(t3, 226);
              let i3 = mM();
              cM(e4, i3), NM(t3, i3.limit), vM(t3, i3), fM(i3);
            }
        }(e2, t2), function(e3) {
          let t3 = e3.bytes, i2 = e3.limit;
          return t3.length === i2 ? t3 : t3.subarray(0, i2);
        }(t2);
      }
      function oM(e2) {
        return function(e3) {
          let t3 = {};
          e:
            for (; !gM(e3); ) {
              let i2 = OM(e3);
              switch (i2 >>> 3) {
                case 0:
                  break e;
                case 1:
                  t3.code = OM(e3);
                  break;
                case 2:
                  t3.msg = CM(e3, OM(e3));
                  break;
                case 3: {
                  let i3 = dM(e3);
                  t3.data = aM(e3), e3.limit = i3;
                  break;
                }
                default:
                  lM(e3, 7 & i2);
              }
            }
          return t3;
        }({ bytes: t2 = e2, offset: 0, limit: t2.length });
        var t2;
      }
      function aM(e2) {
        let t2 = {};
        e:
          for (; !gM(e2); ) {
            let i2 = OM(e2);
            switch (i2 >>> 3) {
              case 0:
                break e;
              case 1:
                t2.requestId = CM(e2, OM(e2));
                break;
              case 2:
                t2.requestType = OM(e2) >>> 0;
                break;
              case 3:
                t2.scorePorn = bM(e2);
                break;
              case 4:
                t2.scoreSexy = bM(e2);
                break;
              case 5:
                t2.scoreNeutral = bM(e2);
                break;
              case 6:
                t2.requestScene = OM(e2) >>> 0;
                break;
              case 7:
                t2.scene = OM(e2) >>> 0;
                break;
              default:
                lM(e2, 7 & i2);
            }
          }
        return t2;
      }
      function cM(e2, t2) {
        let i2 = e2.service;
        void 0 !== i2 && (NM(t2, 8), NM(t2, i2));
        let n2 = e2.vendor;
        void 0 !== n2 && (NM(t2, 16), NM(t2, n2));
        let s2 = e2.token;
        void 0 !== s2 && (NM(t2, 26), IM(t2, s2));
        let r2 = e2.callbackUrl;
        void 0 !== r2 && (NM(t2, 34), IM(t2, r2));
      }
      function dM(e2) {
        let t2 = OM(e2), i2 = e2.limit;
        return e2.limit = e2.offset + t2, i2;
      }
      function lM(e2, t2) {
        switch (t2) {
          case 0:
            for (; 128 & yM(e2); )
              ;
            break;
          case 2:
            TM(e2, OM(e2));
            break;
          case 5:
            TM(e2, 4);
            break;
          case 1:
            TM(e2, 8);
            break;
          default:
            throw new Error("Unimplemented type: " + t2);
        }
      }
      UI([sM, xI("design:type", Function), xI("design:paramtypes", [Object, Boolean]), xI("design:returntype", tT)], nM.prototype, "startP2PConnection", null), UI([sM, xI("design:type", Function), xI("design:paramtypes", [Object, Object, Array, Object, String, String]), xI("design:returntype", tT)], nM.prototype, "connect", null), UI([sM, xI("design:type", Function), xI("design:paramtypes", [Array]), xI("design:returntype", void 0)], nM.prototype, "updateRemoteRTPCapabilities", null), UI([sM, xI("design:type", Function), xI("design:paramtypes", [Object, Object, Array, Object, String, String]), xI("design:returntype", tT)], nM.prototype, "preConnect", null), UI([sM, xI("design:type", Function), xI("design:paramtypes", [Array]), xI("design:returntype", tT)], nM.prototype, "publishDataChannel", null), UI([sM, xI("design:type", Function), xI("design:paramtypes", [Array]), xI("design:returntype", tT)], nM.prototype, "unpublish", null), UI([sM, xI("design:type", Function), xI("design:paramtypes", [Array]), xI("design:returntype", tT)], nM.prototype, "unpublishDataChannel", null), UI([sM, xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", tT)], nM.prototype, "unpublishLowStream", null), UI([sM, xI("design:type", Function), xI("design:paramtypes", [ik, Array]), xI("design:returntype", tT)], nM.prototype, "subscribeDataChannel", null), UI([sM, xI("design:type", Function), xI("design:paramtypes", [ik, String, Number, Number, Array]), xI("design:returntype", tT)], nM.prototype, "subscribe", null), UI([sM, xI("design:type", Function), xI("design:paramtypes", [Array]), xI("design:returntype", tT)], nM.prototype, "massSubscribe", null), UI([sM, xI("design:type", Function), xI("design:paramtypes", [ik, String, Boolean]), xI("design:returntype", tT)], nM.prototype, "unsubscribe", null), UI([sM, xI("design:type", Function), xI("design:paramtypes", [ik, Array]), xI("design:returntype", tT)], nM.prototype, "unsubscribeDataChannel", null), UI([sM, xI("design:type", Function), xI("design:paramtypes", [Array]), xI("design:returntype", tT)], nM.prototype, "massUnsubscribe", null), UI([sM, xI("design:type", Function), xI("design:paramtypes", [ik, String]), xI("design:returntype", tT)], nM.prototype, "muteRemote", null), UI([sM, xI("design:type", Function), xI("design:paramtypes", [ik, String]), xI("design:returntype", tT)], nM.prototype, "unmuteRemote", null), UI([sM, xI("design:type", Function), xI("design:paramtypes", [ik, String]), xI("design:returntype", tT)], nM.prototype, "hasRemoteMediaWithLock", null), UI([sM, xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", tT)], nM.prototype, "disconnectForReconnect", null), UI([sM, xI("design:type", Function), xI("design:paramtypes", [Object]), xI("design:returntype", tT)], nM.prototype, "updateBitrateLimit", null), UI([sM, xI("design:type", Function), xI("design:paramtypes", [ik, String, Number]), xI("design:returntype", tT)], nM.prototype, "remoteMediaSsrcChanged", null);
      let uM = new Float32Array(1);
      new Uint8Array(uM.buffer);
      let hM = new Float64Array(1), pM = new Uint8Array(hM.buffer);
      function _M(e2) {
        return { low: e2 |= 0, high: e2 >> 31, unsigned: e2 >= 0 };
      }
      let EM = [];
      function mM() {
        const e2 = EM.pop();
        return e2 ? (e2.offset = e2.limit = 0, e2) : { bytes: new Uint8Array(64), offset: 0, limit: 0 };
      }
      function fM(e2) {
        EM.push(e2);
      }
      function TM(e2, t2) {
        if (e2.offset + t2 > e2.limit)
          throw new Error("Skip past limit");
        e2.offset += t2;
      }
      function gM(e2) {
        return e2.offset >= e2.limit;
      }
      function SM(e2, t2) {
        let i2 = e2.bytes, n2 = e2.offset, s2 = e2.limit, r2 = n2 + t2;
        if (r2 > i2.length) {
          let t3 = new Uint8Array(2 * r2);
          t3.set(i2), e2.bytes = t3;
        }
        return e2.offset = r2, r2 > s2 && (e2.limit = r2), n2;
      }
      function RM(e2, t2) {
        let i2 = e2.offset;
        if (i2 + t2 > e2.limit)
          throw new Error("Read past limit");
        return e2.offset += t2, i2;
      }
      function CM(e2, t2) {
        let i2 = RM(e2, t2), n2 = String.fromCharCode, s2 = e2.bytes, r2 = "ï¿½", o2 = "";
        for (let e3 = 0; e3 < t2; e3++) {
          let a2, c2, d2, l2, u2 = s2[e3 + i2];
          0 == (128 & u2) ? o2 += n2(u2) : 192 == (224 & u2) ? e3 + 1 >= t2 ? o2 += r2 : (a2 = s2[e3 + i2 + 1], 128 != (192 & a2) ? o2 += r2 : (l2 = (31 & u2) << 6 | 63 & a2, l2 < 128 ? o2 += r2 : (o2 += n2(l2), e3++))) : 224 == (240 & u2) ? e3 + 2 >= t2 ? o2 += r2 : (a2 = s2[e3 + i2 + 1], c2 = s2[e3 + i2 + 2], 32896 != (49344 & (a2 | c2 << 8)) ? o2 += r2 : (l2 = (15 & u2) << 12 | (63 & a2) << 6 | 63 & c2, l2 < 2048 || l2 >= 55296 && l2 <= 57343 ? o2 += r2 : (o2 += n2(l2), e3 += 2))) : 240 == (248 & u2) ? e3 + 3 >= t2 ? o2 += r2 : (a2 = s2[e3 + i2 + 1], c2 = s2[e3 + i2 + 2], d2 = s2[e3 + i2 + 3], 8421504 != (12632256 & (a2 | c2 << 8 | d2 << 16)) ? o2 += r2 : (l2 = (7 & u2) << 18 | (63 & a2) << 12 | (63 & c2) << 6 | 63 & d2, l2 < 65536 || l2 > 1114111 ? o2 += r2 : (l2 -= 65536, o2 += n2(55296 + (l2 >> 10), 56320 + (1023 & l2)), e3 += 3))) : o2 += r2;
        }
        return o2;
      }
      function IM(e2, t2) {
        let i2 = t2.length, n2 = 0;
        for (let e3 = 0; e3 < i2; e3++) {
          let s3 = t2.charCodeAt(e3);
          s3 >= 55296 && s3 <= 56319 && e3 + 1 < i2 && (s3 = (s3 << 10) + t2.charCodeAt(++e3) - 56613888), n2 += s3 < 128 ? 1 : s3 < 2048 ? 2 : s3 < 65536 ? 3 : 4;
        }
        NM(e2, n2);
        let s2 = SM(e2, n2), r2 = e2.bytes;
        for (let e3 = 0; e3 < i2; e3++) {
          let n3 = t2.charCodeAt(e3);
          n3 >= 55296 && n3 <= 56319 && e3 + 1 < i2 && (n3 = (n3 << 10) + t2.charCodeAt(++e3) - 56613888), n3 < 128 ? r2[s2++] = n3 : (n3 < 2048 ? r2[s2++] = n3 >> 6 & 31 | 192 : (n3 < 65536 ? r2[s2++] = n3 >> 12 & 15 | 224 : (r2[s2++] = n3 >> 18 & 7 | 240, r2[s2++] = n3 >> 12 & 63 | 128), r2[s2++] = n3 >> 6 & 63 | 128), r2[s2++] = 63 & n3 | 128);
        }
      }
      function vM(e2, t2) {
        let i2 = SM(e2, t2.limit), n2 = e2.bytes, s2 = t2.bytes;
        for (let e3 = 0, r2 = t2.limit; e3 < r2; e3++)
          n2[e3 + i2] = s2[e3];
      }
      function yM(e2) {
        return e2.bytes[RM(e2, 1)];
      }
      function AM(e2, t2) {
        let i2 = SM(e2, 1);
        e2.bytes[i2] = t2;
      }
      function bM(e2) {
        let t2 = RM(e2, 8), i2 = e2.bytes;
        return pM[0] = i2[t2++], pM[1] = i2[t2++], pM[2] = i2[t2++], pM[3] = i2[t2++], pM[4] = i2[t2++], pM[5] = i2[t2++], pM[6] = i2[t2++], pM[7] = i2[t2++], hM[0];
      }
      function wM(e2, t2) {
        let i2 = SM(e2, 8), n2 = e2.bytes;
        hM[0] = t2, n2[i2++] = pM[0], n2[i2++] = pM[1], n2[i2++] = pM[2], n2[i2++] = pM[3], n2[i2++] = pM[4], n2[i2++] = pM[5], n2[i2++] = pM[6], n2[i2++] = pM[7];
      }
      function OM(e2) {
        let t2, i2 = 0, n2 = 0;
        do {
          t2 = yM(e2), i2 < 32 && (n2 |= (127 & t2) << i2), i2 += 7;
        } while (128 & t2);
        return n2;
      }
      function NM(e2, t2) {
        for (t2 >>>= 0; t2 >= 128; )
          AM(e2, 127 & t2 | 128), t2 >>>= 7;
        AM(e2, t2);
      }
      function DM(e2, t2) {
        let i2 = t2.low >>> 0, n2 = (t2.low >>> 28 | t2.high << 4) >>> 0, s2 = t2.high >>> 24, r2 = 0 === s2 ? 0 === n2 ? i2 < 16384 ? i2 < 128 ? 1 : 2 : i2 < 1 << 21 ? 3 : 4 : n2 < 16384 ? n2 < 128 ? 5 : 6 : n2 < 1 << 21 ? 7 : 8 : s2 < 128 ? 9 : 10, o2 = SM(e2, r2), a2 = e2.bytes;
        switch (r2) {
          case 10:
            a2[o2 + 9] = s2 >>> 7 & 1;
          case 9:
            a2[o2 + 8] = 9 !== r2 ? 128 | s2 : 127 & s2;
          case 8:
            a2[o2 + 7] = 8 !== r2 ? n2 >>> 21 | 128 : n2 >>> 21 & 127;
          case 7:
            a2[o2 + 6] = 7 !== r2 ? n2 >>> 14 | 128 : n2 >>> 14 & 127;
          case 6:
            a2[o2 + 5] = 6 !== r2 ? n2 >>> 7 | 128 : n2 >>> 7 & 127;
          case 5:
            a2[o2 + 4] = 5 !== r2 ? 128 | n2 : 127 & n2;
          case 4:
            a2[o2 + 3] = 4 !== r2 ? i2 >>> 21 | 128 : i2 >>> 21 & 127;
          case 3:
            a2[o2 + 2] = 3 !== r2 ? i2 >>> 14 | 128 : i2 >>> 14 & 127;
          case 2:
            a2[o2 + 1] = 2 !== r2 ? i2 >>> 7 | 128 : i2 >>> 7 & 127;
          case 1:
            a2[o2] = 1 !== r2 ? 128 | i2 : 127 & i2;
        }
      }
      function PM(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      const LM = /* @__PURE__ */ new Map([["moderation", 1], ["supervise", 2]]);
      class kM extends ig {
        get connectionState() {
          return this._connectionState;
        }
        set connectionState(e2) {
          if (this._connectionState === e2)
            return;
          const t2 = this._connectionState;
          this._connectionState = e2, this.emit(Rv.CONNECTION_STATE_CHANGE, t2, e2);
        }
        get inspectType() {
          return this._inspectType;
        }
        set inspectType(e2) {
          var t2;
          this._inspectMode = cS(t2 = e2.map((e3) => LM.get(e3) || 0)).call(t2, (e3, t3) => e3 + t3), this._inspectType = e2;
        }
        get quality() {
          return this._quality;
        }
        set quality(e2) {
          this._quality = e2 > 1 ? 1 : e2 < 0.1 ? 0.1 : e2, this.qualityTimer && (window.clearTimeout(this.qualityTimer), this.qualityTimer = null), this._quality >= 1 || (this.qualityTimer = window.setTimeout(() => {
            this.quality = this._quality / this.qualityRatio;
          }, 6e4));
        }
        constructor(e2) {
          super(), nh(this, "name", "AgoraRTCVideoContentInspect"), nh(this, "_connectionState", gv.CONNECTING), nh(this, "_innerConnectionState", void 0), nh(this, "sequence", 0), nh(this, "inspectStartTime", void 0), nh(this, "workerManagerConnection", void 0), nh(this, "workerConnection", void 0), nh(this, "workerMessageLengthLimit", void 0), nh(this, "inspectIntervalMinimum", void 0), nh(this, "qualityRatio", void 0), nh(this, "_connectInfo", void 0), nh(this, "_cancelTokenSource", EC.CancelToken.source()), nh(this, "_retryConfig", void 0), nh(this, "wmSequence", 0), nh(this, "inspectInterval", void 0), nh(this, "inspectTimer", null), nh(this, "ossFilePrefix", void 0), nh(this, "extraInfo", void 0), nh(this, "_inspectType", void 0), nh(this, "_inspectMode", void 0), nh(this, "_quality", 1), nh(this, "qualityTimer", null), nh(this, "_inspectId", void 0), nh(this, "_needWorkUrlOnly", false), nh(this, "inspectImage", () => {
            if (this.connectionState !== gv.CONNECTED)
              throw new VI(xT.OPERATION_ABORTED, "content inspect service connection status is ".concat(this.connectionState));
            this.inspectTimer && (window.clearInterval(this.inspectTimer), this.inspectTimer = null), this.inspectTimer = window.setInterval(() => {
              this.connectionState === gv.CONNECTED ? this.requestToInspectImage() : YC.debug("[".concat(this._inspectId, "] Inspect State is not connected , "), this.connectionState);
            }, this.inspectInterval < this.inspectIntervalMinimum ? this.inspectIntervalMinimum : this.inspectInterval), this.requestToInspectImage();
          }), this._inspectId = xg(5, "inspect-"), this.workerMessageLengthLimit = DC("VIDEO_INSPECT_WORKER_MESSAGE_LENGTH_LIMIT"), this.inspectIntervalMinimum = DC("VIDEO_INSPECT_INTERVAL_MINIMUM"), this.qualityRatio = DC("VIDEO_INSPECT_QUALITY_RATIO"), this.inspectInterval = e2.interval, this.ossFilePrefix = e2.ossFilePrefix, this.extraInfo = e2.extraInfo, this.inspectType = e2.inspectType, this.inspectStartTime = Number(Date.now()), this.workerManagerConnection = new $v("worker-manager-" + this._inspectId, Jg), this.on(Rv.STATE_CHANGE, (e3, t2) => {
            this._innerConnectionState = e3, YC.debug("[".concat(this._inspectId, "] Inspect operation :").concat(Sv[e3], " ").concat(t2 || ""));
          }), this.handleWorkerManagerEvents(), this.workerConnection = new $v("worker-" + this._inspectId, Jg), this.handleWorkerEvents();
        }
        async init(e2, t2) {
          this.emit(Rv.STATE_CHANGE, Sv.CONNECT_AP), this._connectInfo = e2;
          const i2 = this._cancelTokenSource.token;
          return this._retryConfig = t2, new tT((n2, s2) => {
            this.on(Rv.CONNECTION_STATE_CHANGE, (e3, t3) => {
              t3 === gv.CONNECTED && n2();
            }), this.requestAP(e2, i2, t2).then((e3) => {
              this.connectWorkerManager(e3);
            }).catch((e3) => {
              s2(e3);
            });
          });
        }
        async requestAP(e2, t2, i2) {
          const n2 = DC("WEBCS_DOMAIN").map((e3) => "https://".concat(e3, "/api/v1")), s2 = await function(e3, t3, i3, n3) {
            let { appId: s3, areaCode: r3, cname: o2, sid: a2, token: c2, uid: d2 } = t3;
            pA++;
            const l2 = "image_moderation_api", u2 = { service_name: l2, json_body: JSON.stringify({ appId: s3, areaCode: r3, cname: o2, command: "allocateEdge", requestId: pA, seq: pA, sid: a2, token: c2, ts: Date.now(), uid: d2 + "" }) };
            let h2, p2, _2 = e3[0];
            return Xg(async () => {
              h2 = Date.now();
              const e4 = await Ky(_2, { data: u2, cancelToken: i3, headers: { "X-Packet-Service-Type": "0", "X-Packet-URI": "61" }, params: { action: "wrtc_gateway" } });
              if (p2 = Date.now() - h2, 0 !== e4.code) {
                const t5 = new VI(xT.UNEXPECTED_RESPONSE, "image inspect ap error, code" + e4.code, { retry: true, responseTime: p2 });
                throw YC.error(t5.toString()), t5;
              }
              const t4 = JSON.parse(e4.json_body);
              if (200 !== t4.code) {
                const e5 = new VI(xT.UNEXPECTED_RESPONSE, "image inspect ap error, code: ".concat(t4.code, ", reason: ").concat(t4.reason), { code: t4.code, responseTime: p2 });
                throw YC.error(e5.toString()), e5;
              }
              if (!t4.servers || !Array.isArray(t4.servers) || 0 === t4.servers.length) {
                const e5 = new VI(xT.UNEXPECTED_RESPONSE, "image inspect ap empty server", { code: t4.code, responseTime: p2 });
                throw YC.error(e5.toString()), e5;
              }
              const n4 = DC("VIDEO_INSPECT_WORKER_MANAGER_HOST"), s4 = DC("VIDEO_INSPECT_WORKER_MANAGER_PORT");
              return { addressList: t4.servers.map((e5) => {
                let { address: t5, wss: i4 } = e5;
                if (t5 && i4)
                  return "wss://".concat(t5.replace(/\./g, "-"), ".").concat(n4, ":").concat(s4 || i4);
              }).filter((e5) => !!e5), workerToken: t4.workerToken, vid: t4.vid, responseTime: p2 };
            }, (t4, i4) => (rI.apworkerEvent(a2, { success: true, sc: 200, serviceName: l2, responseDetail: JSON.stringify(t4.addressList), firstSuccess: 0 === i4, responseTime: p2, serverIp: e3[i4 % e3.length] }), false), (t4, i4) => (rI.apworkerEvent(a2, { success: false, sc: t4.data && t4.data.code || 200, serviceName: l2, responseTime: p2, serverIp: e3[i4 % e3.length] }), !!(t4.code !== xT.OPERATION_ABORTED && t4.code !== xT.UNEXPECTED_RESPONSE || t4.data && t4.data.retry) && (_2 = e3[(i4 + 1) % e3.length], true)), n3);
          }(n2, e2, t2, i2);
          this.emit(Rv.STATE_CHANGE, Sv.AP_CONNECTED);
          const { addressList: r2 } = s2;
          return this.wmSequence++, r2;
        }
        async connectWorkerManager(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          this._needWorkUrlOnly = t2, this.emit(Rv.STATE_CHANGE, Sv.CONNECT_WORKER_MANAGER), await this.workerManagerConnection.init(e2, 1e4);
        }
        async connectWorker(e2) {
          await this.workerConnection.init([e2]);
        }
        handleWorkerManagerEvents() {
          this.workerManagerConnection.on(yI.CONNECTED, async () => {
            this.emit(Rv.STATE_CHANGE, Sv.WORKER_MANAGER_CONNECTED, this.workerManagerConnection.url), this.workerManagerConnection.sendMessage({ appId: this._connectInfo.appId, cname: this._connectInfo.cname, uid: this._connectInfo.uid + "", sdkVersion: "4.20.0", sid: this._connectInfo.sid, seq: this.wmSequence, ts: Number(Date.now()), requestId: Math.floor(1e12 * Math.random()), allocate: true, clientRequest: { command: "join" } }, true);
          }), this.workerManagerConnection.on(yI.CLOSED, () => {
            this._innerConnectionState < Sv.GET_WORKER_MANAGER_RESPONSE && YC.debug("[".concat(this._inspectId, "] Inspect worker manager is closed before connecting worker"));
          }), this.workerManagerConnection.on(yI.FAILED, () => {
            this._innerConnectionState < Sv.GET_WORKER_MANAGER_RESPONSE && YC.debug("[".concat(this._inspectId, "] Connecting inspect worker manager is failed before connecting worker"));
          }), this.workerManagerConnection.on(yI.RECONNECTING, () => {
            this._innerConnectionState < Sv.GET_WORKER_MANAGER_RESPONSE && YC.debug("[".concat(this._inspectId, "] Inspect worker manager is reconnecting before connecting worker"));
          }), this.workerManagerConnection.on(yI.ON_MESSAGE, async (e2) => {
            this.emit(Rv.STATE_CHANGE, Sv.GET_WORKER_MANAGER_RESPONSE);
            const t2 = this.workerManagerConnection.url;
            this.workerManagerConnection.close();
            const i2 = JSON.parse(e2.data);
            if (200 !== i2.code)
              throw YC.error("[".concat(this._inspectId, "] Unexpected code ").concat(i2.code, " from worker manager")), new VI(xT.UNEXPECTED_RESPONSE, "response code of worker is unexpected", i2);
            if (!(i2.serverResponse && i2.serverResponse.portWss && t2))
              throw YC.error("[".concat(this._inspectId, "] Unexpected content from worker manager : ").concat(JSON.stringify(i2))), new VI(xT.UNEXPECTED_RESPONSE, "response content of worker is unexpected", i2);
            {
              const e3 = DC("VIDEO_INSPECT_WORKER_PORT") || i2.serverResponse.portWss, n2 = t2.replace(/:\d+\/?$/, ":".concat(e3));
              this.emit(Rv.STATE_CHANGE, Sv.CONNECT_WORKER, n2), this._needWorkUrlOnly ? this.emit(Rv.REQUEST_NEW_WORKER_URL, n2) : await this.connectWorker(n2);
            }
          }), this.workerManagerConnection.on(yI.WILL_RECONNECT, (e2, t2, i2) => {
            i2(e2);
          }), this.workerManagerConnection.on(yI.REQUEST_NEW_URLS, (e2, t2) => {
            this.requestAP(this._connectInfo, this._cancelTokenSource.token, this._retryConfig).then(e2).catch(t2);
          });
        }
        handleWorkerEvents() {
          this.workerConnection.on(yI.CONNECTED, async () => {
            this.emit(Rv.STATE_CHANGE, Sv.WORKER_CONNECTED, this.workerConnection.url), this.connectionState = gv.CONNECTED;
          }), this.workerConnection.on(yI.ON_MESSAGE, async (e2) => {
            if (e2.data instanceof ArrayBuffer) {
              const i2 = oM(new Uint8Array(e2.data));
              if (DC("SHOW_VIDEO_INSPECT_WORKER_MESSAGE") && YC.debug("[".concat(this._inspectId, "] Response message for worker of inspect content "), JSON.stringify(i2)), 200 === i2.code) {
                if (Array.isArray(this.inspectType) && 1 === this.inspectType.length && "supervise" === this.inspectType[0])
                  return void this.emit(Rv.INSPECT_RESULT, void 0, void 0);
                if (i2.data && i2.data.scorePorn && i2.data.scoreSexy && i2.data.scoreNeutral) {
                  var t2;
                  const e3 = { porn: i2.data.scorePorn, sexy: i2.data.scoreSexy, neutral: i2.data.scoreNeutral }, n2 = cS(t2 = Object.keys(e3)).call(t2, (t3, i3) => e3[t3] > e3[i3] ? t3 : i3, "porn"), s2 = Object.keys(e3).find((e4) => e4 === n2);
                  this.emit(Rv.INSPECT_RESULT, s2);
                } else
                  this.emit(Rv.INSPECT_RESULT, void 0, new VI(xT.UNEXPECTED_RESPONSE, i2.code + "", "There is an unexpected data on message"));
              } else
                this.emit(Rv.INSPECT_RESULT, void 0, new VI(xT.UNEXPECTED_RESPONSE, i2.code + "", i2.msg));
            } else
              YC.error("[".concat(this._inspectId, "] Unexpected message type from worker")), this.emit(Rv.INSPECT_RESULT, void 0, new VI(xT.UNEXPECTED_RESPONSE, "invalid worker message type"));
          }), this.workerConnection.on(yI.CLOSED, () => {
            this.connectionState = gv.CLOSED;
          }), this.workerConnection.on(yI.FAILED, () => {
            this.connectionState = gv.CLOSED;
          }), this.workerConnection.on(yI.RECONNECTING, () => {
            this.connectionState = this.connectionState === gv.CONNECTED ? gv.RECONNECTING : gv.CONNECTING;
          }), this.workerConnection.on(yI.WILL_RECONNECT, (e2, t2, i2) => {
            "recover" === e2 && i2(e2), i2("tryNext");
          }), this.workerConnection.on(yI.REQUEST_NEW_URLS, (e2, t2) => {
            this.workerManagerConnection.close(), this.once(Rv.REQUEST_NEW_WORKER_URL, (t3) => {
              e2([t3]);
            }), this.requestAP(this._connectInfo, this._cancelTokenSource.token, this._retryConfig).then((e3) => {
              this.connectWorkerManager(e3, true);
            }).catch((e3) => {
              t2(e3);
            });
          });
        }
        static intToLong(e2) {
          return { low: e2 |= 0, high: e2 >> 31, unsigned: e2 >= 0 };
        }
        async requestToInspectImage() {
          this.sequence++;
          const e2 = gg(this, Rv.CLIENT_LOCAL_VIDEO_TRACK), t2 = { appId: this._connectInfo.appId, cname: this._connectInfo.cname, cid: this._connectInfo.cid, sid: this._connectInfo.sid, uid: this._connectInfo.uid, vid: this._connectInfo.vid };
          if (e2) {
            if (!e2.isPlaying)
              return void this.emit(Rv.INSPECT_RESULT, void 0, new VI(xT.INVALID_OPERATION, "Only the track being played can be inspected"));
            const i2 = await this.generateRequestData(e2, t2);
            this.workerConnection.sendMessage(i2, true, true);
          } else
            this.emit(Rv.INSPECT_RESULT, void 0, new VI(xT.INVALID_OPERATION, "Only the track being published can be inspected"));
        }
        async generateRequestData(e2, t2) {
          let { appId: i2, cname: n2, cid: s2, vid: r2, sid: o2, uid: a2 } = t2;
          const c2 = Date.now(), d2 = await e2.getCurrentFrameImage("image/jpeg", this.quality), l2 = await bw(d2, i2, n2), u2 = this.sequence + "-" + s2 + "-" + a2 + "-" + c2 + "-" + xg(12, ""), h2 = { appId: i2, cid: s2, cname: n2, deviceId: "", elapse: kM.intToLong(Number(c2 - this.inspectStartTime)), fileSize: l2.byteLength, jpgEncryption: 2, height: d2.height, width: d2.width, jpg: l2, networkType: 6, osType: 7, requestId: u2, sdkVersion: "4.20.0", sequence: this.sequence, sid: o2, timestamp: kM.intToLong(c2), uid: a2, vid: r2, service: this._inspectMode, callbackData: this.extraInfo, ossFilePrefix: this.ossFilePrefix };
          void 0 === this.extraInfo && delete h2.callbackData, void 0 === this.ossFilePrefix && delete h2.ossFilePrefix;
          const p2 = rM(h2);
          if (p2.byteLength < this.workerMessageLengthLimit) {
            if (DC("SHOW_VIDEO_INSPECT_WORKER_MESSAGE")) {
              const e3 = function(e4) {
                for (var t3 = 1; t3 < arguments.length; t3++) {
                  var i3 = null != arguments[t3] ? arguments[t3] : {};
                  t3 % 2 ? PM(Object(i3), true).forEach(function(t4) {
                    nh(e4, t4, i3[t4]);
                  }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e4, Object.getOwnPropertyDescriptors(i3)) : PM(Object(i3)).forEach(function(t4) {
                    Object.defineProperty(e4, t4, Object.getOwnPropertyDescriptor(i3, t4));
                  });
                }
                return e4;
              }({}, h2);
              delete e3.jpg, YC.debug("[".concat(this._inspectId, "] Request message for worker of inspect content "), JSON.stringify(e3));
            }
            return p2;
          }
          {
            const t3 = this.quality * this.qualityRatio;
            return this.quality = t3, await this.generateRequestData(e2, { appId: i2, cname: n2, cid: s2, vid: r2, sid: o2, uid: a2 });
          }
        }
        close() {
          this._cancelTokenSource.cancel(), this._cancelTokenSource = EC.CancelToken.source(), this.workerManagerConnection && this.workerManagerConnection.close(), this.workerConnection && this.workerConnection.close(), this.inspectTimer && window.clearInterval(this.inspectTimer), this.inspectTimer = null, this.connectionState = gv.CLOSED, this.emit(Rv.STATE_CHANGE, Sv.CLOSED);
        }
      }
      function MM(e2) {
        let t2 = function() {
          const e3 = FM.pop();
          return e3 ? (e3.offset = e3.limit = 0, e3) : { bytes: new Uint8Array(64), offset: 0, limit: 0 };
        }();
        return function(e3, t3) {
          let i2 = e3.appId;
          void 0 !== i2 && (XM(t3, 10), YM(t3, i2));
          let n2 = e3.cid;
          void 0 !== n2 && (XM(t3, 16), XM(t3, n2));
          let s2 = e3.cname;
          void 0 !== s2 && (XM(t3, 26), YM(t3, s2));
          let r2 = e3.deviceId;
          void 0 !== r2 && (XM(t3, 34), YM(t3, r2));
          let o2 = e3.elapse;
          void 0 !== o2 && (XM(t3, 40), ZM(t3, o2));
          let a2 = e3.fileSize;
          void 0 !== a2 && (XM(t3, 48), ZM(t3, VM(a2)));
          let c2 = e3.height;
          void 0 !== c2 && (XM(t3, 56), ZM(t3, VM(c2)));
          let d2 = e3.jpg;
          void 0 !== d2 && (XM(t3, 66), XM(t3, d2.length), HM(t3, d2));
          let l2 = e3.networkType;
          void 0 !== l2 && (XM(t3, 72), ZM(t3, VM(l2)));
          let u2 = e3.osType;
          void 0 !== u2 && (XM(t3, 80), ZM(t3, VM(u2)));
          let h2 = e3.requestId;
          void 0 !== h2 && (XM(t3, 90), YM(t3, h2));
          let p2 = e3.sdkVersion;
          void 0 !== p2 && (XM(t3, 98), YM(t3, p2));
          let _2 = e3.sequence;
          void 0 !== _2 && (XM(t3, 104), ZM(t3, VM(_2)));
          let E2 = e3.sid;
          void 0 !== E2 && (XM(t3, 114), YM(t3, E2));
          let m2 = e3.timestamp;
          void 0 !== m2 && (XM(t3, 120), ZM(t3, m2));
          let f2 = e3.uid;
          void 0 !== f2 && (XM(t3, 128), XM(t3, f2));
          let T2 = e3.vid;
          void 0 !== T2 && (XM(t3, 136), XM(t3, T2));
          let g2 = e3.width;
          void 0 !== g2 && (XM(t3, 144), ZM(t3, VM(g2)));
          let S2 = e3.service;
          void 0 !== S2 && (XM(t3, 152), XM(t3, S2));
          let R2 = e3.callbackData;
          void 0 !== R2 && (XM(t3, 162), XM(t3, R2.length), HM(t3, R2));
          let C2 = e3.ticket;
          void 0 !== C2 && (XM(t3, 170), YM(t3, C2));
          let I2 = e3.vendorConfigs;
          void 0 !== I2 && (XM(t3, 178), YM(t3, I2));
        }(e2, t2), function(e3) {
          let t3 = e3.bytes, i2 = e3.limit;
          return t3.length === i2 ? t3 : t3.subarray(0, i2);
        }(t2);
      }
      function UM(e2) {
        return function(e3) {
          let t3 = {};
          e:
            for (; !jM(e3); ) {
              let i2 = zM(e3);
              switch (i2 >>> 3) {
                case 0:
                  break e;
                case 1:
                  t3.code = zM(e3);
                  break;
                case 2:
                  t3.msg = KM(e3, zM(e3));
                  break;
                case 3:
                  t3.requestId = KM(e3, zM(e3));
                  break;
                case 4:
                  t3.timestamp = QM(e3, false);
                  break;
                default:
                  xM(e3, 7 & i2);
              }
            }
          return t3;
        }({ bytes: t2 = e2, offset: 0, limit: t2.length });
        var t2;
      }
      function xM(e2, t2) {
        switch (t2) {
          case 0:
            for (; 128 & qM(e2); )
              ;
            break;
          case 2:
            BM(e2, zM(e2));
            break;
          case 5:
            BM(e2, 4);
            break;
          case 1:
            BM(e2, 8);
            break;
          default:
            throw new Error("Unimplemented type: " + t2);
        }
      }
      function VM(e2) {
        return { low: e2 |= 0, high: e2 >> 31, unsigned: e2 >= 0 };
      }
      let FM = [];
      function BM(e2, t2) {
        if (e2.offset + t2 > e2.limit)
          throw new Error("Skip past limit");
        e2.offset += t2;
      }
      function jM(e2) {
        return e2.offset >= e2.limit;
      }
      function GM(e2, t2) {
        let i2 = e2.bytes, n2 = e2.offset, s2 = e2.limit, r2 = n2 + t2;
        if (r2 > i2.length) {
          let t3 = new Uint8Array(2 * r2);
          t3.set(i2), e2.bytes = t3;
        }
        return e2.offset = r2, r2 > s2 && (e2.limit = r2), n2;
      }
      function WM(e2, t2) {
        let i2 = e2.offset;
        if (i2 + t2 > e2.limit)
          throw new Error("Read past limit");
        return e2.offset += t2, i2;
      }
      function HM(e2, t2) {
        let i2 = GM(e2, t2.length);
        e2.bytes.set(t2, i2);
      }
      function KM(e2, t2) {
        let i2 = WM(e2, t2), n2 = String.fromCharCode, s2 = e2.bytes, r2 = "ï¿½", o2 = "";
        for (let e3 = 0; e3 < t2; e3++) {
          let a2, c2, d2, l2, u2 = s2[e3 + i2];
          0 == (128 & u2) ? o2 += n2(u2) : 192 == (224 & u2) ? e3 + 1 >= t2 ? o2 += r2 : (a2 = s2[e3 + i2 + 1], 128 != (192 & a2) ? o2 += r2 : (l2 = (31 & u2) << 6 | 63 & a2, l2 < 128 ? o2 += r2 : (o2 += n2(l2), e3++))) : 224 == (240 & u2) ? e3 + 2 >= t2 ? o2 += r2 : (a2 = s2[e3 + i2 + 1], c2 = s2[e3 + i2 + 2], 32896 != (49344 & (a2 | c2 << 8)) ? o2 += r2 : (l2 = (15 & u2) << 12 | (63 & a2) << 6 | 63 & c2, l2 < 2048 || l2 >= 55296 && l2 <= 57343 ? o2 += r2 : (o2 += n2(l2), e3 += 2))) : 240 == (248 & u2) ? e3 + 3 >= t2 ? o2 += r2 : (a2 = s2[e3 + i2 + 1], c2 = s2[e3 + i2 + 2], d2 = s2[e3 + i2 + 3], 8421504 != (12632256 & (a2 | c2 << 8 | d2 << 16)) ? o2 += r2 : (l2 = (7 & u2) << 18 | (63 & a2) << 12 | (63 & c2) << 6 | 63 & d2, l2 < 65536 || l2 > 1114111 ? o2 += r2 : (l2 -= 65536, o2 += n2(55296 + (l2 >> 10), 56320 + (1023 & l2)), e3 += 3))) : o2 += r2;
        }
        return o2;
      }
      function YM(e2, t2) {
        let i2 = t2.length, n2 = 0;
        for (let e3 = 0; e3 < i2; e3++) {
          let s3 = t2.charCodeAt(e3);
          s3 >= 55296 && s3 <= 56319 && e3 + 1 < i2 && (s3 = (s3 << 10) + t2.charCodeAt(++e3) - 56613888), n2 += s3 < 128 ? 1 : s3 < 2048 ? 2 : s3 < 65536 ? 3 : 4;
        }
        XM(e2, n2);
        let s2 = GM(e2, n2), r2 = e2.bytes;
        for (let e3 = 0; e3 < i2; e3++) {
          let n3 = t2.charCodeAt(e3);
          n3 >= 55296 && n3 <= 56319 && e3 + 1 < i2 && (n3 = (n3 << 10) + t2.charCodeAt(++e3) - 56613888), n3 < 128 ? r2[s2++] = n3 : (n3 < 2048 ? r2[s2++] = n3 >> 6 & 31 | 192 : (n3 < 65536 ? r2[s2++] = n3 >> 12 & 15 | 224 : (r2[s2++] = n3 >> 18 & 7 | 240, r2[s2++] = n3 >> 12 & 63 | 128), r2[s2++] = n3 >> 6 & 63 | 128), r2[s2++] = 63 & n3 | 128);
        }
      }
      function qM(e2) {
        return e2.bytes[WM(e2, 1)];
      }
      function JM(e2, t2) {
        let i2 = GM(e2, 1);
        e2.bytes[i2] = t2;
      }
      function zM(e2) {
        let t2, i2 = 0, n2 = 0;
        do {
          t2 = qM(e2), i2 < 32 && (n2 |= (127 & t2) << i2), i2 += 7;
        } while (128 & t2);
        return n2;
      }
      function XM(e2, t2) {
        for (t2 >>>= 0; t2 >= 128; )
          JM(e2, 127 & t2 | 128), t2 >>>= 7;
        JM(e2, t2);
      }
      function QM(e2, t2) {
        let i2, n2 = 0, s2 = 0, r2 = 0;
        return i2 = qM(e2), n2 = 127 & i2, 128 & i2 && (i2 = qM(e2), n2 |= (127 & i2) << 7, 128 & i2 && (i2 = qM(e2), n2 |= (127 & i2) << 14, 128 & i2 && (i2 = qM(e2), n2 |= (127 & i2) << 21, 128 & i2 && (i2 = qM(e2), s2 = 127 & i2, 128 & i2 && (i2 = qM(e2), s2 |= (127 & i2) << 7, 128 & i2 && (i2 = qM(e2), s2 |= (127 & i2) << 14, 128 & i2 && (i2 = qM(e2), s2 |= (127 & i2) << 21, 128 & i2 && (i2 = qM(e2), r2 = 127 & i2, 128 & i2 && (i2 = qM(e2), r2 |= (127 & i2) << 7))))))))), { low: n2 | s2 << 28, high: s2 >>> 4 | r2 << 24, unsigned: t2 };
      }
      function ZM(e2, t2) {
        let i2 = t2.low >>> 0, n2 = (t2.low >>> 28 | t2.high << 4) >>> 0, s2 = t2.high >>> 24, r2 = 0 === s2 ? 0 === n2 ? i2 < 16384 ? i2 < 128 ? 1 : 2 : i2 < 1 << 21 ? 3 : 4 : n2 < 16384 ? n2 < 128 ? 5 : 6 : n2 < 1 << 21 ? 7 : 8 : s2 < 128 ? 9 : 10, o2 = GM(e2, r2), a2 = e2.bytes;
        switch (r2) {
          case 10:
            a2[o2 + 9] = s2 >>> 7 & 1;
          case 9:
            a2[o2 + 8] = 9 !== r2 ? 128 | s2 : 127 & s2;
          case 8:
            a2[o2 + 7] = 8 !== r2 ? n2 >>> 21 | 128 : n2 >>> 21 & 127;
          case 7:
            a2[o2 + 6] = 7 !== r2 ? n2 >>> 14 | 128 : n2 >>> 14 & 127;
          case 6:
            a2[o2 + 5] = 6 !== r2 ? n2 >>> 7 | 128 : n2 >>> 7 & 127;
          case 5:
            a2[o2 + 4] = 5 !== r2 ? 128 | n2 : 127 & n2;
          case 4:
            a2[o2 + 3] = 4 !== r2 ? i2 >>> 21 | 128 : i2 >>> 21 & 127;
          case 3:
            a2[o2 + 2] = 3 !== r2 ? i2 >>> 14 | 128 : i2 >>> 14 & 127;
          case 2:
            a2[o2 + 1] = 2 !== r2 ? i2 >>> 7 | 128 : i2 >>> 7 & 127;
          case 1:
            a2[o2] = 1 !== r2 ? 128 | i2 : 127 & i2;
        }
      }
      const $M = {}, eU = {}, tU = 4294967296, iU = tU * tU, nU = iU / 2, sU = dU(0, true), rU = dU(0), oU = lU(0, -2147483648, false), aU = lU(-1, 2147483647, false), cU = lU(-1, -1, true);
      function dU(e2, t2) {
        let i2, n2, s2;
        return t2 ? (s2 = 0 <= (e2 >>>= 0) && e2 < 256) && (n2 = eU[e2], n2) ? n2 : (i2 = lU(e2, 0, true), s2 && (eU[e2] = i2), i2) : (s2 = -128 <= (e2 |= 0) && e2 < 128) && (n2 = $M[e2], n2) ? n2 : (i2 = lU(e2, e2 < 0 ? -1 : 0, false), s2 && ($M[e2] = i2), i2);
      }
      function lU(e2, t2, i2) {
        return { low: 0 | e2, high: 0 | t2, unsigned: !!i2 };
      }
      function uU(e2, t2) {
        if (isNaN(e2))
          return t2 ? sU : rU;
        if (t2) {
          if (e2 < 0)
            return sU;
          if (e2 >= iU)
            return cU;
        } else {
          if (e2 <= -nU)
            return oU;
          if (e2 + 1 >= nU)
            return aU;
        }
        return e2 < 0 ? t2 ? sU : rU : lU(e2 % tU | 0, e2 / tU | 0, t2);
      }
      function hU(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      class pU extends ig {
        get connectionState() {
          return this._connectionState;
        }
        set connectionState(e2) {
          if (this._connectionState === e2)
            return;
          const t2 = this._connectionState;
          this._connectionState = e2, this.emit(bv.CONNECTION_STATE_CHANGE, e2, t2);
        }
        get quality() {
          return this._quality;
        }
        set quality(e2) {
          this._quality = e2 > 1 ? 1 : e2 < 0.1 ? 0.1 : e2, this._qualityTimer && (window.clearTimeout(this._qualityTimer), this._qualityTimer = null), this._quality >= 1 || (this._qualityTimer = window.setTimeout(() => {
            this.quality = this._quality / this._qualityRatio;
          }, 6e4));
        }
        constructor(e2) {
          var t2;
          super(), nh(this, "name", "AgoraRTCImageModeration"), nh(this, "_connectionState", Av.CONNECTING), nh(this, "_sequence", 0), nh(this, "_moderationStartTime", void 0), nh(this, "_workerConnection", void 0), nh(this, "_workerMessageLengthLimit", void 0), nh(this, "_qualityRatio", void 0), nh(this, "_connectInfo", void 0), nh(this, "_cancelTokenSource", EC.CancelToken.source()), nh(this, "_retryConfig", void 0), nh(this, "_moderationInterval", void 0), nh(this, "_moderationTimer", null), nh(this, "_moderationMode", 1), nh(this, "_quality", 1), nh(this, "_qualityTimer", null), nh(this, "_ticket", void 0), nh(this, "_moderationIntervalMinimum", void 0), nh(this, "_uploadFailedNum", 0), nh(this, "_uploadNum", 0), nh(this, "_uploadTimer", null), nh(this, "_extraInfo", void 0), nh(this, "_vendor", ""), nh(this, "_encoder", new TextEncoder()), nh(this, "_moderationId", void 0), nh(this, "inspectImage", () => {
            if (this.connectionState !== Av.CONNECTED)
              throw new VI(xT.OPERATION_ABORTED, "image moderation service connection status is ".concat(this.connectionState));
            this._moderationTimer && (window.clearInterval(this._moderationTimer), this._moderationTimer = null), this._moderationTimer = window.setInterval(() => {
              this.connectionState === Av.CONNECTED ? this.requestToInspectImage() : YC.debug("[".concat(this._moderationId, "] Moderation State is not connected , "), this.connectionState);
            }, this._moderationInterval < this._moderationIntervalMinimum ? this._moderationIntervalMinimum : this._moderationInterval), this.requestToInspectImage();
          }), this._moderationId = xg(5, "image-moderation-"), this._workerMessageLengthLimit = DC("IMAGE_MODERATION_WORKER_MESSAGE_LENGTH_LIMIT"), this._moderationIntervalMinimum = DC("IMAGE_MODERATION_INTERVAL_MINIMUM"), this._moderationInterval = null !== (t2 = e2.interval) && void 0 !== t2 ? t2 : 1e3, e2.extraInfo && (this._extraInfo = this._encoder.encode(e2.extraInfo)), e2.vendor && (this._vendor = e2.vendor), this._qualityRatio = DC("IMAGE_MODERATION_QUALITY_RATIO"), this._moderationStartTime = Number(Date.now()), this._workerConnection = new $v("worker-" + this._moderationId, Jg), this.on(bv.STATE_CHANGE, (e3, t3) => {
            YC.debug("[".concat(this._moderationId, "] Moderation operation :").concat(wv[e3], " ").concat(t3 || ""));
          }), this.handleWorkerEvents();
        }
        async init(e2, t2) {
          this.emit(bv.STATE_CHANGE, wv.CONNECT_AP), this._connectInfo = e2;
          const i2 = this._cancelTokenSource.token;
          return this._retryConfig = t2, new tT((n2, s2) => {
            this.on(bv.CONNECTION_STATE_CHANGE, (e3, t3) => {
              e3 === Av.CONNECTED && n2();
            }), this.requestAP(e2, i2, t2).then((e3) => {
              this.connectWorker(e3);
            }).catch((e3) => {
              s2(e3);
            });
          });
        }
        updateConfig(e2) {
          var t2;
          this._moderationInterval = null !== (t2 = e2.interval) && void 0 !== t2 ? t2 : 1e3, e2.extraInfo && (this._extraInfo = this._encoder.encode(e2.extraInfo)), e2.vendor && (this._vendor = e2.vendor), YC.debug("[".concat(this._moderationId, "] updateConfig: ").concat(JSON.stringify(e2))), this.connectionState === Av.CONNECTED && this.inspectImage();
        }
        async requestAP(e2, t2, i2) {
          const n2 = DC("WEBCS_DOMAIN").map((e3) => "https://".concat(e3, "/api/v1")), s2 = await function(e3, t3, i3, n3) {
            let { appId: s3, areaCode: r3, cname: o3, sid: a2, token: c2, uid: d2 } = t3;
            pA++;
            const l2 = "moderation_plugin", u2 = { service_name: l2, json_body: JSON.stringify({ appId: s3, areaCode: r3, cname: o3, command: "allocateEdge", requestId: pA, seq: pA, sid: a2, appToken: c2, ts: Date.now(), uid: d2 + "" }) };
            let h2, p2, _2 = e3[0];
            return Xg(async () => {
              h2 = Date.now();
              const e4 = await Ky(_2, { data: u2, cancelToken: i3, headers: { "X-Packet-Service-Type": "0", "X-Packet-URI": "61" }, params: { action: "wrtc_gateway" } });
              if (p2 = Date.now() - h2, 0 !== e4.code) {
                const t5 = new VI(xT.UNEXPECTED_RESPONSE, "moderation plugin ap error, code" + e4.code, { retry: true, responseTime: p2 });
                throw YC.error(t5.toString()), t5;
              }
              const t4 = JSON.parse(e4.json_body);
              if (200 !== t4.code) {
                const e5 = new VI(xT.UNEXPECTED_RESPONSE, "moderation plugin ap error, code: ".concat(t4.code, ", reason: ").concat(t4.reason), { code: t4.code, responseTime: p2 });
                throw YC.error(e5.toString()), e5;
              }
              if (!t4.servers || !Array.isArray(t4.servers) || 0 === t4.servers.length) {
                const e5 = new VI(xT.UNEXPECTED_RESPONSE, "moderation plugin ap empty server", { code: t4.code, responseTime: p2 });
                throw YC.error(e5.toString()), e5;
              }
              if (!t4.servers.some((e5) => !!e5.wss)) {
                const e5 = new VI(xT.UNEXPECTED_RESPONSE, "moderation plugin ap empty port", { code: t4.code, responseTime: p2 });
                throw YC.error(e5.toString()), e5;
              }
              const n4 = DC("IMAGE_MODERATION_WORKER_HOST");
              return { addressList: t4.servers.map((e5) => {
                let { address: t5, wss: i4 } = e5;
                if (t5 && i4)
                  return "wss://".concat(t5.replace(/\./g, "-"), ".").concat(n4, ":").concat(i4, "/moderation");
              }).filter((e5) => !!e5), workerToken: t4.workerToken, vid: t4.vid, ticket: t4.appTicket, responseTime: p2 };
            }, (t4, i4) => (rI.apworkerEvent(a2, { success: true, sc: 200, serviceName: l2, responseDetail: JSON.stringify(t4.addressList), firstSuccess: 0 === i4, responseTime: p2, serverIp: e3[i4 % e3.length] }), false), (t4, i4) => (rI.apworkerEvent(a2, { success: false, sc: t4.data && t4.data.code || 200, serviceName: l2, responseTime: p2, serverIp: e3[i4 % e3.length] }), !!(t4.code !== xT.OPERATION_ABORTED && t4.code !== xT.UNEXPECTED_RESPONSE || t4.data && t4.data.retry) && (_2 = e3[(i4 + 1) % e3.length], true)), n3);
          }(n2, e2, t2, i2);
          this.emit(bv.STATE_CHANGE, wv.AP_CONNECTED);
          const { addressList: r2, ticket: o2 } = s2;
          return this._ticket = o2, r2;
        }
        async connectWorker(e2) {
          this.emit(bv.STATE_CHANGE, wv.CONNECT_WORKER), await this._workerConnection.init(e2, 1e4);
        }
        handleWorkerEvents() {
          this._workerConnection.on(yI.CONNECTED, async () => {
            this.emit(bv.STATE_CHANGE, wv.WORKER_CONNECTED, this._workerConnection.url), this.connectionState = Av.CONNECTED;
          }), this._workerConnection.on(yI.CLOSED, () => {
            this.connectionState = Av.CLOSED;
          }), this._workerConnection.on(yI.FAILED, () => {
            this.connectionState = Av.CLOSED;
          }), this._workerConnection.on(yI.RECONNECTING, () => {
            this.connectionState = this.connectionState === Av.CONNECTED ? Av.RECONNECTING : Av.CONNECTING;
          }), this._workerConnection.on(yI.ON_MESSAGE, async (e2) => {
            if (e2.data instanceof ArrayBuffer) {
              const t2 = UM(new Uint8Array(e2.data));
              DC("SHOW_IMAGE_MODERATION_WORKER_MESSAGE") && YC.debug("[".concat(this._moderationId, "] Response message for worker of image moderation "), JSON.stringify(t2)), this._uploadNum++, void 0 === t2.code || 0 === t2.code || (this._uploadFailedNum++, YC.error("[".concat(this._moderationId, "] Error response from worke, code is ").concat(t2.code, ", msg is ").concat(t2.msg)), this._uploadTimer || (this._uploadTimer = window.setTimeout(() => {
                rI.reportApiInvoke(this._connectInfo.sid || null, { name: rg.IMAGE_MODERATION_UPLOAD, options: [this._uploadFailedNum, this._uploadNum, t2.code], tag: og.TRACER }).onError(new VI(xT.IMAGE_MODERATION_UPLOAD_FAILED, t2.msg)), this._uploadTimer = null;
              }, DC("IMAGE_MODERATION_UPLOAD_REPORT_INTERVAL"))));
            } else
              YC.error("[".concat(this._moderationId, "] Unexpected message type from worker"));
          }), this._workerConnection.on(yI.WILL_RECONNECT, (e2, t2, i2) => {
            "recover" === e2 && i2(e2), i2("tryNext");
          }), this._workerConnection.on(yI.REQUEST_NEW_URLS, (e2, t2) => {
            this.requestAP(this._connectInfo, this._cancelTokenSource.token, this._retryConfig).then(e2).catch(t2);
          });
        }
        static intToLong(e2) {
          return { low: e2 |= 0, high: e2 >> 31, unsigned: e2 >= 0 };
        }
        async requestToInspectImage() {
          const e2 = gg(this, bv.CLIENT_LOCAL_VIDEO_TRACK), t2 = { appId: this._connectInfo.appId, cname: this._connectInfo.cname, cid: this._connectInfo.cid, sid: this._connectInfo.sid, uid: this._connectInfo.uid, vid: this._connectInfo.vid };
          if (e2) {
            if (!e2.isPlaying)
              return void (DC("SHOW_IMAGE_MODERATION_WORKER_MESSAGE") && YC.debug("Only the track being played can be inspected"));
            this._sequence++;
            const i2 = await this.generateRequestData(e2, t2);
            this._workerConnection.sendMessage(i2, true, true);
          } else
            DC("SHOW_IMAGE_MODERATION_WORKER_MESSAGE") && YC.debug("Only the track being published can be inspected");
        }
        async generateRequestData(e2, t2) {
          let { appId: i2, cname: n2, cid: s2, vid: r2, sid: o2, uid: a2 } = t2;
          const c2 = Date.now(), d2 = await e2.getCurrentFrameImage("image/jpeg", this.quality), l2 = await bw(d2, i2, n2), u2 = this._sequence + "-" + s2 + "-" + a2 + "-" + c2 + "-" + xg(12, ""), h2 = { appId: i2, cid: s2, cname: n2, deviceId: "", elapse: pU.intToLong(Number(c2 - this._moderationStartTime)), fileSize: d2.buffer.byteLength, height: d2.height, width: d2.width, jpg: l2, networkType: 6, osType: 7, requestId: u2, sdkVersion: "4.20.0", sequence: this._sequence, sid: o2, timestamp: uU(c2), uid: a2, vid: r2, service: this._moderationMode, ticket: this._ticket, callbackData: this._extraInfo, vendorConfigs: this._vendor };
          void 0 === this._extraInfo && delete h2.callbackData;
          const p2 = MM(h2);
          if (p2.byteLength < this._workerMessageLengthLimit) {
            if (DC("SHOW_IMAGE_MODERATION_WORKER_MESSAGE")) {
              const e3 = function(e4) {
                for (var t3 = 1; t3 < arguments.length; t3++) {
                  var i3 = null != arguments[t3] ? arguments[t3] : {};
                  t3 % 2 ? hU(Object(i3), true).forEach(function(t4) {
                    nh(e4, t4, i3[t4]);
                  }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e4, Object.getOwnPropertyDescriptors(i3)) : hU(Object(i3)).forEach(function(t4) {
                    Object.defineProperty(e4, t4, Object.getOwnPropertyDescriptor(i3, t4));
                  });
                }
                return e4;
              }({}, h2);
              delete e3.jpg, YC.debug("[".concat(this._moderationId, "] Request message for worker of image moderation service: "), JSON.stringify(e3));
            }
            return p2;
          }
          {
            const t3 = this.quality * this._qualityRatio;
            return this.quality = t3, await this.generateRequestData(e2, { appId: i2, cname: n2, cid: s2, vid: r2, sid: o2, uid: a2 });
          }
        }
        close() {
          this._cancelTokenSource.cancel(), this._cancelTokenSource = EC.CancelToken.source(), this._workerConnection && this._workerConnection.close(), this._moderationTimer && window.clearInterval(this._moderationTimer), this._moderationTimer = null, this._uploadTimer && window.clearTimeout(this._uploadTimer), this._uploadTimer = null, this.connectionState = Av.CLOSED, this.emit(bv.STATE_CHANGE, wv.CLOSED);
        }
      }
      function _U(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function EU(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? _U(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : _U(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      const mU = Date.now(), fU = 20, TU = /* @__PURE__ */ new Map(), gU = /* @__PURE__ */ new Map();
      async function SU(e2) {
        const t2 = TU.get(e2), i2 = Array.isArray(t2) && t2[t2.length - 1], n2 = gU.get(e2);
        if (!i2)
          return void (n2.isSyncing = false);
        const s2 = { uid: i2.uid, payload: Dg(i2.payload) };
        0 === n2.firstRecvTs && (n2.firstRecvTs = i2.recvTs, n2.firstSendTs = i2.sendTs);
        const r2 = i2.sendTs - n2.firstSendTs, o2 = r2 - (Date.now() - n2.firstRecvTs);
        o2 > 0 && (n2.firstRecvTs = Date.now() - r2);
        let a2 = i2.mediaDelay + o2;
        a2 <= 0 ? (t2.pop(), RU(i2.context, s2), a2 = 0) : a2 = Math.min(a2, fU), setTimeout(() => t2.length && SU(e2), a2);
      }
      function RU(e2, t2) {
        e2.safeEmit(dg.STREAM_MESSAGE, t2.uid, t2.payload), e2.onStreamMessage && e2.onStreamMessage(t2);
      }
      function CU(e2) {
        let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, i2 = arguments.length > 2 ? arguments[2] : void 0;
        if (!e2.syncWithAudio)
          return RU(i2, { uid: e2.uid, payload: Dg(e2.payload) });
        const n2 = "".concat(i2.id, "-").concat(e2.uid), s2 = TU.get(n2) || [], r2 = s2.findIndex((t3) => e2.sendTs >= t3.sendTs), o2 = EU(EU({}, e2), {}, { context: i2, mediaDelay: t2, recvTs: Date.now() });
        -1 === r2 ? s2.push(o2) : s2.splice(r2, 0, o2), TU.set(n2, s2);
        let a2 = false;
        var c2;
        gU.has(n2) ? a2 = !(null === (c2 = gU.get(n2)) || void 0 === c2 || !c2.isSyncing) : gU.set(n2, { isSyncing: a2, firstRecvTs: 0, firstSendTs: 0 });
        a2 || SU(n2);
      }
      const IU = pT().name;
      function vU() {
        return !function(e2, t2, i2) {
          const n2 = pT();
          if (n2.os !== aT.IOS || !n2.osVersion)
            return false;
          const s2 = n2.osVersion.split(".");
          return i2 ? t2 && Number(s2[0]) === e2 && Number(s2[1]) < t2 || Number(s2[0]) < e2 : t2 ? Number(s2[0]) === e2 && Number(s2[1]) <= t2 || Number(s2[0]) < e2 : Number(s2[0]) <= e2;
        }(16, 0, true) && !function(e2, t2, i2) {
          const n2 = pT();
          if (n2.name !== cT.SAFARI || !n2.osVersion)
            return false;
          const s2 = n2.version.split(".");
          return i2 ? t2 && Number(s2[0]) === e2 && Number(s2[1]) < t2 || Number(s2[0]) < e2 : t2 ? Number(s2[0]) === e2 && Number(s2[1]) <= t2 || Number(s2[0]) < e2 : Number(s2[0]) <= e2;
        }(16, 0, true);
      }
      function yU(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function AU(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? yU(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : yU(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      Yg.setLogger(YC);
      class bU extends ig {
        get connectionState() {
          return this._gateway.state;
        }
        get remoteUsers() {
          return this._users;
        }
        get localTracks() {
          return this._p2pChannel.getAllTracks(true);
        }
        get uid() {
          return this._uid;
        }
        get channelName() {
          return this._channelName;
        }
        get localDataChannels() {
          return this._p2pChannel.getAllDataChannels();
        }
        get mode() {
          return this._config.mode;
        }
        get role() {
          var e2;
          return (null === (e2 = this._config) || void 0 === e2 ? void 0 : e2.role) || "audience";
        }
        get codec() {
          return this._config.codec;
        }
        get audioCodec() {
          return this._config.audioCodec || "opus";
        }
        get isStringUID() {
          return !!this._joinInfo && !!this._joinInfo.stringUid;
        }
        get __className__() {
          return "Client";
        }
        constructor(e2) {
          let t2;
          if (super(), nh(this, "store", void 0), nh(this, "_uid", void 0), nh(this, "_channelName", void 0), nh(this, "_uintUid", void 0), nh(this, "_users", []), nh(this, "_config", void 0), nh(this, "_clientId", void 0), nh(this, "_appId", void 0), nh(this, "_sessionId", null), nh(this, "_key", void 0), nh(this, "_rtmConfig", {}), nh(this, "_joinInfo", void 0), nh(this, "_gateway", void 0), nh(this, "_statsCollector", void 0), nh(this, "_configDistribute", void 0), nh(this, "_leaveMutex", new Yg("client-leave")), nh(this, "_publishMutex", new Yg("client-publish")), nh(this, "_renewTokenMutex", new Yg("client-renewtoken")), nh(this, "_subscribeMutex", new Yg("client-subscribe")), nh(this, "_encryptionMode", "none"), nh(this, "_encryptionSecret", null), nh(this, "_encryptionSalt", null), nh(this, "_proxyServer", void 0), nh(this, "_turnServer", { servers: [], mode: "auto" }), nh(this, "_cloudProxyServerMode", "disabled"), nh(this, "_isDualStreamEnabled", false), nh(this, "_defaultStreamFallbackType", void 0), nh(this, "_lowStreamParameter", void 0), nh(this, "_streamFallbackTypeCacheMap", /* @__PURE__ */ new Map()), nh(this, "_remoteStreamTypeCacheMap", /* @__PURE__ */ new Map()), nh(this, "_axiosCancelSource", EC.CancelToken.source()), nh(this, "_audioVolumeIndicationInterval", void 0), nh(this, "_networkQualityInterval", void 0), nh(this, "_userOfflineTimeout", void 0), nh(this, "_streamRemovedTimeout", void 0), nh(this, "_injectStreamingClient", void 0), nh(this, "_liveTranscodeStreamingClient", void 0), nh(this, "_liveRawStreamingClient", void 0), nh(this, "_channelMediaRelayClient", void 0), nh(this, "_networkQualitySensitivity", "normal"), nh(this, "_p2pChannel", void 0), nh(this, "_useLocalAccessPoint", false), nh(this, "_setLocalAPVersion", void 0), nh(this, "_joinAndNotLeaveYet", false), nh(this, "_numberOfJoinCount", 0), nh(this, "_remoteDefaultVideoStreamType", void 0), nh(this, "_inspect", void 0), nh(this, "_moderation", void 0), nh(this, "_license", void 0), nh(this, "_pendingPublishedUsers", []), nh(this, "ntpAlignErrorCount", 0), nh(this, "remoteInboundOffset", 0), nh(this, "_handleLocalTrackEnable", (e3, t3, i2) => {
            this.publish(e3, false).then(t3).catch(i2);
          }), nh(this, "_handleLocalTrackDisable", (e3, t3, i2) => {
            this.unpublish(e3).then(t3).catch(i2);
          }), nh(this, "_handleUserOnline", (e3) => {
            if (DC("BLOCK_LOCAL_CLIENT") && lI(e3.uid, this.channelName))
              return void YC.debug("[".concat(e3.uid, "] will be ignored in local"));
            this.isStringUID && "string" != typeof e3.uid && YC.error("[".concat(this._clientId, "] StringUID is Mixed with UintUID"));
            const t3 = this._users.find((t4) => t4.uid === e3.uid);
            if (t3)
              t3._trust_in_room_ = true, t3._is_pre_created && (t3._is_pre_created = false, this.safeEmit(dg.USER_JOINED, t3));
            else {
              const t4 = new ik(e3.uid, e3.uint_id || e3.uid);
              this._users.push(t4), YC.debug("[".concat(this._clientId, "] user online"), e3.uid), this.safeEmit(dg.USER_JOINED, t4);
            }
          }), nh(this, "_handleUserOffline", (e3) => {
            if (DC("BLOCK_LOCAL_CLIENT") && lI(e3.uid, this.channelName))
              return;
            const t3 = this._users.find((t4) => t4.uid === e3.uid);
            t3 && (this._handleRemoveStream(e3), this._handleRemoveDataChannels(e3), t3._audio_pre_subscribed || t3._video_pre_subscribed ? t3._is_pre_created = true : vg(this._users, t3), this._remoteStreamTypeCacheMap.delete(t3.uid), this._streamFallbackTypeCacheMap.delete(t3.uid), YC.debug("[".concat(this._clientId, "] user offline"), e3.uid, "reason:", e3.reason), this.safeEmit(dg.USER_LEAVED, t3, e3.reason));
          }), nh(this, "_handleAddAudioOrVideoStream", (e3, t3, i2, n2, s2, r2, o2) => {
            if (DC("BLOCK_LOCAL_CLIENT") && lI(t3, this.channelName))
              return;
            const a2 = this._users.find((e4) => e4.uid === t3);
            if (!a2)
              return void YC.error("[".concat(this._clientId, "] can not find target user!(on_add_stream)"));
            YC.debug("[".concat(this._clientId, "] stream added with uid ").concat(t3, ", type ").concat(e3)), this.store.subscribe(a2.uid, e3, void 0, void 0, void 0, Date.now());
            const c2 = "audio" === e3 ? a2.hasAudio : a2.hasVideo;
            a2._uintid || (a2._uintid = s2 || t3), "audio" === e3 ? a2._trust_audio_stream_added_state_ = true : a2._trust_video_stream_added_state_ = true, "audio" === e3 ? (a2._audio_added_ = true, void 0 !== i2 && (a2._audioSSRC = i2), void 0 !== n2 && (a2._cname = n2), r2 && (a2._audioOrtc = r2)) : (a2._video_added_ = true, void 0 !== i2 && (a2._videoSSRC = i2), void 0 !== n2 && (a2._cname = n2), void 0 !== o2 && (a2._rtxSsrcId = o2), r2 && (a2._videoOrtc = r2)), ("audio" === e3 ? a2.hasAudio : a2.hasVideo) && !c2 && (YC.info("[".concat(this._clientId, "] remote user ").concat(a2.uid, " published ").concat(e3)), this.safeEmit(dg.USER_PUBLISHED, a2, e3)), "video" === e3 ? rI.onGatewayStream(this._sessionId, QC.ON_ADD_VIDEO_STREAM, ZC.ON_ADD_VIDEO_STREAM, { peer: s2 || t3, ssrc: a2._videoSSRC }) : rI.onGatewayStream(this._sessionId, QC.ON_ADD_AUDIO_STREAM, ZC.ON_ADD_AUDIO_STREAM, { peer: s2 || t3, ssrc: a2._audioSSRC }), this._p2pChannel.remoteMediaSsrcChanged(a2, e3, i2).then((t4) => {
              if (t4 && (YC.debug("[".concat(this._clientId, "] resubscribe ").concat(e3, " for user ").concat(a2.uid, " after rejoin because SSRC id changed.")), this._p2pChannel instanceof nM))
                return this._p2pChannel.unsubscribe(a2, e3, true).then(() => this._subscribe(a2, e3, true).catch((e4) => {
                  YC.error("[".concat(this._clientId, "] resubscribe error"), e4.toString());
                }));
            }), this._p2pChannel.hasPendingRemoteMedia(a2, e3) && (YC.debug("[".concat(this._clientId, "] resubscribe ").concat(e3, " for user ").concat(a2.uid, " after reconnect.")), this._subscribe(a2, e3, true).catch((e4) => {
              YC.error("[".concat(this._clientId, "] resubscribe error"), e4.toString());
            }));
          }), nh(this, "_handleRemoveStream", (e3) => {
            if (DC("BLOCK_LOCAL_CLIENT") && lI(e3.uid, this.channelName))
              return;
            const t3 = this._users.find((t4) => t4.uid === e3.uid);
            if (!t3)
              return void YC.warning("[".concat(this._clientId, "] can not find target user!(on_remove_stream)"));
            YC.debug("[".concat(this._clientId, "] stream removed with uid ").concat(e3.uid));
            let i2 = () => {
            };
            t3.hasAudio && t3.hasVideo ? i2 = () => {
              YC.info("[".concat(this._clientId, "] remote user ").concat(t3.uid, " unpublished audio track")), this.safeEmit(dg.USER_UNPUBLISHED, t3, "audio"), YC.info("[".concat(this._clientId, "] remote user ").concat(t3.uid, " unpublished video track")), this.safeEmit(dg.USER_UNPUBLISHED, t3, "video");
            } : t3.hasVideo ? i2 = () => {
              YC.info("[".concat(this._clientId, "] remote user ").concat(t3.uid, " unpublished video track")), this.safeEmit(dg.USER_UNPUBLISHED, t3, "video");
            } : t3.hasAudio && (i2 = () => {
              YC.info("[".concat(this._clientId, "] remote user ").concat(t3.uid, " unpublished audio track")), this.safeEmit(dg.USER_UNPUBLISHED, t3, "audio");
            }), t3._video_pre_subscribed || t3._audio_pre_subscribed || (t3._trust_audio_stream_added_state_ = true, t3._trust_video_stream_added_state_ = true, t3._audio_added_ = false, t3._video_added_ = false, this._p2pChannel instanceof nM && this._p2pChannel.unsubscribe(t3).then((e4) => {
              if (e4)
                return this._gateway.unsubscribe(e4, t3.uid);
            }), t3._audioSSRC = void 0, t3._videoSSRC = void 0, t3._audioOrtc = void 0, t3._videoOrtc = void 0, t3._rtxSsrcId = void 0), rI.onGatewayStream(this._sessionId, QC.ON_REMOVE_STREAM, ZC.ON_REMOVE_STREAM, { peer: e3.uint_id || e3.uid }), i2();
          }), nh(this, "_handleSetStreamLocalEnable", (e3, t3, i2) => {
            if (DC("BLOCK_LOCAL_CLIENT") && lI(t3, this.channelName))
              return;
            const n2 = this._users.find((e4) => e4.uid === t3);
            if (!n2)
              return void YC.error("[".concat(this._clientId, "] can not find target user!(disable_local)"));
            YC.debug("[".concat(this._clientId, "] local ").concat(e3, " ").concat(i2 ? "enabled" : "disabled", " with uid ").concat(t3));
            const s2 = "audio" === e3 ? n2.hasAudio : n2.hasVideo;
            if ("audio" === e3) {
              n2._trust_audio_enabled_state_ = true;
              const e4 = n2._audio_enabled_;
              if (n2._audio_enabled_ = i2, n2._audio_enabled_ === e4)
                return;
              {
                const e5 = n2._audio_enabled_ ? "enable-local-audio" : "disable-local-audio";
                YC.debug("[".concat(this._clientId, "] user-info-updated, uid: ").concat(t3, ", msg: ").concat(e5)), this.safeEmit(dg.USER_INFO_UPDATED, t3, e5);
              }
            } else {
              n2._trust_video_enabled_state_ = true;
              const e4 = n2._video_enabled_;
              if (n2._video_enabled_ = i2, n2._video_enabled_ === e4)
                return;
              {
                const e5 = n2._video_enabled_ ? "enable-local-video" : "disable-local-video";
                YC.debug("[".concat(this._clientId, "] user-info-update, uid: ").concat(t3, ", msg: ").concat(e5)), this.safeEmit(dg.USER_INFO_UPDATED, t3, e5);
              }
            }
            const r2 = "audio" === e3 ? n2.hasAudio : n2.hasVideo;
            return s2 !== r2 ? !s2 && r2 ? (YC.info("[".concat(this._clientId, "] remote user ").concat(t3, " published ").concat(e3)), void this.safeEmit(dg.USER_PUBLISHED, n2, e3)) : ("video" === e3 && n2._videoTrack && n2._videoTrack._destroy(), "audio" === e3 && n2._audioTrack, this._p2pChannel.muteRemote(n2, e3), YC.info("[".concat(this._clientId, "] remote user ").concat(t3, " unpublished ").concat(e3)), void this.safeEmit(dg.USER_UNPUBLISHED, n2, e3)) : void 0;
          }), nh(this, "_handleMuteStream", (e3, t3, i2) => {
            if (DC("BLOCK_LOCAL_CLIENT") && lI(e3, this.channelName))
              return;
            YC.debug("[".concat(this._clientId, "] receive mute message"), e3, t3, i2);
            const n2 = this._users.find((t4) => t4.uid === e3);
            if (!n2)
              return void YC.warning("[".concat(this._clientId, "] can not find remote user, ignore mute event, uid: ").concat(e3));
            const s2 = "audio" === t3 ? n2.hasAudio : n2.hasVideo;
            if ("audio" === t3) {
              n2._trust_audio_mute_state_ = true;
              const t4 = n2._audio_muted_;
              if (n2._audio_muted_ = i2, n2._audio_muted_ === t4)
                return;
              {
                const t5 = n2._audio_muted_ ? "mute-audio" : "unmute-audio";
                YC.debug("[".concat(this._clientId, "] user-info-update, uid: ").concat(e3, ", msg: ").concat(t5)), this.safeEmit(dg.USER_INFO_UPDATED, e3, t5);
              }
            } else {
              n2._trust_video_mute_state_ = true;
              const t4 = n2._video_muted_;
              if (n2._video_muted_ = i2, n2._video_muted_ === t4)
                return;
              {
                const t5 = n2._video_muted_ ? "mute-video" : "unmute-video";
                YC.debug("[".concat(this._clientId, "] user-info-update, uid: ").concat(e3, ", msg: ").concat(t5)), this.safeEmit(dg.USER_INFO_UPDATED, e3, t5);
              }
            }
            const r2 = "audio" === t3 ? n2.hasAudio : n2.hasVideo;
            if (s2 !== r2) {
              if (!s2 && r2) {
                return ("audio" === t3 ? n2._audioSSRC : n2._videoSSRC) ? (YC.info("[".concat(this._clientId, "] remote user ").concat(e3, " published ").concat(t3)), void this.safeEmit(dg.USER_PUBLISHED, n2, t3)) : void YC.warning("[".concat(this._clientId, "] remote user ").concat(e3, " receive ").concat(t3, " unmute message  before add stream message, ").concat(t3, " SSRC doesn't exist yet."));
              }
              "video" === t3 && n2._videoTrack && !n2._video_pre_subscribed && n2._videoTrack._destroy(), "audio" === t3 && n2._audioTrack, this._p2pChannel.muteRemote(n2, t3), YC.info("[".concat(this._clientId, "] remote user ").concat(e3, " unpublished ").concat(t3)), this.safeEmit(dg.USER_UNPUBLISHED, n2, t3);
            }
          }), nh(this, "_handleP2PLost", async (e3) => {
            YC.debug("[".concat(this._clientId, "] receive p2p lost"), e3), parseInt(e3.p2pid, 10) === this.store.p2pId ? await this._p2pChannel.requestReconnect() : YC.warning("[".concat(this._clientId, "] P2PLost stream not found"), e3);
          }), nh(this, "_handleTokenWillExpire", () => {
            YC.debug("[".concat(this._clientId, "] received message onTokenPrivilegeWillExpire")), this.safeEmit(dg.ON_TOKEN_PRIVILEGE_WILL_EXPIRE);
          }), nh(this, "_handleBeforeUnload", (e3) => {
            "beforeunload" === e3.type && void 0 !== e3.returnValue && "" !== e3.returnValue || (this.leave(), YC.info("[".concat(this._clientId, "] auto leave onbeforeunload or pagehide")));
          }), nh(this, "_handleUpdateNetworkQuality", () => {
            if ("normal" === this._networkQualitySensitivity)
              return;
            if (navigator && void 0 !== navigator.onLine && !navigator.onLine)
              return void this.safeEmit(dg.NETWORK_QUALITY, { downlinkNetworkQuality: 6, uplinkNetworkQuality: 6 });
            const e3 = { downlinkNetworkQuality: 0, uplinkNetworkQuality: 0 };
            e3.uplinkNetworkQuality = this._p2pChannel.getUplinkNetworkQuality(), e3.downlinkNetworkQuality = this._p2pChannel.getDownlinkNetworkQuality(), this.safeEmit(dg.NETWORK_QUALITY, e3);
          }), nh(this, "_handleP2PAddAudioOrVideoStream", (e3, t3, i2, n2) => {
            const s2 = this._users.find((e4) => e4.uid === t3);
            if (!s2)
              return void YC.error("[".concat(this._clientId, "] can not find target user!(on_add_stream)"));
            YC.debug("[".concat(this._clientId, "] stream added with uid ").concat(t3, ", type ").concat(e3)), this.store.subscribe(s2.uid, e3, void 0, void 0, void 0, Date.now());
            const r2 = "audio" === e3 ? s2.hasAudio : s2.hasVideo;
            "audio" === e3 ? s2._trust_audio_stream_added_state_ = true : s2._trust_video_stream_added_state_ = true, "audio" === e3 ? (s2._audio_added_ = true, void 0 !== i2 && (s2._audioSSRC = i2), void 0 !== n2 && (s2._audioMid = n2)) : (s2._video_added_ = true, void 0 !== i2 && (s2._videoSSRC = i2), void 0 !== n2 && (s2._videoMid = n2)), ("audio" === e3 ? s2.hasAudio : s2.hasVideo) && !r2 && (YC.info("[".concat(this._clientId, "] remote user ").concat(s2.uid, " published ").concat(e3)), this.safeEmit(dg.USER_PUBLISHED, s2, e3)), this._p2pChannel.hasPendingRemoteMedia(s2, e3) && (YC.debug("[".concat(this._clientId, "] resubscribe ").concat(e3, " for user ").concat(s2.uid, " after reconnect.")), this._subscribe(s2, e3, true).catch((e4) => {
              YC.error("[".concat(this._clientId, "] resubscribe error"), e4.toString());
            }));
          }), this._config = e2, this._clientId = xg(5, "client-"), this.store = new UC(e2.codec, e2.audioCodec, e2.mode, this._clientId), this.store.clientCreated(), e2.proxyServer && this.setProxyServer(e2.proxyServer, true), e2.turnServer && this.setTurnServer(e2.turnServer, true), YC.info("[".concat(this._clientId, "] Initializing AgoraRTC client v").concat(yC, " build: ").concat(wC, ", mode: ").concat(this.mode, ", codec: ").concat(this.codec)), e2.clientRoleOptions)
            try {
              mg(e2.clientRoleOptions), t2 = Object.assign({}, e2.clientRoleOptions);
            } catch (e3) {
              YC.warning("[".concat(this._clientId, "] ").concat(e3.toString()));
            }
          this._statsCollector = new uk(this.store), this._statsCollector.onStatsException = (e3, t3, i2) => {
            YC.debug("[".concat(this._clientId, "] receive exception msg, code: ").concat(e3, ", msg: ").concat(t3, ", uid: ").concat(i2)), this.safeEmit(dg.EXCEPTION, { code: e3, msg: t3, uid: i2 });
          }, this._statsCollector.onUploadPublishDuration = (e3, t3, i2, n2) => {
            const s2 = this._users.find((t4) => t4.uid === e3);
            s2 && rI.peerPublishStatus(this._sessionId, { subscribeElapse: n2, audioPublishDuration: t3, videoPublishDuration: i2, peer: s2._uintid });
          }, this.store.useDataChannel = wA().supportDataChannel && DC("SIGNAL_CHANNEL"), this.store.useP2P = "p2p" === e2.mode, this._gateway = new Gy(this.store, { clientId: this._clientId, mode: this.mode, codec: this.codec, websocketRetryConfig: e2.websocketRetryConfig || Jg, httpRetryConfig: e2.httpRetryConfig || Jg, forceWaitGatewayResponse: void 0 === e2.forceWaitGatewayResponse || e2.forceWaitGatewayResponse, statsCollector: this._statsCollector, role: e2.role, clientRoleOptions: t2 }), this._configDistribute = new AA(), this.store.useP2P ? (this._p2pChannel = new ak(this.store, this._statsCollector), this._handleP2PEvents()) : this._p2pChannel = new nM(this.store, this._statsCollector), this._handleP2PChannelEvents(), this._handleGatewayEvents(), this._handleGatewaySignalEvents();
        }
        async joinMeta(e2, t2, i2, n2, s2) {
          let r2 = !(arguments.length > 5 && void 0 !== arguments[5]) || arguments[5], o2 = arguments.length > 6 && void 0 !== arguments[6] && arguments[6];
          NC("JOIN_GATEWAY_USE_443PORT_ONLY", r2), NC("JOIN_GATEWAY_USE_DUAL_DOMAIN", o2);
          const a2 = this._gateway.signal.websocket;
          return a2 instanceof Zv && (a2.use443PortOnly = r2, a2.tryDoubleDomain = o2), async function(e3, t3, i3) {
            sT.get(e3) || sT.set(e3, []), rT.get(e3) || rT.set(e3, t3), oT.get(e3) || oT.set(e3, 0);
            const n3 = sT.get(e3), s3 = rT.get(e3);
            if (!n3 || !s3)
              throw new Error("concurrent: deferQueue or maxConcurrency is null");
            if (oT.get(e3) === s3) {
              const e4 = nT();
              n3.push(e4), await e4.promise;
            }
            oT.set(e3, oT.get(e3) + 1);
            for (var r3 = arguments.length, o3 = new Array(r3 > 3 ? r3 - 3 : 0), a3 = 3; a3 < r3; a3++)
              o3[a3 - 3] = arguments[a3];
            const c2 = await i3(...o3);
            return oT.set(e3, oT.get(e3) - 1), oT.get(e3) === s3 - 1 && n3.length > 0 && (n3[0].resolve(), n3.shift()), 0 === oT.get(e3) && (sT.set(e3, []), rT.set(e3, 0), oT.set(e3, 0)), c2;
          }("client.join", DC("JOIN_MAX_CONCURRENCY"), this.join.bind(this), e2, t2, i2, n2, s2);
        }
        async join(e2, t2, i2, n2, s2) {
          const r2 = ++this._numberOfJoinCount;
          this.store.joinStart(), n2 && (this.store.uid = n2);
          const o2 = IC(), a2 = vC() ? window.isSecureContext : "Browser Not Support";
          if (!vC() && !o2 || !window.isSecureContext) {
            const e3 = "The website must be running in a secure context (About secure context: https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts ), otherwise the media collection will be restricted by the browser";
            YC.warning(e3);
          }
          const c2 = Vg();
          "DISCONNECTED" === this.connectionState && (this.store.avoidJoinStart = Math.round(Date.now()), YC.debug("[".concat(this._clientId, "] set avoidJoinStart to ").concat(this.store.avoidJoinStart)));
          const d2 = rI.reportApiInvoke(c2, { name: rg.JOIN, options: [e2, t2, i2, n2], states: { isHttps: o2, isSecureContext: a2 }, tag: og.TRACER });
          rI.setAppId(e2);
          try {
            if (!i2 && null !== i2)
              throw new VI(xT.INVALID_PARAMS, "Invalid token: ".concat(i2, ". If you don not use token, set it to null"));
            i2 && WT(i2, "token", 1, 2047), WT(e2, "appid", 1, 2047), FI(t2), n2 && BI(n2), s2 && WT(s2, "optionalInfo", 1, 2047);
          } catch (e3) {
            throw d2.onError(e3), e3;
          }
          if (YC.info("[".concat(this._clientId, "] start join channel ").concat(t2, ", join number: ").concat(r2)), this._leaveMutex.isLocked) {
            YC.debug("[".concat(this._clientId, "] join: waiting leave operation"));
            (await this._leaveMutex.lock())(), YC.debug("[".concat(this._clientId, "] join: continue"));
          }
          if (this._joinAndNotLeaveYet = true, "DISCONNECTED" !== this.connectionState) {
            const e3 = new VI(xT.INVALID_OPERATION, "[".concat(this._clientId, "] Client already in connecting/connected state"));
            throw d2.onError(e3), e3;
          }
          this._sessionId || (this._sessionId = c2, this.store.sessionId = this._sessionId), this._gateway.state = "CONNECTING";
          const l2 = AU(AU({}, this._rtmConfig), {}, { clientId: this._clientId, appId: e2, sid: this._sessionId, cname: t2, uid: "string" != typeof n2 ? n2 : null, turnServer: this._turnServer, proxyServer: this._proxyServer, token: i2 || e2, cloudProxyServer: this._cloudProxyServerMode, optionalInfo: s2, license: this._license, useLocalAccessPoint: this._useLocalAccessPoint }, void 0 !== this._remoteDefaultVideoStreamType && { defaultVideoStream: this._remoteDefaultVideoStreamType });
          if (this._useLocalAccessPoint && (l2.setLocalAPVersion = this._setLocalAPVersion), "string" == typeof n2 && (l2.stringUid = n2, this._uintUid ? (l2.uid = this._uintUid, this._uintUid = void 0) : l2.uid = 0), "none" !== this._encryptionMode && this._encryptionSecret) {
            if (l2.aesmode = this._encryptionMode, l2.aespassword = await eg(this._encryptionSecret), !this._joinAndNotLeaveYet)
              throw new VI(xT.INVALID_OPERATION, "[".concat(this._clientId, "] Client already left"));
            this._encryptionSalt && (l2.aessalt = this._encryptionSalt);
          }
          this._startSession(this._sessionId, { channel: t2, appId: e2, stringUid: l2.stringUid });
          const u2 = this._sessionId;
          setTimeout(() => {
            "CONNECTING" === this.connectionState && u2 === this._sessionId && rI.joinChannelTimeout(this._sessionId, 5);
          }, 5e3);
          try {
            var h2;
            let n3;
            const s3 = l2.cloudProxyServer;
            if (bn(h2 = ["proxy3", "proxy4", "proxy5"]).call(h2, s3)) {
              const e3 = DC("PROXY_SERVER_TYPE3");
              Array.isArray(e3) ? l2.proxyServer = e3[0] : l2.proxyServer = e3;
            }
            if (rI.setProxyServer(l2.proxyServer), YC.setProxyServer(l2.proxyServer), this.store.requestAPStart(), l2.stringUid && !l2.uid) {
              let e3;
              [e3, n3] = await tT.all([TA(l2.stringUid, l2, this._axiosCancelSource.token, this._config.httpRetryConfig || Jg, this.store), fA(l2, this._axiosCancelSource.token, this._config.httpRetryConfig || Jg, true, this.store)]), YC.debug("[".concat(this._clientId, "] getUserAccount Success ").concat(l2.stringUid, " => ").concat(e3)), l2.uid = e3, n3.gatewayInfo.uid = e3, n3.gatewayInfo.res.uid = e3;
            } else
              n3 = await fA(l2, this._axiosCancelSource.token, this._config.httpRetryConfig || Jg, true, this.store);
            if (!this._joinAndNotLeaveYet)
              throw new VI(xT.INVALID_OPERATION, "[".concat(this._clientId, "] Client already left"));
            this.store.requestAPEnd(), setTimeout(() => {
              this._configDistribute.startGetConfigDistribute(l2, this._axiosCancelSource.token), this._configDistribute.on(lv.UPDATE_BITRATE_LIMIT, (e3) => {
                this._p2pChannel.updateBitrateLimit(e3);
              });
            }, 0), this._key = i2 || e2;
            const r3 = n3.gatewayInfo, o3 = l2.uid ? l2.uid : r3.uid;
            this._joinInfo = AU(AU({}, l2), {}, { cid: r3.cid, uid: o3, vid: r3.vid, apResponse: r3.res, uni_lbs_ip: r3.uni_lbs_ip, gatewayAddrs: r3.gatewayAddrs }), this.store.intUid = o3;
            const a3 = await this._joinGateway();
            if (!this._joinAndNotLeaveYet)
              throw new VI(xT.INVALID_OPERATION, "[".concat(this._clientId, "] Client already left"));
            d2.onSuccess(a3), this._appId = e2, this._channelName = l2.cname, this._uid = a3, this.store.uid = a3, setTimeout(() => {
              this._networkQualityInterval && window.clearInterval(this._networkQualityInterval), this._networkQualityInterval = window.setInterval(this._handleUpdateNetworkQuality, 2e3), window.addEventListener(ST() ? "beforeunload" : "pagehide", this._handleBeforeUnload);
            }, 0);
            const c3 = l2.stringUid ? "string uid: ".concat(l2.stringUid, ",uid: ").concat(l2.uid) : "uid: ".concat(this._uid);
            return YC.info("[".concat(this._clientId, "] Joining channel success: channel: ").concat(t2, ",").concat(c3)), setTimeout(() => {
              YC.startUpload();
            }, 5e3), this.store.joinEnd(), p2 = this, bn(dI).call(dI, p2) || dI.push(p2), a3;
          } catch (e3) {
            const t3 = Array.isArray(e3) ? e3[0] : e3;
            throw t3 && t3.code === xT.OPERATION_ABORTED ? YC.warning("[".concat(this._clientId, "] join number: ").concat(r2, ", Joining channel failed, rollback"), t3) : YC.error("[".concat(this._clientId, "] join number: ").concat(r2, ", Joining channel failed, rollback"), t3), t3.code !== xT.OPERATION_ABORTED && this._numberOfJoinCount === r2 && (this._gateway.state = "DISCONNECTED", this._reset()), d2.onError(t3), t3;
          }
          var p2;
        }
        _joinGateway() {
          if (!this._joinInfo || !this._key)
            throw new VI(xT.INVALID_OPERATION);
          return this._gateway.join(this._joinInfo, this._key, !("disabled" !== this._joinInfo.cloudProxyServer || this._joinInfo.proxyServer || !DC("JOIN_WITH_FALLBACK_SIGNAL_PROXY"))).then((e2) => e2).catch((e2) => {
            if (e2.code === xT.INIT_WEBSOCKET_TIMEOUT)
              return this._gateway.leave(true, cg.FALLBACK), e2;
            if (e2.code === xT.INIT_DATACHANNEL_TIMEOUT)
              return this._gateway.leave(true, cg.FALLBACK), e2;
            throw e2;
          }).then((e2) => {
            if (e2 instanceof VI) {
              if (e2.code === xT.INIT_WEBSOCKET_TIMEOUT) {
                if (YC.info("[".concat(this._clientId, "] join timeout, fallback to proxy")), !this._joinInfo || !this._key)
                  throw new VI(xT.INVALID_OPERATION);
                this._joinInfo.cloudProxyServer = "fallback", this._cloudProxyServerMode = "fallback", this.store.cloudProxyServerMode = "fallback";
                const e3 = DC("PROXY_SERVER_TYPE3");
                if (Array.isArray(e3))
                  if (this._joinInfo.apUrl) {
                    const t3 = /^https?:\/\/(.+?)(\/.*)?$/.exec(this._joinInfo.apUrl)[1].split("."), i2 = t3.slice(t3.length - 2).join(".");
                    e3.forEach((e4) => {
                      this._joinInfo && bn(e4).call(e4, i2) && (this._joinInfo.proxyServer = e4);
                    }), this._joinInfo.proxyServer || (this._joinInfo.proxyServer = e3[0]);
                  } else
                    this._joinInfo.proxyServer = e3[0];
                else
                  this._joinInfo.proxyServer = e3;
                const t2 = DC("LOG_UPLOAD_SERVER").match(/.+:(\d{1,5})$/);
                t2 && t2[1] && "443" !== t2[1] && YC.setProxyServer(this._joinInfo.proxyServer), "443" !== DC("STATS_COLLECTOR_PORT").toString() && rI.setProxyServer(this._joinInfo.proxyServer);
                return rI.reportApiInvoke(this._sessionId, { name: rg.JOIN_FALLBACK_TO_PROXY, options: [this._joinInfo.proxyServer], tag: og.TRACER }).onSuccess(), this.safeEmit(dg.JOIN_FALLBACK_TO_PROXY, this._joinInfo.proxyServer), DC("JOIN_WITH_FALLBACK_MEDIA_PROXY_FORCE") && this._joinInfo.turnServer.servers.forEach((e4) => {
                  "forceturn" in e4 && (e4.forceturn = true);
                }), this._gateway.join(this._joinInfo, this._key);
              }
              if (YC.info("[".concat(this._clientId, "] join by datachannel timeout, fallback to websocket")), !this._joinInfo || !this._key)
                throw new VI(xT.INVALID_OPERATION);
              return rI.reportApiInvoke(this._sessionId, { name: rg.DATACHANNEL_FAILBACK, options: [this.store.clientId], tag: og.TRACER }).onSuccess(), this._joinGateway();
            }
            return e2;
          }).then((e2) => e2);
        }
        async leave() {
          YC.info("[".concat(this._clientId, "] Leaving channel")), window.removeEventListener(ST() ? "beforeunload" : "pagehide", this._handleBeforeUnload), this._reset(), function(e3) {
            const t2 = dI.indexOf(e3);
            -1 !== t2 && dI.splice(t2, 1);
          }(this);
          const e2 = await this._leaveMutex.lock();
          if ("DISCONNECTED" === this.connectionState)
            return YC.info("[".concat(this._clientId, "] Leaving channel repeated, success")), void e2();
          await this._gateway.leave("CONNECTED" !== this.connectionState), YC.info("[".concat(this._clientId, "] Leaving channel success")), this._joinAndNotLeaveYet = false, this.store.resetJoinChannelServiceRecords(), e2();
        }
        async publish(e2) {
          let t2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          if (!Array.isArray(e2)) {
            if (!(e2 instanceof _b))
              return this._publishDataChannel(e2);
            e2 = [e2];
          }
          if (0 === e2.length)
            throw new VI(xT.INVALID_PARAMS, "param list is empty");
          const i2 = e2;
          if ("audience" === this._gateway.role)
            throw new VI(xT.INVALID_OPERATION, "audience can not publish stream");
          for (const e3 of i2) {
            if (!(e3 instanceof _b))
              throw new VI(xT.INVALID_PARAMS, "parameter is not local track");
            if (!e3._enabled && t2)
              throw new VI(xT.TRACK_IS_DISABLED, "can not publish a disabled track: ".concat(e3.getTrackId()));
          }
          YC.info("[".concat(this._clientId, "] Publishing tracks, id ").concat(i2.map((e3) => "".concat(e3.getTrackId(), " "))));
          const n2 = await this._publishMutex.lock();
          await this._configDistribute.awaitConfigDistributeComplete(), t2 && i2.forEach((e3) => {
            const t3 = this._configDistribute.getBitrateLimit();
            e3 instanceof Nw && t3 && e3.setBitrateLimit(t3.uplink);
          });
          try {
            await this._publishHighStream(i2), YC.info("[".concat(this._clientId, "] Publish success, id ").concat(i2.map((e3) => "".concat(e3.getTrackId(), " "))));
          } catch (e3) {
            throw YC.error("[".concat(this._clientId, "] publish error"), e3.toString()), e3;
          } finally {
            n2();
          }
        }
        async _publishDataChannel(e2) {
          jT(e2.id, "id", 0, 65535, true), FT(e2.ordered, "ordered"), WT(e2.metadata, "metadata", 0, 512), YC.info("[".concat(this._clientId, "] Publishing datachannels, id ").concat(e2.id));
          const t2 = await this._publishMutex.lock();
          try {
            if (-1 !== this._p2pChannel.getAllDataChannels().findIndex((t3) => t3.id === e2.id))
              throw new VI(xT.INVALID_PARAMS, "Invalid id: ".concat(e2.id, ". If you want to republish the datachannel, unpublish first"));
            if (!this._joinInfo || void 0 === this._uid)
              throw new VI(xT.INVALID_OPERATION, "Can't publish datachannel, haven't joined yet!");
            if ("CONNECTED" !== this.connectionState && "RECONNECTING" !== this.connectionState)
              throw new VI(xT.INVALID_OPERATION, "can not publish datachannel in ".concat(this.connectionState, " state"));
            if ("auto" === this._turnServer.mode && DC("FORCE_TURN") && !DC("TURN_ENABLE_TCP") && !DC("TURN_ENABLE_UDP"))
              throw new VI(xT.UNEXPECTED_ERROR, "force TURN With No TURN Configuration");
            const i2 = new EP(e2);
            await this._p2pChannel.publishDataChannel([i2]);
            try {
              const t3 = { streamId: e2.id, ordered: e2.ordered, maxRetransmits: DC("DATASTREAM_MAX_RETRANSMITS"), metadata: e2.metadata, channelId: i2._originDataChannelId };
              await this._gateway.publishDataChannel(this._uid, t3, true);
            } catch (e3) {
              if (e3.code !== xT.DISCONNECT_P2P)
                throw e3;
            }
            return await i2._waitTillOpen(), YC.info("[".concat(this._clientId, "] Publish dataChannels success, id ").concat(i2.id)), i2;
          } catch (e3) {
            throw YC.error("[".concat(this._clientId, "] publish datachannels error"), e3.toString()), e3;
          } finally {
            t2();
          }
        }
        async unpublish(e2) {
          if (!this._joinInfo || void 0 === this._uid)
            throw new VI(xT.INVALID_OPERATION, "Can't unpublish stream, haven't joined yet!");
          let t2 = [];
          if (e2)
            if (Array.isArray(e2))
              t2 = e2;
            else {
              if (!(e2 instanceof _b))
                return this._unpublishDataChannel([e2]);
              t2 = [e2];
            }
          else
            this.store.useP2P || await this._unpublishDataChannel(), t2 = this._p2pChannel.getAllTracks(true);
          YC.info("[".concat(this._clientId, "] Unpublish tracks, tracks ").concat(t2.map((e3) => "".concat(e3.getTrackId(), " ")), " "));
          const i2 = await this._publishMutex.lock();
          try {
            if (this._p2pChannel instanceof ak) {
              const e3 = await this._p2pChannel.unpublish(t2);
              e3 && await this._gateway.sendExtensionMessage(Ov.UNPUBLISH, { unpubMsg: e3 }, true);
            } else {
              const e3 = await this._p2pChannel.unpublish(t2);
              e3 && await this._gateway.unpublish(e3, this._uid), YC.info("[".concat(this._clientId, "] Unpublish success,tracks ").concat(t2.map((e4) => "".concat(e4.getTrackId()))));
            }
          } catch (e3) {
            throw YC.error("[".concat(this._clientId, "] unpublish error"), e3.toString()), e3;
          } finally {
            i2 && i2();
          }
        }
        async _unpublishDataChannel(e2) {
          void 0 !== e2 && 0 !== e2.length || (e2 = this._p2pChannel.getAllDataChannels()), YC.info("[".concat(this._clientId, "] Unpublish datachannels, datachannels ").concat(e2.map((e3) => "".concat(e3.id, " ")), " "));
          const t2 = await this._publishMutex.lock();
          try {
            const i2 = await this._p2pChannel.unpublishDataChannel(e2);
            i2 && await this._gateway.unpublishDataChannel(i2), YC.info("[".concat(this._clientId, "] Unpublish dataChannel success,dataChannel ").concat(e2.map((e3) => "".concat(e3.id))));
          } catch (e3) {
            throw YC.error("[".concat(this._clientId, "] unpublish dataChannel error"), e3.toString()), e3;
          } finally {
            t2 && t2();
          }
        }
        async subscribe(e2, t2, i2) {
          return "datachannel" === t2 ? this._subscribeDataChannel(e2, i2) : this._subscribe(e2, t2);
        }
        async presubscribe(e2, t2) {
          if (BT(t2, "mediaType", ["audio", "video"]), this._p2pChannel instanceof ak)
            throw new VI(xT.INVALID_OPERATION, "can't presub at p2p mode");
          if (!this._joinInfo)
            throw new VI(xT.INVALID_OPERATION, "can't presub when not join");
          if ("CONNECTED" !== this.connectionState && "RECONNECTING" !== this.connectionState)
            throw new VI(xT.INVALID_OPERATION, "can't presub in ".concat(this.connectionState, " state"));
          const i2 = t2 === hv.AUDIO, n2 = t2 === hv.VIDEO, s2 = await this._subscribeMutex.lock();
          try {
            const { ssrcId: r2, ortc: o2, rtxSsrcId: a2, cname: c2, uint_id: d2 } = await this._gateway.presubscribe(e2, t2, true);
            if (null == r2)
              throw new VI(xT.UNEXPECTED_RESPONSE, "no ssrc id");
            let l2 = this._users.find((t3) => t3.uid === e2);
            l2 || (l2 = new ik(e2, d2 || e2), l2._is_pre_created = true, this._users.push(l2)), c2 && (l2._cname = c2), l2._uintid || (l2._uintid = d2 || e2), i2 && (l2._audioSSRC = r2, l2._audio_pre_subscribed = true, o2 && (l2._audioOrtc = o2)), n2 && (l2._videoSSRC = r2, l2._video_pre_subscribed = true, o2 && (l2._videoOrtc = o2), null != a2 && (l2._rtxSsrcId = a2)), YC.info("[".concat(this._clientId, "] presub succeed ssrc: ").concat(r2)), await this._p2pChannel.subscribe(l2, t2, r2, a2, o2);
            const u2 = i2 ? l2._audioTrack : l2._videoTrack;
            if (!u2)
              throw new VI(xT.UNEXPECTED_ERROR, "can not find remote track in user");
            return i2 && (l2._trust_audio_stream_added_state_ = true, l2._audio_added_ = true), n2 && (l2._trust_video_stream_added_state_ = true, l2._video_added_ = true), u2;
          } catch (t3) {
            throw YC.error("[".concat(this._clientId, "] presub user ").concat(e2, " error"), t3), t3;
          } finally {
            s2();
          }
        }
        async _subscribeDataChannel(e2, t2) {
          var i2;
          if (jT(t2, "channelId", 0, 65535, true), !this._joinInfo)
            throw new VI(xT.INVALID_OPERATION, "Can't subscribe datachannel, not joined");
          if ("CONNECTED" !== this.connectionState && "RECONNECTING" !== this.connectionState)
            throw new VI(xT.INVALID_OPERATION, "Can't subscribe datachannel in ".concat(this.connectionState, " state"));
          if (!this._users.find((t3) => t3 === e2))
            throw YC.error("[".concat(this._clientId, "] can not subscribe ").concat(e2.uid, ", this user is not in the channel")), new VI(xT.INVALID_REMOTE_USER, "user is not in the channel");
          if (!e2.hasAudio && !e2.hasVideo && 0 === e2._dataChannels.length)
            throw YC.error("[".concat(this._clientId, "] can not subscribe ").concat(e2.uid, ", user is not published")), new VI(xT.INVALID_REMOTE_USER, "user is not published");
          const n2 = null === (i2 = e2._dataChannels) || void 0 === i2 ? void 0 : i2.find((e3) => e3.id === t2);
          if (!n2)
            throw YC.error("[".concat(this._clientId, "] can not subscribe ").concat(e2.uid, " with mediaType datachannel, remote datachannel is not published")), new VI(xT.REMOTE_USER_IS_NOT_PUBLISHED);
          const s2 = await this._subscribeMutex.lock();
          YC.info("[".concat(this._clientId, "] subscribe user ").concat(e2.uid, ", mediaType: datachannel"));
          try {
            const t3 = await this._p2pChannel.subscribeDataChannel(e2, [n2]);
            if (t3 && bn(t3).call(t3, n2.id))
              try {
                var r2;
                if (!n2._originDataChannelId)
                  throw YC.error("[".concat(this._clientId, "] can not subscribe ").concat(e2.uid, " with mediaType datachannel, cannot get RTCDatachannel")), new VI(xT.REMOTE_USER_IS_NOT_PUBLISHED);
                const t4 = { id: n2.id, datachannelId: n2._originDataChannelId, ordered: n2.ordered, maxRetransmits: n2.maxRetransmits, metadata: null !== (r2 = n2.metadata) && void 0 !== r2 ? r2 : "" };
                await this._gateway.subscribeDataChannel(e2.uid, t4, true);
              } catch (t4) {
                if ((null == t4 ? void 0 : t4.code) !== xT.WS_ABORT)
                  throw await this._p2pChannel.unsubscribeDataChannel(e2, [n2]), t4;
                await this._p2pChannel.unsubscribeDataChannel(e2, [n2]), this._p2pChannel.setPendingRemoteDataChannel(e2, n2.id);
              }
            return await n2._waitTillOpen(), YC.info("[".concat(this._clientId, "] subscribe success user ").concat(e2.uid, ", mediaType: datachannel")), n2;
          } finally {
            s2();
          }
        }
        async _p2pSubscribe(e2, t2, i2) {
          if (BT(t2, "mediaType", ["audio", "video"]), !this._joinInfo)
            throw new VI(xT.INVALID_OPERATION, "Can't subscribe stream, not joined");
          if ("CONNECTED" !== this.connectionState && "RECONNECTING" !== this.connectionState)
            throw new VI(xT.INVALID_OPERATION, "Can't subscribe stream in ".concat(this.connectionState, " state"));
          if (!this._users.find((t3) => t3 === e2)) {
            const t3 = new VI(xT.INVALID_REMOTE_USER, "user is not in the channel");
            throw YC.error("[".concat(this._clientId, "] can not subscribe ").concat(e2.uid, ", this user is not in the channel")), t3;
          }
          if (!e2.hasAudio && !e2.hasVideo) {
            const t3 = new VI(xT.INVALID_REMOTE_USER, "user is not published");
            throw YC.error("[".concat(this._clientId, "] can not subscribe ").concat(e2.uid, ", user is not published")), t3;
          }
          if (!i2 && ("audio" === t2 && !e2.hasAudio || "video" === t2 && !e2.hasVideo)) {
            const i3 = new VI(xT.REMOTE_USER_IS_NOT_PUBLISHED);
            throw YC.error("[".concat(this._clientId, "] can not subscribe ").concat(e2.uid, " with mediaType ").concat(t2, ", remote track is not published")), i3;
          }
          const n2 = await this._subscribeMutex.lock();
          YC.info("[".concat(this._clientId, "] subscribe user ").concat(e2.uid, ", mediaType: ").concat(t2));
          try {
            if (await this._p2pChannel.hasRemoteMediaWithLock(e2, t2))
              await this._p2pChannel.unmuteRemote(e2, t2);
            else
              try {
                const i4 = "audio" === t2 ? e2._audioSSRC : e2._videoSSRC, n3 = "audio" === t2 ? e2._audioMid : e2._videoMid;
                this.store.subscribe(e2.uid, t2, Date.now()), this._p2pChannel instanceof ak && await this._p2pChannel.subscribe(e2, t2, i4, n3);
              } catch (e3) {
                throw e3;
              }
            YC.info("[".concat(this._clientId, "] subscribe success user ").concat(e2.uid, ", mediaType: ").concat(t2)), this._defaultStreamFallbackType && this.setStreamFallbackOption(e2.uid, this._defaultStreamFallbackType).catch((e3) => {
              YC.warning("[".concat(this._clientId, "] auto set fallback failed"), e3);
            });
            const i3 = "audio" === t2 ? e2._audioTrack : e2._videoTrack;
            if (!i3)
              throw new VI(xT.UNEXPECTED_ERROR, "can not find remote track in user object");
            return i3;
          } catch (t3) {
            throw YC.error("[".concat(this._clientId, "] subscribe user ").concat(e2.uid, " error"), t3), t3;
          } finally {
            n2();
          }
        }
        async _subscribe(e2, t2, i2) {
          if (this._p2pChannel instanceof ak)
            return this._p2pSubscribe(e2, t2);
          if (BT(t2, "mediaType", ["audio", "video"]), !this._joinInfo)
            throw new VI(xT.INVALID_OPERATION, "Can't subscribe stream, not joined");
          if ("CONNECTED" !== this.connectionState && "RECONNECTING" !== this.connectionState)
            throw new VI(xT.INVALID_OPERATION, "Can't subscribe stream in ".concat(this.connectionState, " state"));
          if (!this._users.find((t3) => t3 === e2)) {
            const t3 = new VI(xT.INVALID_REMOTE_USER, "user is not in the channel");
            throw YC.error("[".concat(this._clientId, "] can not subscribe ").concat(e2.uid, ", this user is not in the channel")), t3;
          }
          if (!e2.hasAudio && !e2.hasVideo) {
            const t3 = new VI(xT.INVALID_REMOTE_USER, "user is not published");
            throw YC.error("[".concat(this._clientId, "] can not subscribe ").concat(e2.uid, ", user is not published")), t3;
          }
          if (!(i2 || ("audio" !== t2 || e2.hasAudio && void 0 !== e2._audioSSRC) && ("video" !== t2 || e2.hasVideo && void 0 !== e2._videoSSRC))) {
            const i3 = new VI(xT.REMOTE_USER_IS_NOT_PUBLISHED);
            throw YC.error("[".concat(this._clientId, "] can not subscribe ").concat(e2.uid, " with mediaType ").concat(t2, ", remote track is not published")), i3;
          }
          let n2 = "audio" === t2 ? e2._audioSSRC : e2._videoSSRC, s2 = "audio" === t2 ? e2._audioOrtc : e2._videoOrtc, r2 = "video" === t2 ? e2._rtxSsrcId : void 0, o2 = { stream_type: "audio" === t2 ? hv.AUDIO : hv.VIDEO, ssrcId: n2 };
          const a2 = await this._subscribeMutex.lock();
          YC.info("[".concat(this._clientId, "] subscribe user ").concat(e2.uid, ", mediaType: ").concat(t2));
          try {
            if (await this._p2pChannel.hasRemoteMediaWithLock(e2, t2))
              await this._p2pChannel.unmuteRemote(e2, t2);
            else
              try {
                const i4 = "audio" === t2 ? e2._audioSSRC : e2._videoSSRC;
                void 0 !== i4 && i4 !== n2 && (n2 = i4, s2 = "audio" === t2 ? e2._audioOrtc : e2._videoOrtc, r2 = "video" === t2 ? e2._rtxSsrcId : void 0, o2 = { stream_type: "audio" === t2 ? hv.AUDIO : hv.VIDEO, ssrcId: n2 }), TP.markSubscribeStart(this.store.clientId, n2), this.store.subscribe(e2.uid, t2, Date.now()), await this._p2pChannel.subscribe(e2, t2, n2, r2, s2);
                try {
                  await this._gateway.subscribe(e2.uid, o2, true);
                } catch (i5) {
                  if ((null == i5 ? void 0 : i5.code) !== xT.WS_ABORT)
                    throw await this._p2pChannel.unsubscribe(e2, t2), i5;
                  await this._p2pChannel.unsubscribe(e2, t2, true), this._p2pChannel.setPendingRemoteMedia(e2, t2);
                }
                this.store.subscribe(e2.uid, t2, void 0, Date.now()), this._p2pChannel.reportSubscribeEvent(true, null, e2, t2);
              } catch (i4) {
                throw this._p2pChannel.reportSubscribeEvent(false, null == i4 ? void 0 : i4.code, e2, t2), i4;
              }
            YC.info("[".concat(this._clientId, "] subscribe success user ").concat(e2.uid, ", mediaType: ").concat(t2)), this._defaultStreamFallbackType && this.setStreamFallbackOption(e2.uid, this._defaultStreamFallbackType).catch((e3) => {
              YC.warning("[".concat(this._clientId, "] auto set fallback failed"), e3);
            });
            const i3 = "audio" === t2 ? e2._audioTrack : e2._videoTrack;
            if (!i3)
              throw new VI(xT.UNEXPECTED_ERROR, "can not find remote track in user object");
            return i3;
          } catch (t3) {
            throw YC.error("[".concat(this._clientId, "] subscribe user ").concat(e2.uid, " error"), t3), t3;
          } finally {
            a2();
          }
        }
        async massSubscribe(e2) {
          if (HT(e2, "subscribeList"), !this._joinInfo)
            throw new VI(xT.INVALID_OPERATION, "Can't subscribe stream, not joined");
          if ("CONNECTED" !== this.connectionState && "RECONNECTING" !== this.connectionState)
            throw new VI(xT.INVALID_OPERATION, "Can't subscribe stream in ".concat(this.connectionState, " state"));
          const t2 = Date.now(), i2 = /* @__PURE__ */ new Map(), n2 = await this._subscribeMutex.lock();
          YC.info("[".concat(this._clientId, "]start massSubscribe user ").concat(e2.map((e3) => {
            let { user: t3, mediaType: i3 } = e3;
            return "user: ".concat(null == t3 ? void 0 : t3.uid, ", mediaType: ").concat(i3);
          }).join("; ")));
          const s2 = (e2 = [...e2]).map((e3) => {
            let { user: t3, mediaType: i3 } = e3;
            return { user: t3, mediaType: i3 };
          }), r2 = await this._p2pChannel.globalLock();
          try {
            var o2;
            for (let t3 = e2.length - 1; t3 >= 0; t3--) {
              const n3 = e2[t3], { user: r3, mediaType: o3 } = n3;
              if (BT(o3, "mediaType", ["audio", "video"]), !r3) {
                const e3 = new VI(xT.INVALID_PARAMS, "user property does not exist in subscribeList item");
                throw YC.error("[".concat(this._clientId, "] user property does not exist in subscribeList item")), e3;
              }
              if (!this._users.find((e3) => e3 === r3)) {
                const i3 = new VI(xT.INVALID_REMOTE_USER, "user is not in the channel");
                YC.error("[".concat(this._clientId, "] can not massSubscribe ").concat(r3.uid, ", this user is not in the channel")), s2[t3].error = i3, e2.splice(t3, 1);
                continue;
              }
              if ("audio" === o3 && (!r3.hasAudio || void 0 === r3._audioSSRC) || "video" === o3 && (!r3.hasVideo || void 0 === r3._videoSSRC)) {
                const i3 = new VI(xT.REMOTE_USER_IS_NOT_PUBLISHED);
                YC.error("[".concat(this._clientId, "] can not subscribe ").concat(r3.uid, " with mediaType ").concat(o3, ", remote user is not published")), s2[t3].error = i3, e2.splice(t3, 1);
                continue;
              }
              const a3 = nv.Video | nv.LwoVideo, c2 = i2.get(r3);
              if (c2) {
                if ("video" === o3 ? c2 & a3 : c2 & nv.Audio) {
                  e2.splice(t3, 1), YC.warning("[".concat(this._clientId, "] repeat massSubscribe user:").concat(r3.uid, ", mediaType:").concat(o3, " twice"));
                  continue;
                }
                i2.set(r3, c2 | ("video" === o3 ? a3 : nv.Audio));
              } else
                i2.set(r3, "video" === o3 ? a3 : nv.Audio);
            }
            for (let t3 = e2.length - 1; t3 >= 0; t3--) {
              const n3 = e2[t3], { user: s3, mediaType: r3 } = n3, o3 = nv.Video | nv.LwoVideo;
              if (this._p2pChannel.hasRemoteMedia(s3, r3)) {
                await this._p2pChannel.unmuteRemoteNoLock(s3, r3);
                const n4 = i2.get(s3);
                i2.set(s3, "video" === r3 ? n4 ^ o3 : n4 ^ nv.Audio), e2.splice(t3, 1);
              }
            }
            this.store.massSubscribe(e2.map((e3) => ({ userId: e3.user.uid, type: e3.mediaType })), t2);
            const a2 = cS(o2 = Array.from(i2.entries())).call(o2, (e3, t3) => {
              let [i3, n3] = t3;
              if (0 === n3)
                return e3;
              const s3 = { stream_id: i3.uid, stream_type: n3 };
              return n3 & nv.Audio && (s3.audio_ssrc = i3._audioSSRC), n3 & nv.Video && (s3.video_ssrc = i3._videoSSRC), e3.push(s3), e3;
            }, []);
            try {
              e2.length > 0 && await this._p2pChannel.massSubscribeNoLock(e2.map((e3) => {
                let { user: t3, mediaType: i4 } = e3;
                return { user: t3, mediaType: i4, ssrcId: i4 === hv.VIDEO ? t3._videoSSRC : t3._audioSSRC, rtxSsrcId: i4 === hv.VIDEO ? t3._rtxSsrcId : void 0 };
              }));
              const i3 = /* @__PURE__ */ new Map();
              if (a2.length > 0) {
                const e3 = await this._gateway.subscribeAll(a2, true);
                ((null == e3 ? void 0 : e3.users) || []).forEach((e4) => {
                  let { stream_id: t3, video_error_code: n3, audio_error_code: s3, error_code: r3 } = e4;
                  (n3 || s3 || r3) && i3.set(t3, { video_error_code: n3, audio_error_code: s3, error_code: r3 });
                });
              }
              if (Array.from(i3.entries()).length > 0) {
                const e3 = Array.from(i3.entries()).map((e4) => {
                  let t3, [i4, n3] = e4;
                  n3.error_code || n3.video_error_code && n3.audio_error_code ? t3 = void 0 : n3.video_error_code ? t3 = hv.VIDEO : n3.audio_error_code && (t3 = hv.AUDIO);
                  return { user: this.remoteUsers.find((e5) => e5.uid === i4), mediaType: t3 };
                });
                await this._p2pChannel.massUnsubscribeNoLock(e3);
              }
              for (const e3 of s2) {
                const t3 = i3.get(e3.user.uid);
                if (t3) {
                  const i4 = t3.error_code || "audio" === e3.mediaType && t3.audio_error_code || "video" === e3.mediaType && t3.video_error_code;
                  if (i4) {
                    const t4 = Fv(i4);
                    YC.error("user:".concat(e3.user.uid, " mediaType:").concat(e3.mediaType, " has massSubscribe error ").concat(t4.desc)), e3.error = new VI(xT.SUBSCRIBE_FAILED, "code ".concat(i4, ": ").concat(t4.desc));
                  }
                }
                e3.error || ("video" === e3.mediaType ? e3.track = e3.user.videoTrack : e3.track = e3.user.audioTrack);
              }
              return this.store.massSubscribe(s2.filter((e3) => !e3.error).map((e3) => ({ userId: e3.user.uid, type: e3.mediaType })), void 0, Date.now()), s2.forEach((e3) => {
                var i4;
                rI.subscribe(this.store.sessionId, { succ: !!e3.error, ec: (null === (i4 = e3.error) || void 0 === i4 ? void 0 : i4.code) || null, video: e3.mediaType === hv.VIDEO, audio: e3.mediaType === hv.AUDIO, peerid: e3.user.uid, subscribeRequestid: e3.mediaType === hv.VIDEO ? e3.user._videoSSRC : e3.user._audioSSRC, p2pid: this.store.p2pId, eventElapse: Math.floor(performance.now() - t2) }, true);
              }), YC.info("[".concat(this._clientId, "] massSubscribe success ").concat(e2.map((e3) => {
                let { user: t3, mediaType: i4 } = e3;
                return "user: ".concat(null == t3 ? void 0 : t3.uid, ", mediaType: ").concat(i4);
              }).join("; "))), s2;
            } catch (t3) {
              throw await this._p2pChannel.massUnsubscribeNoLock(e2), t3;
            }
          } finally {
            r2(), n2();
          }
        }
        async unsubscribe(e2, t2, i2) {
          if (t2 || this.store.useP2P) {
            if ("datachannel" === t2)
              return this._unsubscribeDataChannel(e2, i2);
          } else
            await this._unsubscribeDataChannel(e2, i2);
          if (t2 && BT(t2, "mediaType", ["audio", "video"]), !this._joinInfo)
            throw new VI(xT.INVALID_OPERATION, "Can't unsubscribe stream, haven't joined yet!");
          if (!this._users.find((t3) => t3 === e2)) {
            const t3 = new VI(xT.INVALID_REMOTE_USER, "user is not in the channel");
            throw YC.error("[".concat(this._clientId, "] can not unsubscribe ").concat(e2.uid, ", user is not in the channel")), t3;
          }
          YC.info("[".concat(this._clientId, "] unsubscribe uid: ").concat(e2.uid, ", mediaType: ").concat(t2));
          const n2 = await this._subscribeMutex.lock();
          try {
            if (this._p2pChannel instanceof ak)
              await this._p2pChannel.unsubscribe(e2, t2);
            else {
              const i3 = await this._p2pChannel.unsubscribe(e2, t2);
              i3 && await this._gateway.unsubscribe(i3, e2.uid), t2 && "audio" !== t2 || (e2._audio_pre_subscribed = false), t2 && "video" !== t2 || (e2._video_pre_subscribed = false), e2._is_pre_created && vg(this._users, e2), YC.info("[".concat(this._clientId, "] unsubscribe success uid: ").concat(e2.uid, ", mediaType: ").concat(t2));
            }
          } catch (t3) {
            if (t3.code === xT.DISCONNECT_P2P)
              return void YC.warning("disconnecting p2p, abort unsubscribe request.");
            throw YC.error("[".concat(this._clientId, "] unsubscribe user ").concat(e2.uid, " error"), t3.toString()), t3;
          } finally {
            n2();
          }
        }
        async _unsubscribeDataChannel(e2, t2) {
          if (t2 && jT(t2, "id", 0, 65535, true), !this._joinInfo)
            throw new VI(xT.INVALID_OPERATION, "Can't unsubscribe datachannel, haven't joined yet!");
          if (!this._users.find((t3) => t3 === e2)) {
            const t3 = new VI(xT.INVALID_REMOTE_USER, "user is not in the channel");
            throw YC.error("[".concat(this._clientId, "] can not unsubscribe ").concat(e2.uid, ", user is not in the channel")), t3;
          }
          let i2;
          if ("number" == typeof t2) {
            const n2 = e2._dataChannels.find((e3) => e3.id === t2);
            n2 && (i2 = [n2]);
          } else
            i2 = e2._dataChannels;
          if (void 0 === i2) {
            const i3 = new VI(xT.REMOTE_USER_IS_NOT_PUBLISHED);
            throw YC.error("[".concat(this._clientId, "] can not unsubscribe ").concat(e2.uid, " with channelId ").concat(t2, ", remote datachannel is not published")), i3;
          }
          YC.info("[".concat(this._clientId, "] unsubscribe uid: ").concat(e2.uid, ", mediaType: datachannel, ids: ").concat(i2.map((e3) => e3.id)));
          try {
            const t3 = await this._p2pChannel.unsubscribeDataChannel(e2, i2);
            t3 && await this._gateway.unsubscribeDataChannel(t3, e2.uid), YC.info("[".concat(this._clientId, "] unsubscribe datachannel success uid: ").concat(e2.uid, ", mediaType: datachannel, ids: ").concat(t3));
          } catch (t3) {
            if (t3.code === xT.DISCONNECT_P2P)
              return void YC.warning("disconnecting p2p, abort unsubscribe request.");
            throw YC.error("[".concat(this._clientId, "] unsubscribe user ").concat(e2.uid, " error"), t3.toString()), t3;
          }
        }
        async massUnsubscribe(e2) {
          if (HT(e2, "unsubscribeList"), !this._joinInfo)
            throw new VI(xT.INVALID_OPERATION, "Can't unsubscribeAll stream, haven't joined yet!");
          YC.info("[".concat(this._clientId, "] start massUnsubscribe ").concat(e2.map((e3) => {
            let { user: t3, mediaType: i2 } = e3;
            return "user: ".concat(null == t3 ? void 0 : t3.uid, ", mediaType: ").concat(i2, ";");
          }).join())), e2 = [...e2];
          const t2 = /* @__PURE__ */ new Map();
          for (let i2 = e2.length - 1; i2 >= 0; i2--) {
            const { user: n2, mediaType: s2 } = e2[i2];
            if (!n2) {
              const e3 = new VI(xT.INVALID_PARAMS, "user property does not exist in unsubscribeList item");
              throw YC.error("[".concat(this._clientId, "] user property does not exist in unsubscribeList item")), e3;
            }
            BT(s2, "mediaType", ["video", "audio", void 0]);
            if (!this._users.find((e3) => e3 === n2)) {
              YC.warning("[".concat(this._clientId, "] can not unsubscribe ").concat(n2.uid, ", user is not in the channel")), e2.splice(i2, 1);
              continue;
            }
            const r2 = nv.Video | nv.LwoVideo;
            if (t2.has(n2)) {
              const o2 = t2.get(n2);
              let a2;
              switch (s2) {
                case "video":
                  a2 = o2 & r2;
                  break;
                case "audio":
                  a2 = o2 & nv.Audio;
                  break;
                default:
                  a2 = o2 & (nv.Audio | r2);
              }
              if (a2) {
                YC.warning("[".concat(this._clientId, "] repeat massUnsubscribe user:").concat(n2.uid, ",mediaType:").concat(s2, " twice.")), e2.splice(i2, 1);
                continue;
              }
              s2 ? "audio" === s2 ? t2.set(n2, o2 | nv.Audio) : "video" === s2 && t2.set(n2, o2 | r2) : t2.set(n2, o2 | nv.Audio | r2);
            } else
              s2 ? "audio" === s2 ? t2.set(n2, nv.Audio) : "video" === s2 && t2.set(n2, r2) : t2.set(n2, nv.Audio | r2);
          }
          try {
            const t3 = await this._p2pChannel.massUnsubscribe(e2);
            t3 && await this._gateway.massUnsubscribe(t3), YC.info("[".concat(this._clientId, "] massUnsubscribe success ").concat(e2.map((e3) => {
              let { user: t4, mediaType: i2 } = e3;
              return "user: ".concat(null == t4 ? void 0 : t4.uid, ", mediaType: ").concat(i2, ";");
            }).join()));
          } catch (e3) {
            if (e3.code === xT.DISCONNECT_P2P)
              return void YC.warning("[".concat(this._clientId, "] disconnecting p2p, abort unsubscribe request."));
            throw YC.error("[".concat(this._clientId, "] massUnsubscribe error"), e3.toString()), e3;
          }
        }
        async setLowStreamParameter(e2) {
          !function(e3) {
            if (!e3)
              throw new VT(xT.INVALID_PARAMS);
            KT(e3.width) || GT(e3.width, "streamParameter.width"), KT(e3.height) || GT(e3.height, "streamParameter.height"), KT(e3.framerate) || GT(e3.framerate, "streamParameter.framerate"), KT(e3.bitrate) || jT(e3.bitrate, "streamParameter.bitrate");
          }(e2), (!e2.width && e2.height || e2.width && !e2.height) && YC.warning("[".concat(this._clientId, "] The width and height parameters take effect only when both are set")), YC.info("[".concat(this._clientId, "] set low stream parameter to"), JSON.stringify(e2));
          const t2 = this._configDistribute.getLowStreamConfigDistribute();
          if (t2 && t2.bitrate && e2.bitrate && t2.bitrate < e2.bitrate && (e2.bitrate = t2.bitrate), this._lowStreamParameter = e2, this._isDualStreamEnabled)
            return this._p2pChannel.updateVideoStreamParameter(e2, Ev.LocalVideoLowTrack);
        }
        async enableDualStream() {
          if (!wA().supportDualStream)
            throw rI.streamSwitch(this._sessionId, { lts: Date.now(), isdual: true, succ: false }), new VI(xT.NOT_SUPPORTED, "Your browser is not support dual stream");
          if (this._isDualStreamEnabled)
            throw new VI(xT.INVALID_OPERATION, "Dual stream is already enabled");
          if (this._p2pChannel.canPublishLowStream())
            try {
              await this._publishLowStream();
            } catch (e2) {
              throw rI.streamSwitch(this._sessionId, { lts: Date.now(), isdual: true, succ: false }), e2;
            }
          this._isDualStreamEnabled = true, rI.streamSwitch(this._sessionId, { lts: Date.now(), isdual: true, succ: true }), YC.info("[".concat(this._clientId, "] enable dual stream"));
        }
        async disableDualStream() {
          if (this._isDualStreamEnabled) {
            if (!this._joinInfo)
              throw new VI(xT.INVALID_OPERATION, "Can't publish stream, haven't joined yet!");
            if (this._p2pChannel.getLocalMedia(Ev.LocalVideoLowTrack))
              try {
                const e2 = await this._p2pChannel.unpublishLowStream();
                e2 && await this._gateway.unpublish(e2, this._joinInfo.stringUid || this._joinInfo.uid);
              } catch (e2) {
                throw rI.streamSwitch(this._sessionId, { lts: Date.now(), isdual: false, succ: false }), e2;
              }
            this._isDualStreamEnabled = false, rI.streamSwitch(this._sessionId, { lts: Date.now(), isdual: false, succ: true }), YC.info("[".concat(this._clientId, "] disable dual stream"));
          }
        }
        async setClientRole(e2, t2) {
          if (function(e3) {
            BT(e3, "role", ["audience", "host"]);
          }(e2), t2 && mg(t2), "rtc" === this.mode || "p2p" === this.mode)
            throw YC.warning("[".concat(this._clientId, "]").concat(this.mode, " mode can not use setClientRole")), new VI(xT.INVALID_OPERATION, "".concat(this.mode, " mode can not use setClientRole"));
          if (t2 && t2.level && "host" === e2)
            throw new VI(xT.INVALID_OPERATION, "host mode can not set audience latency level");
          if ("audience" === e2 && this._p2pChannel.hasLocalMedia())
            throw new VI(xT.INVALID_OPERATION, "can not set client role to audience when publishing stream");
          await this._gateway.setClientRole(e2, t2), this._config.role = e2, YC.info("[".concat(this._clientId, "] set client role to ").concat(e2, ", level: ").concat(t2 && t2.level));
        }
        getRemoteInboundOffset() {
          var e2;
          const t2 = null === (e2 = this._p2pChannel.getStats()) || void 0 === e2 ? void 0 : e2.audioSend[0];
          if (!t2 || !t2.timestamp)
            return 0;
          const i2 = t2.timestamp - Date.now();
          return Math.abs(i2) > 1e3 + t2.rttMs + 100 ? this.ntpAlignErrorCount += 1 : this.ntpAlignErrorCount = 0, this.ntpAlignErrorCount >= 3 ? i2 : 0;
        }
        getNtpWallTimeInMs() {
          return "visible" === document.visibilityState && (this.remoteInboundOffset = this.getRemoteInboundOffset()), this.remoteInboundOffset + Date.now() + this._gateway.ntpOffset;
        }
        setProxyServer(e2, t2) {
          if (WT(e2, "proxyServer"), !t2) {
            if ("DISCONNECTED" !== this.connectionState)
              throw new VI(xT.INVALID_OPERATION, "Set proxy server before join channel");
            if ("disabled" !== this._cloudProxyServerMode || this._useLocalAccessPoint)
              throw new VI(xT.INVALID_OPERATION, "You have already set the proxy");
          }
          this._proxyServer = e2, rI.setProxyServer(this._proxyServer), YC.setProxyServer(this._proxyServer), YC.info("[".concat(this._clientId, "] Set proxy server ").concat(t2 ? "by initialize call" : "", " success."));
        }
        setTurnServer(e2, t2) {
          if (Array.isArray(e2) || (e2 = [e2]), !t2) {
            if ("DISCONNECTED" !== this.connectionState)
              throw new VI(xT.INVALID_OPERATION, "Set turn server before join channel");
            if ("disabled" !== this._cloudProxyServerMode || this._useLocalAccessPoint)
              throw new VI(xT.INVALID_OPERATION, "You have already set the proxy");
          }
          if (_g(e2))
            return this._turnServer = { servers: e2, mode: "original-manual" }, void YC.info("[".concat(this._clientId, "] Set original turnserver ").concat(t2 ? "by initialize call" : "", " success: ").concat(e2.map((e3) => e3.urls).join(","), "."));
          e2.forEach((e3) => Eg(e3)), this._turnServer = { servers: e2, mode: "manual" }, YC.info("[".concat(this._clientId, "] Set turnserver ").concat(t2 ? "by initialize call" : "", " success."));
        }
        setLicense(e2) {
          if ("DISCONNECTED" !== this.connectionState) {
            throw new VI(xT.INVALID_OPERATION, "you should set license before join channel");
          }
          if (WT(e2, "license", 32, 32), !/^[A-Za-z\d]+$/.test(e2))
            throw new VI(xT.INVALID_PARAMS, "license should only contains characters from A-Z a-z 0-9");
          this._license = e2, YC.info("[".concat(this._clientId, "] set license success"), e2);
        }
        startProxyServer(e2) {
          if ("DISCONNECTED" !== this.connectionState)
            throw new VI(xT.INVALID_OPERATION, "Start proxy server before join channel");
          if (this._proxyServer || "manual" === this._turnServer.mode || this._useLocalAccessPoint)
            throw new VI(xT.INVALID_OPERATION, "You have already set the proxy");
          const t2 = [3, 4, 5];
          let i2;
          switch (void 0 === e2 && (e2 = 3), e2) {
            case 1:
            case 2:
              throw new VI(xT.NOT_SUPPORTED, "proxy mode 1/2 has been deprecated and not supported.");
            case 3:
              i2 = "proxy3";
              break;
            case 4:
              i2 = "proxy4";
              break;
            case 5:
              i2 = "proxy5";
              break;
            default:
              throw new VI(xT.INVALID_PARAMS, "proxy server mode must be ".concat(t2.join("|")));
          }
          this._cloudProxyServerMode = i2, this.store.cloudProxyServerMode = i2, YC.info("[".concat(this._clientId, "] set cloud proxy server mode to"), this._cloudProxyServerMode);
        }
        stopProxyServer() {
          if ("DISCONNECTED" !== this.connectionState)
            throw new VI(xT.INVALID_OPERATION, "Stop proxy server after leave channel");
          rI.setProxyServer(), YC.setProxyServer(), this._cloudProxyServerMode = "disabled", this.store.cloudProxyServerMode = "disabled", YC.info("[".concat(this._clientId, "] set cloud proxy server mode to"), this._cloudProxyServerMode), this._proxyServer = void 0, this._turnServer = { mode: "auto", servers: [] };
        }
        setLocalAccessPointsV2(e2) {
          if (!e2.accessPoints)
            throw new VI(xT.INVALID_PARAMS, "accessPoints is required.");
          HT(e2.accessPoints.serverList, "accessPoints.serverList"), WT(e2.accessPoints.domain, "accessPoints.domain");
          const t2 = (e3, t3) => {
            jT(e3, t3, 0, 65535, true);
          };
          let i2 = 443;
          if (e2.accessPoints.port && (t2(e2.accessPoints.port, "accessPoints.port"), i2 = e2.accessPoints.port), this._proxyServer || "disabled" !== this._cloudProxyServerMode)
            throw new VI(xT.INVALID_OPERATION, "set local access point failed, You have already set the cloud proxy");
          DC("CLOSE_AFB_FOR_LOCAL_AP") && (NC("JOIN_WITH_FALLBACK_SIGNAL_PROXY", false), NC("JOIN_WITH_FALLBACK_MEDIA_PROXY", false));
          const n2 = /^((\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.){3}(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$/, s2 = e2.accessPoints.domain, r2 = e2.accessPoints.serverList.map((e3) => n2.test(e3) ? "".concat(e3.replace(/\./g, "-"), ".").concat(s2) : e3), o2 = r2.map((e3) => "".concat(e3, ":").concat(i2));
          this._useLocalAccessPoint = true, this._setLocalAPVersion = 2, NC("WEBCS_DOMAIN", o2), NC("WEBCS_DOMAIN_BACKUP_LIST", o2), NC("GATEWAY_DOMAINS", [s2]), e2.report && e2.report.hostname && Array.isArray(e2.report.hostname) && e2.report.hostname.length ? (HT(e2.report.hostname, "report.hostname"), NC("EVENT_REPORT_DOMAIN", e2.report.hostname[0]), NC("EVENT_REPORT_BACKUP_DOMAIN", e2.report.hostname[1] || e2.report.hostname[0])) : (NC("EVENT_REPORT_DOMAIN", r2[0]), NC("EVENT_REPORT_BACKUP_DOMAIN", r2[1] || r2[0]));
          let a2 = 6443;
          e2.report && e2.report.port && (t2(e2.report.port, "report.port"), a2 = e2.report.port), NC("STATS_COLLECTOR_PORT", a2), e2.report ? NC("ENABLE_EVENT_REPORT", true) : NC("ENABLE_EVENT_REPORT", false);
          let c2 = "";
          e2.log && e2.log.hostname && Array.isArray(e2.log.hostname) && e2.log.hostname.length ? (HT(e2.log.hostname, "log.hostname"), c2 = e2.log.hostname[0]) : c2 = r2[0];
          let d2 = 6444;
          e2.log && e2.log.port && (t2(e2.log.port, "log.port"), d2 = e2.log.port), NC("LOG_UPLOAD_SERVER", "".concat(c2, ":").concat(d2));
          let l2 = [];
          e2.cds && e2.cds.hostname && Array.isArray(e2.cds.hostname) && e2.cds.hostname.length ? (HT(e2.cds.hostname, "cds.hostname"), l2 = e2.cds.hostname) : l2 = r2;
          let u2 = 443;
          e2.cds && e2.cds.port && (t2(e2.cds.port, "cds.port"), u2 = e2.cds.port), NC("CDS_AP", l2.map((e3) => "".concat(e3, ":").concat(u2))), e2.cds ? NC("ENABLE_CONFIG_DISTRIBUTE", true) : NC("ENABLE_CONFIG_DISTRIBUTE", false), YC.info("set local access point v2 success");
        }
        setLocalAccessPoints(e2, t2) {
          if (HT(e2, "serverList"), WT(t2, "domain"), this._proxyServer || "disabled" !== this._cloudProxyServerMode)
            throw new VI(xT.INVALID_OPERATION, "set local access point failed, You have already set the cloud proxy");
          const i2 = /^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$/;
          e2 = e2.map((e3) => i2.test(e3) ? "".concat(e3.replace(/\./g, "-"), ".").concat(t2) : e3), this._useLocalAccessPoint = true, this._setLocalAPVersion = 1, NC("WEBCS_DOMAIN", e2), NC("WEBCS_DOMAIN_BACKUP_LIST", e2), NC("GATEWAY_DOMAINS", [t2]), NC("EVENT_REPORT_DOMAIN", e2[0]), NC("EVENT_REPORT_BACKUP_DOMAIN", e2[1] || e2[0]), NC("LOG_UPLOAD_SERVER", "".concat(e2[0], ":6444")), YC.info("[".concat(this._clientId, "] set local access point success"));
        }
        async setRemoteDefaultVideoStreamType(e2) {
          if (BT(e2, "streamType", [0, 1]), this._remoteDefaultVideoStreamType = e2, this._joinInfo)
            try {
              await this._gateway.setDefaultRemoteVideoStreamType(e2), this._joinInfo.defaultVideoStream = this._remoteDefaultVideoStreamType;
            } catch (e3) {
              throw YC.error("[".concat(this._clientId, "] set default remote video stream type error"), e3.toString()), e3;
            }
          else
            YC.debug("[".concat(this._clientId, "] haven't joined yet, cache remoteDefaultVideoStreamType ").concat(e2));
        }
        async setRemoteVideoStreamType(e2, t2) {
          BT(t2, "streamType", [0, 1]);
          try {
            await this._gateway.setRemoteVideoStreamType(e2, t2), setTimeout(() => {
              const t3 = this._users.find((t4) => t4.uid === e2);
              t3 && t3.videoTrack && t3.videoTrack.updateMediaStreamTrackResolution();
            }, 2e3);
          } catch (e3) {
            throw YC.error("[".concat(this._clientId, "] set remote video stream type error"), e3.toString()), e3;
          }
          YC.info("[".concat(this._clientId, "] set remote ").concat(e2, " video stream type to ").concat(t2)), this._remoteStreamTypeCacheMap.set(e2, t2);
        }
        async setStreamFallbackOption(e2, t2) {
          BT(t2, "fallbackType", [0, 1, 2]);
          try {
            await this._gateway.setStreamFallbackOption(e2, t2);
          } catch (e3) {
            throw YC.error("[".concat(this._clientId, "] set stream fallback option"), e3.toString()), e3;
          }
          YC.info("[".concat(this._clientId, "] set remote ").concat(e2, " stream fallback type to ").concat(t2)), this._streamFallbackTypeCacheMap.set(e2, t2);
        }
        setEncryptionConfig(e2, t2, i2) {
          !function(e3) {
            BT(e3, "encryptionMode", ["aes-128-xts", "aes-256-xts", "aes-128-ecb", "sm4-128-ecb", "aes-128-gcm", "aes-256-gcm", "aes-128-gcm2", "aes-256-gcm2", "none"]);
          }(e2), WT(t2, "secret");
          const n2 = ["aes-128-gcm2", "aes-256-gcm2"];
          if (bn(n2).call(n2, e2)) {
            if (!i2 || !(i2 instanceof Uint8Array && 32 === i2.length))
              throw new VI(xT.INVALID_PARAMS, "salt must be an Uint8Array and exactly equal to 32 bytes");
          } else if (i2)
            throw new VI(xT.INVALID_PARAMS, "current encrypt mode does not need salt");
          new RegExp(`^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*,.<>?/:;'"|{}\\[\\]])(?=.{8,})`).test(t2) || YC.warning("The secret is not strong:\n      The secret must contain at least 1 lowercase alphabetical character,\n      The secret must contain at least 1 uppercase alphabetical character,\n      The secret must contain at least 1 numeric character,\n      The secret must contain at least one special character,\n      The secret must be eight characters or longer.\n      "), this._encryptionMode = e2, this._encryptionSecret = t2, i2 && (this._encryptionSalt = Pg(i2));
        }
        async renewToken(e2) {
          if (WT(e2, "token", 1, 2047), !this._key || !this._joinInfo)
            throw new VI(xT.INVALID_OPERATION, "renewToken should not be called before user join");
          const t2 = this._key;
          this._key = e2, this._joinInfo && (this._joinInfo.token = e2);
          const i2 = await this._renewTokenMutex.lock();
          try {
            if (DC("USE_NEW_TOKEN")) {
              YC.debug("[".concat(this._clientId, "] start renew token with ticket from unilbs"));
              const t3 = await IA(this._joinInfo, this._axiosCancelSource.token, this._config.httpRetryConfig || Jg);
              YC.debug("[".concat(this._clientId, "] get ticket from unilbs success")), await this._gateway.renewToken({ token: e2, ticket: t3 });
            } else
              YC.debug("[".concat(this._clientId, "] start renew token without ticket")), await this._gateway.renewToken({ token: e2 });
            YC.debug("[".concat(this._clientId, "] renewToken success"));
          } catch (e3) {
            throw this._key = t2, this._joinInfo.token = t2, YC.error("[".concat(this._clientId, "] renewToken failed"), e3.toString()), e3;
          } finally {
            i2();
          }
        }
        enableAudioVolumeIndicator() {
          this._audioVolumeIndicationInterval ? YC.warning("you have already enabled audio volume indicator!") : this._audioVolumeIndicationInterval = window.setInterval(() => {
            const e2 = this._p2pChannel.getAudioLevels();
            this.safeEmit(dg.VOLUME_INDICATOR, e2);
          }, DC("AUDIO_VOLUME_INDICATION_INTERVAL") || 2e3);
        }
        getRTCStats() {
          const e2 = this._statsCollector.getRTCStats(), t2 = this._gateway.getInChannelInfo();
          return e2.Duration = Math.round(t2.duration / 1e3), e2;
        }
        async startLiveStreaming(e2, t2) {
          if (!t2) {
            if ("h264" !== this.codec)
              throw new VI(xT.LIVE_STREAMING_INVALID_RAW_STREAM, "raw streaming is only support h264");
            if (!this._p2pChannel.hasLocalMedia())
              throw new VI(xT.LIVE_STREAMING_INVALID_RAW_STREAM, "can not find stream to raw streaming");
          }
          if (this._liveRawStreamingClient && this._liveRawStreamingClient.hasUrl(e2) || this._liveTranscodeStreamingClient && this._liveTranscodeStreamingClient.hasUrl(e2))
            throw new VI(xT.LIVE_STREAMING_TASK_CONFLICT);
          const i2 = t2 ? AI.TRANSCODE : AI.RAW;
          return this._createLiveStreamingClient(i2).startLiveStreamingTask(e2, i2);
        }
        setLiveTranscoding(e2) {
          return this._createLiveStreamingClient(AI.TRANSCODE).setTranscodingConfig(e2);
        }
        async stopLiveStreaming(e2) {
          const t2 = [this._liveRawStreamingClient, this._liveTranscodeStreamingClient].filter((t3) => t3 && t3.hasUrl(e2));
          if (!t2.length)
            throw new VI(xT.INVALID_PARAMS, "can not find live streaming url to stop");
          await tT.all(t2.map((t3) => t3 && t3.stopLiveStreamingTask(e2)));
        }
        async addInjectStreamUrl(e2, t2) {
          if (!this._joinInfo)
            throw new VI(xT.INVALID_OPERATION, "can not addInjectStreamUrl, no joininfo");
          const i2 = this._createLiveStreamingClient(AI.INJECT);
          i2.setInjectStreamConfig(t2, 0), await i2.startLiveStreamingTask(e2, AI.INJECT);
        }
        async removeInjectStreamUrl() {
          var e2;
          const t2 = this._createLiveStreamingClient(AI.INJECT), i2 = Array.from(MI(e2 = t2.streamingTasks).call(e2)).find((e3) => e3.mode === AI.INJECT);
          if (!this._joinInfo || !i2)
            throw new VI(xT.INVALID_OPERATION, "can remove addInjectStreamUrl, no joininfo or inject task");
          await t2.stopLiveStreamingTask(i2.url);
        }
        async startChannelMediaRelay(e2) {
          gk(e2);
          const t2 = this._createChannelMediaRelayClient();
          await t2.startChannelMediaRelay(e2);
        }
        async updateChannelMediaRelay(e2) {
          gk(e2);
          const t2 = this._createChannelMediaRelayClient();
          await t2.updateChannelMediaRelay(e2);
        }
        async stopChannelMediaRelay() {
          const e2 = this._createChannelMediaRelayClient();
          await e2.stopChannelMediaRelay(), this._statsCollector.onStatsChanged && (this._statsCollector.onStatsChanged = void 0);
        }
        sendStreamMessage(e2) {
          let t2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          if (!this._joinInfo)
            throw new VI(xT.INVALID_OPERATION, "can not send data stream, not joined");
          if (("string" == typeof e2 || e2 instanceof Uint8Array) && (e2 = { payload: e2 }), "string" == typeof e2.payload) {
            const t3 = new TextEncoder();
            e2.payload = t3.encode(e2.payload);
          }
          if (new Blob([e2.payload]).size > 1024)
            throw new VI(xT.INVALID_PARAMS, "stream message out of range.");
          return this._gateway.signal.request(SI.DATA_STREAM, { payload: Pg(e2.payload), syncWithAudio: e2.syncWithAudio, sendTs: Date.now() - mU }, !t2);
        }
        sendMetadata(e2) {
          if (!this._joinInfo)
            throw new VI(xT.INVALID_OPERATION, "can not send metadata, not joined");
          if (new Blob([e2]).size > 1024)
            throw new VI(xT.METADATA_OUT_OF_RANGE);
          return this._gateway.signal.request(SI.SEND_METADATA, { session_id: this._joinInfo.sid, metadata: Pg(e2) });
        }
        async sendCustomReportMessage(e2) {
          if (Array.isArray(e2) || (e2 = [e2]), e2.forEach(zC), !this._joinInfo)
            throw new VI(xT.INVALID_OPERATION, "can not send custom report, not joined");
          await rI.sendCustomReportMessage(this._joinInfo.sid, e2);
        }
        getLocalAudioStats() {
          return this._statsCollector.getLocalAudioTrackStats();
        }
        getRemoteAudioStats() {
          return this._statsCollector.getRemoteAudioTrackStats();
        }
        getLocalVideoStats() {
          return this._statsCollector.getLocalVideoTrackStats();
        }
        getRemoteVideoStats() {
          return this._statsCollector.getRemoteVideoTrackStats();
        }
        getRemoteNetworkQuality() {
          return this._statsCollector.getRemoteNetworkQualityStats();
        }
        async pickSVCLayer(e2, t2) {
          BT(t2.spatialLayer, "spatialLayer", [0, 1, 2, 3]), BT(t2.temporalLayer, "temporalLayer", [0, 1, 2, 3]);
          try {
            await this._gateway.pickSVCLayer(e2, t2);
          } catch (e3) {
            throw YC.error("[".concat(this._clientId, "] pick SVC layer failed"), e3.toString()), e3;
          }
        }
        async setRTMConfig(e2) {
          const { apRTM: t2 = false, rtmFlag: i2 } = e2;
          if (FT(t2, "apRTM"), jT(i2, "rtmFlag", 0), this._rtmConfig.apRTM = t2, this._rtmConfig.rtmFlag = i2, YC.debug("[".concat(this._clientId, "] setRTMconfig ").concat(JSON.stringify(e2), " in ").concat(this.connectionState, " state")), ("CONNECTED" === this.connectionState || "RECONNECTING" === this.connectionState) && this._joinInfo)
            return this._joinInfo.apRTM = t2, this._joinInfo.rtmFlag = i2, this._gateway.setRTM2Flag(i2);
        }
        _reset() {
          if (YC.debug("[".concat(this._clientId, "] reset client")), this._axiosCancelSource.cancel(), this._axiosCancelSource = EC.CancelToken.source(), this._streamFallbackTypeCacheMap = /* @__PURE__ */ new Map(), this._remoteStreamTypeCacheMap = /* @__PURE__ */ new Map(), this._configDistribute.stopGetConfigDistribute(), this._joinInfo = void 0, this._proxyServer = void 0, this._defaultStreamFallbackType = void 0, this._sessionId = null, this.store.sessionId = null, this._statsCollector.reset(), this._key = void 0, this._appId = void 0, this._uid = void 0, this.store.uid = void 0, this._channelName = void 0, this._encryptionMode = "none", this._encryptionSecret = null, this._encryptionSalt = null, this._pendingPublishedUsers = [], this._users.forEach((e2) => {
            e2._audioTrack && e2._audioTrack._destroy(), e2._videoTrack && e2._videoTrack._destroy(), e2._dataChannels && (e2._dataChannels.forEach((e3) => e3._close()), e2._dataChannels.length = 0);
          }), this._users = [], this._audioVolumeIndicationInterval && (window.clearInterval(this._audioVolumeIndicationInterval), this._audioVolumeIndicationInterval = void 0), "fallback" === this._cloudProxyServerMode && (this._cloudProxyServerMode = "disabled", this.store.cloudProxyServerMode = "disabled"), this._p2pChannel.reset(), this._publishMutex = new Yg("client-publish"), this._subscribeMutex = new Yg("client-subscribe"), this._networkQualityInterval && (window.clearInterval(this._networkQualityInterval), this._networkQualityInterval = void 0), this._injectStreamingClient && (this._injectStreamingClient.terminate(), this._injectStreamingClient.removeAllListeners(), this._injectStreamingClient = void 0), this._liveRawStreamingClient && (this._liveRawStreamingClient.terminate(), this._liveRawStreamingClient.removeAllListeners(), this._liveRawStreamingClient = void 0), this._liveTranscodeStreamingClient && (this._liveTranscodeStreamingClient.terminate(), this._liveTranscodeStreamingClient.removeAllListeners(), this._liveTranscodeStreamingClient = void 0), this._channelMediaRelayClient && (this._channelMediaRelayClient.dispose(), this._channelMediaRelayClient = void 0), this._inspect)
            try {
              this._inspect.close(), this._inspect = void 0;
            } catch (e2) {
            }
          if (this._moderation)
            try {
              this.setImageModeration(false);
            } catch (e2) {
            }
        }
        _startSession(e2, t2) {
          var i2;
          const n2 = e2 || Vg();
          e2 ? YC.debug("[".concat(this._clientId, "] new Session ").concat(n2)) : YC.debug("[".concat(this._clientId, "] renewSession ").concat(this._sessionId, " => ").concat(n2));
          const s2 = e2 ? "" : this._sessionId || "";
          this._sessionId = n2, this.store.sessionId = n2;
          const r2 = { lts: (/* @__PURE__ */ new Date()).getTime(), mode: this.mode, stringUid: (null == t2 ? void 0 : t2.stringUid) || (null === (i2 = this._joinInfo) || void 0 === i2 ? void 0 : i2.stringUid), channelProfile: "live" === this.mode ? 1 : 0, channelMode: 0, isABTestSuccess: Number(this._configDistribute.isSuccess), lsid: s2, clientRole: "audience" === this.role ? 2 : 1 };
          t2 ? rI.sessionInit(this._sessionId, AU({ cname: t2.channel, appid: t2.appId }, r2)) : this._joinInfo ? rI.sessionInit(this._sessionId, AU({ cname: this._joinInfo.cname, appid: this._joinInfo.appId }, r2)) : this._gateway.joinInfo && rI.sessionInit(this._sessionId, AU({ cname: this._gateway.joinInfo.cname, appid: this._gateway.joinInfo.appId }, r2)), this._joinInfo && (this._joinInfo.sid = n2), this._gateway.joinInfo && (this._gateway.joinInfo.sid = n2);
        }
        async _publishHighStream(e2) {
          if (!this._joinInfo || void 0 === this._uid)
            throw new VI(xT.INVALID_OPERATION, "Can't publish stream, haven't joined yet!");
          if ("CONNECTED" !== this.connectionState && "RECONNECTING" !== this.connectionState)
            throw new VI(xT.INVALID_OPERATION, "can not publish stream in ".concat(this.connectionState, " state"));
          if ("auto" === this._turnServer.mode && DC("FORCE_TURN") && !DC("TURN_ENABLE_TCP") && !DC("TURN_ENABLE_UDP"))
            throw new VI(xT.UNEXPECTED_ERROR, "force TURN With No TURN Configuration");
          YC.debug("[".concat(this._clientId, "] publish high stream"));
          try {
            const i2 = await this._p2pChannel.publish(e2, this._isDualStreamEnabled, this._lowStreamParameter);
            if (this._p2pChannel instanceof ak) {
              const e3 = (await i2.next()).value;
              if (e3) {
                try {
                  await this._gateway.sendExtensionMessage(Ov.PUBLISH, e3, true);
                } catch (e4) {
                  throw i2.throw(e4), e4;
                }
                await i2.next();
              }
              this._p2pChannel.reportPublishEvent(true, null);
            } else {
              const n2 = (await i2.next()).value;
              if (n2) {
                var t2;
                let e3;
                try {
                  e3 = await this._gateway.publish(this._uid, n2, true);
                } catch (e4) {
                  if (e4.code !== xT.DISCONNECT_P2P)
                    throw i2.throw(e4), e4;
                }
                await i2.next((null === (t2 = e3) || void 0 === t2 ? void 0 : t2.ortc) || []);
              }
              this._p2pChannel.reportPublishEvent(true, null);
              for (const t3 of e2)
                t3 instanceof Nw && t3._encoderConfig && this._gateway.setVideoProfile(t3._encoderConfig), !t3.muted && t3.enabled || await this._p2pChannel.muteLocalTrack(t3);
            }
          } catch (t3) {
            if (this._p2pChannel.reportPublishEvent(false, null == t3 ? void 0 : t3.code, e2), (null == t3 ? void 0 : t3.code) === xT.WS_ABORT)
              return;
            throw t3;
          }
        }
        async _publishLowStream() {
          if (!this._joinInfo || void 0 === this._uid)
            throw new VI(xT.INVALID_OPERATION, "Can't publish stream, haven't joined yet!");
          if ("CONNECTED" !== this.connectionState && "RECONNECTING" !== this.connectionState)
            throw new VI(xT.INVALID_OPERATION, "can not publish stream in ".concat(this.connectionState, " state"));
          YC.debug("[".concat(this._clientId, "] publish low stream"));
          const e2 = this._configDistribute.getLowStreamConfigDistribute();
          e2 && e2.bitrate && (this._lowStreamParameter || (this._lowStreamParameter = { width: 160, height: 120, framerate: 15, bitrate: 50 }), this._lowStreamParameter && this._lowStreamParameter.bitrate && e2.bitrate < this._lowStreamParameter.bitrate && (this._lowStreamParameter.bitrate = e2.bitrate));
          try {
            const e3 = await this._p2pChannel.publishLowStream(this._lowStreamParameter), i2 = (await e3.next()).value;
            if (i2) {
              var t2;
              let n2;
              try {
                n2 = await this._gateway.publish(this._uid, i2, true);
              } catch (t3) {
                if (t3.code !== xT.DISCONNECT_P2P)
                  throw e3.throw(t3), t3;
              }
              e3.next((null === (t2 = n2) || void 0 === t2 ? void 0 : t2.ortc) || []), this._p2pChannel.reportPublishEvent(true, null, void 0, true);
            }
          } catch (e3) {
            if (this._p2pChannel.reportPublishEvent(false, null == e3 ? void 0 : e3.code, void 0, true), (null == e3 ? void 0 : e3.code) === xT.WS_ABORT)
              return;
            throw e3;
          }
        }
        _createLiveStreamingClient(e2) {
          if (!this._joinInfo || !this._appId) {
            return new VI(xT.INVALID_OPERATION, "can not create live streaming client, please join channel first").throw();
          }
          const t2 = () => new fk(this._joinInfo, this._config.websocketRetryConfig || Jg, this._config.httpRetryConfig || Jg), i2 = (e3) => {
            e3.onLiveStreamError = (e4, t3) => {
              rI.reportApiInvoke(this._sessionId, { name: rg.ON_LIVE_STREAM_ERROR, options: [e4, t3], tag: og.TRACER }).onSuccess(), this.safeEmit(dg.LIVE_STREAMING_ERROR, e4, t3);
            }, e3.onLiveStreamWarning = (e4, t3) => {
              rI.reportApiInvoke(this._sessionId, { name: rg.ON_LIVE_STREAM_WARNING, options: [e4, t3], tag: og.TRACER }).onSuccess(), this.safeEmit(dg.LIVE_STREAMING_WARNING, e4, t3);
            }, e3.on(qI.REQUEST_WORKER_MANAGER_LIST, (e4, t3, i3) => {
              if (!this._joinInfo)
                return i3(new VI(xT.INVALID_OPERATION, "can not find join info to get worker manager"));
              RA(e4, this._joinInfo, this._axiosCancelSource.token, Jg).then(t3).catch(i3);
            });
          };
          switch (e2) {
            case AI.RAW:
              return this._liveRawStreamingClient || (this._liveRawStreamingClient = t2(), i2(this._liveRawStreamingClient)), this._liveRawStreamingClient;
            case AI.TRANSCODE:
              return this._liveTranscodeStreamingClient || (this._liveTranscodeStreamingClient = t2(), i2(this._liveTranscodeStreamingClient)), this._liveTranscodeStreamingClient;
            case AI.INJECT:
              return this._injectStreamingClient || (this._injectStreamingClient = t2(), this._injectStreamingClient.on(qI.REQUEST_WORKER_MANAGER_LIST, (e3, t3, i3) => {
                if (!this._joinInfo)
                  return i3(new VI(xT.INVALID_OPERATION, "can not find join info to get worker manager"));
                RA(e3, this._joinInfo, this._axiosCancelSource.token, Jg).then(t3).catch(i3);
              }), this._injectStreamingClient.onInjectStatusChange = (e3, t3, i3) => {
                this.safeEmit(dg.INJECT_STREAM_STATUS, e3, t3, i3);
              }), this._injectStreamingClient;
          }
        }
        _createChannelMediaRelayClient() {
          if (!this._joinInfo) {
            return new VI(xT.INVALID_OPERATION, "can not create channel media relay client, please join channel first").throw();
          }
          if (!this._channelMediaRelayClient) {
            const { sendResolutionWidth: e2, sendResolutionHeight: t2 } = this.getLocalVideoStats(), i2 = { width: e2, height: t2 };
            this._channelMediaRelayClient = new Rk(this._joinInfo, this._clientId, this._config.websocketRetryConfig || Jg, this._config.httpRetryConfig || Jg, i2), this._channelMediaRelayClient.on("state", (e3) => {
              e3 === ZI.RELAY_STATE_FAILURE && this._channelMediaRelayClient && this._channelMediaRelayClient.dispose(), this.safeEmit(dg.CHANNEL_MEDIA_RELAY_STATE, e3);
            }), this._channelMediaRelayClient.on("event", (e3) => {
              this.safeEmit(dg.CHANNEL_MEDIA_RELAY_EVENT, e3);
            }), this._statsCollector.onStatsChanged = (e3, t3) => {
              var i3;
              "resolution" === e3 && (null === (i3 = this._channelMediaRelayClient) || void 0 === i3 || i3.setVideoProfile(t3));
            };
          }
          return this._channelMediaRelayClient;
        }
        _handleUpdateDataChannel(e2, t2) {
          const { added: i2, deleted: n2 } = e2, s2 = [];
          Array.isArray(i2) && i2.length > 0 && i2.forEach((e3) => {
            const { uid: i3, stream_id: n3, ordered: r2, max_retrans_times: o2, metadata: a2 } = e3, c2 = this._users.find((e4) => e4._uintid === i3);
            if (!c2)
              return void YC.error("[".concat(this._clientId, "] can not find target user!(on_add_data_channel)"));
            YC.debug("[".concat(this._clientId, "] data_channel added with uid ").concat(i3)), bn(s2).call(s2, c2) || s2.push(c2), c2._uintid || (c2._uintid = i3);
            if (!(-1 !== c2._dataChannels.findIndex((t3) => t3.id === e3.stream_id))) {
              const e4 = { id: n3, ordered: !!r2, maxRetransmits: o2, metadata: a2 }, i4 = new _P(e4);
              c2._dataChannels.push(i4), YC.info("[".concat(this._clientId, "] remote user ").concat(c2.uid, " published datachannel")), t2 || this.safeEmit(dg.USER_PUBLISHED, c2, "datachannel", e4);
            }
            this._p2pChannel.hasPendingRemoteDataChannel(c2, e3.stream_id) && (YC.debug("[".concat(this._clientId, "] resubscribe datachannel for user ").concat(c2.uid, " after reconnect.")), this._subscribeDataChannel(c2, e3.stream_id).catch((e4) => {
              YC.error("[".concat(this._clientId, "] resubscribe datachannel error"), e4.toString());
            }));
          }), t2 && (this.safeEmit(dg.PUBLISHED_USER_LIST, this._pendingPublishedUsers), this._pendingPublishedUsers = []), Array.isArray(n2) && n2.length > 0 && n2.forEach((e3) => {
            const { uid: t3, stream_id: i3 } = e3, n3 = this._users.find((e4) => e4._uintid === t3);
            if (!n3)
              return void YC.error("[".concat(this._clientId, "] can not find target user!(on_delete_data_channel)"));
            const s3 = n3._dataChannels.find((t4) => t4.id === e3.stream_id);
            s3 && (YC.debug("[".concat(this._clientId, "] data_stream delete with uid ").concat(t3)), this._p2pChannel.unsubscribeDataChannel(n3, [s3]).then((e4) => {
              if (n3._dataChannels = n3._dataChannels.filter((e5) => e5 !== s3), e4)
                return this._gateway.unsubscribeDataChannel(e4, n3.uid);
            }), YC.info("[".concat(this._clientId, "] remote user ").concat(t3, " unpublished datachannel ,id:").concat(s3.id)), this.safeEmit(dg.USER_UNPUBLISHED, n3, "datachannel", s3._config));
          });
        }
        _handleRemoveDataChannels(e2) {
          const t2 = this._users.find((t3) => t3.uid === e2.uid);
          if (t2) {
            if (void 0 !== t2._dataChannels && t2._dataChannels.length > 0) {
              YC.debug("[".concat(this._clientId, "] datachannel removed with uid ").concat(e2.uid));
              const i2 = () => {
                YC.info("[".concat(this._clientId, "] remote user ").concat(t2.uid, " unpublished datachannel")), t2._dataChannels.forEach((e3) => {
                  this.safeEmit(dg.USER_UNPUBLISHED, t2, "datachannel", e3._config);
                });
              };
              this._p2pChannel.unsubscribeDataChannel(t2, t2._dataChannels).then((e3) => {
                if (e3)
                  return this._gateway.unsubscribeDataChannel(e3, t2.uid);
              }), i2();
            }
          } else
            YC.warning("[".concat(this._clientId, "] can not find target user!(on_remove_datachannel)"));
        }
        _handleGatewayEvents() {
          this._gateway.on(tv.DISCONNECT_P2P, async () => {
            await this._p2pChannel.disconnectForReconnect();
          }), this._gateway.on(tv.CONNECTION_STATE_CHANGE, (e2, t2, i2) => {
            var n2;
            if (i2 === cg.FALLBACK)
              return;
            const s2 = () => {
              this.safeEmit(dg.CONNECTION_STATE_CHANGE, e2, t2, i2);
            };
            if (rI.reportApiInvoke(this._sessionId || (null === (n2 = this._gateway.joinInfo) || void 0 === n2 ? void 0 : n2.sid) || null, { name: rg.CONNECTION_STATE_CHANGE, options: [e2, t2, i2], tag: og.TRACER }).onSuccess(JSON.stringify({ cur: e2, prev: t2, reason: i2 })), YC.info("[".concat(this._clientId, "] connection state change: ").concat(t2, " -> ").concat(e2)), "DISCONNECTED" === e2)
              return this._reset(), void s2();
            if ("RECONNECTING" === e2)
              this._users.forEach((e3) => {
                e3._trust_in_room_ = false, e3._trust_audio_enabled_state_ = false, e3._trust_video_enabled_state_ = false, e3._trust_audio_mute_state_ = false, e3._trust_video_mute_state_ = false, e3._trust_audio_stream_added_state_ = false, e3._trust_video_stream_added_state_ = false, e3._is_pre_created || (e3._audio_pre_subscribed || (e3._audioSSRC = void 0, e3._audioOrtc = void 0), e3._video_pre_subscribed || (e3._videoSSRC = void 0, e3._videoOrtc = void 0, e3._rtxSsrcId = void 0), e3._cname = void 0);
              }), this._userOfflineTimeout && window.clearTimeout(this._userOfflineTimeout), this._streamRemovedTimeout && window.clearTimeout(this._streamRemovedTimeout), this._userOfflineTimeout = void 0, this._streamRemovedTimeout = void 0;
            else if ("CONNECTED" === e2) {
              var r2;
              this._streamFallbackTypeCacheMap.forEach((e3, t3) => {
                this._gateway.setStreamFallbackOption(t3, e3).catch((e4) => {
                  YC.warning("[".concat(this._clientId, "] auto set stream fallback option failed"), e4);
                });
              }), this._remoteStreamTypeCacheMap.forEach((e3, t3) => {
                this._gateway.setRemoteVideoStreamType(t3, e3).catch((e4) => {
                  YC.warning("[".concat(this._clientId, "] auto set remote stream type failed"), e4);
                });
              }), void 0 !== this._remoteDefaultVideoStreamType && void 0 === (null === (r2 = this._joinInfo) || void 0 === r2 ? void 0 : r2.defaultVideoStream) && this.setRemoteDefaultVideoStreamType(this._remoteDefaultVideoStreamType).then(() => {
                YC.debug("[".concat(this._clientId, "] setRemoteDefaultVideoStreamType after gateway connected"));
              }).catch((e3) => {
                YC.error("[".concat(this._clientId, "] setRemoteDefaultVideoStreamType after gateway failed, ").concat(e3));
              }), this.store.useP2P || (this._p2pChannel.republish(), this._userOfflineTimeout = window.setTimeout(() => {
                if ("CONNECTED" !== this.connectionState)
                  return;
                this._userOfflineTimeout = void 0;
                this._users.filter((e3) => !e3._trust_in_room_).forEach((e3) => {
                  YC.debug("[".concat(this._clientId, "] user offline timeout, emit user offline ").concat(e3.uid)), this._handleUserOffline({ uid: e3.uid });
                });
              }, 3e3), this._streamRemovedTimeout = window.setTimeout(() => {
                "CONNECTED" === this.connectionState && (this._streamRemovedTimeout = void 0, this._users.forEach((e3) => {
                  e3._trust_audio_mute_state_ || (YC.debug("[".concat(this._clientId, "] auto dispatch audio unmute event ").concat(e3.uid)), this._handleMuteStream(e3.uid, hv.AUDIO, false)), e3._trust_video_mute_state_ || (YC.debug("[".concat(this._clientId, "] auto dispatch video unmute event ").concat(e3.uid)), this._handleMuteStream(e3.uid, hv.VIDEO, false)), e3._trust_audio_enabled_state_ || (YC.debug("[".concat(this._clientId, "] auto dispatch enable local audio ").concat(e3.uid)), this._handleSetStreamLocalEnable("audio", e3.uid, true)), e3._trust_video_enabled_state_ || (YC.debug("[".concat(this._clientId, "] auto dispatch enable local video ").concat(e3.uid)), this._handleSetStreamLocalEnable("video", e3.uid, true)), e3._trust_video_stream_added_state_ || (YC.debug("[".concat(this._clientId, "] auto dispatch reset video stream added ").concat(e3.uid)), this._handleResetAddStream(e3, "video")), e3._trust_audio_stream_added_state_ || (YC.debug("[".concat(this._clientId, "] auto dispatch reset audio stream added ").concat(e3.uid)), this._handleResetAddStream(e3, "audio")), e3._video_added_ || e3._audio_added_ || (YC.debug("[".concat(this._clientId, "] auto dispatch stream remove ").concat(e3.uid)), this._handleRemoveStream({ uid: e3.uid, uint_id: e3._uintid }));
                }));
              }, 1e3));
            }
            s2();
          }), this._gateway.on(tv.REQUEST_NEW_GATEWAY_LIST, (e2, t2) => {
            if (!this._joinInfo)
              return t2(new VI(xT.UNEXPECTED_ERROR, "can not recover, no join info"));
            mA(this._joinInfo, this._axiosCancelSource.token, this._config.httpRetryConfig || Jg, this.store).then((t3) => {
              this._joinInfo && (this._joinInfo.apResponse = t3.gatewayInfo.res, this._joinInfo.gatewayAddrs = t3.gatewayInfo.gatewayAddrs, this._joinInfo.uni_lbs_ip = t3.gatewayInfo.uni_lbs_ip);
              const i2 = [];
              t3.gatewayInfo.gatewayAddrs.forEach((e3) => {
                let { address: t4 } = e3;
                const [n2, s2] = t4.split(":");
                this._joinInfo && this._joinInfo.proxyServer ? i2.push({ proxy: this._joinInfo.proxyServer, host: n2, port: s2 }) : i2.push({ host: n2, port: s2 });
              }), e2(i2);
            }).catch(t2);
          }), this._gateway.on(tv.NETWORK_QUALITY, (e2) => {
            "normal" === this._networkQualitySensitivity && this.safeEmit(dg.NETWORK_QUALITY, e2);
          }), this._gateway.on(tv.STREAM_TYPE_CHANGE, (e2, t2) => {
            this.safeEmit(dg.STREAM_TYPE_CHANGED, e2, t2);
            rI.reportApiInvoke(this._sessionId, { name: rg.STREAM_TYPE_CHANGE, options: [e2, t2], tag: og.TRACER }).onSuccess(JSON.stringify({ uid: e2, streamType: t2 }));
          }), this._gateway.on(tv.IS_P2P_DISCONNECTED, (e2) => {
            this._p2pChannel.isP2PDisconnected() ? e2(true) : this._p2pChannel.hasLocalMedia() || this._p2pChannel.hasRemoteMedia() ? e2(false) : e2(true);
          }), this._gateway.on(tv.NEED_RENEW_SESSION, () => {
            this._startSession();
          }), this._gateway.on(tv.REQUEST_P2P_CONNECTION_PARAMS, async (e2, t2, i2) => {
            try {
              t2(await this._p2pChannel.startP2PConnection(e2));
            } catch (e3) {
              i2(e3);
            }
          }), this._gateway.on(tv.JOIN_RESPONSE, (e2, t2) => {
            if (this.store.useP2P)
              return;
            const { dtlsParameters: i2, iceParameters: n2, candidates: s2, rtpCapabilities: r2, setup: o2, cname: a2 } = TL(e2.ortc, t2);
            this._p2pChannel.connect(n2, i2, s2, r2, o2, a2);
          }), this._gateway.on(tv.REQUEST_DC_CONNECTION_PARAMS, (e2) => {
            e2(this._p2pChannel.getEstablishParams());
          }), this._gateway.on(tv.RESET_SIGNAL, (e2) => {
            this._p2pChannel.resetConnection(e2), this._handleGatewaySignalEvents();
          }), this._gateway.on(tv.DATACHANNEL_FAILBACK, () => {
            this._joinGateway();
          }), this._gateway.on(tv.DATACHANNEL_PRECONNECT, async (e2, t2, i2, n2) => {
            var s2, r2, o2, a2, c2, d2;
            await this._p2pChannel.startP2PConnection({ turnServer: null === (s2 = this._joinInfo) || void 0 === s2 ? void 0 : s2.turnServer }, true);
            const l2 = function(e3, t3) {
              let i3;
              return t3 && t3.ip && "number" == typeof t3.port ? (i3 = [{ foundation: "udpcandidate", componentId: "1", transport: "udp", priority: "2103266323", connectionAddress: t3.ip, port: t3.port.toString(), type: "host", extension: {} }], YC.debug("Using remote candidate from AP ".concat(t3.ip, ":").concat(t3.port)), t3.ip6 && (i3.push({ foundation: "udpcandidate", componentId: "1", transport: "udp", priority: "2103266323", connectionAddress: t3.ip6, port: t3.port.toString(), type: "host", extension: {} }), YC.debug("Using IPV6 remote candidate from AP ".concat(t3.ip6, ":").concat(t3.port)))) : i3 = [{ foundation: "udpcandidate", componentId: "1", transport: "udp", priority: "2103266323", connectionAddress: e3.ip, port: e3.port.toString(), type: "host", extension: {} }], i3;
            }(e2, t2);
            return this._p2pChannel.preConnect({ iceUfrag: "".concat(null === (r2 = this._joinInfo) || void 0 === r2 ? void 0 : r2.apResponse.cid, "_").concat(null === (o2 = this._joinInfo) || void 0 === o2 ? void 0 : o2.apResponse.cert), icePwd: "".concat(null === (a2 = this._joinInfo) || void 0 === a2 ? void 0 : a2.apResponse.cid, "_").concat(null === (c2 = this._joinInfo) || void 0 === c2 ? void 0 : c2.apResponse.cert) }, { fingerprints: [{ hashFunction: "sha-256", fingerprint: null !== (d2 = DC("FINGERPRINT")) && void 0 !== d2 ? d2 : e2.fingerprint }] }, l2, { send: { audioCodecs: [], videoCodecs: [], audioExtensions: [], videoExtensions: [] }, recv: { audioCodecs: [], videoCodecs: [], audioExtensions: [], videoExtensions: [] } }, "active", "o/i14u9pJrxRKAsu").then(i2).catch(n2);
          });
        }
        _handleGatewaySignalEvents() {
          this._gateway.signal.on(CI.ON_USER_ONLINE, this._handleUserOnline), this._gateway.signal.on(CI.ON_USER_OFFLINE, this._handleUserOffline), this._gateway.signal.on(CI.ON_ADD_AUDIO_STREAM, (e2) => this._handleAddAudioOrVideoStream("audio", e2.uid, e2.ssrcId, e2.cname, e2.uint_id, e2.ortc)), this._gateway.signal.on(CI.ON_ADD_VIDEO_STREAM, (e2) => this._handleAddAudioOrVideoStream("video", e2.uid, e2.ssrcId, e2.cname, e2.uint_id, e2.ortc, e2.rtxSsrcId)), this._gateway.signal.on(CI.ON_REMOTE_DATASTREAM_UPDATE, (e2) => {
            this._handleUpdateDataChannel(e2);
          }), this._gateway.signal.on(CI.ON_REMOTE_FULL_DATASTREAM_INFO, (e2) => {
            this._handleUpdateDataChannel({ added: e2.datastreams, deleted: [] }, true);
          }), this._gateway.signal.on(CI.ON_REMOVE_STREAM, this._handleRemoveStream), this._gateway.signal.on(CI.ON_P2P_LOST, this._handleP2PLost), this._gateway.signal.on(CI.MUTE_AUDIO, (e2) => this._handleMuteStream(e2.uid, hv.AUDIO, true)), this._gateway.signal.on(CI.UNMUTE_AUDIO, (e2) => this._handleMuteStream(e2.uid, hv.AUDIO, false)), this._gateway.signal.on(CI.MUTE_VIDEO, (e2) => this._handleMuteStream(e2.uid, hv.VIDEO, true)), this._gateway.signal.on(CI.UNMUTE_VIDEO, (e2) => this._handleMuteStream(e2.uid, hv.VIDEO, false)), this._gateway.signal.on(CI.RECEIVE_METADATA, (e2) => {
            const t2 = Dg(e2.metadata);
            this.safeEmit(dg.RECEIVE_METADATA, e2.uid, t2);
          }), this._gateway.signal.on(CI.ON_DATA_STREAM, async (e2) => {
            if (!e2)
              return;
            let t2 = 0;
            if (e2.ordered || e2.syncWithAudio) {
              const i2 = this._p2pChannel.getStats(), n2 = this.remoteUsers.find((t3) => t3.uid === e2.uid), s2 = null == i2 ? void 0 : i2.audioRecv.find((e3) => e3.ssrc === (null == n2 ? void 0 : n2._audioSSRC));
              t2 = null == s2 ? void 0 : s2.jitterBufferMs;
            }
            null == t2 && (t2 = 0), CU(e2, t2, { id: this._clientId, onStreamMessage: "function" == typeof this.onStreamMessage ? this.onStreamMessage.bind(this) : void 0, safeEmit: this.safeEmit.bind(this) });
          }), this._gateway.signal.on(CI.ON_CRYPT_ERROR, () => {
            Ng(() => {
              YC.warning("[".concat(this._clientId, "] on crypt error")), this.safeEmit(dg.CRYPT_ERROR);
            }, this._sessionId);
          }), this._gateway.signal.on(CI.ON_TOKEN_PRIVILEGE_WILL_EXPIRE, this._handleTokenWillExpire), this._gateway.signal.on(CI.ON_TOKEN_PRIVILEGE_DID_EXPIRE, () => {
            YC.warning("[".concat(this._clientId, "] received message onTokenPrivilegeDidExpire, please get new token and join again")), this._gateway.leave(true, cg.TOKEN_EXPIRE), this.safeEmit(dg.ON_TOKEN_PRIVILEGE_DID_EXPIRE), this._reset();
          }), this._gateway.signal.on(CI.ON_STREAM_FALLBACK_UPDATE, (e2) => {
            YC.debug("[".concat(this._clientId, "] stream fallback peerId: ").concat(e2.stream_id, ", attr: ").concat(e2.stream_type)), this.safeEmit(dg.STREAM_FALLBACK, e2.stream_id, 1 === e2.stream_type ? "fallback" : "recover");
          }), this._gateway.signal.on(CI.ON_PUBLISH_STREAM, (e2) => {
            this.uid === this._uid && (this._p2pChannel.reportPublishEvent(true, null, void 0, false, JSON.stringify({ proxy: e2.proxy })), YC.info("[".concat(this._clientId, "] on publish stream, ").concat(JSON.stringify(e2))));
          }), this._gateway.signal.on(CI.ENABLE_LOCAL_VIDEO, (e2) => {
            this._handleSetStreamLocalEnable("video", e2.uid, true);
          }), this._gateway.signal.on(CI.DISABLE_LOCAL_VIDEO, (e2) => {
            this._handleSetStreamLocalEnable("video", e2.uid, false);
          }), this._gateway.signal.on(gI.REQUEST_TIMEOUT, (e2, t2) => {
            if (this._joinInfo)
              switch (e2) {
                case SI.PUBLISH: {
                  if (!t2)
                    return;
                  const e3 = t2.ortc;
                  if (e3) {
                    var i2, n2;
                    const s2 = e3.some((e4) => {
                      let { stream_type: t3 } = e4;
                      return t3 === ev.Audio;
                    }), r2 = e3.some((e4) => {
                      let { stream_type: t3 } = e4;
                      return t3 !== ev.Audio;
                    }), o2 = e3.some((e4) => {
                      let { stream_type: t3 } = e4;
                      return t3 === ev.Screen || t3 === ev.ScreenLow;
                    });
                    "offer" === t2.state && rI.publish(this._joinInfo.sid, { eventElapse: TP.measureFromPublishStart(this.store.clientId, this.store.pubId), succ: false, ec: xT.TIMEOUT, audio: s2, video: r2, p2pid: t2.p2p_id, publishRequestid: this.store.pubId, screenshare: o2, audioName: s2 ? null === (i2 = e3.find((e4) => {
                      let { stream_type: t3 } = e4;
                      return t3 === ev.Audio;
                    })) || void 0 === i2 || null === (i2 = i2.ssrcs[0]) || void 0 === i2 ? void 0 : i2.ssrcId.toString() : void 0, videoName: r2 ? null === (n2 = e3.find((e4) => {
                      let { stream_type: t3 } = e4;
                      return t3 !== ev.Audio;
                    })) || void 0 === n2 || null === (n2 = n2.ssrcs[0]) || void 0 === n2 ? void 0 : n2.ssrcId.toString() : void 0 });
                  }
                  break;
                }
                case SI.SUBSCRIBE:
                  t2 && rI.subscribe(this._joinInfo.sid, { succ: false, ec: xT.TIMEOUT, audio: t2.stream_type === hv.AUDIO, video: t2.stream_type === hv.VIDEO, peerid: t2.stream_id, subscribeRequestid: t2.ssrcId, p2pid: this.store.p2pId, eventElapse: TP.measureFromSubscribeStart(this.store.clientId, t2.ssrcId) });
              }
          }), this._gateway.signal.on(CI.ON_P2P_OK, (e2) => {
            this.uid, this._uid;
          }), this._gateway.signal.on(CI.ON_PUBLISHED_USER_LIST, (e2) => {
            if (null == e2 || !e2.users)
              return;
            DC("BLOCK_LOCAL_CLIENT") && (e2.users = e2.users.filter((e3) => !lI(e3.string_id || e3.stream_id, this.channelName)));
            const t2 = [], i2 = [];
            for (const n2 of e2.users) {
              let e3 = this._users.find((e4) => e4._uintid === n2.stream_id);
              e3 ? e3._trust_in_room_ = true : (e3 = new ik(n2.string_id || n2.stream_id, n2.stream_id), this._users.push(e3), 0 === this.getListeners(dg.PUBLISHED_USER_LIST).length && (YC.debug("[".concat(this._clientId, "] user online"), n2.stream_id), this.safeEmit(dg.USER_JOINED, e3)));
              const s2 = nv.Audio & n2.stream_type, r2 = (nv.Video | nv.LwoVideo) & n2.stream_type, o2 = 0 != (65280 & n2.stream_type), a2 = s2 && e3.hasAudio, c2 = r2 && e3.hasVideo;
              r2 && (e3._trust_video_stream_added_state_ = true, e3._video_added_ = true, e3._videoSSRC = n2.video_ssrc, e3._rtxSsrcId = n2.video_rtx), s2 && (e3._trust_audio_stream_added_state_ = true, e3._audio_added_ = true, e3._audioSSRC = n2.audio_ssrc), s2 && !a2 && 0 === this.getListeners(dg.PUBLISHED_USER_LIST).length && (YC.info("[".concat(this._clientId, "] remote user ").concat(e3.uid, " published audio")), this.safeEmit(dg.USER_PUBLISHED, e3, "audio")), r2 && !c2 && 0 === this.getListeners(dg.PUBLISHED_USER_LIST).length && (YC.info("[".concat(this._clientId, "] remote user ").concat(e3.uid, " published video")), this.safeEmit(dg.USER_PUBLISHED, e3, "video")), (s2 && !a2 || r2 && !c2 || o2) && t2.push(e3), r2 && this._p2pChannel.hasPendingRemoteMedia(e3, "video") && i2.push({ user: e3, mediaType: "video" }), s2 && this._p2pChannel.hasPendingRemoteMedia(e3, "audio") && i2.push({ user: e3, mediaType: "audio" });
            }
            i2.length > 0 && (YC.debug("[".concat(this._clientId, "] RE massSubscribe after reconnect ").concat(i2.map((e3) => "user: ".concat(e3.user.uid, ", mediaType: ").concat(e3.mediaType)).join("; "), " ")), this.massSubscribe(i2).catch((e3) => {
              YC.error("[".concat(this._clientId, "] mass resubscribe error"), e3.toString());
            })), this.getListeners(dg.PUBLISHED_USER_LIST).length > 0 ? DC("ENABLE_DATASTREAM_2") ? this._pendingPublishedUsers = t2 : (YC.info("[".concat(this._clientId, "] client emit user-list event, users: ").concat(t2.map((e3) => e3.uid).join(", "))), this.safeEmit(dg.PUBLISHED_USER_LIST, t2)) : YC.info("[".concat(this._clientId, "] client not emit user-list event case there is no user-list listener, users: ").concat(t2.map((e3) => e3.uid).join(", ")));
          }), this._gateway.signal.on(CI.ON_RTP_CAPABILITY_CHANGE, (e2) => {
            const { video_codec: t2 } = e2;
            this._p2pChannel instanceof nM && this._p2pChannel.updateRemoteRTPCapabilities(t2.map((e3) => e3.toLowerCase()).filter((e3) => {
              var t3;
              return bn(t3 = Object.keys(xC)).call(t3, e3);
            }));
          });
        }
        _handleP2PEvents() {
          this._gateway.signal.on(CI.ON_USER_OFFLINE, () => {
            this._p2pChannel.disconnectForReconnect();
          }), this._gateway.signal.on(Ov.PUBLISH, (e2, t2, i2) => {
            const { uid: n2 } = e2;
            e2.forEach((e3) => {
              const { kind: s2, ssrcs: r2, mid: o2, isMuted: a2 } = e3;
              this._handleP2PAddAudioOrVideoStream(s2, n2, r2[0].ssrcId, o2);
              const c2 = this._users.find((e4) => e4.uid === n2);
              return c2 && this._p2pChannel instanceof ak ? this._p2pChannel.mockSubscribe(c2, s2, r2[0].ssrcId, o2).then(() => {
                t2();
              }).catch(i2) : t2(), this._handleMuteStream(n2, s2, !!a2);
            });
          }), this._gateway.signal.on(Ov.CALL, async (e2, t2, i2) => {
            if (this._p2pChannel instanceof ak)
              try {
                var n2;
                t2(await this._p2pChannel.startP2P({ turnServer: null === (n2 = this._joinInfo) || void 0 === n2 ? void 0 : n2.turnServer }, e2));
              } catch (e3) {
                i2(e3);
              }
          }), this._gateway.signal.on(gI.P2P_CONNECTION, async (e2) => {
            this._p2pChannel instanceof ak && await this._p2pChannel.p2pConnect(e2);
          }), this._gateway.signal.on(Ov.UNPUBLISH, async (e2, t2, i2) => {
            if (this._p2pChannel instanceof ak) {
              const { unpubMsg: n2, uid: s2 } = e2, r2 = this._users.find((e3) => e3.uid === s2);
              if (!r2)
                return YC.warning("[".concat(this._clientId, "] can not find remote user, ignore mute event, uid: ").concat(s2)), void t2();
              try {
                n2.forEach(async (e3) => {
                  let { stream_type: t3 } = e3;
                  const i3 = t3 === ev.Audio ? hv.AUDIO : hv.VIDEO;
                  await this._p2pChannel.unsubscribe(r2, i3), this._handleMuteStream(s2, i3, true);
                }), t2();
              } catch (e3) {
                i2(e3);
              }
            }
          }), this._gateway.signal.on(Ov.CONTROL, async (e2, t2) => {
            const { action: i2 } = e2;
            switch (i2) {
              case Dv.MUTE_LOCAL_VIDEO:
                this._handleMuteStream(t2, hv.VIDEO, true);
                break;
              case Dv.MUTE_LOCAL_AUDIO:
                this._handleMuteStream(t2, hv.AUDIO, true);
                break;
              case Dv.UNMUTE_LOCAL_VIDEO:
                this._handleP2PAddAudioOrVideoStream("video", t2), this._handleMuteStream(t2, hv.VIDEO, false);
                break;
              case Dv.UNMUTE_LOCAL_AUDIO:
                this._handleP2PAddAudioOrVideoStream("audio", t2), this._handleMuteStream(t2, hv.AUDIO, false);
            }
          }), this._gateway.signal.on(Ov.RESTART_ICE, async (e2, t2, i2) => {
            if (this._p2pChannel instanceof ak)
              try {
                const { direction: i3, iceParameter: n2 } = e2;
                if (i3 !== vI.SEND_ONLY || n2) {
                  t2(await this._p2pChannel.restartICE(i3, n2));
                } else
                  this._p2pChannel.handleDisconnect(i3), t2();
              } catch (e3) {
                i2(e3);
              }
          }), this._gateway.signal.on(Ov.CANDIDATE, (e2) => {
            if (this._p2pChannel instanceof ak) {
              const { candidate: t2, direction: i2 } = e2;
              this._p2pChannel.addRemoteCandidate(t2, i2);
            }
          }), this._p2pChannel.on(fv.RequestP2PRestartICE, async (e2, t2, i2) => {
            try {
              const { direction: i3 } = e2;
              t2(await this._gateway.sendExtensionMessage(Ov.RESTART_ICE, e2, i3 === vI.SEND_ONLY));
            } catch (e3) {
              i2(e3);
            }
          }), this._p2pChannel.on(fv.LocalCandidate, (e2) => {
            this._gateway.sendExtensionMessage(Ov.CANDIDATE, JSON.stringify(e2), true);
          }), this._p2pChannel.on(fv.RequestP2PMuteLocal, async (e2, t2, i2) => {
            try {
              await this._gateway.sendExtensionMessage(Ov.CONTROL, e2, true), t2();
            } catch (e3) {
              i2(e3);
            }
          }), this._p2pChannel.on(fv.RequestP2PUnmuteRemote, async (e2, t2, i2) => {
            if (this._joinInfo)
              try {
                await this._gateway.unmuteRemote(e2, this._joinInfo.stringUid || this._joinInfo.uid), t2();
              } catch (e3) {
                e3.code === xT.DISCONNECT_P2P ? t2() : i2(e3);
              }
            else
              t2();
          }), this._p2pChannel.on(fv.RequestP2PMuteRemote, async (e2, t2, i2) => {
            if (this._joinInfo)
              try {
                await this._gateway.muteRemote(e2, this._joinInfo.stringUid || this._joinInfo.uid), t2();
              } catch (e3) {
                e3.code === xT.DISCONNECT_P2P ? t2() : i2(e3);
              }
            else
              t2();
          }), this._p2pChannel.on(fv.StateChange, (e2, t2) => {
            t2 === mv.Connected && this._p2pChannel.republish();
          });
        }
        _handleP2PChannelEvents() {
          this._p2pChannel.on(fv.RequestMuteLocal, async (e2, t2, i2) => {
            if (this._joinInfo)
              try {
                await this._gateway.muteLocal(e2, this._joinInfo.stringUid || this._joinInfo.uid), t2();
              } catch (e3) {
                e3.code === xT.DISCONNECT_P2P ? t2() : i2(e3);
              }
            else
              t2();
          }), this._p2pChannel.on(fv.RequestUnmuteLocal, async (e2, t2, i2) => {
            if (this._joinInfo)
              try {
                await this._gateway.unmuteLocal(e2, this._joinInfo.stringUid || this._joinInfo.uid), t2();
              } catch (e3) {
                e3.code === xT.DISCONNECT_P2P ? t2() : i2(e3);
              }
            else
              t2();
          }), this._p2pChannel.on(fv.RequestRePublish, (e2, t2, i2) => {
            this.publish(e2, false).then(t2).catch(i2);
          }), this._p2pChannel.on(fv.RequestRePublishDataChannel, (e2, t2, i2) => {
            tT.all(e2.map(async (e3) => {
              await this._p2pChannel.publishDataChannel([e3]);
              const t3 = { streamId: e3.id, ordered: e3.ordered, maxRetransmits: e3.maxRetransmits, metadata: e3.metadata, channelId: e3._originDataChannelId };
              try {
                await this._gateway.publishDataChannel(this._uid, t3, true);
              } catch (e4) {
                if (e4.code !== xT.DISCONNECT_P2P)
                  throw e4;
              }
            })).then(t2).catch(i2);
          }), this._p2pChannel.on(fv.RequestReSubscribe, async (e2, t2, i2) => {
            try {
              for (const { user: t3, kind: i3 } of e2)
                i3 === hv.VIDEO ? await this.subscribe(t3, "video") : await this.subscribe(t3, "audio");
              t2();
            } catch (e3) {
              i2(e3);
            }
          }), this._p2pChannel.on(fv.RequestUpload, (e2, t2) => {
            this._gateway.upload(e2, t2);
          }), this._p2pChannel.on(fv.RequestUploadStats, (e2) => {
            this._gateway.uploadWRTCStats(e2);
          }), this._p2pChannel.on(fv.MediaReconnectStart, (e2) => {
            this.safeEmit(dg.MEDIA_RECONNECT_START, e2);
          }), this._p2pChannel.on(fv.MediaReconnectEnd, (e2) => {
            this.safeEmit(dg.MEDIA_RECONNECT_END, e2);
          }), this._p2pChannel.on(fv.NeedSignalRTT, (e2) => {
            e2(this._gateway.getSignalRTT());
          }), this._p2pChannel.on(fv.RequestRestartICE, async (e2) => {
            if (this._p2pChannel instanceof ak)
              return;
            const t2 = await this._p2pChannel.restartICE(e2), i2 = await t2.next();
            if (i2.done)
              return;
            const n2 = i2.value;
            let s2;
            try {
              s2 = await this._gateway.restartICE({ iceParameters: n2 });
            } catch (e3) {
              return void t2.throw(e3);
            }
            const { iceParameters: r2 } = function(e3) {
              const t3 = e3.iceParameters;
              return { iceParameters: { iceUfrag: t3.iceUfrag, icePwd: t3.icePwd } };
            }(s2);
            await t2.next({ remoteIceParameters: r2 });
          }), this._p2pChannel.on(fv.RequestReconnect, async () => {
            this._gateway.reconnect();
          }), this._p2pChannel.on(fv.RequestReconnectPC, async () => {
            var e2;
            const { iceParameters: t2, dtlsParameters: i2, rtpCapabilities: n2 } = await this._p2pChannel.startP2PConnection({ turnServer: null === (e2 = this._joinInfo) || void 0 === e2 ? void 0 : e2.turnServer }), { gatewayEstablishParams: s2, gatewayAddress: r2 } = await this._gateway.reconnectPC({ iceParameters: t2, dtlsParameters: i2, rtpCapabilities: n2 }), { dtlsParameters: o2, iceParameters: a2, candidates: c2, rtpCapabilities: d2, setup: l2, cname: u2 } = TL(s2, r2);
            await this._p2pChannel.connect(a2, o2, c2, d2, l2, u2), await this._p2pChannel.republish(), await this._p2pChannel.reSubscribe();
          }), this._p2pChannel.on(fv.RequestUnpublishForReconnectPC, async (e2, t2, i2) => {
            this._joinInfo && void 0 !== this._uid ? (await this._gateway.unpublish(e2, this._uid), t2()) : i2();
          }), this._p2pChannel.on(fv.P2PLost, () => {
            this.safeEmit(dg.P2P_LOST, this.store.uid);
          }), this._p2pChannel.on(fv.UpdateVideoEncoder, (e2) => {
            e2._encoderConfig && this._gateway.setVideoProfile(e2._encoderConfig);
          }), this._p2pChannel.on(fv.ConnectionTypeChange, (e2) => {
            this.safeEmit(dg.IS_USING_CLOUD_PROXY, e2);
          }), this._p2pChannel.on(fv.RequestLowStreamParameter, (e2) => {
            e2(this._lowStreamParameter || { width: 160, height: 120, framerate: 15, bitrate: 50 });
          }), this._p2pChannel.on(fv.QueryClientConnectionState, (e2) => {
            e2(this.connectionState);
          });
        }
        getKeyMetrics() {
          return this.store.keyMetrics;
        }
        async enableContentInspect(e2) {
          if ("CONNECTED" !== this.connectionState || !this._joinInfo)
            throw new VI(xT.INVALID_OPERATION, "[".concat(this._clientId, "] Client did not join channel"));
          if (this._inspect)
            throw new VI(xT.INVALID_OPERATION, "[".concat(this._clientId, "] Inspect content service already in connecting/connected state"));
          if (!e2)
            throw new VI(xT.INVALID_PARAMS, "[".concat(this._clientId, "] inspectConfig is necessary"));
          if (!e2.inspectType || !Array.isArray(e2.inspectType))
            throw new VI(xT.INVALID_PARAMS, "[".concat(this._clientId, "] inspectConfig.inspectType is necessary and is an instance of Array."));
          {
            const t2 = [...new Set(e2.inspectType)];
            t2.forEach((e3) => {
              var t3;
              if (!bn(t3 = ["supervise", "moderation"]).call(t3, e3))
                throw new VI(xT.INVALID_PARAMS, "[".concat(this._clientId, "] ").concat(e3, " is not a valid inspect type."));
            }), e2.inspectType = t2;
          }
          if (e2 && e2.extraInfo && e2.extraInfo.length > 1024)
            throw new VI(xT.INVALID_PARAMS, "[".concat(this._clientId, "] inspectConfig.extraInfo length cannot exceed 1024 bytes"));
          try {
            const t2 = new kM(e2);
            this._inspect = t2, this.handleVideoInspectEvents(this._inspect), await t2.init({ appId: this._joinInfo.appId, areaCode: "", cname: this._joinInfo.cname, sid: this._joinInfo.sid, token: this._joinInfo.token, uid: this._joinInfo.uid, cid: this._joinInfo.cid, vid: this._joinInfo.vid ? Number(this._joinInfo.vid) : 0 }, Jg);
          } catch (e3) {
            throw Array.isArray(e3) ? e3[0] : e3;
          }
        }
        async disableContentInspect() {
          if (!this._inspect)
            throw new VI(xT.INVALID_OPERATION, "[".concat(this._clientId, "] inspectVideoContent not started"));
          try {
            this._inspect.close(), this._inspect = void 0;
          } catch (e2) {
            throw Array.isArray(e2) ? e2[0] : e2;
          }
        }
        async setImageModeration(e2, t2) {
          if (FT(e2, "enabled"), e2) {
            if (!t2)
              throw new VI(xT.INVALID_PARAMS, "[".concat(this._clientId, "] config is necessary"));
            if (jT(t2.interval, "interval", 1e3, 1 / 0), t2 && t2.extraInfo && t2.extraInfo.length > 1024)
              throw new VI(xT.INVALID_PARAMS, "[".concat(this._clientId, "] config.extraInfo length cannot exceed 1024 bytes"));
            if (t2 && t2.vendor && t2.vendor.length > 1024)
              throw new VI(xT.INVALID_PARAMS, "[".concat(this._clientId, "] config.vendor length cannot exceed 1024 bytes"));
            if ("CONNECTED" !== this.connectionState || !this._joinInfo)
              throw new VI(xT.INVALID_OPERATION, "[".concat(this._clientId, '] can not enable image moderation, not joined"'));
            try {
              if (this._moderation)
                return void this._moderation.updateConfig(t2);
              const e3 = new pU(t2);
              this._moderation = e3, this.handleImageModerationEvents(this._moderation), await e3.init({ appId: this._joinInfo.appId, areaCode: "", cname: this._joinInfo.cname, sid: this._joinInfo.sid, token: this._joinInfo.token, uid: this._joinInfo.uid, cid: this._joinInfo.cid, vid: this._joinInfo.vid ? Number(this._joinInfo.vid) : 0 }, Jg);
            } catch (e3) {
              throw Array.isArray(e3) ? e3[0] : e3;
            }
          } else {
            if (!this._moderation)
              throw new VI(xT.INVALID_OPERATION, "[".concat(this._clientId, "] image moderation not started"));
            try {
              this._moderation.close(), this._moderation.removeAllListeners(), this._moderation = void 0;
            } catch (e3) {
              throw Array.isArray(e3) ? e3[0] : e3;
            }
          }
        }
        setP2PTransport(e2) {
          if (function(e3) {
            BT(e3, "transport", ["default", "auto", "relay", "sd-rtn"]);
          }(e2), "p2p" !== this.mode)
            throw new VI(xT.INVALID_OPERATION, "only p2p mode can set p2pTransport");
          this.store.p2pTransport = e2, YC.info("[".concat(this._clientId, "] set client p2pTransport to ").concat(e2));
        }
        handleImageModerationEvents(e2) {
          e2.on(bv.CONNECTION_STATE_CHANGE, (t2, i2) => {
            if (this.safeEmit(dg.IMAGE_MODERATION_CONNECTION_STATE_CHANGE, t2, i2), t2 === Av.CONNECTED) {
              if ("CONNECTED" !== this.connectionState)
                throw this.setImageModeration(false), new VI(xT.OPERATION_ABORTED, "Image moderation was cancelled because it left the channel");
              e2.inspectImage();
            }
          }), e2.on(bv.CLIENT_LOCAL_VIDEO_TRACK, (e3) => {
            e3(this.localTracks.filter((e4) => "video" === e4.trackMediaType)[0]);
          });
        }
        handleVideoInspectEvents(e2) {
          e2.on(Rv.CONNECTION_STATE_CHANGE, (t2, i2) => {
            if (this.safeEmit(dg.CONTENT_INSPECT_CONNECTION_STATE_CHANGE, t2, i2), i2 === gv.CONNECTED) {
              if ("CONNECTED" !== this.connectionState)
                return void this.safeEmit(dg.CONTENT_INSPECT_ERROR, new VI(xT.OPERATION_ABORTED, "Content inspect was cancelled because it left the channel"));
              e2.inspectImage();
            }
          }), e2.on(Rv.INSPECT_RESULT, (e3, t2) => {
            var i2;
            if ((null == t2 ? void 0 : t2.code) === xT.INVALID_OPERATION && "DISCONNECTED" === this.connectionState)
              return YC.debug("Stop inspect content because that has left channel"), null == this || null === (i2 = this._inspect) || void 0 === i2 || i2.close(), void (this._inspect = void 0);
            this.safeEmit(dg.CONTENT_INSPECT_RESULT, e3, t2);
          }), e2.on(Rv.CLIENT_LOCAL_VIDEO_TRACK, (e3) => {
            e3(this.localTracks.filter((e4) => "video" === e4.trackMediaType)[0]);
          });
        }
        getJoinChannelServiceRecords() {
          return YC.debug("getJoinChannelServiceRecords"), this.store.joinChannelServiceRecords;
        }
        async setPublishAudioFilterEnabled(e2) {
          FT(e2, "enabled"), NC("ENABLE_PUBLISH_AUDIO_FILTER", e2), this._joinInfo && await this._gateway.setPublishAudioFilterEnabled(e2);
        }
        _handleResetAddStream(e2, t2) {
          switch (t2) {
            case "audio":
              e2._audio_added_ = false, e2._trust_audio_stream_added_state_ = true;
              break;
            case "video":
              e2._video_added_ = false, e2._trust_video_stream_added_state_ = true;
          }
        }
      }
      UI([sI(), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", tT)], bU.prototype, "leave", null), UI([sI({ argsMap: (e2, t2) => {
        if (!Array.isArray(t2)) {
          if (!(t2 instanceof _b))
            return [t2];
          t2 = [t2];
        }
        return t2.map((e3) => e3 ? Object(e3).toString() : "null");
      } }), xI("design:type", Function), xI("design:paramtypes", [Object, Boolean]), xI("design:returntype", tT)], bU.prototype, "publish", null), UI([sI({ argsMap: (e2, t2) => (t2 || (t2 = []), t2 instanceof EP ? [t2.getChannelId()] : (Array.isArray(t2) || (t2 = [t2]), t2.map((e3) => e3.getTrackId()))) }), xI("design:type", Function), xI("design:paramtypes", [Object]), xI("design:returntype", tT)], bU.prototype, "unpublish", null), UI([sI({ argsMap: (e2, t2, i2, n2) => [t2.uid, i2, n2] }), xI("design:type", Function), xI("design:paramtypes", [ik, String, Number]), xI("design:returntype", tT)], bU.prototype, "subscribe", null), UI([sI({ argsMap: (e2, t2, i2) => [t2, i2] }), xI("design:type", Function), xI("design:paramtypes", [Object, String]), xI("design:returntype", tT)], bU.prototype, "presubscribe", null), UI([sI({ argsMap: (e2, t2) => t2.map((e3) => {
        let { user: t3, mediaType: i2 } = e3;
        return [null == t3 ? void 0 : t3.uid, i2];
      }) }), xI("design:type", Function), xI("design:paramtypes", [Array]), xI("design:returntype", tT)], bU.prototype, "massSubscribe", null), UI([sI({ argsMap: (e2, t2, i2, n2) => [t2.uid, i2, n2] }), xI("design:type", Function), xI("design:paramtypes", [ik, String, Number]), xI("design:returntype", tT)], bU.prototype, "unsubscribe", null), UI([sI({ argsMap: (e2, t2) => t2.map((e3) => {
        let { user: t3, mediaType: i2 } = e3;
        return { uid: null == t3 ? void 0 : t3.uid, mediaType: i2 };
      }) }), xI("design:type", Function), xI("design:paramtypes", [Array]), xI("design:returntype", tT)], bU.prototype, "massUnsubscribe", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", [Object]), xI("design:returntype", tT)], bU.prototype, "setLowStreamParameter", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", tT)], bU.prototype, "enableDualStream", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", tT)], bU.prototype, "disableDualStream", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", [String, Object]), xI("design:returntype", tT)], bU.prototype, "setClientRole", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", [String, Boolean]), xI("design:returntype", void 0)], bU.prototype, "setProxyServer", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", [Object, Boolean]), xI("design:returntype", void 0)], bU.prototype, "setTurnServer", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", [String]), xI("design:returntype", void 0)], bU.prototype, "setLicense", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", [Number]), xI("design:returntype", void 0)], bU.prototype, "startProxyServer", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", void 0)], bU.prototype, "stopProxyServer", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", [Object]), xI("design:returntype", void 0)], bU.prototype, "setLocalAccessPointsV2", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", [Array, String]), xI("design:returntype", void 0)], bU.prototype, "setLocalAccessPoints", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", [Number]), xI("design:returntype", tT)], bU.prototype, "setRemoteDefaultVideoStreamType", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", [Object, Number]), xI("design:returntype", tT)], bU.prototype, "setRemoteVideoStreamType", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", [Object, Number]), xI("design:returntype", tT)], bU.prototype, "setStreamFallbackOption", null), UI([sI({ argsMap: (e2, t2) => [t2] }), xI("design:type", Function), xI("design:paramtypes", [String, String, Uint8Array]), xI("design:returntype", void 0)], bU.prototype, "setEncryptionConfig", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", [String]), xI("design:returntype", tT)], bU.prototype, "renewToken", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", void 0)], bU.prototype, "enableAudioVolumeIndicator", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", [String, Boolean]), xI("design:returntype", tT)], bU.prototype, "startLiveStreaming", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", [Object]), xI("design:returntype", tT)], bU.prototype, "setLiveTranscoding", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", [String]), xI("design:returntype", tT)], bU.prototype, "stopLiveStreaming", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", [String, Object]), xI("design:returntype", tT)], bU.prototype, "addInjectStreamUrl", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", tT)], bU.prototype, "removeInjectStreamUrl", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", [Tk]), xI("design:returntype", tT)], bU.prototype, "startChannelMediaRelay", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", [Tk]), xI("design:returntype", tT)], bU.prototype, "updateChannelMediaRelay", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", tT)], bU.prototype, "stopChannelMediaRelay", null), UI([sI({ argsMap: (e2, t2) => (Array.isArray(t2) || (t2 = [t2]), [JSON.stringify(t2)]) }), xI("design:type", Function), xI("design:paramtypes", [Object]), xI("design:returntype", tT)], bU.prototype, "sendCustomReportMessage", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", [Object, Object]), xI("design:returntype", tT)], bU.prototype, "pickSVCLayer", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", [Object]), xI("design:returntype", tT)], bU.prototype, "setRTMConfig", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", [Object]), xI("design:returntype", tT)], bU.prototype, "enableContentInspect", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", tT)], bU.prototype, "disableContentInspect", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", [Boolean, Object]), xI("design:returntype", tT)], bU.prototype, "setImageModeration", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", [String]), xI("design:returntype", void 0)], bU.prototype, "setP2PTransport", null), UI([sI({ reportResult: true }), xI("design:type", Function), xI("design:paramtypes", []), xI("design:returntype", Array)], bU.prototype, "getJoinChannelServiceRecords", null), UI([sI(), xI("design:type", Function), xI("design:paramtypes", [Boolean]), xI("design:returntype", tT)], bU.prototype, "setPublishAudioFilterEnabled", null);
      class wU {
        constructor(e2, t2) {
          nh(this, "id", 0), nh(this, "element", void 0), nh(this, "peerPair", void 0), nh(this, "context", void 0), nh(this, "audioPlayerElement", void 0), nh(this, "audioTrack", void 0), wU.count += 1, this.id = wU.count, this.element = e2, this.context = t2;
        }
        initPeers() {
          this.peerPair = [new RTCPeerConnection(), new RTCPeerConnection()], this.peerPair[1].ontrack = (e2) => {
            const t2 = document.createElement("audio");
            t2.srcObject = new MediaStream([e2.track]), t2.play(), this.audioPlayerElement = t2;
          };
        }
        async switchSdp() {
          if (!this.peerPair)
            return;
          const e2 = async (e3, t3) => {
            const i2 = "offer" === t3 ? await e3.createOffer() : await e3.createAnswer();
            return await e3.setLocalDescription(i2), "complete" === e3.iceGatheringState ? e3.localDescription : new tT((t4) => {
              e3.onicegatheringstatechange = () => {
                "complete" === e3.iceGatheringState && t4(e3.localDescription);
              };
            });
          }, t2 = async (e3, t3) => await e3.setRemoteDescription(t3);
          try {
            const i2 = await e2(this.peerPair[0], "offer");
            await t2(this.peerPair[1], i2);
            const n2 = await e2(this.peerPair[1], "answer");
            await t2(this.peerPair[0], n2);
          } catch (e3) {
            throw new VI(xT.LOCAL_AEC_ERROR, e3.toString()).print();
          }
        }
        async getTracksFromMediaElement(e2) {
          if (this.audioTrack)
            return this.audioTrack;
          let t2;
          try {
            e2 instanceof HTMLVideoElement && (e2.captureStream ? e2.captureStream() : e2.mozCaptureStream()), t2 = this.context.createMediaStreamDestination();
            this.context.createMediaElementSource(e2).connect(t2);
          } catch (e3) {
            throw new VI(xT.LOCAL_AEC_ERROR, e3.toString()).print();
          }
          if (!t2) {
            throw new VI(xT.LOCAL_AEC_ERROR, "no dest node when local aec").print();
          }
          const i2 = t2.stream.getAudioTracks()[0];
          return this.audioTrack = i2, i2;
        }
        getElement() {
          return this.element;
        }
        async startEchoCancellation() {
          this.context.resume(), this.peerPair && this.close(), this.initPeers();
          const e2 = this.element, t2 = await this.getTracksFromMediaElement(e2);
          this.peerPair && this.peerPair[0].addTrack(t2), await this.switchSdp();
        }
        close() {
          YC.debug("close echo cancellation unit, id is", this.id), this.audioPlayerElement && this.audioPlayerElement.pause(), this.peerPair && this.peerPair.forEach((e2) => {
            e2.close();
          }), this.peerPair = void 0, this.audioPlayerElement = void 0;
        }
      }
      nh(wU, "count", 0);
      const OU = window.AudioContext || window.webkitAudioContext;
      class NU {
        constructor() {
          nh(this, "units", []), nh(this, "context", void 0);
        }
        processExternalMediaAEC(e2) {
          if (!this._doesEnvironmentNeedAEC())
            return YC.debug("the system does not need to process local aec"), -1;
          this.context || (this.context = new OU());
          let t2 = this.units.find((t3) => t3 && t3.getElement() === e2);
          return t2 || (t2 = new wU(e2, this.context), this.units.push(t2)), t2.startEchoCancellation(), YC.debug("start processing local audio echo cancellation, id is", t2.id), t2.id;
        }
        _doesEnvironmentNeedAEC() {
          return pT().name !== cT.SAFARI;
        }
      }
      UI([sI({ report: rI }), xI("design:type", Function), xI("design:paramtypes", [HTMLAudioElement]), xI("design:returntype", Number)], NU.prototype, "processExternalMediaAEC", null);
      const DU = new NU();
      function PU(e2, t2) {
        var i2 = Object.keys(e2);
        if (Object.getOwnPropertySymbols) {
          var n2 = Object.getOwnPropertySymbols(e2);
          t2 && (n2 = n2.filter(function(t3) {
            return Object.getOwnPropertyDescriptor(e2, t3).enumerable;
          })), i2.push.apply(i2, n2);
        }
        return i2;
      }
      function LU(e2) {
        for (var t2 = 1; t2 < arguments.length; t2++) {
          var i2 = null != arguments[t2] ? arguments[t2] : {};
          t2 % 2 ? PU(Object(i2), true).forEach(function(t3) {
            nh(e2, t3, i2[t3]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(i2)) : PU(Object(i2)).forEach(function(t3) {
            Object.defineProperty(e2, t3, Object.getOwnPropertyDescriptor(i2, t3));
          });
        }
        return e2;
      }
      const kU = window || document;
      function MU(e2) {
        let t2 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        if (!kU)
          return;
        const i2 = xU._cspEventHandlerPointer;
        if (i2 && t2)
          return void console.error(i2, t2);
        const n2 = (e3) => {
          if (!(e3 && e3.blockedURI && (xU.onSecurityPolicyViolation || xU.getListeners(vv.SECURITY_POLICY_VIOLATION).length > 0)))
            return;
          const t3 = e3.blockedURI;
          DC("CSP_DETECTED_HOSTNAME_LIST").some((e4) => bn(t3).call(t3, e4)) && (xU.onSecurityPolicyViolation && "function" == typeof xU.onSecurityPolicyViolation && xU.onSecurityPolicyViolation(e3), xU.getListeners(vv.SECURITY_POLICY_VIOLATION).length > 0 && xU.safeEmit(vv.SECURITY_POLICY_VIOLATION, e3));
        };
        i2 && kU.removeEventListener("securitypolicyviolation", i2), (t2 || e2 && "function" == typeof e2 || xU.getListeners(vv.SECURITY_POLICY_VIOLATION).length > 0) && kU.addEventListener("securitypolicyviolation", n2), xU._cspEventHandlerPointer = n2;
      }
      NC("PROCESS_ID", "process-".concat(xg(8, ""), "-").concat(xg(4, ""), "-").concat(xg(4, ""), "-").concat(xg(4, ""), "-").concat(xg(12, ""))), function() {
        let e2;
        try {
          e2 = window.localStorage.getItem("websdk_ng_global_parameter");
        } catch (e3) {
          return void YC.error("Error loading sdk config", e3.message);
        }
        if (e2)
          try {
            const t2 = JSON.parse(window.atob(e2)), i2 = Date.now();
            YC.debug("Loading global parameters from cache", t2), Object.keys(t2).forEach((e3) => {
              if (Object.prototype.hasOwnProperty.call(OC, e3)) {
                const { value: n2, expires: s2 } = t2[e3];
                if (s2 && s2 <= i2)
                  return;
                PC[e3] = n2, OC[e3] = n2;
              }
            });
          } catch (t2) {
            YC.error("Error loading mutableParamsCache: ".concat(e2), t2.message);
          }
      }(), Array.isArray(PC.AREAS) && PC.AREAS.length > 0 && eA(PC.AREAS, true);
      const UU = (e2, t2, i2) => {
        YC.debug("setParameter key:".concat(e2, ", value:").concat(JSON.stringify(t2))), NC(e2, t2, i2);
      }, xU = function(e2) {
        const t2 = new ig(), i2 = e2, n2 = { getListeners: t2.getListeners.bind(t2), on: (e3, i3) => (function(e4, t3) {
          e4 === vv.SECURITY_POLICY_VIOLATION && MU(t3, true);
        }(e3, i3), t2.on.bind(t2)(e3, i3)), addListener: t2.addListener.bind(t2), once: t2.once.bind(t2), off: t2.off.bind(t2), removeAllListeners: t2.removeAllListeners.bind(t2), emit: t2.emit.bind(t2), safeEmit: t2.safeEmit.bind(t2) };
        return LU(LU({}, i2), n2);
      }({ __TRACK_LIST__: WA, VERSION: yC, BUILD: wC, ESM_BUNDLER: false, ESM: false, UMD: true, DEV: false, setParameter: UU, getParameter: DC, getSupportedCodec: async function() {
        let e2 = { audio: [], video: [] };
        try {
          let t2 = new RTCPeerConnection();
          t2.addTransceiver("video", { direction: "recvonly" }), t2.addTransceiver("audio", { direction: "recvonly" });
          const i2 = (await t2.createOffer()).sdp;
          if (!i2)
            return e2;
          t2.close(), t2 = null, e2 = function(e3) {
            const t3 = { video: [], audio: [] };
            return e3.match(/ VP8/i) && t3.video.push("VP8"), e3.match(/ VP9/i) && t3.video.push("VP9"), e3.match(/ AV1/i) && t3.video.push("AV1"), e3.match(/ H264/i) && t3.video.push("H264"), e3.match(/ H265/i) && t3.video.push("H265"), e3.match(/ opus/i) && t3.audio.push("OPUS"), e3.match(/ PCMU/i) && t3.audio.push("PCMU"), e3.match(/ PCMA/i) && t3.audio.push("PCMA"), e3.match(/ G722/i) && t3.audio.push("G722"), t3;
          }(i2);
        } catch (e3) {
          throw new VI(xT.CREATE_OFFER_FAILED, e3.toString && e3.toString()).print();
        }
        return e2;
      }, checkSystemRequirements: function() {
        const e2 = rI.reportApiInvoke(null, { name: rg.CHECK_SYSTEM_REQUIREMENTS, options: [], tag: og.TRACER });
        let t2 = false;
        try {
          const e3 = window.RTCPeerConnection, i3 = navigator.mediaDevices && navigator.mediaDevices.getUserMedia, n3 = window.WebSocket;
          t2 = !!(e3 && i3 && n3);
        } catch (e3) {
          return YC.error("check system requirement failed: ", e3), false;
        }
        let i2 = false;
        const n2 = pT();
        n2.name === cT.CHROME && Number(n2.version) >= 58 && (!TT() || fT()) && (i2 = true), n2.name === cT.FIREFOX && Number(n2.version) >= 56 && (i2 = true), n2.name === cT.OPERA && Number(n2.version) >= 45 && (i2 = true), n2.name === cT.SAFARI && Number(n2.version) >= 11 && (i2 = true), (PT() || pT().name === cT.QQ) && (i2 = true), YC.debug("checkSystemRequirements, api:", t2, "browser", i2);
        const s2 = t2 && i2;
        return e2.onSuccess(s2), s2;
      }, getDevices: function(e2) {
        return Fb.enumerateDevices(true, true, e2);
      }, getMicrophones: function(e2) {
        return Fb.getRecordingDevices(e2);
      }, getCameras: function(e2) {
        return Fb.getCamerasDevices(e2);
      }, getElectronScreenSources: Nb, getPlaybackDevices: function(e2) {
        return Fb.getSpeakers(e2);
      }, createClient: function() {
        var e2;
        let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : { codec: "vp8", audioCodec: "opus", mode: "rtc" };
        const i2 = rI.reportApiInvoke(null, { name: rg.CREATE_CLIENT, options: [t2], tag: og.TRACER });
        try {
          !function(e3) {
            BT(e3.codec, "config.codec", ["vp8", "vp9", "av1", "h264", "h265"]), BT(e3.mode, "config.mode", ["rtc", "live", "p2p"]), void 0 !== e3.audioCodec && BT(e3.audioCodec, "config.audioCodec", ["opus", "pcmu", "pcma", "g722"]), void 0 !== e3.proxyServer && WT(e3.proxyServer, "config.proxyServer", 1, 1e4), void 0 !== e3.turnServer && Eg(e3.turnServer), void 0 !== e3.httpRetryConfig && pg(e3.httpRetryConfig), void 0 !== e3.websocketRetryConfig && pg(e3.websocketRetryConfig);
          }(t2);
        } catch (e3) {
          throw i2.onError(e3), e3;
        }
        return vU() || ("vp9" === t2.codec && (t2.codec = "vp8", YC.debug("browser not support vp9, force use vp8")), NC("UNSUPPORTED_VIDEO_CODEC", ["vp9"])), void 0 === t2.audioCodec && (t2.audioCodec = "opus"), i2.onSuccess(), new bU(AU(AU({ forceWaitGatewayResponse: true }, t2), {}, { role: bn(e2 = ["rtc", "p2p"]).call(e2, t2.mode) ? "host" : t2.role || "audience" }));
      }, createCameraVideoTrack: async function() {
        let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        const t2 = rI.reportApiInvoke(null, { tag: og.TRACER, name: rg.CREATE_CAM_VIDEO_TRACK, options: [Lw({}, e2)] }), i2 = hw(e2), n2 = xg(8, "track-cam-");
        let s2 = null;
        const r2 = "720p_auto" === e2.encoderConfig;
        YC.info("start create camera video track with config", JSON.stringify(e2), "trackId", n2);
        try {
          s2 = (await Mb({ video: i2 }, n2)).getVideoTracks()[0] || null;
        } catch (e3) {
          throw t2.onError(e3), e3;
        }
        if (!s2) {
          const e3 = new VT(xT.UNEXPECTED_ERROR, "can not find track in media stream");
          return t2.onError(e3), e3.throw(YC);
        }
        e2.optimizationMode && kw(n2, s2, e2, VA(e2.encoderConfig));
        const o2 = new Dw(s2, e2, i2, e2.scalabiltyMode ? BA(e2.scalabiltyMode) : { numSpatialLayers: 1, numTemporalLayers: 1 }, e2.optimizationMode, n2);
        return r2 && o2.startMonitorStats(), t2.onSuccess(o2.getTrackId()), YC.info("create camera video success, trackId:", n2), o2;
      }, createCustomVideoTrack: function(e2) {
        const t2 = rI.reportApiInvoke(null, { tag: og.TRACER, name: rg.CREATE_CUSTOM_VIDEO_TRACK, options: [e2] }), i2 = new Nw(e2.mediaStreamTrack, { width: e2.width, height: e2.height, frameRate: e2.frameRate, bitrateMax: e2.bitrateMax, bitrateMin: e2.bitrateMin }, e2.scalabiltyMode ? BA(e2.scalabiltyMode) : { numSpatialLayers: 1, numTemporalLayers: 1 }, e2.optimizationMode, xg(8, "track-cus-"), [YA.CUSTOM_TRACK]);
        return t2.onSuccess(i2.getTrackId()), YC.info("create custom video track success with config", e2, "trackId", i2.getTrackId()), i2;
      }, createScreenVideoTrack: async function() {
        let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "disable";
        const i2 = rI.reportApiInvoke(null, { tag: og.TRACER, name: rg.CREATE_SCREEN_VIDEO_TRACK, options: [Lw({}, e2), t2] }), n2 = "720p_auto" === e2.encoderConfig;
        e2.encoderConfig ? "string" == typeof e2.encoderConfig || e2.encoderConfig.width && e2.encoderConfig.height || (e2.encoderConfig.width = { max: 1920 }, e2.encoderConfig.height = { max: 1080 }) : e2.encoderConfig = "1080p_2";
        const s2 = function(e3) {
          const t3 = {};
          e3.screenSourceType && (t3.mediaSource = e3.screenSourceType), e3.extensionId && gT() && (t3.extensionId = e3.extensionId);
          const { displaySurface: i3, selfBrowserSurface: n3, surfaceSwitching: s3, systemAudio: r3 } = e3;
          (IT(107) || vT(107) || yT(93)) && (i3 && (BT(i3, "displaySurface", ["browser", "window", "monitor"]), t3.displaySurface = i3), n3 ? (BT(n3, "selfBrowserSurface", ["exclude", "include"]), t3.selfBrowserSurface = n3) : t3.selfBrowserSurface = "include", s3 && (BT(s3, "surfaceSwitching", ["exclude", "include"]), t3.surfaceSwitching = s3)), (IT(105) || vT(105) || yT(91)) && r3 && (BT(r3, "systemAudio", ["exclude", "include"]), t3.systemAudio = r3), e3.electronScreenSourceId && (t3.sourceId = e3.electronScreenSourceId);
          const o3 = e3.encoderConfig ? FA(e3.encoderConfig) : null;
          return t3.mandatory = { chromeMediaSource: "desktop", maxWidth: o3 ? o3.width : void 0, maxHeight: o3 ? o3.height : void 0 }, o3 && (o3.frameRate && ("number" == typeof o3.frameRate ? (t3.mandatory.maxFrameRate = o3.frameRate, t3.mandatory.minFrameRate = o3.frameRate) : (t3.mandatory.maxFrameRate = o3.frameRate.max || o3.frameRate.ideal || o3.frameRate.exact || void 0, t3.mandatory.minFrameRate = o3.frameRate.min || o3.frameRate.ideal || o3.frameRate.exact || void 0), t3.frameRate = o3.frameRate), o3.width && (t3.width = o3.width), o3.height && (t3.height = o3.height)), t3;
        }(e2), r2 = xg(8, "track-scr-v-");
        let o2 = null, a2 = null;
        const c2 = wA();
        if (!c2.supportShareAudio && "enable" === t2) {
          const e3 = new VT(xT.NOT_SUPPORTED, "your browser or platform is not support share-screen with audio");
          return i2.onError(e3), e3.throw(YC);
        }
        YC.info("start create screen video track with config", e2, "withAudio", t2, "trackId", r2);
        try {
          const e3 = await Mb({ screen: s2, screenAudio: "auto" === t2 ? c2.supportShareAudio : "enable" === t2 }, r2);
          o2 = e3.getVideoTracks()[0] || null, a2 = e3.getAudioTracks()[0] || null;
        } catch (e3) {
          throw i2.onError(e3), e3;
        }
        if (!o2) {
          const e3 = new VT(xT.UNEXPECTED_ERROR, "can not find track in media stream");
          return i2.onError(e3), e3.throw(YC);
        }
        if (!a2 && "enable" === t2) {
          o2 && o2.stop();
          const e3 = new VT(xT.SHARE_AUDIO_NOT_ALLOWED);
          return i2.onError(e3), e3.throw(YC);
        }
        if (e2.optimizationMode || (e2.optimizationMode = "detail"), e2.optimizationMode) {
          kw(r2, o2, e2, e2.encoderConfig && FA(e2.encoderConfig) || void 0), e2.encoderConfig && "string" != typeof e2.encoderConfig && (e2.encoderConfig.bitrateMin = e2.encoderConfig.bitrateMax);
        }
        const d2 = new Nw(o2, e2.encoderConfig ? FA(e2.encoderConfig) : {}, e2.scalabiltyMode ? BA(e2.scalabiltyMode) : { numSpatialLayers: 1, numTemporalLayers: 1 }, e2.optimizationMode, r2, [YA.SCREEN_TRACK]);
        if (n2 && d2.startMonitorStats(), !a2)
          return i2.onSuccess(d2.getTrackId()), YC.info("create screen video track success", "video:", d2.getTrackId()), d2;
        const l2 = new cw(a2, void 0, xg(8, "track-scr-a-"), false, true);
        return i2.onSuccess([d2.getTrackId(), l2.getTrackId()]), YC.info("create screen video track success", "video:", d2.getTrackId(), "audio:", l2.getTrackId()), [d2, l2];
      }, createMicrophoneAndCameraTracks: async function() {
        let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        const i2 = rI.reportApiInvoke(null, { tag: og.TRACER, name: rg.CREATE_MIC_AND_CAM_TRACKS, options: [e2, t2] }), n2 = "720p_auto" === t2.encoderConfig, s2 = hw(t2), r2 = pw(e2), o2 = xg(8, "track-mic-"), a2 = xg(8, "track-cam-");
        let c2 = null, d2 = null;
        YC.info("start create camera video track(".concat(a2, ") and microphone audio track(").concat(o2, ") with config, audio: ").concat(JSON.stringify(e2), ", video: ").concat(JSON.stringify(t2)));
        try {
          const e3 = await Mb({ audio: r2, video: s2 }, "".concat(o2, "-").concat(a2));
          c2 = e3.getAudioTracks()[0], d2 = e3.getVideoTracks()[0];
        } catch (e3) {
          throw i2.onError(e3), e3;
        }
        if (!c2 || !d2) {
          const e3 = new VT(xT.UNEXPECTED_ERROR, "can not find tracks in media stream");
          return i2.onError(e3), e3.throw(YC);
        }
        t2.optimizationMode && kw(a2, d2, t2, VA(t2.encoderConfig));
        const l2 = new dw(c2, e2, r2, o2), u2 = new Dw(d2, t2, s2, t2.scalabiltyMode ? BA(t2.scalabiltyMode) : { numSpatialLayers: 1, numTemporalLayers: 1 }, t2.optimizationMode, a2);
        return n2 && u2.startMonitorStats(), i2.onSuccess([l2.getTrackId(), u2.getTrackId()]), YC.info("create camera video track(".concat(a2, ") and microphone audio track(").concat(o2, ") success")), [l2, u2];
      }, createMicrophoneAudioTrack: async function() {
        let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        const t2 = rI.reportApiInvoke(null, { tag: og.TRACER, name: rg.CREATE_MIC_AUDIO_TRACK, options: [e2] }), i2 = pw(e2), n2 = xg(8, "track-mic-");
        let s2 = null;
        YC.info("start create microphone audio track with config", JSON.stringify(e2), "trackId", n2);
        try {
          s2 = (await Mb({ audio: i2 }, n2)).getAudioTracks()[0] || null;
        } catch (e3) {
          throw t2.onError(e3), e3;
        }
        if (!s2) {
          const e3 = new VT(xT.UNEXPECTED_ERROR, "can not find track in media stream");
          return t2.onError(e3), e3.throw(YC);
        }
        const r2 = new dw(s2, e2, i2, n2);
        return t2.onSuccess(r2.getTrackId()), YC.info("create microphone audio track success, trackId:", n2), r2;
      }, createCustomAudioTrack: function(e2) {
        const t2 = rI.reportApiInvoke(null, { tag: og.TRACER, name: rg.CREATE_CUSTOM_AUDIO_TRACK, options: [e2] }), i2 = new cw(e2.mediaStreamTrack, e2.encoderConfig ? GA(e2.encoderConfig) : {}, xg(8, "track-cus-"), false, true);
        return YC.info("create custom audio track success with config", e2, "trackId", i2.getTrackId()), t2.onSuccess(i2.getTrackId()), i2;
      }, createBufferSourceAudioTrack: async function(e2) {
        var t2;
        const { cacheOnlineFile: i2, encoderConfig: n2 } = e2;
        let { source: s2 } = e2;
        const r2 = { source: s2 instanceof AudioBuffer ? "AudioBuffer" : s2 instanceof File ? null !== (t2 = File.name) && void 0 !== t2 ? t2 : "File" : s2, cacheOnlineFile: i2, encoderConfig: n2 }, o2 = rI.reportApiInvoke(null, { tag: og.TRACER, name: rg.CREATE_BUFFER_AUDIO_TRACK, options: [r2] });
        if (DC("DISABLE_WEBAUDIO"))
          throw new VT(xT.NOT_SUPPORTED, "can not create BufferSourceAudioTrack when WebAudio disabled");
        const a2 = xg(8, "track-buf-");
        YC.info("start create buffer source audio track with config", JSON.stringify(r2), "trackId", a2);
        const c2 = s2;
        if (!(s2 instanceof AudioBuffer))
          try {
            s2 = await mw(s2, i2);
          } catch (e3) {
            return o2.onError(e3), e3.throw(YC);
          }
        const d2 = new _w(s2), l2 = new lw(c2, d2, n2 ? GA(n2) : {}, a2);
        return YC.info("create buffer source audio track success, trackId:", a2), o2.onSuccess(l2.getTrackId()), l2;
      }, setAppType: function(e2) {
        if (YC.debug("setAppType: ".concat(e2)), !(Number.isInteger(e2) && e2 >= 0))
          throw YC.debug("Invalid appType"), new VI(xT.INVALID_PARAMS, "invalid app type", e2);
        NC("APP_TYPE", Math.floor(e2));
      }, setLogLevel: function(e2) {
        YC.setLogLevel(e2);
      }, enableLogUpload: function() {
        DC("USE_NEW_LOG") ? NC("UPLOAD_LOG", true) : YC.enableLogUpload();
      }, disableLogUpload: function() {
        DC("USE_NEW_LOG") ? NC("UPLOAD_LOG", false) : YC.disableLogUpload();
      }, createChannelMediaRelayConfiguration: function() {
        return new Tk();
      }, checkAudioTrackIsActive: async function(e2) {
        let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 5e3;
        const i2 = rI.reportApiInvoke(null, { tag: og.TRACER, name: rg.CHECK_AUDIO_TRACK_IS_ACTIVE, options: [t2] });
        if (!(e2 instanceof cw || e2 instanceof Fw)) {
          const e3 = new VI(xT.INVALID_TRACK, "the parameter is not a audio track");
          return i2.onError(e3), e3.throw();
        }
        t2 && t2 < 1e3 && (t2 = 1e3);
        const n2 = e2 instanceof cw ? e2.getTrackLabel() : "remote_track", s2 = e2.getVolumeLevel();
        let r2 = s2, o2 = s2;
        const a2 = Date.now();
        return new tT((s3) => {
          const c2 = setInterval(() => {
            const d2 = e2.getVolumeLevel();
            r2 = d2 > r2 ? d2 : r2, o2 = d2 < o2 ? d2 : o2;
            const l2 = r2 - o2 > 1e-4, u2 = Date.now() - a2;
            if (l2 || u2 > t2) {
              clearInterval(c2);
              const t3 = l2, o3 = { duration: u2, deviceLabel: n2, maxVolumeLevel: r2, result: t3 };
              YC.info("[track-".concat(e2.getTrackId(), "] check audio track active completed. ").concat(JSON.stringify(o3))), i2.onSuccess(o3), s3(t3);
            }
          }, 200);
        });
      }, checkVideoTrackIsActive: async function(e2) {
        let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 5e3;
        const i2 = rI.reportApiInvoke(null, { tag: og.TRACER, name: rg.CHECK_VIDEO_TRACK_IS_ACTIVE, options: [t2] });
        if (!(e2 instanceof Nw || e2 instanceof Vw)) {
          const e3 = new VI(xT.INVALID_TRACK, "the parameter is not a video track");
          return i2.onError(e3), e3.throw();
        }
        t2 && t2 < 1e3 && (t2 = 1e3);
        const n2 = e2 instanceof Nw ? e2.getTrackLabel() : "remote_track", s2 = e2.getMediaStreamTrack(true), r2 = document.createElement("video");
        r2.style.width = "1px", r2.style.height = "1px", r2.setAttribute("muted", ""), r2.muted = true, r2.setAttribute("playsinline", ""), r2.controls = false, (ST() || mT()) && (r2.style.opacity = "0.01", r2.style.position = "fixed", r2.style.left = "0", r2.style.top = "0", document.body.appendChild(r2)), r2.srcObject = new MediaStream([s2]), r2.play();
        const o2 = document.createElement("canvas");
        o2.width = 160, o2.height = 120;
        let a2 = 0, c2 = 0;
        try {
          const e3 = Date.now();
          a2 = await function(e4, t3, i3, n3) {
            let s3, r3 = 0, o3 = null;
            return new tT((a3, c3) => {
              function d3() {
                r3 > n3 && s3 && (s3(), a3(r3));
                const t4 = i3.getContext("2d");
                if (!t4) {
                  const e5 = new VI(xT.UNEXPECTED_ERROR, "can not get canvas 2d context.");
                  return YC.error(e5.toString()), void c3(e5);
                }
                t4.drawImage(e4, 0, 0, 160, 120);
                const d4 = t4.getImageData(0, 0, i3.width, i3.height), l3 = Math.floor(d4.data.length / 3);
                if (o3) {
                  for (let e5 = 0; e5 < l3; e5 += 3)
                    if (d4.data[e5] !== o3[e5])
                      return r3 += 1, void (o3 = d4.data);
                  o3 = d4.data;
                } else
                  o3 = d4.data;
              }
              setTimeout(() => {
                s3 && (s3(), a3(r3));
              }, t3), s3 = vb(() => {
                d3();
              }, 30);
            });
          }(r2, t2, o2, 4), c2 = Date.now() - e3;
        } catch (e3) {
          throw i2.onError(e3), e3;
        }
        IU === cT.SAFARI && (r2.pause(), r2.remove()), r2.srcObject = null;
        const d2 = a2 > 4, l2 = { duration: c2, changedPicNum: a2, deviceLabel: n2, result: d2 };
        return YC.info("[track-".concat(e2.getTrackId(), "] check video track active completed. ").concat(JSON.stringify(l2))), i2.onSuccess(l2), d2;
      }, setArea: eA, audioElementPlayCenter: qb, resumeAudioContext: function() {
        qb.autoResumeAfterInterruption(true);
      }, processExternalMediaAEC: function(e2) {
        DU.processExternalMediaAEC(e2);
      }, registerExtensions: function(e2) {
        const t2 = DC("PLUGIN_INFO") || [];
        e2.forEach((e3) => {
          "name" in e3 && !bn(t2).call(t2, e3.name) && t2.push(e3.name);
          const i2 = e3;
          i2.__registered__ = true, i2.logger.hookLog = YC.extLog, i2.reporter.hookApiInvoke = rI.extApiInvoke, i2.parameters && Object.keys(i2.parameters).forEach((e4) => {
            i2.parameters[e4] = DC(e4);
          });
        }), UU("PLUGIN_INFO", t2);
      }, ChannelMediaRelayError: $I, ChannelMediaRelayEvent: QI, ChannelMediaRelayState: ZI, RemoteStreamFallbackType: zA, RemoteStreamType: JA, ConnectionDisconnectedReason: cg, AudienceLatencyLevelType: ag, AREAS: rv });
      return Object.defineProperties(xU, { onAudioAutoplayFailed: { get: () => jb.onAudioAutoplayFailed, set: (e2) => {
        jb.onAudioAutoplayFailed = e2;
      } }, onAutoplayFailed: { get: () => jb.onAutoplayFailed, set: (e2) => {
        jb.onAutoplayFailed = e2;
      } }, _onSecurityPolicyViolation: { value: void 0, writable: true }, _cspEventHandlerPointer: { value: void 0, writable: true }, onSecurityPolicyViolation: { get: () => xU._onSecurityPolicyViolation, set(e2) {
        xU._onSecurityPolicyViolation = e2, MU(e2);
      } }, __CLIENT_LIST__: { get: () => DC("SHOW_GLOBAL_CLIENT_LIST") ? dI : [] } }), Fb.on(db.CAMERA_DEVICE_CHANGED, (e2) => {
        YC.info("camera device changed", JSON.stringify(e2)), xU.onCameraChanged && xU.onCameraChanged(e2), xU.safeEmit(vv.CAMERA_CHANGED, e2);
      }), Fb.on(db.RECORDING_DEVICE_CHANGED, (e2) => {
        YC.info("microphone device changed", JSON.stringify(e2)), xU.onMicrophoneChanged && xU.onMicrophoneChanged(e2), xU.safeEmit(vv.MICROPHONE_CHANGED, e2);
      }), Fb.on(db.PLAYOUT_DEVICE_CHANGED, (e2) => {
        YC.debug("playout device changed", JSON.stringify(e2)), xU.onPlaybackDeviceChanged && xU.onPlaybackDeviceChanged(e2), xU.safeEmit(vv.PLAYBACK_DEVICE_CHANGED, e2);
      }), qb.onAutoplayFailed = () => {
        YC.info("detect audio element autoplay failed"), jb.onAudioAutoplayFailed && jb.onAudioAutoplayFailed();
      }, Tb.on("autoplay-failed", () => {
        YC.info("detect webaudio autoplay failed"), jb.onAudioAutoplayFailed && jb.onAudioAutoplayFailed(), xU.safeEmit(vv.AUTOPLAY_FAILED);
      }), Tb.on(OA.STATE_CHANGE, (e2, t2) => {
        YC.info("audio context state changed: ".concat(t2, " => ").concat(e2)), xU.onAudioContextStateChanged && xU.onAudioContextStateChanged(e2, t2), xU.safeEmit(vv.AUDIO_CONTEXT_STATE_CHANGED, e2, t2);
      }), Rg.on(hg.NETWORK_STATE_CHANGE, (e2, t2) => {
        YC.info("[network-indicator] network state changed, ".concat(t2, " => ").concat(e2));
      }), window && (window.__ARTC__ = xU), xU;
    });
  }
});

export {
  __commonJS,
  require_AgoraRTC_N_production
};
/*! Bundled license information:

agora-rtc-sdk-ng/AgoraRTC_N-production.js:
  (*! formdata-polyfill. MIT License. Jimmy W?rting <https://jimmy.warting.se/opensource> *)
*/
//# sourceMappingURL=chunk-4KT5IRW6.js.map
